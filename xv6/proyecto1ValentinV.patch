Los archivos binarios xv6-unrc/._asm.h y xv6-mod/._asm.h son distintos
Los archivos binarios xv6-unrc/._bio.c y xv6-mod/._bio.c son distintos
diff -rupN xv6-unrc/bio.d xv6-mod/bio.d
--- xv6-unrc/bio.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/bio.d	2018-04-04 14:53:58.383497751 -0300
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ buf.h
Los archivos binarios xv6-unrc/bio.o y xv6-mod/bio.o son distintos
diff -rupN xv6-unrc/.bochsrc xv6-mod/.bochsrc
--- xv6-unrc/.bochsrc	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/.bochsrc	2018-03-31 16:57:50.964352793 -0300
@@ -0,0 +1,738 @@
+# You may now use double quotes around pathnames, in case
+# your pathname includes spaces.
+
+#=======================================================================
+# CONFIG_INTERFACE
+#
+# The configuration interface is a series of menus or dialog boxes that
+# allows you to change all the settings that control Bochs's behavior.
+# There are two choices of configuration interface: a text mode version
+# called "textconfig" and a graphical version called "wx".  The text
+# mode version uses stdin/stdout and is always compiled in.  The graphical
+# version is only available when you use "--with-wx" on the configure 
+# command.  If you do not write a config_interface line, Bochs will 
+# choose a default for you.
+#
+# NOTE: if you use the "wx" configuration interface, you must also use
+# the "wx" display library.
+#=======================================================================
+#config_interface: textconfig
+#config_interface: wx
+
+#=======================================================================
+# DISPLAY_LIBRARY
+#
+# The display library is the code that displays the Bochs VGA screen.  Bochs 
+# has a selection of about 10 different display library implementations for 
+# different platforms.  If you run configure with multiple --with-* options, 
+# the display_library command lets you choose which one you want to run with.
+# If you do not write a display_library line, Bochs will choose a default for
+# you.
+#
+# The choices are: 
+#   x              use X windows interface, cross platform
+#   win32          use native win32 libraries
+#   carbon         use Carbon library (for MacOS X)
+#   beos           use native BeOS libraries
+#   macintosh      use MacOS pre-10
+#   amigaos        use native AmigaOS libraries
+#   sdl            use SDL library, cross platform
+#   svga           use SVGALIB library for Linux, allows graphics without X11
+#   term           text only, uses curses/ncurses library, cross platform
+#   rfb            provides an interface to AT&T's VNC viewer, cross platform
+#   wx             use wxWidgets library, cross platform
+#   nogui          no display at all
+#
+# NOTE: if you use the "wx" configuration interface, you must also use
+# the "wx" display library.
+#
+# Specific options:
+# Some display libraries now support specific option to control their
+# behaviour. See the examples below for currently supported options.
+#=======================================================================
+#display_library: amigaos
+#display_library: beos
+#display_library: carbon
+#display_library: macintosh
+#display_library: nogui
+#display_library: rfb, options="timeout=60" # time to wait for client
+#display_library: sdl, options="fullscreen" # startup in fullscreen mode
+#display_library: term
+#display_library: win32, options="legacyF12" # use F12 to toggle mouse
+#display_library: wx
+#display_library: x
+
+#=======================================================================
+# ROMIMAGE:
+# The ROM BIOS controls what the PC does when it first powers on.
+# Normally, you can use a precompiled BIOS in the source or binary
+# distribution called BIOS-bochs-latest. The ROM BIOS is usually loaded
+# starting at address 0xf0000, and it is exactly 64k long.
+# You can also use the environment variable $BXSHARE to specify the
+# location of the BIOS.
+# The usage of external large BIOS images (up to 512k) at memory top is
+# now supported, but we still recommend to use the BIOS distributed with
+# Bochs. Now the start address can be calculated from image size.
+#=======================================================================
+romimage: file=$BXSHARE/BIOS-bochs-latest
+#romimage: file=mybios.bin, address=0xfff80000 # 512k at memory top
+#romimage: file=mybios.bin # calculate start address from image size
+
+#=======================================================================
+# CPU:
+# This defines cpu-related parameters inside Bochs:
+#
+#  COUNT:
+#  Set the number of processors when Bochs is compiled for SMP emulation.
+#  Bochs currently supports up to 8 processors. If Bochs is compiled
+#  without SMP support, it won't accept values different from 1.
+#
+#  IPS:
+#  Emulated Instructions Per Second.  This is the number of IPS that bochs
+#  is capable of running on your machine. You can recompile Bochs with
+#  --enable-show-ips option enabled, to find your workstation's capability.
+#  Measured IPS value will then be logged into your log file or status bar
+#  (if supported by the gui).
+#
+#  IPS is used to calibrate many time-dependent events within the bochs 
+#  simulation.  For example, changing IPS affects the frequency of VGA
+#  updates, the duration of time before a key starts to autorepeat, and
+#  the measurement of BogoMips and other benchmarks.
+#
+#  Examples:
+#  Machine                                         Mips
+# ________________________________________________________________
+#  2.1Ghz Athlon XP with Linux 2.6/g++ 3.4         12 to 15 Mips
+#  1.6Ghz Intel P4 with Win2000/g++ 3.3             5 to  7 Mips
+#  650Mhz Athlon K-7 with Linux 2.4.4/egcs-2.91.66  2 to  2.5 Mips
+#  400Mhz Pentium II with Linux 2.0.36/egcs-1.0.3   1 to  1.8 Mips
+#=======================================================================
+cpu: count=2, ips=10000000
+
+#=======================================================================
+# MEGS
+# Set the number of Megabytes of physical memory you want to emulate. 
+# The default is 32MB, most OS's won't need more than that.
+# The maximum amount of memory supported is 2048Mb.
+#=======================================================================
+#megs: 256
+#megs: 128
+#megs: 64
+megs: 32
+#megs: 16
+#megs: 8
+
+#=======================================================================
+# OPTROMIMAGE[1-4]:
+# You may now load up to 4 optional ROM images. Be sure to use a 
+# read-only area, typically between C8000 and EFFFF. These optional
+# ROM images should not overwrite the rombios (located at
+# F0000-FFFFF) and the videobios (located at C0000-C7FFF).
+# Those ROM images will be initialized by the bios if they contain 
+# the right signature (0x55AA) and a valid checksum.
+# It can also be a convenient way to upload some arbitrary code/data
+# in the simulation, that can be retrieved by the boot loader
+#=======================================================================
+#optromimage1: file=optionalrom.bin, address=0xd0000
+#optromimage2: file=optionalrom.bin, address=0xd1000
+#optromimage3: file=optionalrom.bin, address=0xd2000
+#optromimage4: file=optionalrom.bin, address=0xd3000
+
+#optramimage1: file=/path/file1.img, address=0x0010000
+#optramimage2: file=/path/file2.img, address=0x0020000
+#optramimage3: file=/path/file3.img, address=0x0030000
+#optramimage4: file=/path/file4.img, address=0x0040000
+
+#=======================================================================
+# VGAROMIMAGE
+# You now need to load a VGA ROM BIOS into C0000.
+#=======================================================================
+#vgaromimage: file=bios/VGABIOS-elpin-2.40
+vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest
+#vgaromimage: file=bios/VGABIOS-lgpl-latest-cirrus
+
+#=======================================================================
+# VGA:
+# Here you can specify the display extension to be used. With the value
+# 'none' you can use standard VGA with no extension. Other supported
+# values are 'vbe' for Bochs VBE and 'cirrus' for Cirrus SVGA support.
+#=======================================================================
+#vga: extension=cirrus
+#vga: extension=vbe
+vga: extension=none
+
+#=======================================================================
+# FLOPPYA:
+# Point this to pathname of floppy image file or device
+# This should be of a bootable floppy(image/device) if you're
+# booting from 'a' (or 'floppy').
+#
+# You can set the initial status of the media to 'ejected' or 'inserted'.
+#   floppya: 2_88=path, status=ejected             (2.88M 3.5" floppy)
+#   floppya: 1_44=path, status=inserted            (1.44M 3.5" floppy)
+#   floppya: 1_2=path, status=ejected              (1.2M  5.25" floppy)
+#   floppya: 720k=path, status=inserted            (720K  3.5" floppy)
+#   floppya: 360k=path, status=inserted            (360K  5.25" floppy)
+#   floppya: 320k=path, status=inserted            (320K  5.25" floppy)
+#   floppya: 180k=path, status=inserted            (180K  5.25" floppy)
+#   floppya: 160k=path, status=inserted            (160K  5.25" floppy)
+#   floppya: image=path, status=inserted           (guess type from image size)
+#
+# The path should be the name of a disk image file.  On Unix, you can use a raw
+# device name such as /dev/fd0 on Linux.  On win32 platforms, use drive letters
+# such as a: or b: as the path.  The parameter 'image' works with image files
+# only. In that case the size must match one of the supported types.
+#=======================================================================
+floppya: 1_44=/dev/fd0, status=inserted
+#floppya: image=../1.44, status=inserted
+#floppya: 1_44=/dev/fd0H1440, status=inserted
+#floppya: 1_2=../1_2, status=inserted
+#floppya: 1_44=a:, status=inserted
+#floppya: 1_44=a.img, status=inserted
+#floppya: 1_44=/dev/rfd0a, status=inserted
+
+#=======================================================================
+# FLOPPYB:
+# See FLOPPYA above for syntax
+#=======================================================================
+#floppyb: 1_44=b:, status=inserted
+floppyb: 1_44=b.img, status=inserted
+
+#=======================================================================
+# ATA0, ATA1, ATA2, ATA3
+# ATA controller for hard disks and cdroms
+#
+# ata[0-3]: enabled=[0|1], ioaddr1=addr, ioaddr2=addr, irq=number
+# 
+# These options enables up to 4 ata channels. For each channel
+# the two base io addresses and the irq must be specified.
+# 
+# ata0 and ata1 are enabled by default with the values shown below
+#
+# Examples:
+#   ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
+#   ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15
+#   ata2: enabled=1, ioaddr1=0x1e8, ioaddr2=0x3e0, irq=11
+#   ata3: enabled=1, ioaddr1=0x168, ioaddr2=0x360, irq=9
+#=======================================================================
+ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
+ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15
+ata2: enabled=0, ioaddr1=0x1e8, ioaddr2=0x3e0, irq=11
+ata3: enabled=0, ioaddr1=0x168, ioaddr2=0x360, irq=9
+
+#=======================================================================
+# ATA[0-3]-MASTER, ATA[0-3]-SLAVE
+#
+# This defines the type and characteristics of all attached ata devices:
+#   type=       type of attached device [disk|cdrom] 
+#   mode=       only valid for disks [flat|concat|external|dll|sparse|vmware3]
+#   mode=       only valid for disks [undoable|growing|volatile]
+#   path=       path of the image
+#   cylinders=  only valid for disks
+#   heads=      only valid for disks
+#   spt=        only valid for disks
+#   status=     only valid for cdroms [inserted|ejected]
+#   biosdetect= type of biosdetection [none|auto], only for disks on ata0 [cmos]
+#   translation=type of translation of the bios, only for disks [none|lba|large|rechs|auto]
+#   model=      string returned by identify device command
+#   journal=    optional filename of the redolog for undoable and volatile disks
+#   
+# Point this at a hard disk image file, cdrom iso file, or physical cdrom
+# device.  To create a hard disk image, try running bximage.  It will help you
+# choose the size and then suggest a line that works with it.
+#
+# In UNIX it may be possible to use a raw device as a Bochs hard disk, 
+# but WE DON'T RECOMMEND IT.  In Windows there is no easy way.
+#
+# In windows, the drive letter + colon notation should be used for cdroms.
+# Depending on versions of windows and drivers, you may only be able to 
+# access the "first" cdrom in the system.  On MacOSX, use path="drive"
+# to access the physical drive.
+#
+# The path is always mandatory. For flat hard disk images created with
+# bximage geometry autodetection can be used (cylinders=0 -> cylinders are
+# calculated using heads=16 and spt=63). For other hard disk images and modes
+# the cylinders, heads, and spt are mandatory.
+#
+# Default values are:
+#   mode=flat, biosdetect=auto, translation=auto, model="Generic 1234"
+#
+# The biosdetect option has currently no effect on the bios
+#
+# Examples:
+#   ata0-master: type=disk, mode=flat, path=10M.sample, cylinders=306, heads=4, spt=17
+#   ata0-slave:  type=disk, mode=flat, path=20M.sample, cylinders=615, heads=4, spt=17
+#   ata1-master: type=disk, mode=flat, path=30M.sample, cylinders=615, heads=6, spt=17
+#   ata1-slave:  type=disk, mode=flat, path=46M.sample, cylinders=940, heads=6, spt=17
+#   ata2-master: type=disk, mode=flat, path=62M.sample, cylinders=940, heads=8, spt=17
+#   ata2-slave:  type=disk, mode=flat, path=112M.sample, cylinders=900, heads=15, spt=17
+#   ata3-master: type=disk, mode=flat, path=483M.sample, cylinders=1024, heads=15, spt=63
+#   ata3-slave:  type=cdrom, path=iso.sample, status=inserted
+#=======================================================================
+ata0-master: type=disk, mode=flat, path="xv6.img", cylinders=100, heads=10, spt=10
+ata0-slave: type=disk, mode=flat, path="fs.img", cylinders=1024, heads=1, spt=1
+#ata0-slave: type=cdrom, path=D:, status=inserted
+#ata0-slave: type=cdrom, path=/dev/cdrom, status=inserted
+#ata0-slave: type=cdrom, path="drive", status=inserted
+#ata0-slave: type=cdrom, path=/dev/rcd0d, status=inserted 
+
+#=======================================================================
+# BOOT:
+# This defines the boot sequence. Now you can specify up to 3 boot drives.
+# You can either boot from 'floppy', 'disk' or 'cdrom'
+# legacy 'a' and 'c' are also supported
+# Examples:
+#   boot: floppy
+#   boot: disk
+#   boot: cdrom
+#   boot: c
+#   boot: a
+#   boot: cdrom, floppy, disk
+#=======================================================================
+#boot: floppy
+boot: disk
+
+#=======================================================================
+# CLOCK:
+# This defines the parameters of the clock inside Bochs:
+#
+#  SYNC:
+#  TO BE COMPLETED (see Greg explanation in feature request #536329)
+#
+#  TIME0:
+#  Specifies the start (boot) time of the virtual machine. Use a time 
+#  value as returned by the time(2) system call. If no time0 value is 
+#  set or if time0 equal to 1 (special case) or if time0 equal 'local', 
+#  the simulation will be started at the current local host time.
+#  If time0 equal to 2 (special case) or if time0 equal 'utc',
+#  the simulation will be started at the current utc time.
+#
+# Syntax:
+#  clock: sync=[none|slowdown|realtime|both], time0=[timeValue|local|utc]
+#
+# Example:
+#   clock: sync=none,     time0=local       # Now (localtime)
+#   clock: sync=slowdown, time0=315529200   # Tue Jan  1 00:00:00 1980
+#   clock: sync=none,     time0=631148400   # Mon Jan  1 00:00:00 1990
+#   clock: sync=realtime, time0=938581955   # Wed Sep 29 07:12:35 1999
+#   clock: sync=realtime, time0=946681200   # Sat Jan  1 00:00:00 2000
+#   clock: sync=none,     time0=1           # Now (localtime)
+#   clock: sync=none,     time0=utc         # Now (utc/gmt)
+# 
+# Default value are sync=none, time0=local
+#=======================================================================
+#clock: sync=none, time0=local
+
+
+#=======================================================================
+# FLOPPY_BOOTSIG_CHECK: disabled=[0|1]
+# Enables or disables the 0xaa55 signature check on boot floppies
+# Defaults to disabled=0
+# Examples:
+#   floppy_bootsig_check: disabled=0
+#   floppy_bootsig_check: disabled=1
+#=======================================================================
+#floppy_bootsig_check: disabled=1
+floppy_bootsig_check: disabled=0
+
+#=======================================================================
+# LOG:
+# Give the path of the log file you'd like Bochs debug and misc. verbiage
+# to be written to. If you don't use this option or set the filename to
+# '-' the output is written to the console. If you really don't want it,
+# make it "/dev/null" (Unix) or "nul" (win32). :^(
+#
+# Examples:
+#   log: ./bochs.out
+#   log: /dev/tty
+#=======================================================================
+#log: /dev/null
+log: bochsout.txt
+
+#=======================================================================
+# LOGPREFIX:
+# This handles the format of the string prepended to each log line.
+# You may use those special tokens :
+#   %t : 11 decimal digits timer tick
+#   %i : 8 hexadecimal digits of cpu current eip (ignored in SMP configuration)
+#   %e : 1 character event type ('i'nfo, 'd'ebug, 'p'anic, 'e'rror)
+#   %d : 5 characters string of the device, between brackets
+# 
+# Default : %t%e%d
+# Examples:
+#   logprefix: %t-%e-@%i-%d
+#   logprefix: %i%e%d
+#=======================================================================
+#logprefix: %t%e%d
+
+#=======================================================================
+# LOG CONTROLS
+#
+# Bochs now has four severity levels for event logging.
+#   panic: cannot proceed.  If you choose to continue after a panic, 
+#          don't be surprised if you get strange behavior or crashes.
+#   error: something went wrong, but it is probably safe to continue the
+#          simulation.
+#   info: interesting or useful messages.
+#   debug: messages useful only when debugging the code.  This may
+#          spit out thousands per second.
+#
+# For events of each level, you can choose to crash, report, or ignore.
+# TODO: allow choice based on the facility: e.g. crash on panics from
+#       everything except the cdrom, and only report those.
+#
+# If you are experiencing many panics, it can be helpful to change
+# the panic action to report instead of fatal.  However, be aware
+# that anything executed after a panic is uncharted territory and can 
+# cause bochs to become unstable.  The panic is a "graceful exit," so
+# if you disable it you may get a spectacular disaster instead.
+#=======================================================================
+panic: action=ask
+error: action=report
+info: action=report
+debug: action=ignore
+#pass: action=fatal
+
+#=======================================================================
+# DEBUGGER_LOG:
+# Give the path of the log file you'd like Bochs to log debugger output.
+# If you really don't want it, make it /dev/null or '-'. :^(
+#
+# Examples:
+#   debugger_log: ./debugger.out
+#=======================================================================
+#debugger_log: /dev/null
+#debugger_log: debugger.out
+debugger_log: -
+
+#=======================================================================
+# COM1, COM2, COM3, COM4:
+# This defines a serial port (UART type 16550A). In the 'term' you can specify
+# a device to use as com1. This can be a real serial line, or a pty.  To use
+# a pty (under X/Unix), create two windows (xterms, usually).  One of them will
+# run bochs, and the other will act as com1. Find out the tty the com1
+# window using the `tty' command, and use that as the `dev' parameter.
+# Then do `sleep 1000000' in the com1 window to keep the shell from
+# messing with things, and run bochs in the other window.  Serial I/O to
+# com1 (port 0x3f8) will all go to the other window.
+# Other serial modes are 'null' (no input/output), 'file' (output to a file
+# specified as the 'dev' parameter), 'raw' (use the real serial port - under
+# construction for win32), 'mouse' (standard serial mouse - requires
+# mouse option setting 'type=serial' or 'type=serial_wheel') and 'socket'
+# (connect a networking socket).
+#
+# Examples:
+#   com1: enabled=1, mode=null
+#   com1: enabled=1, mode=mouse
+#   com2: enabled=1, mode=file, dev=serial.out
+#   com3: enabled=1, mode=raw, dev=com1
+#   com3: enabled=1, mode=socket, dev=localhost:8888
+#=======================================================================
+#com1: enabled=1, mode=term, dev=/dev/ttyp9
+
+
+#=======================================================================
+# PARPORT1, PARPORT2:
+# This defines a parallel (printer) port. When turned on and an output file is
+# defined the emulated printer port sends characters printed by the guest OS
+# into the output file. On some platforms a device filename can be used to
+# send the data to the real parallel port (e.g. "/dev/lp0" on Linux, "lpt1" on
+# win32 platforms).
+#
+# Examples:
+#   parport1: enabled=1, file="parport.out"
+#   parport2: enabled=1, file="/dev/lp0"
+#   parport1: enabled=0
+#=======================================================================
+parport1: enabled=1, file="/dev/stdout"
+
+#=======================================================================
+# SB16:
+# This defines the SB16 sound emulation. It can have several of the
+# following properties.
+# All properties are in the format sb16: property=value
+# midi: The filename is where the midi data is sent. This can be a
+#       device or just a file if you want to record the midi data.
+# midimode:
+#      0=no data
+#      1=output to device (system dependent. midi denotes the device driver)
+#      2=SMF file output, including headers
+#      3=output the midi data stream to the file (no midi headers and no
+#        delta times, just command and data bytes)
+# wave: This is the device/file where wave output is stored
+# wavemode:
+#      0=no data
+#      1=output to device (system dependent. wave denotes the device driver)
+#      2=VOC file output, incl. headers
+#      3=output the raw wave stream to the file
+# log:  The file to write the sb16 emulator messages to.
+# loglevel:
+#      0=no log
+#      1=resource changes, midi program and bank changes
+#      2=severe errors
+#      3=all errors
+#      4=all errors plus all port accesses
+#      5=all errors and port accesses plus a lot of extra info
+# dmatimer:
+#      microseconds per second for a DMA cycle.  Make it smaller to fix
+#      non-continuous sound.  750000 is usually a good value.  This needs a
+#      reasonably correct setting for the IPS parameter of the CPU option.
+#
+# For an example look at the next line:
+#=======================================================================
+
+#sb16: midimode=1, midi=/dev/midi00, wavemode=1, wave=/dev/dsp, loglevel=2, log=sb16.log, dmatimer=600000
+
+#=======================================================================
+# VGA_UPDATE_INTERVAL:
+# Video memory is scanned for updates and screen updated every so many
+# virtual seconds.  The default is 40000, about 25Hz. Keep in mind that
+# you must tweak the 'cpu: ips=N' directive to be as close to the number
+# of emulated instructions-per-second your workstation can do, for this
+# to be accurate.
+#
+# Examples:
+#   vga_update_interval: 250000
+#=======================================================================
+vga_update_interval: 300000
+
+# using for Winstone '98 tests
+#vga_update_interval:  100000
+
+#=======================================================================
+# KEYBOARD_SERIAL_DELAY:
+# Approximate time in microseconds that it takes one character to
+# be transfered from the keyboard to controller over the serial path.
+# Examples:
+#   keyboard_serial_delay: 200
+#=======================================================================
+keyboard_serial_delay: 250
+
+#=======================================================================
+# KEYBOARD_PASTE_DELAY:
+# Approximate time in microseconds between attempts to paste
+# characters to the keyboard controller. This leaves time for the
+# guest os to deal with the flow of characters.  The ideal setting
+# depends on how your operating system processes characters.  The
+# default of 100000 usec (.1 seconds) was chosen because it works 
+# consistently in Windows.
+#
+# If your OS is losing characters during a paste, increase the paste
+# delay until it stops losing characters.
+#
+# Examples:
+#   keyboard_paste_delay: 100000
+#=======================================================================
+keyboard_paste_delay: 100000
+
+#=======================================================================
+# MOUSE: 
+# This option prevents Bochs from creating mouse "events" unless a mouse
+# is  enabled. The hardware emulation itself is not disabled by this.
+# You can turn the mouse on by setting enabled to 1, or turn it off by
+# setting enabled to 0. Unless you have a particular reason for enabling
+# the mouse by default, it is recommended that you leave it off.
+# You can also toggle the mouse usage at runtime (control key + middle
+# mouse button on X11, SDL, wxWidgets and Win32).
+# With the mouse type option you can select the type of mouse to emulate.
+# The default value is 'ps2'. The other choices are 'imps2' (wheel mouse
+# on PS/2), 'serial', 'serial_wheel' (one com port requires setting
+# 'mode=mouse') and 'usb' (3-button mouse - one of the USB ports must be
+# connected with the 'mouse' device - requires PCI and USB support).
+#
+# Examples:
+#   mouse: enabled=1
+#   mouse: enabled=1, type=imps2
+#   mouse: enabled=1, type=serial
+#   mouse: enabled=0
+#=======================================================================
+mouse: enabled=0
+
+#=======================================================================
+# private_colormap: Request that the GUI create and use it's own
+#                   non-shared colormap.  This colormap will be used
+#                   when in the bochs window.  If not enabled, a
+#                   shared colormap scheme may be used.  Not implemented
+#                   on all GUI's.
+#
+# Examples:
+#   private_colormap: enabled=1
+#   private_colormap: enabled=0
+#=======================================================================
+private_colormap: enabled=0
+
+#=======================================================================
+# fullscreen: ONLY IMPLEMENTED ON AMIGA
+#             Request that Bochs occupy the entire screen instead of a 
+#             window.
+#
+# Examples:
+#   fullscreen: enabled=0
+#   fullscreen: enabled=1
+#=======================================================================
+#fullscreen: enabled=0
+#screenmode: name="sample"
+
+#=======================================================================
+# ne2k: NE2000 compatible ethernet adapter
+#
+# Examples:
+# ne2k: ioaddr=IOADDR, irq=IRQ, mac=MACADDR, ethmod=MODULE, ethdev=DEVICE, script=SCRIPT
+#
+# ioaddr, irq: You probably won't need to change ioaddr and irq, unless there
+# are IRQ conflicts.
+#
+# mac: The MAC address MUST NOT match the address of any machine on the net.
+# Also, the first byte must be an even number (bit 0 set means a multicast
+# address), and you cannot use ff:ff:ff:ff:ff:ff because that's the broadcast
+# address.  For the ethertap module, you must use fe:fd:00:00:00:01.  There may
+# be other restrictions too.  To be safe, just use the b0:c4... address.
+#
+# ethdev: The ethdev value is the name of the network interface on your host
+# platform.  On UNIX machines, you can get the name by running ifconfig.  On
+# Windows machines, you must run niclist to get the name of the ethdev.
+# Niclist source code is in misc/niclist.c and it is included in Windows 
+# binary releases.
+#
+# script: The script value is optional, and is the name of a script that 
+# is executed after bochs initialize the network interface. You can use 
+# this script to configure this network interface, or enable masquerading.
+# This is mainly useful for the tun/tap devices that only exist during
+# Bochs execution. The network interface name is supplied to the script
+# as first parameter
+#
+# If you don't want to make connections to any physical networks,
+# you can use the following 'ethmod's to simulate a virtual network.
+#   null: All packets are discarded, but logged to a few files.
+#   arpback: ARP is simulated. Disabled by default.
+#   vde:  Virtual Distributed Ethernet
+#   vnet: ARP, ICMP-echo(ping), DHCP and read/write TFTP are simulated.
+#         The virtual host uses 192.168.10.1.
+#         DHCP assigns 192.168.10.2 to the guest.
+#         TFTP uses the ethdev value for the root directory and doesn't
+#         overwrite files.
+#
+#=======================================================================
+# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=fbsd, ethdev=en0 #macosx
+# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:00, ethmod=fbsd, ethdev=xl0
+# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:00, ethmod=linux, ethdev=eth0
+# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=win32, ethdev=MYCARD
+# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=tap, ethdev=tap0
+# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=tuntap, ethdev=/dev/net/tun0, script=./tunconfig
+# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=null, ethdev=eth0
+# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=vde, ethdev="/tmp/vde.ctl"
+# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=vnet, ethdev="c:/temp"
+
+#=======================================================================
+# KEYBOARD_MAPPING:
+# This enables a remap of a physical localized keyboard to a 
+# virtualized us keyboard, as the PC architecture expects.
+# If enabled, the keymap file must be specified.
+# 
+# Examples:
+#   keyboard_mapping: enabled=1, map=gui/keymaps/x11-pc-de.map
+#=======================================================================
+keyboard_mapping: enabled=0, map=
+
+#=======================================================================
+# KEYBOARD_TYPE:
+# Type of keyboard return by a "identify keyboard" command to the
+# keyboard controler. It must be one of "xt", "at" or "mf".
+# Defaults to "mf". It should be ok for almost everybody. A known
+# exception is french macs, that do have a "at"-like keyboard.
+#
+# Examples:
+#   keyboard_type: mf
+#=======================================================================
+#keyboard_type: mf
+
+#=======================================================================
+# USER_SHORTCUT:
+# This defines the keyboard shortcut to be sent when you press the "user"
+# button in the headerbar. The shortcut string is a combination of maximum
+# 3 key names (listed below) separated with a '-' character. The old-style
+# syntax (without the '-') still works for the key combinations supported
+# in Bochs 2.2.1.
+# Valid key names:
+# "alt", "bksl", "bksp", "ctrl", "del", "down", "end", "enter", "esc",
+# "f1", ... "f12", "home", "ins", "left", "menu", "minus", "pgdwn", "pgup",
+# "plus", "right", "shift", "space", "tab", "up", and "win".
+#
+# Example:
+#   user_shortcut: keys=ctrl-alt-del
+#=======================================================================
+#user_shortcut: keys=ctrl-alt-del
+
+#=======================================================================
+# I440FXSUPPORT:
+# This option controls the presence of the i440FX PCI chipset. You can
+# also specify the devices connected to PCI slots. Up to 5 slots are
+# available now. These devices are currently supported: ne2k, pcivga,
+# pcidev and pcipnic. If Bochs is compiled with Cirrus SVGA support
+# you'll have the additional choice 'cirrus'.
+#
+# Example:
+#   i440fxsupport: enabled=1, slot1=pcivga, slot2=ne2k
+#=======================================================================
+#i440fxsupport: enabled=1
+
+#=======================================================================
+# USB1:
+# This option controls the presence of the USB root hub which is a part
+# of the i440FX PCI chipset. With the portX option you can connect devices
+# to the hub (currently supported: 'mouse' and 'keypad'). If you connect
+# the mouse to one of the ports and use the mouse option 'type=usb' you'll
+# have a 3-button USB mouse.
+#
+# Example:
+#   usb1: enabled=1, port1=mouse, port2=keypad
+#=======================================================================
+#usb1: enabled=1
+
+#=======================================================================
+# CMOSIMAGE:
+# This defines image file that can be loaded into the CMOS RAM at startup.
+# The rtc_init parameter controls whether initialize the RTC with values stored
+# in the image. By default the time0 argument given to the clock option is used.
+# With 'rtc_init=image' the image is the source for the initial time.
+#
+# Example:
+#   cmosimage: file=cmos.img, rtc_init=image
+#=======================================================================
+#cmosimage: file=cmos.img, rtc_init=time0
+
+#=======================================================================
+# other stuff
+#=======================================================================
+#magic_break: enabled=1
+#load32bitOSImage: os=nullkernel, path=../kernel.img, iolog=../vga_io.log
+#load32bitOSImage: os=linux, path=../linux.img, iolog=../vga_io.log, initrd=../initrd.img
+#text_snapshot_check: enable
+
+#-------------------------
+# PCI host device mapping
+#-------------------------
+#pcidev: vendor=0x1234, device=0x5678
+
+#=======================================================================
+# GDBSTUB:
+# Enable GDB stub. See user documentation for details.
+# Default value is enabled=0.
+#=======================================================================
+#gdbstub: enabled=0, port=1234, text_base=0, data_base=0, bss_base=0
+
+#=======================================================================
+# IPS:
+# The IPS directive is DEPRECATED. Use the parameter IPS of the CPU
+# directive instead.
+#=======================================================================
+#ips: 10000000
+
+#=======================================================================
+# for Macintosh, use the style of pathnames in the following
+# examples.
+#
+# vgaromimage: :bios:VGABIOS-elpin-2.40
+# romimage: file=:bios:BIOS-bochs-latest, address=0xf0000
+# floppya: 1_44=[fd:], status=inserted
+#=======================================================================
diff -rupN xv6-unrc/bootasm.d xv6-mod/bootasm.d
--- xv6-unrc/bootasm.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/bootasm.d	2018-04-04 14:53:58.003493940 -0300
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Los archivos binarios xv6-unrc/bootasm.o y xv6-mod/bootasm.o son distintos
Los archivos binarios xv6-unrc/._bootasm.S y xv6-mod/._bootasm.S son distintos
Los archivos binarios xv6-unrc/bootblock y xv6-mod/bootblock son distintos
diff -rupN xv6-unrc/bootblock.asm xv6-mod/bootblock.asm
--- xv6-unrc/bootblock.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/bootblock.asm	2018-04-04 14:53:58.075494662 -0300
@@ -0,0 +1,384 @@
+
+bootblock.o:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0xe>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete transition to 32-bit protected mode by using long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 ee 00 00 00       	call   7d3b <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+  entry();
+}
+
+void
+waitdisk(void)
+{
+    7c7e:	55                   	push   %ebp
+    7c7f:	89 e5                	mov    %esp,%ebp
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c81:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c86:	ec                   	in     (%dx),%al
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c87:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c8a:	3c 40                	cmp    $0x40,%al
+    7c8c:	75 f8                	jne    7c86 <waitdisk+0x8>
+    ;
+}
+    7c8e:	5d                   	pop    %ebp
+    7c8f:	c3                   	ret    
+
+00007c90 <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c90:	55                   	push   %ebp
+    7c91:	89 e5                	mov    %esp,%ebp
+    7c93:	57                   	push   %edi
+    7c94:	53                   	push   %ebx
+    7c95:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c98:	e8 e1 ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7c9d:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca2:	b8 01 00 00 00       	mov    $0x1,%eax
+    7ca7:	ee                   	out    %al,(%dx)
+    7ca8:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cad:	89 d8                	mov    %ebx,%eax
+    7caf:	ee                   	out    %al,(%dx)
+    7cb0:	89 d8                	mov    %ebx,%eax
+    7cb2:	c1 e8 08             	shr    $0x8,%eax
+    7cb5:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cba:	ee                   	out    %al,(%dx)
+    7cbb:	89 d8                	mov    %ebx,%eax
+    7cbd:	c1 e8 10             	shr    $0x10,%eax
+    7cc0:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc5:	ee                   	out    %al,(%dx)
+    7cc6:	89 d8                	mov    %ebx,%eax
+    7cc8:	c1 e8 18             	shr    $0x18,%eax
+    7ccb:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cce:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cd3:	ee                   	out    %al,(%dx)
+    7cd4:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cd9:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cde:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+  outb(0x1F6, (offset >> 24) | 0xE0);
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7cdf:	e8 9a ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+insl(int port, void *addr, int cnt)
+{
+  asm volatile("cld; rep insl" :
+    7ce4:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ce7:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7cec:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7cf1:	fc                   	cld    
+    7cf2:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf4:	5b                   	pop    %ebx
+    7cf5:	5f                   	pop    %edi
+    7cf6:	5d                   	pop    %ebp
+    7cf7:	c3                   	ret    
+
+00007cf8 <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cf8:	55                   	push   %ebp
+    7cf9:	89 e5                	mov    %esp,%ebp
+    7cfb:	57                   	push   %edi
+    7cfc:	56                   	push   %esi
+    7cfd:	53                   	push   %ebx
+    7cfe:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d01:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d04:	89 df                	mov    %ebx,%edi
+    7d06:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d09:	89 f0                	mov    %esi,%eax
+    7d0b:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d10:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d12:	c1 ee 09             	shr    $0x9,%esi
+    7d15:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d18:	39 df                	cmp    %ebx,%edi
+    7d1a:	76 17                	jbe    7d33 <readseg+0x3b>
+    readsect(pa, offset);
+    7d1c:	56                   	push   %esi
+    7d1d:	53                   	push   %ebx
+    7d1e:	e8 6d ff ff ff       	call   7c90 <readsect>
+  offset = (offset / SECTSIZE) + 1;
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d23:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d29:	83 c6 01             	add    $0x1,%esi
+    7d2c:	83 c4 08             	add    $0x8,%esp
+    7d2f:	39 df                	cmp    %ebx,%edi
+    7d31:	77 e9                	ja     7d1c <readseg+0x24>
+    readsect(pa, offset);
+}
+    7d33:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d36:	5b                   	pop    %ebx
+    7d37:	5e                   	pop    %esi
+    7d38:	5f                   	pop    %edi
+    7d39:	5d                   	pop    %ebp
+    7d3a:	c3                   	ret    
+
+00007d3b <bootmain>:
+
+void readseg(uchar*, uint, uint);
+
+void
+bootmain(void)
+{
+    7d3b:	55                   	push   %ebp
+    7d3c:	89 e5                	mov    %esp,%ebp
+    7d3e:	57                   	push   %edi
+    7d3f:	56                   	push   %esi
+    7d40:	53                   	push   %ebx
+    7d41:	83 ec 0c             	sub    $0xc,%esp
+  uchar* pa;
+
+  elf = (struct elfhdr*)0x10000;  // scratch space
+
+  // Read 1st page off disk
+  readseg((uchar*)elf, 4096, 0);
+    7d44:	6a 00                	push   $0x0
+    7d46:	68 00 10 00 00       	push   $0x1000
+    7d4b:	68 00 00 01 00       	push   $0x10000
+    7d50:	e8 a3 ff ff ff       	call   7cf8 <readseg>
+
+  // Is this an ELF executable?
+  if(elf->magic != ELF_MAGIC)
+    7d55:	83 c4 0c             	add    $0xc,%esp
+    7d58:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d5f:	45 4c 46 
+    7d62:	75 50                	jne    7db4 <bootmain+0x79>
+    return;  // let bootasm.S handle error
+
+  // Load each program segment (ignores ph flags).
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d64:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d69:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d6f:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d76:	c1 e6 05             	shl    $0x5,%esi
+    7d79:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d7b:	39 f3                	cmp    %esi,%ebx
+    7d7d:	73 2f                	jae    7dae <bootmain+0x73>
+    pa = (uchar*)ph->paddr;
+    7d7f:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7d82:	ff 73 04             	pushl  0x4(%ebx)
+    7d85:	ff 73 10             	pushl  0x10(%ebx)
+    7d88:	57                   	push   %edi
+    7d89:	e8 6a ff ff ff       	call   7cf8 <readseg>
+    if(ph->memsz > ph->filesz)
+    7d8e:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7d91:	8b 43 10             	mov    0x10(%ebx),%eax
+    7d94:	83 c4 0c             	add    $0xc,%esp
+    7d97:	39 c1                	cmp    %eax,%ecx
+    7d99:	76 0c                	jbe    7da7 <bootmain+0x6c>
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7d9b:	01 c7                	add    %eax,%edi
+    7d9d:	29 c1                	sub    %eax,%ecx
+    7d9f:	b8 00 00 00 00       	mov    $0x0,%eax
+    7da4:	fc                   	cld    
+    7da5:	f3 aa                	rep stos %al,%es:(%edi)
+    return;  // let bootasm.S handle error
+
+  // Load each program segment (ignores ph flags).
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+  eph = ph + elf->phnum;
+  for(; ph < eph; ph++){
+    7da7:	83 c3 20             	add    $0x20,%ebx
+    7daa:	39 de                	cmp    %ebx,%esi
+    7dac:	77 d1                	ja     7d7f <bootmain+0x44>
+  }
+
+  // Call the entry point from the ELF header.
+  // Does not return!
+  entry = (void(*)(void))(elf->entry);
+  entry();
+    7dae:	ff 15 18 00 01 00    	call   *0x10018
+}
+    7db4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7db7:	5b                   	pop    %ebx
+    7db8:	5e                   	pop    %esi
+    7db9:	5f                   	pop    %edi
+    7dba:	5d                   	pop    %ebp
+    7dbb:	c3                   	ret    
Los archivos binarios xv6-unrc/bootblock.o y xv6-mod/bootblock.o son distintos
Los archivos binarios xv6-unrc/bootblockother.o y xv6-mod/bootblockother.o son distintos
Los archivos binarios xv6-unrc/._bootmain.c y xv6-mod/._bootmain.c son distintos
diff -rupN xv6-unrc/bootmain.d xv6-mod/bootmain.d
--- xv6-unrc/bootmain.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/bootmain.d	2018-04-04 14:53:57.935493257 -0300
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Los archivos binarios xv6-unrc/bootmain.o y xv6-mod/bootmain.o son distintos
Los archivos binarios xv6-unrc/._buf.h y xv6-mod/._buf.h son distintos
Los archivos binarios xv6-unrc/._BUGS y xv6-mod/._BUGS son distintos
Los archivos binarios xv6-unrc/_cat y xv6-mod/_cat son distintos
diff -rupN xv6-unrc/cat.asm xv6-mod/cat.asm
--- xv6-unrc/cat.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/cat.asm	2018-04-04 14:53:51.847432196 -0300
@@ -0,0 +1,1287 @@
+
+_cat:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <cat>:
+
+char buf[512];
+
+void
+cat(int fd)
+{
+   0:	55                   	push   %ebp
+   1:	89 e5                	mov    %esp,%ebp
+   3:	83 ec 18             	sub    $0x18,%esp
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0)
+   6:	eb 15                	jmp    1d <cat+0x1d>
+    write(1, buf, n);
+   8:	83 ec 04             	sub    $0x4,%esp
+   b:	ff 75 f4             	pushl  -0xc(%ebp)
+   e:	68 80 0b 00 00       	push   $0xb80
+  13:	6a 01                	push   $0x1
+  15:	e8 6c 03 00 00       	call   386 <write>
+  1a:	83 c4 10             	add    $0x10,%esp
+void
+cat(int fd)
+{
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0)
+  1d:	83 ec 04             	sub    $0x4,%esp
+  20:	68 00 02 00 00       	push   $0x200
+  25:	68 80 0b 00 00       	push   $0xb80
+  2a:	ff 75 08             	pushl  0x8(%ebp)
+  2d:	e8 4c 03 00 00       	call   37e <read>
+  32:	83 c4 10             	add    $0x10,%esp
+  35:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  3c:	7f ca                	jg     8 <cat+0x8>
+    write(1, buf, n);
+  if(n < 0){
+  3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  42:	79 17                	jns    5b <cat+0x5b>
+    printf(1, "cat: read error\n");
+  44:	83 ec 08             	sub    $0x8,%esp
+  47:	68 9b 08 00 00       	push   $0x89b
+  4c:	6a 01                	push   $0x1
+  4e:	e8 92 04 00 00       	call   4e5 <printf>
+  53:	83 c4 10             	add    $0x10,%esp
+    exit();
+  56:	e8 0b 03 00 00       	call   366 <exit>
+  }
+}
+  5b:	90                   	nop
+  5c:	c9                   	leave  
+  5d:	c3                   	ret    
+
+0000005e <main>:
+
+int
+main(int argc, char *argv[])
+{
+  5e:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  62:	83 e4 f0             	and    $0xfffffff0,%esp
+  65:	ff 71 fc             	pushl  -0x4(%ecx)
+  68:	55                   	push   %ebp
+  69:	89 e5                	mov    %esp,%ebp
+  6b:	53                   	push   %ebx
+  6c:	51                   	push   %ecx
+  6d:	83 ec 10             	sub    $0x10,%esp
+  70:	89 cb                	mov    %ecx,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  72:	83 3b 01             	cmpl   $0x1,(%ebx)
+  75:	7f 12                	jg     89 <main+0x2b>
+    cat(0);
+  77:	83 ec 0c             	sub    $0xc,%esp
+  7a:	6a 00                	push   $0x0
+  7c:	e8 7f ff ff ff       	call   0 <cat>
+  81:	83 c4 10             	add    $0x10,%esp
+    exit();
+  84:	e8 dd 02 00 00       	call   366 <exit>
+  }
+
+  for(i = 1; i < argc; i++){
+  89:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+  90:	eb 71                	jmp    103 <main+0xa5>
+    if((fd = open(argv[i], 0)) < 0){
+  92:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  95:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  9c:	8b 43 04             	mov    0x4(%ebx),%eax
+  9f:	01 d0                	add    %edx,%eax
+  a1:	8b 00                	mov    (%eax),%eax
+  a3:	83 ec 08             	sub    $0x8,%esp
+  a6:	6a 00                	push   $0x0
+  a8:	50                   	push   %eax
+  a9:	e8 f8 02 00 00       	call   3a6 <open>
+  ae:	83 c4 10             	add    $0x10,%esp
+  b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  b8:	79 29                	jns    e3 <main+0x85>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  c4:	8b 43 04             	mov    0x4(%ebx),%eax
+  c7:	01 d0                	add    %edx,%eax
+  c9:	8b 00                	mov    (%eax),%eax
+  cb:	83 ec 04             	sub    $0x4,%esp
+  ce:	50                   	push   %eax
+  cf:	68 ac 08 00 00       	push   $0x8ac
+  d4:	6a 01                	push   $0x1
+  d6:	e8 0a 04 00 00       	call   4e5 <printf>
+  db:	83 c4 10             	add    $0x10,%esp
+      exit();
+  de:	e8 83 02 00 00       	call   366 <exit>
+    }
+    cat(fd);
+  e3:	83 ec 0c             	sub    $0xc,%esp
+  e6:	ff 75 f0             	pushl  -0x10(%ebp)
+  e9:	e8 12 ff ff ff       	call   0 <cat>
+  ee:	83 c4 10             	add    $0x10,%esp
+    close(fd);
+  f1:	83 ec 0c             	sub    $0xc,%esp
+  f4:	ff 75 f0             	pushl  -0x10(%ebp)
+  f7:	e8 92 02 00 00       	call   38e <close>
+  fc:	83 c4 10             	add    $0x10,%esp
+  if(argc <= 1){
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+ 103:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 106:	3b 03                	cmp    (%ebx),%eax
+ 108:	7c 88                	jl     92 <main+0x34>
+      exit();
+    }
+    cat(fd);
+    close(fd);
+  }
+  exit();
+ 10a:	e8 57 02 00 00       	call   366 <exit>
+
+0000010f <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+ 10f:	55                   	push   %ebp
+ 110:	89 e5                	mov    %esp,%ebp
+ 112:	57                   	push   %edi
+ 113:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+ 114:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 117:	8b 55 10             	mov    0x10(%ebp),%edx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 cb                	mov    %ecx,%ebx
+ 11f:	89 df                	mov    %ebx,%edi
+ 121:	89 d1                	mov    %edx,%ecx
+ 123:	fc                   	cld    
+ 124:	f3 aa                	rep stos %al,%es:(%edi)
+ 126:	89 ca                	mov    %ecx,%edx
+ 128:	89 fb                	mov    %edi,%ebx
+ 12a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+ 12d:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+ 130:	90                   	nop
+ 131:	5b                   	pop    %ebx
+ 132:	5f                   	pop    %edi
+ 133:	5d                   	pop    %ebp
+ 134:	c3                   	ret    
+
+00000135 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+ 135:	55                   	push   %ebp
+ 136:	89 e5                	mov    %esp,%ebp
+ 138:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+ 13b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 13e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+ 141:	90                   	nop
+ 142:	8b 45 08             	mov    0x8(%ebp),%eax
+ 145:	8d 50 01             	lea    0x1(%eax),%edx
+ 148:	89 55 08             	mov    %edx,0x8(%ebp)
+ 14b:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 14e:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 151:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+ 154:	0f b6 12             	movzbl (%edx),%edx
+ 157:	88 10                	mov    %dl,(%eax)
+ 159:	0f b6 00             	movzbl (%eax),%eax
+ 15c:	84 c0                	test   %al,%al
+ 15e:	75 e2                	jne    142 <strcpy+0xd>
+    ;
+  return os;
+ 160:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 163:	c9                   	leave  
+ 164:	c3                   	ret    
+
+00000165 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 165:	55                   	push   %ebp
+ 166:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+ 168:	eb 08                	jmp    172 <strcmp+0xd>
+    p++, q++;
+ 16a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 16e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 172:	8b 45 08             	mov    0x8(%ebp),%eax
+ 175:	0f b6 00             	movzbl (%eax),%eax
+ 178:	84 c0                	test   %al,%al
+ 17a:	74 10                	je     18c <strcmp+0x27>
+ 17c:	8b 45 08             	mov    0x8(%ebp),%eax
+ 17f:	0f b6 10             	movzbl (%eax),%edx
+ 182:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 185:	0f b6 00             	movzbl (%eax),%eax
+ 188:	38 c2                	cmp    %al,%dl
+ 18a:	74 de                	je     16a <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 18c:	8b 45 08             	mov    0x8(%ebp),%eax
+ 18f:	0f b6 00             	movzbl (%eax),%eax
+ 192:	0f b6 d0             	movzbl %al,%edx
+ 195:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 198:	0f b6 00             	movzbl (%eax),%eax
+ 19b:	0f b6 c0             	movzbl %al,%eax
+ 19e:	29 c2                	sub    %eax,%edx
+ 1a0:	89 d0                	mov    %edx,%eax
+}
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	c3                   	ret    
+
+000001a4 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1aa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 1b1:	eb 04                	jmp    1b7 <strlen+0x13>
+ 1b3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 1b7:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 1ba:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1bd:	01 d0                	add    %edx,%eax
+ 1bf:	0f b6 00             	movzbl (%eax),%eax
+ 1c2:	84 c0                	test   %al,%al
+ 1c4:	75 ed                	jne    1b3 <strlen+0xf>
+    ;
+  return n;
+ 1c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 1c9:	c9                   	leave  
+ 1ca:	c3                   	ret    
+
+000001cb <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1cb:	55                   	push   %ebp
+ 1cc:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 1ce:	8b 45 10             	mov    0x10(%ebp),%eax
+ 1d1:	50                   	push   %eax
+ 1d2:	ff 75 0c             	pushl  0xc(%ebp)
+ 1d5:	ff 75 08             	pushl  0x8(%ebp)
+ 1d8:	e8 32 ff ff ff       	call   10f <stosb>
+ 1dd:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 1e0:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 1e3:	c9                   	leave  
+ 1e4:	c3                   	ret    
+
+000001e5 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1e5:	55                   	push   %ebp
+ 1e6:	89 e5                	mov    %esp,%ebp
+ 1e8:	83 ec 04             	sub    $0x4,%esp
+ 1eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1ee:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 1f1:	eb 14                	jmp    207 <strchr+0x22>
+    if(*s == c)
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	0f b6 00             	movzbl (%eax),%eax
+ 1f9:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 1fc:	75 05                	jne    203 <strchr+0x1e>
+      return (char*)s;
+ 1fe:	8b 45 08             	mov    0x8(%ebp),%eax
+ 201:	eb 13                	jmp    216 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 203:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 207:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20a:	0f b6 00             	movzbl (%eax),%eax
+ 20d:	84 c0                	test   %al,%al
+ 20f:	75 e2                	jne    1f3 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 211:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 216:	c9                   	leave  
+ 217:	c3                   	ret    
+
+00000218 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 218:	55                   	push   %ebp
+ 219:	89 e5                	mov    %esp,%ebp
+ 21b:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 21e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 225:	eb 42                	jmp    269 <gets+0x51>
+    cc = read(0, &c, 1);
+ 227:	83 ec 04             	sub    $0x4,%esp
+ 22a:	6a 01                	push   $0x1
+ 22c:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 22f:	50                   	push   %eax
+ 230:	6a 00                	push   $0x0
+ 232:	e8 47 01 00 00       	call   37e <read>
+ 237:	83 c4 10             	add    $0x10,%esp
+ 23a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 23d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 241:	7e 33                	jle    276 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 243:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 246:	8d 50 01             	lea    0x1(%eax),%edx
+ 249:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 24c:	89 c2                	mov    %eax,%edx
+ 24e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 251:	01 c2                	add    %eax,%edx
+ 253:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 257:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 259:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 25d:	3c 0a                	cmp    $0xa,%al
+ 25f:	74 16                	je     277 <gets+0x5f>
+ 261:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 265:	3c 0d                	cmp    $0xd,%al
+ 267:	74 0e                	je     277 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 269:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 26c:	83 c0 01             	add    $0x1,%eax
+ 26f:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 272:	7c b3                	jl     227 <gets+0xf>
+ 274:	eb 01                	jmp    277 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 276:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 277:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 27a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27d:	01 d0                	add    %edx,%eax
+ 27f:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 282:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 285:	c9                   	leave  
+ 286:	c3                   	ret    
+
+00000287 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 287:	55                   	push   %ebp
+ 288:	89 e5                	mov    %esp,%ebp
+ 28a:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 28d:	83 ec 08             	sub    $0x8,%esp
+ 290:	6a 00                	push   $0x0
+ 292:	ff 75 08             	pushl  0x8(%ebp)
+ 295:	e8 0c 01 00 00       	call   3a6 <open>
+ 29a:	83 c4 10             	add    $0x10,%esp
+ 29d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 2a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 2a4:	79 07                	jns    2ad <stat+0x26>
+    return -1;
+ 2a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 2ab:	eb 25                	jmp    2d2 <stat+0x4b>
+  r = fstat(fd, st);
+ 2ad:	83 ec 08             	sub    $0x8,%esp
+ 2b0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2b3:	ff 75 f4             	pushl  -0xc(%ebp)
+ 2b6:	e8 03 01 00 00       	call   3be <fstat>
+ 2bb:	83 c4 10             	add    $0x10,%esp
+ 2be:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 2c1:	83 ec 0c             	sub    $0xc,%esp
+ 2c4:	ff 75 f4             	pushl  -0xc(%ebp)
+ 2c7:	e8 c2 00 00 00       	call   38e <close>
+ 2cc:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 2cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 2d2:	c9                   	leave  
+ 2d3:	c3                   	ret    
+
+000002d4 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d4:	55                   	push   %ebp
+ 2d5:	89 e5                	mov    %esp,%ebp
+ 2d7:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 2da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 2e1:	eb 25                	jmp    308 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 2e3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 2e6:	89 d0                	mov    %edx,%eax
+ 2e8:	c1 e0 02             	shl    $0x2,%eax
+ 2eb:	01 d0                	add    %edx,%eax
+ 2ed:	01 c0                	add    %eax,%eax
+ 2ef:	89 c1                	mov    %eax,%ecx
+ 2f1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2f4:	8d 50 01             	lea    0x1(%eax),%edx
+ 2f7:	89 55 08             	mov    %edx,0x8(%ebp)
+ 2fa:	0f b6 00             	movzbl (%eax),%eax
+ 2fd:	0f be c0             	movsbl %al,%eax
+ 300:	01 c8                	add    %ecx,%eax
+ 302:	83 e8 30             	sub    $0x30,%eax
+ 305:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 308:	8b 45 08             	mov    0x8(%ebp),%eax
+ 30b:	0f b6 00             	movzbl (%eax),%eax
+ 30e:	3c 2f                	cmp    $0x2f,%al
+ 310:	7e 0a                	jle    31c <atoi+0x48>
+ 312:	8b 45 08             	mov    0x8(%ebp),%eax
+ 315:	0f b6 00             	movzbl (%eax),%eax
+ 318:	3c 39                	cmp    $0x39,%al
+ 31a:	7e c7                	jle    2e3 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 31c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 31f:	c9                   	leave  
+ 320:	c3                   	ret    
+
+00000321 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 321:	55                   	push   %ebp
+ 322:	89 e5                	mov    %esp,%ebp
+ 324:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 327:	8b 45 08             	mov    0x8(%ebp),%eax
+ 32a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 32d:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 330:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 333:	eb 17                	jmp    34c <memmove+0x2b>
+    *dst++ = *src++;
+ 335:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 338:	8d 50 01             	lea    0x1(%eax),%edx
+ 33b:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 33e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 341:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 344:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 347:	0f b6 12             	movzbl (%edx),%edx
+ 34a:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 34c:	8b 45 10             	mov    0x10(%ebp),%eax
+ 34f:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 352:	89 55 10             	mov    %edx,0x10(%ebp)
+ 355:	85 c0                	test   %eax,%eax
+ 357:	7f dc                	jg     335 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 359:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 35c:	c9                   	leave  
+ 35d:	c3                   	ret    
+
+0000035e <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 35e:	b8 01 00 00 00       	mov    $0x1,%eax
+ 363:	cd 40                	int    $0x40
+ 365:	c3                   	ret    
+
+00000366 <exit>:
+SYSCALL(exit)
+ 366:	b8 02 00 00 00       	mov    $0x2,%eax
+ 36b:	cd 40                	int    $0x40
+ 36d:	c3                   	ret    
+
+0000036e <wait>:
+SYSCALL(wait)
+ 36e:	b8 03 00 00 00       	mov    $0x3,%eax
+ 373:	cd 40                	int    $0x40
+ 375:	c3                   	ret    
+
+00000376 <pipe>:
+SYSCALL(pipe)
+ 376:	b8 04 00 00 00       	mov    $0x4,%eax
+ 37b:	cd 40                	int    $0x40
+ 37d:	c3                   	ret    
+
+0000037e <read>:
+SYSCALL(read)
+ 37e:	b8 05 00 00 00       	mov    $0x5,%eax
+ 383:	cd 40                	int    $0x40
+ 385:	c3                   	ret    
+
+00000386 <write>:
+SYSCALL(write)
+ 386:	b8 10 00 00 00       	mov    $0x10,%eax
+ 38b:	cd 40                	int    $0x40
+ 38d:	c3                   	ret    
+
+0000038e <close>:
+SYSCALL(close)
+ 38e:	b8 15 00 00 00       	mov    $0x15,%eax
+ 393:	cd 40                	int    $0x40
+ 395:	c3                   	ret    
+
+00000396 <kill>:
+SYSCALL(kill)
+ 396:	b8 06 00 00 00       	mov    $0x6,%eax
+ 39b:	cd 40                	int    $0x40
+ 39d:	c3                   	ret    
+
+0000039e <exec>:
+SYSCALL(exec)
+ 39e:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3a3:	cd 40                	int    $0x40
+ 3a5:	c3                   	ret    
+
+000003a6 <open>:
+SYSCALL(open)
+ 3a6:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3ab:	cd 40                	int    $0x40
+ 3ad:	c3                   	ret    
+
+000003ae <mknod>:
+SYSCALL(mknod)
+ 3ae:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3b3:	cd 40                	int    $0x40
+ 3b5:	c3                   	ret    
+
+000003b6 <unlink>:
+SYSCALL(unlink)
+ 3b6:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3bb:	cd 40                	int    $0x40
+ 3bd:	c3                   	ret    
+
+000003be <fstat>:
+SYSCALL(fstat)
+ 3be:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3c3:	cd 40                	int    $0x40
+ 3c5:	c3                   	ret    
+
+000003c6 <link>:
+SYSCALL(link)
+ 3c6:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3cb:	cd 40                	int    $0x40
+ 3cd:	c3                   	ret    
+
+000003ce <mkdir>:
+SYSCALL(mkdir)
+ 3ce:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3d3:	cd 40                	int    $0x40
+ 3d5:	c3                   	ret    
+
+000003d6 <chdir>:
+SYSCALL(chdir)
+ 3d6:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3db:	cd 40                	int    $0x40
+ 3dd:	c3                   	ret    
+
+000003de <dup>:
+SYSCALL(dup)
+ 3de:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3e3:	cd 40                	int    $0x40
+ 3e5:	c3                   	ret    
+
+000003e6 <getpid>:
+SYSCALL(getpid)
+ 3e6:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3eb:	cd 40                	int    $0x40
+ 3ed:	c3                   	ret    
+
+000003ee <sbrk>:
+SYSCALL(sbrk)
+ 3ee:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3f3:	cd 40                	int    $0x40
+ 3f5:	c3                   	ret    
+
+000003f6 <sleep>:
+SYSCALL(sleep)
+ 3f6:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3fb:	cd 40                	int    $0x40
+ 3fd:	c3                   	ret    
+
+000003fe <uptime>:
+SYSCALL(uptime)
+ 3fe:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 403:	cd 40                	int    $0x40
+ 405:	c3                   	ret    
+
+00000406 <procstat>:
+SYSCALL(procstat) 
+ 406:	b8 16 00 00 00       	mov    $0x16,%eax
+ 40b:	cd 40                	int    $0x40
+ 40d:	c3                   	ret    
+
+0000040e <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 40e:	55                   	push   %ebp
+ 40f:	89 e5                	mov    %esp,%ebp
+ 411:	83 ec 18             	sub    $0x18,%esp
+ 414:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 417:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 41a:	83 ec 04             	sub    $0x4,%esp
+ 41d:	6a 01                	push   $0x1
+ 41f:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 422:	50                   	push   %eax
+ 423:	ff 75 08             	pushl  0x8(%ebp)
+ 426:	e8 5b ff ff ff       	call   386 <write>
+ 42b:	83 c4 10             	add    $0x10,%esp
+}
+ 42e:	90                   	nop
+ 42f:	c9                   	leave  
+ 430:	c3                   	ret    
+
+00000431 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 431:	55                   	push   %ebp
+ 432:	89 e5                	mov    %esp,%ebp
+ 434:	53                   	push   %ebx
+ 435:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 438:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 43f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 443:	74 17                	je     45c <printint+0x2b>
+ 445:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 449:	79 11                	jns    45c <printint+0x2b>
+    neg = 1;
+ 44b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 452:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 455:	f7 d8                	neg    %eax
+ 457:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 45a:	eb 06                	jmp    462 <printint+0x31>
+  } else {
+    x = xx;
+ 45c:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 45f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 462:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 469:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 46c:	8d 41 01             	lea    0x1(%ecx),%eax
+ 46f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 472:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 475:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 478:	ba 00 00 00 00       	mov    $0x0,%edx
+ 47d:	f7 f3                	div    %ebx
+ 47f:	89 d0                	mov    %edx,%eax
+ 481:	0f b6 80 34 0b 00 00 	movzbl 0xb34(%eax),%eax
+ 488:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 48c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 48f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 492:	ba 00 00 00 00       	mov    $0x0,%edx
+ 497:	f7 f3                	div    %ebx
+ 499:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 49c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 4a0:	75 c7                	jne    469 <printint+0x38>
+  if(neg)
+ 4a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 4a6:	74 2d                	je     4d5 <printint+0xa4>
+    buf[i++] = '-';
+ 4a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 4ab:	8d 50 01             	lea    0x1(%eax),%edx
+ 4ae:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 4b1:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 4b6:	eb 1d                	jmp    4d5 <printint+0xa4>
+    putc(fd, buf[i]);
+ 4b8:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 4bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 4be:	01 d0                	add    %edx,%eax
+ 4c0:	0f b6 00             	movzbl (%eax),%eax
+ 4c3:	0f be c0             	movsbl %al,%eax
+ 4c6:	83 ec 08             	sub    $0x8,%esp
+ 4c9:	50                   	push   %eax
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 3c ff ff ff       	call   40e <putc>
+ 4d2:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 4d5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 4d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 4dd:	79 d9                	jns    4b8 <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 4df:	90                   	nop
+ 4e0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 4e3:	c9                   	leave  
+ 4e4:	c3                   	ret    
+
+000004e5 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 4e5:	55                   	push   %ebp
+ 4e6:	89 e5                	mov    %esp,%ebp
+ 4e8:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 4eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 4f2:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 4f5:	83 c0 04             	add    $0x4,%eax
+ 4f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 4fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 502:	e9 59 01 00 00       	jmp    660 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 507:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 50a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 50d:	01 d0                	add    %edx,%eax
+ 50f:	0f b6 00             	movzbl (%eax),%eax
+ 512:	0f be c0             	movsbl %al,%eax
+ 515:	25 ff 00 00 00       	and    $0xff,%eax
+ 51a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 51d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 521:	75 2c                	jne    54f <printf+0x6a>
+      if(c == '%'){
+ 523:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 527:	75 0c                	jne    535 <printf+0x50>
+        state = '%';
+ 529:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 530:	e9 27 01 00 00       	jmp    65c <printf+0x177>
+      } else {
+        putc(fd, c);
+ 535:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 538:	0f be c0             	movsbl %al,%eax
+ 53b:	83 ec 08             	sub    $0x8,%esp
+ 53e:	50                   	push   %eax
+ 53f:	ff 75 08             	pushl  0x8(%ebp)
+ 542:	e8 c7 fe ff ff       	call   40e <putc>
+ 547:	83 c4 10             	add    $0x10,%esp
+ 54a:	e9 0d 01 00 00       	jmp    65c <printf+0x177>
+      }
+    } else if(state == '%'){
+ 54f:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 553:	0f 85 03 01 00 00    	jne    65c <printf+0x177>
+      if(c == 'd'){
+ 559:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 55d:	75 1e                	jne    57d <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 55f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 562:	8b 00                	mov    (%eax),%eax
+ 564:	6a 01                	push   $0x1
+ 566:	6a 0a                	push   $0xa
+ 568:	50                   	push   %eax
+ 569:	ff 75 08             	pushl  0x8(%ebp)
+ 56c:	e8 c0 fe ff ff       	call   431 <printint>
+ 571:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 574:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 578:	e9 d8 00 00 00       	jmp    655 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 57d:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 581:	74 06                	je     589 <printf+0xa4>
+ 583:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 587:	75 1e                	jne    5a7 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 589:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 58c:	8b 00                	mov    (%eax),%eax
+ 58e:	6a 00                	push   $0x0
+ 590:	6a 10                	push   $0x10
+ 592:	50                   	push   %eax
+ 593:	ff 75 08             	pushl  0x8(%ebp)
+ 596:	e8 96 fe ff ff       	call   431 <printint>
+ 59b:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 59e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 5a2:	e9 ae 00 00 00       	jmp    655 <printf+0x170>
+      } else if(c == 's'){
+ 5a7:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 5ab:	75 43                	jne    5f0 <printf+0x10b>
+        s = (char*)*ap;
+ 5ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 5b0:	8b 00                	mov    (%eax),%eax
+ 5b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 5b5:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 5b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 5bd:	75 25                	jne    5e4 <printf+0xff>
+          s = "(null)";
+ 5bf:	c7 45 f4 c1 08 00 00 	movl   $0x8c1,-0xc(%ebp)
+        while(*s != 0){
+ 5c6:	eb 1c                	jmp    5e4 <printf+0xff>
+          putc(fd, *s);
+ 5c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 5cb:	0f b6 00             	movzbl (%eax),%eax
+ 5ce:	0f be c0             	movsbl %al,%eax
+ 5d1:	83 ec 08             	sub    $0x8,%esp
+ 5d4:	50                   	push   %eax
+ 5d5:	ff 75 08             	pushl  0x8(%ebp)
+ 5d8:	e8 31 fe ff ff       	call   40e <putc>
+ 5dd:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 5e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 5e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 5e7:	0f b6 00             	movzbl (%eax),%eax
+ 5ea:	84 c0                	test   %al,%al
+ 5ec:	75 da                	jne    5c8 <printf+0xe3>
+ 5ee:	eb 65                	jmp    655 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5f0:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 5f4:	75 1d                	jne    613 <printf+0x12e>
+        putc(fd, *ap);
+ 5f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 5f9:	8b 00                	mov    (%eax),%eax
+ 5fb:	0f be c0             	movsbl %al,%eax
+ 5fe:	83 ec 08             	sub    $0x8,%esp
+ 601:	50                   	push   %eax
+ 602:	ff 75 08             	pushl  0x8(%ebp)
+ 605:	e8 04 fe ff ff       	call   40e <putc>
+ 60a:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 60d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 611:	eb 42                	jmp    655 <printf+0x170>
+      } else if(c == '%'){
+ 613:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 617:	75 17                	jne    630 <printf+0x14b>
+        putc(fd, c);
+ 619:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 61c:	0f be c0             	movsbl %al,%eax
+ 61f:	83 ec 08             	sub    $0x8,%esp
+ 622:	50                   	push   %eax
+ 623:	ff 75 08             	pushl  0x8(%ebp)
+ 626:	e8 e3 fd ff ff       	call   40e <putc>
+ 62b:	83 c4 10             	add    $0x10,%esp
+ 62e:	eb 25                	jmp    655 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 630:	83 ec 08             	sub    $0x8,%esp
+ 633:	6a 25                	push   $0x25
+ 635:	ff 75 08             	pushl  0x8(%ebp)
+ 638:	e8 d1 fd ff ff       	call   40e <putc>
+ 63d:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 640:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 643:	0f be c0             	movsbl %al,%eax
+ 646:	83 ec 08             	sub    $0x8,%esp
+ 649:	50                   	push   %eax
+ 64a:	ff 75 08             	pushl  0x8(%ebp)
+ 64d:	e8 bc fd ff ff       	call   40e <putc>
+ 652:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 655:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 65c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 660:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 663:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 666:	01 d0                	add    %edx,%eax
+ 668:	0f b6 00             	movzbl (%eax),%eax
+ 66b:	84 c0                	test   %al,%al
+ 66d:	0f 85 94 fe ff ff    	jne    507 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 673:	90                   	nop
+ 674:	c9                   	leave  
+ 675:	c3                   	ret    
+
+00000676 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 676:	55                   	push   %ebp
+ 677:	89 e5                	mov    %esp,%ebp
+ 679:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 67c:	8b 45 08             	mov    0x8(%ebp),%eax
+ 67f:	83 e8 08             	sub    $0x8,%eax
+ 682:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 685:	a1 68 0b 00 00       	mov    0xb68,%eax
+ 68a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 68d:	eb 24                	jmp    6b3 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 68f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 692:	8b 00                	mov    (%eax),%eax
+ 694:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 697:	77 12                	ja     6ab <free+0x35>
+ 699:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 69c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 69f:	77 24                	ja     6c5 <free+0x4f>
+ 6a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6a4:	8b 00                	mov    (%eax),%eax
+ 6a6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 6a9:	77 1a                	ja     6c5 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6ae:	8b 00                	mov    (%eax),%eax
+ 6b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 6b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6b6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 6b9:	76 d4                	jbe    68f <free+0x19>
+ 6bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6be:	8b 00                	mov    (%eax),%eax
+ 6c0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 6c3:	76 ca                	jbe    68f <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6c8:	8b 40 04             	mov    0x4(%eax),%eax
+ 6cb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 6d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6d5:	01 c2                	add    %eax,%edx
+ 6d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6da:	8b 00                	mov    (%eax),%eax
+ 6dc:	39 c2                	cmp    %eax,%edx
+ 6de:	75 24                	jne    704 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 6e0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6e3:	8b 50 04             	mov    0x4(%eax),%edx
+ 6e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6e9:	8b 00                	mov    (%eax),%eax
+ 6eb:	8b 40 04             	mov    0x4(%eax),%eax
+ 6ee:	01 c2                	add    %eax,%edx
+ 6f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6f3:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6f9:	8b 00                	mov    (%eax),%eax
+ 6fb:	8b 10                	mov    (%eax),%edx
+ 6fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 700:	89 10                	mov    %edx,(%eax)
+ 702:	eb 0a                	jmp    70e <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 704:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 707:	8b 10                	mov    (%eax),%edx
+ 709:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 70c:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 70e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 711:	8b 40 04             	mov    0x4(%eax),%eax
+ 714:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 71b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 71e:	01 d0                	add    %edx,%eax
+ 720:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 723:	75 20                	jne    745 <free+0xcf>
+    p->s.size += bp->s.size;
+ 725:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 728:	8b 50 04             	mov    0x4(%eax),%edx
+ 72b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 72e:	8b 40 04             	mov    0x4(%eax),%eax
+ 731:	01 c2                	add    %eax,%edx
+ 733:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 736:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 739:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 73c:	8b 10                	mov    (%eax),%edx
+ 73e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 741:	89 10                	mov    %edx,(%eax)
+ 743:	eb 08                	jmp    74d <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 745:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 748:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 74b:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 74d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 750:	a3 68 0b 00 00       	mov    %eax,0xb68
+}
+ 755:	90                   	nop
+ 756:	c9                   	leave  
+ 757:	c3                   	ret    
+
+00000758 <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 758:	55                   	push   %ebp
+ 759:	89 e5                	mov    %esp,%ebp
+ 75b:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 75e:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 765:	77 07                	ja     76e <morecore+0x16>
+    nu = 4096;
+ 767:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 76e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 771:	c1 e0 03             	shl    $0x3,%eax
+ 774:	83 ec 0c             	sub    $0xc,%esp
+ 777:	50                   	push   %eax
+ 778:	e8 71 fc ff ff       	call   3ee <sbrk>
+ 77d:	83 c4 10             	add    $0x10,%esp
+ 780:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 783:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 787:	75 07                	jne    790 <morecore+0x38>
+    return 0;
+ 789:	b8 00 00 00 00       	mov    $0x0,%eax
+ 78e:	eb 26                	jmp    7b6 <morecore+0x5e>
+  hp = (Header*)p;
+ 790:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 793:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 796:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 799:	8b 55 08             	mov    0x8(%ebp),%edx
+ 79c:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 79f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7a2:	83 c0 08             	add    $0x8,%eax
+ 7a5:	83 ec 0c             	sub    $0xc,%esp
+ 7a8:	50                   	push   %eax
+ 7a9:	e8 c8 fe ff ff       	call   676 <free>
+ 7ae:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 7b1:	a1 68 0b 00 00       	mov    0xb68,%eax
+}
+ 7b6:	c9                   	leave  
+ 7b7:	c3                   	ret    
+
+000007b8 <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 7b8:	55                   	push   %ebp
+ 7b9:	89 e5                	mov    %esp,%ebp
+ 7bb:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7be:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7c1:	83 c0 07             	add    $0x7,%eax
+ 7c4:	c1 e8 03             	shr    $0x3,%eax
+ 7c7:	83 c0 01             	add    $0x1,%eax
+ 7ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 7cd:	a1 68 0b 00 00       	mov    0xb68,%eax
+ 7d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 7d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 7d9:	75 23                	jne    7fe <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 7db:	c7 45 f0 60 0b 00 00 	movl   $0xb60,-0x10(%ebp)
+ 7e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7e5:	a3 68 0b 00 00       	mov    %eax,0xb68
+ 7ea:	a1 68 0b 00 00       	mov    0xb68,%eax
+ 7ef:	a3 60 0b 00 00       	mov    %eax,0xb60
+    base.s.size = 0;
+ 7f4:	c7 05 64 0b 00 00 00 	movl   $0x0,0xb64
+ 7fb:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 801:	8b 00                	mov    (%eax),%eax
+ 803:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 806:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 809:	8b 40 04             	mov    0x4(%eax),%eax
+ 80c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 80f:	72 4d                	jb     85e <malloc+0xa6>
+      if(p->s.size == nunits)
+ 811:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 814:	8b 40 04             	mov    0x4(%eax),%eax
+ 817:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 81a:	75 0c                	jne    828 <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 81c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 81f:	8b 10                	mov    (%eax),%edx
+ 821:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 824:	89 10                	mov    %edx,(%eax)
+ 826:	eb 26                	jmp    84e <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 828:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 82b:	8b 40 04             	mov    0x4(%eax),%eax
+ 82e:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 831:	89 c2                	mov    %eax,%edx
+ 833:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 836:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 839:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 83c:	8b 40 04             	mov    0x4(%eax),%eax
+ 83f:	c1 e0 03             	shl    $0x3,%eax
+ 842:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 845:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 848:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 84b:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 84e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 851:	a3 68 0b 00 00       	mov    %eax,0xb68
+      return (void*)(p + 1);
+ 856:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 859:	83 c0 08             	add    $0x8,%eax
+ 85c:	eb 3b                	jmp    899 <malloc+0xe1>
+    }
+    if(p == freep)
+ 85e:	a1 68 0b 00 00       	mov    0xb68,%eax
+ 863:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 866:	75 1e                	jne    886 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 868:	83 ec 0c             	sub    $0xc,%esp
+ 86b:	ff 75 ec             	pushl  -0x14(%ebp)
+ 86e:	e8 e5 fe ff ff       	call   758 <morecore>
+ 873:	83 c4 10             	add    $0x10,%esp
+ 876:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 879:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 87d:	75 07                	jne    886 <malloc+0xce>
+        return 0;
+ 87f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 884:	eb 13                	jmp    899 <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 886:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 889:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 88c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 88f:	8b 00                	mov    (%eax),%eax
+ 891:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 894:	e9 6d ff ff ff       	jmp    806 <malloc+0x4e>
+}
+ 899:	c9                   	leave  
+ 89a:	c3                   	ret    
diff -rupN xv6-unrc/cat.sym xv6-mod/cat.sym
--- xv6-unrc/cat.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/cat.sym	2018-04-04 14:53:51.875432477 -0300
@@ -0,0 +1,63 @@
+00000000 .text
+0000089b .rodata
+000008c8 .eh_frame
+00000b34 .data
+00000b60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 cat.c
+00000000 ulib.c
+0000010f stosb
+00000000 printf.c
+0000040e putc
+00000431 printint
+00000b34 digits.1109
+00000000 umalloc.c
+00000b60 base
+00000b68 freep
+00000758 morecore
+00000135 strcpy
+000004e5 printf
+00000321 memmove
+000003ae mknod
+00000218 gets
+000003e6 getpid
+00000000 cat
+000007b8 malloc
+00000406 procstat
+000003f6 sleep
+00000376 pipe
+00000386 write
+000003be fstat
+00000396 kill
+000003d6 chdir
+0000039e exec
+0000036e wait
+0000037e read
+000003b6 unlink
+0000035e fork
+000003ee sbrk
+000003fe uptime
+00000b45 __bss_start
+000001cb memset
+0000005e main
+00000165 strcmp
+000003de dup
+00000b80 buf
+00000287 stat
+00000b45 _edata
+00000d80 _end
+000003c6 link
+00000366 exit
+000002d4 atoi
+000001a4 strlen
+000003a6 open
+000001e5 strchr
+000003ce mkdir
+0000038e close
+00000676 free
Los archivos binarios xv6-unrc/._console.c y xv6-mod/._console.c son distintos
diff -rupN xv6-unrc/console.d xv6-mod/console.d
--- xv6-unrc/console.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/console.d	2018-04-04 14:53:58.695500880 -0300
@@ -0,0 +1,2 @@
+console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ traps.h spinlock.h fs.h file.h memlayout.h mmu.h proc.h x86.h
Los archivos binarios xv6-unrc/console.o y xv6-mod/console.o son distintos
Los archivos binarios xv6-unrc/._cuth y xv6-mod/._cuth son distintos
Los archivos binarios xv6-unrc/._date.h y xv6-mod/._date.h son distintos
Los archivos binarios xv6-unrc/._defs.h y xv6-mod/._defs.h son distintos
Los archivos binarios xv6-unrc/._dot-bochsrc y xv6-mod/._dot-bochsrc son distintos
Los archivos binarios xv6-unrc/_echo y xv6-mod/_echo son distintos
diff -rupN xv6-unrc/echo.asm xv6-mod/echo.asm
--- xv6-unrc/echo.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/echo.asm	2018-04-04 14:53:52.143435165 -0300
@@ -0,0 +1,1199 @@
+
+_echo:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+   f:	83 ec 10             	sub    $0x10,%esp
+  12:	89 cb                	mov    %ecx,%ebx
+  int i;
+
+  for(i = 1; i < argc; i++)
+  14:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+  1b:	eb 3c                	jmp    59 <main+0x59>
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  20:	83 c0 01             	add    $0x1,%eax
+  23:	3b 03                	cmp    (%ebx),%eax
+  25:	7d 07                	jge    2e <main+0x2e>
+  27:	ba f1 07 00 00       	mov    $0x7f1,%edx
+  2c:	eb 05                	jmp    33 <main+0x33>
+  2e:	ba f3 07 00 00       	mov    $0x7f3,%edx
+  33:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  36:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
+  3d:	8b 43 04             	mov    0x4(%ebx),%eax
+  40:	01 c8                	add    %ecx,%eax
+  42:	8b 00                	mov    (%eax),%eax
+  44:	52                   	push   %edx
+  45:	50                   	push   %eax
+  46:	68 f5 07 00 00       	push   $0x7f5
+  4b:	6a 01                	push   $0x1
+  4d:	e8 e9 03 00 00       	call   43b <printf>
+  52:	83 c4 10             	add    $0x10,%esp
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  for(i = 1; i < argc; i++)
+  55:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  59:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  5c:	3b 03                	cmp    (%ebx),%eax
+  5e:	7c bd                	jl     1d <main+0x1d>
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  exit();
+  60:	e8 57 02 00 00       	call   2bc <exit>
+
+00000065 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  65:	55                   	push   %ebp
+  66:	89 e5                	mov    %esp,%ebp
+  68:	57                   	push   %edi
+  69:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+  6a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6d:	8b 55 10             	mov    0x10(%ebp),%edx
+  70:	8b 45 0c             	mov    0xc(%ebp),%eax
+  73:	89 cb                	mov    %ecx,%ebx
+  75:	89 df                	mov    %ebx,%edi
+  77:	89 d1                	mov    %edx,%ecx
+  79:	fc                   	cld    
+  7a:	f3 aa                	rep stos %al,%es:(%edi)
+  7c:	89 ca                	mov    %ecx,%edx
+  7e:	89 fb                	mov    %edi,%ebx
+  80:	89 5d 08             	mov    %ebx,0x8(%ebp)
+  83:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+  86:	90                   	nop
+  87:	5b                   	pop    %ebx
+  88:	5f                   	pop    %edi
+  89:	5d                   	pop    %ebp
+  8a:	c3                   	ret    
+
+0000008b <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+  8b:	55                   	push   %ebp
+  8c:	89 e5                	mov    %esp,%ebp
+  8e:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+  91:	8b 45 08             	mov    0x8(%ebp),%eax
+  94:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+  97:	90                   	nop
+  98:	8b 45 08             	mov    0x8(%ebp),%eax
+  9b:	8d 50 01             	lea    0x1(%eax),%edx
+  9e:	89 55 08             	mov    %edx,0x8(%ebp)
+  a1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  a4:	8d 4a 01             	lea    0x1(%edx),%ecx
+  a7:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+  aa:	0f b6 12             	movzbl (%edx),%edx
+  ad:	88 10                	mov    %dl,(%eax)
+  af:	0f b6 00             	movzbl (%eax),%eax
+  b2:	84 c0                	test   %al,%al
+  b4:	75 e2                	jne    98 <strcpy+0xd>
+    ;
+  return os;
+  b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  b9:	c9                   	leave  
+  ba:	c3                   	ret    
+
+000000bb <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  bb:	55                   	push   %ebp
+  bc:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+  be:	eb 08                	jmp    c8 <strcmp+0xd>
+    p++, q++;
+  c0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  c4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  c8:	8b 45 08             	mov    0x8(%ebp),%eax
+  cb:	0f b6 00             	movzbl (%eax),%eax
+  ce:	84 c0                	test   %al,%al
+  d0:	74 10                	je     e2 <strcmp+0x27>
+  d2:	8b 45 08             	mov    0x8(%ebp),%eax
+  d5:	0f b6 10             	movzbl (%eax),%edx
+  d8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  db:	0f b6 00             	movzbl (%eax),%eax
+  de:	38 c2                	cmp    %al,%dl
+  e0:	74 de                	je     c0 <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  e2:	8b 45 08             	mov    0x8(%ebp),%eax
+  e5:	0f b6 00             	movzbl (%eax),%eax
+  e8:	0f b6 d0             	movzbl %al,%edx
+  eb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ee:	0f b6 00             	movzbl (%eax),%eax
+  f1:	0f b6 c0             	movzbl %al,%eax
+  f4:	29 c2                	sub    %eax,%edx
+  f6:	89 d0                	mov    %edx,%eax
+}
+  f8:	5d                   	pop    %ebp
+  f9:	c3                   	ret    
+
+000000fa <strlen>:
+
+uint
+strlen(char *s)
+{
+  fa:	55                   	push   %ebp
+  fb:	89 e5                	mov    %esp,%ebp
+  fd:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 100:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 107:	eb 04                	jmp    10d <strlen+0x13>
+ 109:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 10d:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 110:	8b 45 08             	mov    0x8(%ebp),%eax
+ 113:	01 d0                	add    %edx,%eax
+ 115:	0f b6 00             	movzbl (%eax),%eax
+ 118:	84 c0                	test   %al,%al
+ 11a:	75 ed                	jne    109 <strlen+0xf>
+    ;
+  return n;
+ 11c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 11f:	c9                   	leave  
+ 120:	c3                   	ret    
+
+00000121 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 121:	55                   	push   %ebp
+ 122:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 124:	8b 45 10             	mov    0x10(%ebp),%eax
+ 127:	50                   	push   %eax
+ 128:	ff 75 0c             	pushl  0xc(%ebp)
+ 12b:	ff 75 08             	pushl  0x8(%ebp)
+ 12e:	e8 32 ff ff ff       	call   65 <stosb>
+ 133:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 136:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 139:	c9                   	leave  
+ 13a:	c3                   	ret    
+
+0000013b <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 13b:	55                   	push   %ebp
+ 13c:	89 e5                	mov    %esp,%ebp
+ 13e:	83 ec 04             	sub    $0x4,%esp
+ 141:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 144:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 147:	eb 14                	jmp    15d <strchr+0x22>
+    if(*s == c)
+ 149:	8b 45 08             	mov    0x8(%ebp),%eax
+ 14c:	0f b6 00             	movzbl (%eax),%eax
+ 14f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 152:	75 05                	jne    159 <strchr+0x1e>
+      return (char*)s;
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	eb 13                	jmp    16c <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 159:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 15d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 160:	0f b6 00             	movzbl (%eax),%eax
+ 163:	84 c0                	test   %al,%al
+ 165:	75 e2                	jne    149 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 167:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 16c:	c9                   	leave  
+ 16d:	c3                   	ret    
+
+0000016e <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 16e:	55                   	push   %ebp
+ 16f:	89 e5                	mov    %esp,%ebp
+ 171:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 174:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 17b:	eb 42                	jmp    1bf <gets+0x51>
+    cc = read(0, &c, 1);
+ 17d:	83 ec 04             	sub    $0x4,%esp
+ 180:	6a 01                	push   $0x1
+ 182:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 185:	50                   	push   %eax
+ 186:	6a 00                	push   $0x0
+ 188:	e8 47 01 00 00       	call   2d4 <read>
+ 18d:	83 c4 10             	add    $0x10,%esp
+ 190:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 193:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 197:	7e 33                	jle    1cc <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 199:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 19c:	8d 50 01             	lea    0x1(%eax),%edx
+ 19f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 1a2:	89 c2                	mov    %eax,%edx
+ 1a4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a7:	01 c2                	add    %eax,%edx
+ 1a9:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1ad:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 1af:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1b3:	3c 0a                	cmp    $0xa,%al
+ 1b5:	74 16                	je     1cd <gets+0x5f>
+ 1b7:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1bb:	3c 0d                	cmp    $0xd,%al
+ 1bd:	74 0e                	je     1cd <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1c2:	83 c0 01             	add    $0x1,%eax
+ 1c5:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 1c8:	7c b3                	jl     17d <gets+0xf>
+ 1ca:	eb 01                	jmp    1cd <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 1cc:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 1d0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d3:	01 d0                	add    %edx,%eax
+ 1d5:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 1d8:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 1db:	c9                   	leave  
+ 1dc:	c3                   	ret    
+
+000001dd <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 1dd:	55                   	push   %ebp
+ 1de:	89 e5                	mov    %esp,%ebp
+ 1e0:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1e3:	83 ec 08             	sub    $0x8,%esp
+ 1e6:	6a 00                	push   $0x0
+ 1e8:	ff 75 08             	pushl  0x8(%ebp)
+ 1eb:	e8 0c 01 00 00       	call   2fc <open>
+ 1f0:	83 c4 10             	add    $0x10,%esp
+ 1f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 1f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 1fa:	79 07                	jns    203 <stat+0x26>
+    return -1;
+ 1fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 201:	eb 25                	jmp    228 <stat+0x4b>
+  r = fstat(fd, st);
+ 203:	83 ec 08             	sub    $0x8,%esp
+ 206:	ff 75 0c             	pushl  0xc(%ebp)
+ 209:	ff 75 f4             	pushl  -0xc(%ebp)
+ 20c:	e8 03 01 00 00       	call   314 <fstat>
+ 211:	83 c4 10             	add    $0x10,%esp
+ 214:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 217:	83 ec 0c             	sub    $0xc,%esp
+ 21a:	ff 75 f4             	pushl  -0xc(%ebp)
+ 21d:	e8 c2 00 00 00       	call   2e4 <close>
+ 222:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 225:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 228:	c9                   	leave  
+ 229:	c3                   	ret    
+
+0000022a <atoi>:
+
+int
+atoi(const char *s)
+{
+ 22a:	55                   	push   %ebp
+ 22b:	89 e5                	mov    %esp,%ebp
+ 22d:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 230:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 237:	eb 25                	jmp    25e <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 239:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 23c:	89 d0                	mov    %edx,%eax
+ 23e:	c1 e0 02             	shl    $0x2,%eax
+ 241:	01 d0                	add    %edx,%eax
+ 243:	01 c0                	add    %eax,%eax
+ 245:	89 c1                	mov    %eax,%ecx
+ 247:	8b 45 08             	mov    0x8(%ebp),%eax
+ 24a:	8d 50 01             	lea    0x1(%eax),%edx
+ 24d:	89 55 08             	mov    %edx,0x8(%ebp)
+ 250:	0f b6 00             	movzbl (%eax),%eax
+ 253:	0f be c0             	movsbl %al,%eax
+ 256:	01 c8                	add    %ecx,%eax
+ 258:	83 e8 30             	sub    $0x30,%eax
+ 25b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 25e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 261:	0f b6 00             	movzbl (%eax),%eax
+ 264:	3c 2f                	cmp    $0x2f,%al
+ 266:	7e 0a                	jle    272 <atoi+0x48>
+ 268:	8b 45 08             	mov    0x8(%ebp),%eax
+ 26b:	0f b6 00             	movzbl (%eax),%eax
+ 26e:	3c 39                	cmp    $0x39,%al
+ 270:	7e c7                	jle    239 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 272:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 275:	c9                   	leave  
+ 276:	c3                   	ret    
+
+00000277 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 277:	55                   	push   %ebp
+ 278:	89 e5                	mov    %esp,%ebp
+ 27a:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 27d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 280:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 283:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 286:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 289:	eb 17                	jmp    2a2 <memmove+0x2b>
+    *dst++ = *src++;
+ 28b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 28e:	8d 50 01             	lea    0x1(%eax),%edx
+ 291:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 294:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 297:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 29a:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 29d:	0f b6 12             	movzbl (%edx),%edx
+ 2a0:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2a2:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2a5:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 2a8:	89 55 10             	mov    %edx,0x10(%ebp)
+ 2ab:	85 c0                	test   %eax,%eax
+ 2ad:	7f dc                	jg     28b <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 2af:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 2b2:	c9                   	leave  
+ 2b3:	c3                   	ret    
+
+000002b4 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2b4:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2b9:	cd 40                	int    $0x40
+ 2bb:	c3                   	ret    
+
+000002bc <exit>:
+SYSCALL(exit)
+ 2bc:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c1:	cd 40                	int    $0x40
+ 2c3:	c3                   	ret    
+
+000002c4 <wait>:
+SYSCALL(wait)
+ 2c4:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2c9:	cd 40                	int    $0x40
+ 2cb:	c3                   	ret    
+
+000002cc <pipe>:
+SYSCALL(pipe)
+ 2cc:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d1:	cd 40                	int    $0x40
+ 2d3:	c3                   	ret    
+
+000002d4 <read>:
+SYSCALL(read)
+ 2d4:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2d9:	cd 40                	int    $0x40
+ 2db:	c3                   	ret    
+
+000002dc <write>:
+SYSCALL(write)
+ 2dc:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e1:	cd 40                	int    $0x40
+ 2e3:	c3                   	ret    
+
+000002e4 <close>:
+SYSCALL(close)
+ 2e4:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2e9:	cd 40                	int    $0x40
+ 2eb:	c3                   	ret    
+
+000002ec <kill>:
+SYSCALL(kill)
+ 2ec:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f1:	cd 40                	int    $0x40
+ 2f3:	c3                   	ret    
+
+000002f4 <exec>:
+SYSCALL(exec)
+ 2f4:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2f9:	cd 40                	int    $0x40
+ 2fb:	c3                   	ret    
+
+000002fc <open>:
+SYSCALL(open)
+ 2fc:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 301:	cd 40                	int    $0x40
+ 303:	c3                   	ret    
+
+00000304 <mknod>:
+SYSCALL(mknod)
+ 304:	b8 11 00 00 00       	mov    $0x11,%eax
+ 309:	cd 40                	int    $0x40
+ 30b:	c3                   	ret    
+
+0000030c <unlink>:
+SYSCALL(unlink)
+ 30c:	b8 12 00 00 00       	mov    $0x12,%eax
+ 311:	cd 40                	int    $0x40
+ 313:	c3                   	ret    
+
+00000314 <fstat>:
+SYSCALL(fstat)
+ 314:	b8 08 00 00 00       	mov    $0x8,%eax
+ 319:	cd 40                	int    $0x40
+ 31b:	c3                   	ret    
+
+0000031c <link>:
+SYSCALL(link)
+ 31c:	b8 13 00 00 00       	mov    $0x13,%eax
+ 321:	cd 40                	int    $0x40
+ 323:	c3                   	ret    
+
+00000324 <mkdir>:
+SYSCALL(mkdir)
+ 324:	b8 14 00 00 00       	mov    $0x14,%eax
+ 329:	cd 40                	int    $0x40
+ 32b:	c3                   	ret    
+
+0000032c <chdir>:
+SYSCALL(chdir)
+ 32c:	b8 09 00 00 00       	mov    $0x9,%eax
+ 331:	cd 40                	int    $0x40
+ 333:	c3                   	ret    
+
+00000334 <dup>:
+SYSCALL(dup)
+ 334:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 339:	cd 40                	int    $0x40
+ 33b:	c3                   	ret    
+
+0000033c <getpid>:
+SYSCALL(getpid)
+ 33c:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 341:	cd 40                	int    $0x40
+ 343:	c3                   	ret    
+
+00000344 <sbrk>:
+SYSCALL(sbrk)
+ 344:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 349:	cd 40                	int    $0x40
+ 34b:	c3                   	ret    
+
+0000034c <sleep>:
+SYSCALL(sleep)
+ 34c:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 351:	cd 40                	int    $0x40
+ 353:	c3                   	ret    
+
+00000354 <uptime>:
+SYSCALL(uptime)
+ 354:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 359:	cd 40                	int    $0x40
+ 35b:	c3                   	ret    
+
+0000035c <procstat>:
+SYSCALL(procstat) 
+ 35c:	b8 16 00 00 00       	mov    $0x16,%eax
+ 361:	cd 40                	int    $0x40
+ 363:	c3                   	ret    
+
+00000364 <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 364:	55                   	push   %ebp
+ 365:	89 e5                	mov    %esp,%ebp
+ 367:	83 ec 18             	sub    $0x18,%esp
+ 36a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 36d:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 370:	83 ec 04             	sub    $0x4,%esp
+ 373:	6a 01                	push   $0x1
+ 375:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 378:	50                   	push   %eax
+ 379:	ff 75 08             	pushl  0x8(%ebp)
+ 37c:	e8 5b ff ff ff       	call   2dc <write>
+ 381:	83 c4 10             	add    $0x10,%esp
+}
+ 384:	90                   	nop
+ 385:	c9                   	leave  
+ 386:	c3                   	ret    
+
+00000387 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 387:	55                   	push   %ebp
+ 388:	89 e5                	mov    %esp,%ebp
+ 38a:	53                   	push   %ebx
+ 38b:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 38e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 395:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 399:	74 17                	je     3b2 <printint+0x2b>
+ 39b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 39f:	79 11                	jns    3b2 <printint+0x2b>
+    neg = 1;
+ 3a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 3a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3ab:	f7 d8                	neg    %eax
+ 3ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 3b0:	eb 06                	jmp    3b8 <printint+0x31>
+  } else {
+    x = xx;
+ 3b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 3b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 3bf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 3c2:	8d 41 01             	lea    0x1(%ecx),%eax
+ 3c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 3c8:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3ce:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3d3:	f7 f3                	div    %ebx
+ 3d5:	89 d0                	mov    %edx,%eax
+ 3d7:	0f b6 80 50 0a 00 00 	movzbl 0xa50(%eax),%eax
+ 3de:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 3e2:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3e8:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3ed:	f7 f3                	div    %ebx
+ 3ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 3f2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 3f6:	75 c7                	jne    3bf <printint+0x38>
+  if(neg)
+ 3f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 3fc:	74 2d                	je     42b <printint+0xa4>
+    buf[i++] = '-';
+ 3fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 401:	8d 50 01             	lea    0x1(%eax),%edx
+ 404:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 407:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 40c:	eb 1d                	jmp    42b <printint+0xa4>
+    putc(fd, buf[i]);
+ 40e:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 411:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 414:	01 d0                	add    %edx,%eax
+ 416:	0f b6 00             	movzbl (%eax),%eax
+ 419:	0f be c0             	movsbl %al,%eax
+ 41c:	83 ec 08             	sub    $0x8,%esp
+ 41f:	50                   	push   %eax
+ 420:	ff 75 08             	pushl  0x8(%ebp)
+ 423:	e8 3c ff ff ff       	call   364 <putc>
+ 428:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 42b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 42f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 433:	79 d9                	jns    40e <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 435:	90                   	nop
+ 436:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 439:	c9                   	leave  
+ 43a:	c3                   	ret    
+
+0000043b <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 43b:	55                   	push   %ebp
+ 43c:	89 e5                	mov    %esp,%ebp
+ 43e:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 441:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 448:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 44b:	83 c0 04             	add    $0x4,%eax
+ 44e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 451:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 458:	e9 59 01 00 00       	jmp    5b6 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 45d:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 460:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 463:	01 d0                	add    %edx,%eax
+ 465:	0f b6 00             	movzbl (%eax),%eax
+ 468:	0f be c0             	movsbl %al,%eax
+ 46b:	25 ff 00 00 00       	and    $0xff,%eax
+ 470:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 473:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 477:	75 2c                	jne    4a5 <printf+0x6a>
+      if(c == '%'){
+ 479:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 47d:	75 0c                	jne    48b <printf+0x50>
+        state = '%';
+ 47f:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 486:	e9 27 01 00 00       	jmp    5b2 <printf+0x177>
+      } else {
+        putc(fd, c);
+ 48b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 48e:	0f be c0             	movsbl %al,%eax
+ 491:	83 ec 08             	sub    $0x8,%esp
+ 494:	50                   	push   %eax
+ 495:	ff 75 08             	pushl  0x8(%ebp)
+ 498:	e8 c7 fe ff ff       	call   364 <putc>
+ 49d:	83 c4 10             	add    $0x10,%esp
+ 4a0:	e9 0d 01 00 00       	jmp    5b2 <printf+0x177>
+      }
+    } else if(state == '%'){
+ 4a5:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 4a9:	0f 85 03 01 00 00    	jne    5b2 <printf+0x177>
+      if(c == 'd'){
+ 4af:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 4b3:	75 1e                	jne    4d3 <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 4b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4b8:	8b 00                	mov    (%eax),%eax
+ 4ba:	6a 01                	push   $0x1
+ 4bc:	6a 0a                	push   $0xa
+ 4be:	50                   	push   %eax
+ 4bf:	ff 75 08             	pushl  0x8(%ebp)
+ 4c2:	e8 c0 fe ff ff       	call   387 <printint>
+ 4c7:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 4ca:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 4ce:	e9 d8 00 00 00       	jmp    5ab <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 4d3:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 4d7:	74 06                	je     4df <printf+0xa4>
+ 4d9:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 4dd:	75 1e                	jne    4fd <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 4df:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4e2:	8b 00                	mov    (%eax),%eax
+ 4e4:	6a 00                	push   $0x0
+ 4e6:	6a 10                	push   $0x10
+ 4e8:	50                   	push   %eax
+ 4e9:	ff 75 08             	pushl  0x8(%ebp)
+ 4ec:	e8 96 fe ff ff       	call   387 <printint>
+ 4f1:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 4f4:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 4f8:	e9 ae 00 00 00       	jmp    5ab <printf+0x170>
+      } else if(c == 's'){
+ 4fd:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 501:	75 43                	jne    546 <printf+0x10b>
+        s = (char*)*ap;
+ 503:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 506:	8b 00                	mov    (%eax),%eax
+ 508:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 50b:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 50f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 513:	75 25                	jne    53a <printf+0xff>
+          s = "(null)";
+ 515:	c7 45 f4 fa 07 00 00 	movl   $0x7fa,-0xc(%ebp)
+        while(*s != 0){
+ 51c:	eb 1c                	jmp    53a <printf+0xff>
+          putc(fd, *s);
+ 51e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 521:	0f b6 00             	movzbl (%eax),%eax
+ 524:	0f be c0             	movsbl %al,%eax
+ 527:	83 ec 08             	sub    $0x8,%esp
+ 52a:	50                   	push   %eax
+ 52b:	ff 75 08             	pushl  0x8(%ebp)
+ 52e:	e8 31 fe ff ff       	call   364 <putc>
+ 533:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 536:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 53a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 53d:	0f b6 00             	movzbl (%eax),%eax
+ 540:	84 c0                	test   %al,%al
+ 542:	75 da                	jne    51e <printf+0xe3>
+ 544:	eb 65                	jmp    5ab <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 546:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 54a:	75 1d                	jne    569 <printf+0x12e>
+        putc(fd, *ap);
+ 54c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 54f:	8b 00                	mov    (%eax),%eax
+ 551:	0f be c0             	movsbl %al,%eax
+ 554:	83 ec 08             	sub    $0x8,%esp
+ 557:	50                   	push   %eax
+ 558:	ff 75 08             	pushl  0x8(%ebp)
+ 55b:	e8 04 fe ff ff       	call   364 <putc>
+ 560:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 563:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 567:	eb 42                	jmp    5ab <printf+0x170>
+      } else if(c == '%'){
+ 569:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 56d:	75 17                	jne    586 <printf+0x14b>
+        putc(fd, c);
+ 56f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 572:	0f be c0             	movsbl %al,%eax
+ 575:	83 ec 08             	sub    $0x8,%esp
+ 578:	50                   	push   %eax
+ 579:	ff 75 08             	pushl  0x8(%ebp)
+ 57c:	e8 e3 fd ff ff       	call   364 <putc>
+ 581:	83 c4 10             	add    $0x10,%esp
+ 584:	eb 25                	jmp    5ab <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 586:	83 ec 08             	sub    $0x8,%esp
+ 589:	6a 25                	push   $0x25
+ 58b:	ff 75 08             	pushl  0x8(%ebp)
+ 58e:	e8 d1 fd ff ff       	call   364 <putc>
+ 593:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 596:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 599:	0f be c0             	movsbl %al,%eax
+ 59c:	83 ec 08             	sub    $0x8,%esp
+ 59f:	50                   	push   %eax
+ 5a0:	ff 75 08             	pushl  0x8(%ebp)
+ 5a3:	e8 bc fd ff ff       	call   364 <putc>
+ 5a8:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5b2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 5b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 5b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 5bc:	01 d0                	add    %edx,%eax
+ 5be:	0f b6 00             	movzbl (%eax),%eax
+ 5c1:	84 c0                	test   %al,%al
+ 5c3:	0f 85 94 fe ff ff    	jne    45d <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5c9:	90                   	nop
+ 5ca:	c9                   	leave  
+ 5cb:	c3                   	ret    
+
+000005cc <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5cc:	55                   	push   %ebp
+ 5cd:	89 e5                	mov    %esp,%ebp
+ 5cf:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5d2:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5d5:	83 e8 08             	sub    $0x8,%eax
+ 5d8:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5db:	a1 6c 0a 00 00       	mov    0xa6c,%eax
+ 5e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 5e3:	eb 24                	jmp    609 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5e8:	8b 00                	mov    (%eax),%eax
+ 5ea:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 5ed:	77 12                	ja     601 <free+0x35>
+ 5ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 5f2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 5f5:	77 24                	ja     61b <free+0x4f>
+ 5f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5fa:	8b 00                	mov    (%eax),%eax
+ 5fc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 5ff:	77 1a                	ja     61b <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 604:	8b 00                	mov    (%eax),%eax
+ 606:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 609:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 60c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 60f:	76 d4                	jbe    5e5 <free+0x19>
+ 611:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 614:	8b 00                	mov    (%eax),%eax
+ 616:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 619:	76 ca                	jbe    5e5 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 61b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 61e:	8b 40 04             	mov    0x4(%eax),%eax
+ 621:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 628:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 62b:	01 c2                	add    %eax,%edx
+ 62d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 630:	8b 00                	mov    (%eax),%eax
+ 632:	39 c2                	cmp    %eax,%edx
+ 634:	75 24                	jne    65a <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 636:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 639:	8b 50 04             	mov    0x4(%eax),%edx
+ 63c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 63f:	8b 00                	mov    (%eax),%eax
+ 641:	8b 40 04             	mov    0x4(%eax),%eax
+ 644:	01 c2                	add    %eax,%edx
+ 646:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 649:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 64c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 64f:	8b 00                	mov    (%eax),%eax
+ 651:	8b 10                	mov    (%eax),%edx
+ 653:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 656:	89 10                	mov    %edx,(%eax)
+ 658:	eb 0a                	jmp    664 <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 65a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 65d:	8b 10                	mov    (%eax),%edx
+ 65f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 662:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 664:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 667:	8b 40 04             	mov    0x4(%eax),%eax
+ 66a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 671:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 674:	01 d0                	add    %edx,%eax
+ 676:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 679:	75 20                	jne    69b <free+0xcf>
+    p->s.size += bp->s.size;
+ 67b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 67e:	8b 50 04             	mov    0x4(%eax),%edx
+ 681:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 684:	8b 40 04             	mov    0x4(%eax),%eax
+ 687:	01 c2                	add    %eax,%edx
+ 689:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 68c:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 68f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 692:	8b 10                	mov    (%eax),%edx
+ 694:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 697:	89 10                	mov    %edx,(%eax)
+ 699:	eb 08                	jmp    6a3 <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 69b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 69e:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 6a1:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 6a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6a6:	a3 6c 0a 00 00       	mov    %eax,0xa6c
+}
+ 6ab:	90                   	nop
+ 6ac:	c9                   	leave  
+ 6ad:	c3                   	ret    
+
+000006ae <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 6ae:	55                   	push   %ebp
+ 6af:	89 e5                	mov    %esp,%ebp
+ 6b1:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 6b4:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 6bb:	77 07                	ja     6c4 <morecore+0x16>
+    nu = 4096;
+ 6bd:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 6c4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6c7:	c1 e0 03             	shl    $0x3,%eax
+ 6ca:	83 ec 0c             	sub    $0xc,%esp
+ 6cd:	50                   	push   %eax
+ 6ce:	e8 71 fc ff ff       	call   344 <sbrk>
+ 6d3:	83 c4 10             	add    $0x10,%esp
+ 6d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 6d9:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 6dd:	75 07                	jne    6e6 <morecore+0x38>
+    return 0;
+ 6df:	b8 00 00 00 00       	mov    $0x0,%eax
+ 6e4:	eb 26                	jmp    70c <morecore+0x5e>
+  hp = (Header*)p;
+ 6e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 6e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 6ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 6ef:	8b 55 08             	mov    0x8(%ebp),%edx
+ 6f2:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 6f8:	83 c0 08             	add    $0x8,%eax
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	50                   	push   %eax
+ 6ff:	e8 c8 fe ff ff       	call   5cc <free>
+ 704:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 707:	a1 6c 0a 00 00       	mov    0xa6c,%eax
+}
+ 70c:	c9                   	leave  
+ 70d:	c3                   	ret    
+
+0000070e <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 70e:	55                   	push   %ebp
+ 70f:	89 e5                	mov    %esp,%ebp
+ 711:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 714:	8b 45 08             	mov    0x8(%ebp),%eax
+ 717:	83 c0 07             	add    $0x7,%eax
+ 71a:	c1 e8 03             	shr    $0x3,%eax
+ 71d:	83 c0 01             	add    $0x1,%eax
+ 720:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 723:	a1 6c 0a 00 00       	mov    0xa6c,%eax
+ 728:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 72b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 72f:	75 23                	jne    754 <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 731:	c7 45 f0 64 0a 00 00 	movl   $0xa64,-0x10(%ebp)
+ 738:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 73b:	a3 6c 0a 00 00       	mov    %eax,0xa6c
+ 740:	a1 6c 0a 00 00       	mov    0xa6c,%eax
+ 745:	a3 64 0a 00 00       	mov    %eax,0xa64
+    base.s.size = 0;
+ 74a:	c7 05 68 0a 00 00 00 	movl   $0x0,0xa68
+ 751:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 754:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 757:	8b 00                	mov    (%eax),%eax
+ 759:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 75c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 75f:	8b 40 04             	mov    0x4(%eax),%eax
+ 762:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 765:	72 4d                	jb     7b4 <malloc+0xa6>
+      if(p->s.size == nunits)
+ 767:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 76a:	8b 40 04             	mov    0x4(%eax),%eax
+ 76d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 770:	75 0c                	jne    77e <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 772:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 775:	8b 10                	mov    (%eax),%edx
+ 777:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 77a:	89 10                	mov    %edx,(%eax)
+ 77c:	eb 26                	jmp    7a4 <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 77e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 781:	8b 40 04             	mov    0x4(%eax),%eax
+ 784:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 787:	89 c2                	mov    %eax,%edx
+ 789:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 78c:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 78f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 792:	8b 40 04             	mov    0x4(%eax),%eax
+ 795:	c1 e0 03             	shl    $0x3,%eax
+ 798:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 79b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 79e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 7a1:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 7a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7a7:	a3 6c 0a 00 00       	mov    %eax,0xa6c
+      return (void*)(p + 1);
+ 7ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7af:	83 c0 08             	add    $0x8,%eax
+ 7b2:	eb 3b                	jmp    7ef <malloc+0xe1>
+    }
+    if(p == freep)
+ 7b4:	a1 6c 0a 00 00       	mov    0xa6c,%eax
+ 7b9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 7bc:	75 1e                	jne    7dc <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 7be:	83 ec 0c             	sub    $0xc,%esp
+ 7c1:	ff 75 ec             	pushl  -0x14(%ebp)
+ 7c4:	e8 e5 fe ff ff       	call   6ae <morecore>
+ 7c9:	83 c4 10             	add    $0x10,%esp
+ 7cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 7cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 7d3:	75 07                	jne    7dc <malloc+0xce>
+        return 0;
+ 7d5:	b8 00 00 00 00       	mov    $0x0,%eax
+ 7da:	eb 13                	jmp    7ef <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7df:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 7e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7e5:	8b 00                	mov    (%eax),%eax
+ 7e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 7ea:	e9 6d ff ff ff       	jmp    75c <malloc+0x4e>
+}
+ 7ef:	c9                   	leave  
+ 7f0:	c3                   	ret    
diff -rupN xv6-unrc/echo.sym xv6-mod/echo.sym
--- xv6-unrc/echo.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/echo.sym	2018-04-04 14:53:52.171435445 -0300
@@ -0,0 +1,61 @@
+00000000 .text
+000007f1 .rodata
+00000804 .eh_frame
+00000a50 .data
+00000a64 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 echo.c
+00000000 ulib.c
+00000065 stosb
+00000000 printf.c
+00000364 putc
+00000387 printint
+00000a50 digits.1109
+00000000 umalloc.c
+00000a64 base
+00000a6c freep
+000006ae morecore
+0000008b strcpy
+0000043b printf
+00000277 memmove
+00000304 mknod
+0000016e gets
+0000033c getpid
+0000070e malloc
+0000035c procstat
+0000034c sleep
+000002cc pipe
+000002dc write
+00000314 fstat
+000002ec kill
+0000032c chdir
+000002f4 exec
+000002c4 wait
+000002d4 read
+0000030c unlink
+000002b4 fork
+00000344 sbrk
+00000354 uptime
+00000a61 __bss_start
+00000121 memset
+00000000 main
+000000bb strcmp
+00000334 dup
+000001dd stat
+00000a61 _edata
+00000a70 _end
+0000031c link
+000002bc exit
+0000022a atoi
+000000fa strlen
+000002fc open
+0000013b strchr
+00000324 mkdir
+000002e4 close
+000005cc free
Los archivos binarios xv6-unrc/._elf.h y xv6-mod/._elf.h son distintos
Los archivos binarios xv6-unrc/entry.o y xv6-mod/entry.o son distintos
Los archivos binarios xv6-unrc/entryother y xv6-mod/entryother son distintos
diff -rupN xv6-unrc/entryother.asm xv6-mod/entryother.asm
--- xv6-unrc/entryother.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/entryother.asm	2018-04-04 14:54:50.064016091 -0300
@@ -0,0 +1,117 @@
+
+bootblockother.o:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00007000 <start>:
+#   - it uses the address at start-4, start-8, and start-12
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+.code32
+start32:
+  movw    $(SEG_KDATA<<3), %ax
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use enterpgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -rupN xv6-unrc/entryother.d xv6-mod/entryother.d
--- xv6-unrc/entryother.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/entryother.d	2018-04-04 14:54:49.968015128 -0300
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Los archivos binarios xv6-unrc/entryother.o y xv6-mod/entryother.o son distintos
Los archivos binarios xv6-unrc/._entryother.S y xv6-mod/._entryother.S son distintos
Los archivos binarios xv6-unrc/._entry.S y xv6-mod/._entry.S son distintos
Los archivos binarios xv6-unrc/._exec.c y xv6-mod/._exec.c son distintos
diff -rupN xv6-unrc/exec.d xv6-mod/exec.d
--- xv6-unrc/exec.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/exec.d	2018-04-04 14:53:58.919503127 -0300
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Los archivos binarios xv6-unrc/exec.o y xv6-mod/exec.o son distintos
Los archivos binarios xv6-unrc/._fcntl.h y xv6-mod/._fcntl.h son distintos
Los archivos binarios xv6-unrc/._file.c y xv6-mod/._file.c son distintos
diff -rupN xv6-unrc/file.d xv6-mod/file.d
--- xv6-unrc/file.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/file.d	2018-04-04 14:53:59.147505414 -0300
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ file.h spinlock.h
Los archivos binarios xv6-unrc/._file.h y xv6-mod/._file.h son distintos
Los archivos binarios xv6-unrc/file.o y xv6-mod/file.o son distintos
Los archivos binarios xv6-unrc/_forktest y xv6-mod/_forktest son distintos
diff -rupN xv6-unrc/forktest.asm xv6-mod/forktest.asm
--- xv6-unrc/forktest.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/forktest.asm	2018-04-04 15:15:42.720579859 -0300
@@ -0,0 +1,718 @@
+
+_forktest:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <printf>:
+
+#define N  1000
+
+void
+printf(int fd, char *s, ...)
+{
+   0:	55                   	push   %ebp
+   1:	89 e5                	mov    %esp,%ebp
+   3:	83 ec 08             	sub    $0x8,%esp
+  write(fd, s, strlen(s));
+   6:	83 ec 0c             	sub    $0xc,%esp
+   9:	ff 75 0c             	pushl  0xc(%ebp)
+   c:	e8 a2 01 00 00       	call   1b3 <strlen>
+  11:	83 c4 10             	add    $0x10,%esp
+  14:	83 ec 04             	sub    $0x4,%esp
+  17:	50                   	push   %eax
+  18:	ff 75 0c             	pushl  0xc(%ebp)
+  1b:	ff 75 08             	pushl  0x8(%ebp)
+  1e:	e8 72 03 00 00       	call   395 <write>
+  23:	83 c4 10             	add    $0x10,%esp
+}
+  26:	90                   	nop
+  27:	c9                   	leave  
+  28:	c3                   	ret    
+
+00000029 <forktest>:
+
+void
+forktest(void)
+{
+  29:	55                   	push   %ebp
+  2a:	89 e5                	mov    %esp,%ebp
+  2c:	83 ec 18             	sub    $0x18,%esp
+  int n, pid;
+
+  printf(1, "fork test\n");
+  2f:	83 ec 08             	sub    $0x8,%esp
+  32:	68 20 04 00 00       	push   $0x420
+  37:	6a 01                	push   $0x1
+  39:	e8 c2 ff ff ff       	call   0 <printf>
+  3e:	83 c4 10             	add    $0x10,%esp
+
+  for(n=0; n<N; n++){
+  41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  48:	eb 28                	jmp    72 <forktest+0x49>
+    if(n==5){     //en la sexta iteracion del ciclo, se ejecuta procstat
+  4a:	83 7d f4 05          	cmpl   $0x5,-0xc(%ebp)
+  4e:	75 05                	jne    55 <forktest+0x2c>
+      procstat();
+  50:	e8 c0 03 00 00       	call   415 <procstat>
+    }
+    pid = fork();
+  55:	e8 13 03 00 00       	call   36d <fork>
+  5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    if(pid < 0)
+  5d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  61:	78 1a                	js     7d <forktest+0x54>
+      break;
+    if(pid == 0)
+  63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  67:	75 05                	jne    6e <forktest+0x45>
+     exit();
+  69:	e8 07 03 00 00       	call   375 <exit>
+{
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<N; n++){
+  6e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  72:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
+  79:	7e cf                	jle    4a <forktest+0x21>
+  7b:	eb 01                	jmp    7e <forktest+0x55>
+      procstat();
+    }
+    pid = fork();
+
+    if(pid < 0)
+      break;
+  7d:	90                   	nop
+    if(pid == 0)
+     exit();
+  }
+  
+  if(n == N){
+  7e:	81 7d f4 e8 03 00 00 	cmpl   $0x3e8,-0xc(%ebp)
+  85:	75 40                	jne    c7 <forktest+0x9e>
+    printf(1, "fork claimed to work N times!\n", N);
+  87:	83 ec 04             	sub    $0x4,%esp
+  8a:	68 e8 03 00 00       	push   $0x3e8
+  8f:	68 2c 04 00 00       	push   $0x42c
+  94:	6a 01                	push   $0x1
+  96:	e8 65 ff ff ff       	call   0 <printf>
+  9b:	83 c4 10             	add    $0x10,%esp
+    exit();
+  9e:	e8 d2 02 00 00       	call   375 <exit>
+  }
+  
+  for(; n > 0; n--){
+    if(wait() < 0){
+  a3:	e8 d5 02 00 00       	call   37d <wait>
+  a8:	85 c0                	test   %eax,%eax
+  aa:	79 17                	jns    c3 <forktest+0x9a>
+      printf(1, "wait stopped early\n");
+  ac:	83 ec 08             	sub    $0x8,%esp
+  af:	68 4b 04 00 00       	push   $0x44b
+  b4:	6a 01                	push   $0x1
+  b6:	e8 45 ff ff ff       	call   0 <printf>
+  bb:	83 c4 10             	add    $0x10,%esp
+      exit();
+  be:	e8 b2 02 00 00       	call   375 <exit>
+  if(n == N){
+    printf(1, "fork claimed to work N times!\n", N);
+    exit();
+  }
+  
+  for(; n > 0; n--){
+  c3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+  c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  cb:	7f d6                	jg     a3 <forktest+0x7a>
+      printf(1, "wait stopped early\n");
+      exit();
+    }
+  }
+  
+  if(wait() != -1){
+  cd:	e8 ab 02 00 00       	call   37d <wait>
+  d2:	83 f8 ff             	cmp    $0xffffffff,%eax
+  d5:	74 17                	je     ee <forktest+0xc5>
+    printf(1, "wait got too many\n");
+  d7:	83 ec 08             	sub    $0x8,%esp
+  da:	68 5f 04 00 00       	push   $0x45f
+  df:	6a 01                	push   $0x1
+  e1:	e8 1a ff ff ff       	call   0 <printf>
+  e6:	83 c4 10             	add    $0x10,%esp
+    exit();
+  e9:	e8 87 02 00 00       	call   375 <exit>
+  }
+  
+  printf(1, "fork test OK\n");
+  ee:	83 ec 08             	sub    $0x8,%esp
+  f1:	68 72 04 00 00       	push   $0x472
+  f6:	6a 01                	push   $0x1
+  f8:	e8 03 ff ff ff       	call   0 <printf>
+  fd:	83 c4 10             	add    $0x10,%esp
+}
+ 100:	90                   	nop
+ 101:	c9                   	leave  
+ 102:	c3                   	ret    
+
+00000103 <main>:
+
+int
+main(void)
+{
+ 103:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+ 107:	83 e4 f0             	and    $0xfffffff0,%esp
+ 10a:	ff 71 fc             	pushl  -0x4(%ecx)
+ 10d:	55                   	push   %ebp
+ 10e:	89 e5                	mov    %esp,%ebp
+ 110:	51                   	push   %ecx
+ 111:	83 ec 04             	sub    $0x4,%esp
+  forktest();
+ 114:	e8 10 ff ff ff       	call   29 <forktest>
+  exit();
+ 119:	e8 57 02 00 00       	call   375 <exit>
+
+0000011e <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+ 11e:	55                   	push   %ebp
+ 11f:	89 e5                	mov    %esp,%ebp
+ 121:	57                   	push   %edi
+ 122:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+ 123:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 126:	8b 55 10             	mov    0x10(%ebp),%edx
+ 129:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12c:	89 cb                	mov    %ecx,%ebx
+ 12e:	89 df                	mov    %ebx,%edi
+ 130:	89 d1                	mov    %edx,%ecx
+ 132:	fc                   	cld    
+ 133:	f3 aa                	rep stos %al,%es:(%edi)
+ 135:	89 ca                	mov    %ecx,%edx
+ 137:	89 fb                	mov    %edi,%ebx
+ 139:	89 5d 08             	mov    %ebx,0x8(%ebp)
+ 13c:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+ 13f:	90                   	nop
+ 140:	5b                   	pop    %ebx
+ 141:	5f                   	pop    %edi
+ 142:	5d                   	pop    %ebp
+ 143:	c3                   	ret    
+
+00000144 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+ 14a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 14d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+ 150:	90                   	nop
+ 151:	8b 45 08             	mov    0x8(%ebp),%eax
+ 154:	8d 50 01             	lea    0x1(%eax),%edx
+ 157:	89 55 08             	mov    %edx,0x8(%ebp)
+ 15a:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 15d:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 160:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+ 163:	0f b6 12             	movzbl (%edx),%edx
+ 166:	88 10                	mov    %dl,(%eax)
+ 168:	0f b6 00             	movzbl (%eax),%eax
+ 16b:	84 c0                	test   %al,%al
+ 16d:	75 e2                	jne    151 <strcpy+0xd>
+    ;
+  return os;
+ 16f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 172:	c9                   	leave  
+ 173:	c3                   	ret    
+
+00000174 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+ 177:	eb 08                	jmp    181 <strcmp+0xd>
+    p++, q++;
+ 179:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 17d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 181:	8b 45 08             	mov    0x8(%ebp),%eax
+ 184:	0f b6 00             	movzbl (%eax),%eax
+ 187:	84 c0                	test   %al,%al
+ 189:	74 10                	je     19b <strcmp+0x27>
+ 18b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 18e:	0f b6 10             	movzbl (%eax),%edx
+ 191:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 194:	0f b6 00             	movzbl (%eax),%eax
+ 197:	38 c2                	cmp    %al,%dl
+ 199:	74 de                	je     179 <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 19b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 19e:	0f b6 00             	movzbl (%eax),%eax
+ 1a1:	0f b6 d0             	movzbl %al,%edx
+ 1a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1a7:	0f b6 00             	movzbl (%eax),%eax
+ 1aa:	0f b6 c0             	movzbl %al,%eax
+ 1ad:	29 c2                	sub    %eax,%edx
+ 1af:	89 d0                	mov    %edx,%eax
+}
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+
+000001b3 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 1b3:	55                   	push   %ebp
+ 1b4:	89 e5                	mov    %esp,%ebp
+ 1b6:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 1c0:	eb 04                	jmp    1c6 <strlen+0x13>
+ 1c2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 1c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 1c9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1cc:	01 d0                	add    %edx,%eax
+ 1ce:	0f b6 00             	movzbl (%eax),%eax
+ 1d1:	84 c0                	test   %al,%al
+ 1d3:	75 ed                	jne    1c2 <strlen+0xf>
+    ;
+  return n;
+ 1d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 1d8:	c9                   	leave  
+ 1d9:	c3                   	ret    
+
+000001da <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1da:	55                   	push   %ebp
+ 1db:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 1dd:	8b 45 10             	mov    0x10(%ebp),%eax
+ 1e0:	50                   	push   %eax
+ 1e1:	ff 75 0c             	pushl  0xc(%ebp)
+ 1e4:	ff 75 08             	pushl  0x8(%ebp)
+ 1e7:	e8 32 ff ff ff       	call   11e <stosb>
+ 1ec:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 1ef:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 1f2:	c9                   	leave  
+ 1f3:	c3                   	ret    
+
+000001f4 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1f4:	55                   	push   %ebp
+ 1f5:	89 e5                	mov    %esp,%ebp
+ 1f7:	83 ec 04             	sub    $0x4,%esp
+ 1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1fd:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 200:	eb 14                	jmp    216 <strchr+0x22>
+    if(*s == c)
+ 202:	8b 45 08             	mov    0x8(%ebp),%eax
+ 205:	0f b6 00             	movzbl (%eax),%eax
+ 208:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 20b:	75 05                	jne    212 <strchr+0x1e>
+      return (char*)s;
+ 20d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 210:	eb 13                	jmp    225 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 212:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 216:	8b 45 08             	mov    0x8(%ebp),%eax
+ 219:	0f b6 00             	movzbl (%eax),%eax
+ 21c:	84 c0                	test   %al,%al
+ 21e:	75 e2                	jne    202 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 220:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 225:	c9                   	leave  
+ 226:	c3                   	ret    
+
+00000227 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 227:	55                   	push   %ebp
+ 228:	89 e5                	mov    %esp,%ebp
+ 22a:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 22d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 234:	eb 42                	jmp    278 <gets+0x51>
+    cc = read(0, &c, 1);
+ 236:	83 ec 04             	sub    $0x4,%esp
+ 239:	6a 01                	push   $0x1
+ 23b:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 23e:	50                   	push   %eax
+ 23f:	6a 00                	push   $0x0
+ 241:	e8 47 01 00 00       	call   38d <read>
+ 246:	83 c4 10             	add    $0x10,%esp
+ 249:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 24c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 250:	7e 33                	jle    285 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 252:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 255:	8d 50 01             	lea    0x1(%eax),%edx
+ 258:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 25b:	89 c2                	mov    %eax,%edx
+ 25d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 260:	01 c2                	add    %eax,%edx
+ 262:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 266:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 268:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 26c:	3c 0a                	cmp    $0xa,%al
+ 26e:	74 16                	je     286 <gets+0x5f>
+ 270:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 274:	3c 0d                	cmp    $0xd,%al
+ 276:	74 0e                	je     286 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 278:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 27b:	83 c0 01             	add    $0x1,%eax
+ 27e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 281:	7c b3                	jl     236 <gets+0xf>
+ 283:	eb 01                	jmp    286 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 285:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 286:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 289:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28c:	01 d0                	add    %edx,%eax
+ 28e:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 291:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 294:	c9                   	leave  
+ 295:	c3                   	ret    
+
+00000296 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 296:	55                   	push   %ebp
+ 297:	89 e5                	mov    %esp,%ebp
+ 299:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 29c:	83 ec 08             	sub    $0x8,%esp
+ 29f:	6a 00                	push   $0x0
+ 2a1:	ff 75 08             	pushl  0x8(%ebp)
+ 2a4:	e8 0c 01 00 00       	call   3b5 <open>
+ 2a9:	83 c4 10             	add    $0x10,%esp
+ 2ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 2af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 2b3:	79 07                	jns    2bc <stat+0x26>
+    return -1;
+ 2b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 2ba:	eb 25                	jmp    2e1 <stat+0x4b>
+  r = fstat(fd, st);
+ 2bc:	83 ec 08             	sub    $0x8,%esp
+ 2bf:	ff 75 0c             	pushl  0xc(%ebp)
+ 2c2:	ff 75 f4             	pushl  -0xc(%ebp)
+ 2c5:	e8 03 01 00 00       	call   3cd <fstat>
+ 2ca:	83 c4 10             	add    $0x10,%esp
+ 2cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 2d0:	83 ec 0c             	sub    $0xc,%esp
+ 2d3:	ff 75 f4             	pushl  -0xc(%ebp)
+ 2d6:	e8 c2 00 00 00       	call   39d <close>
+ 2db:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 2de:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 2e1:	c9                   	leave  
+ 2e2:	c3                   	ret    
+
+000002e3 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2e3:	55                   	push   %ebp
+ 2e4:	89 e5                	mov    %esp,%ebp
+ 2e6:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 2e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 2f0:	eb 25                	jmp    317 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 2f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 2f5:	89 d0                	mov    %edx,%eax
+ 2f7:	c1 e0 02             	shl    $0x2,%eax
+ 2fa:	01 d0                	add    %edx,%eax
+ 2fc:	01 c0                	add    %eax,%eax
+ 2fe:	89 c1                	mov    %eax,%ecx
+ 300:	8b 45 08             	mov    0x8(%ebp),%eax
+ 303:	8d 50 01             	lea    0x1(%eax),%edx
+ 306:	89 55 08             	mov    %edx,0x8(%ebp)
+ 309:	0f b6 00             	movzbl (%eax),%eax
+ 30c:	0f be c0             	movsbl %al,%eax
+ 30f:	01 c8                	add    %ecx,%eax
+ 311:	83 e8 30             	sub    $0x30,%eax
+ 314:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 317:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31a:	0f b6 00             	movzbl (%eax),%eax
+ 31d:	3c 2f                	cmp    $0x2f,%al
+ 31f:	7e 0a                	jle    32b <atoi+0x48>
+ 321:	8b 45 08             	mov    0x8(%ebp),%eax
+ 324:	0f b6 00             	movzbl (%eax),%eax
+ 327:	3c 39                	cmp    $0x39,%al
+ 329:	7e c7                	jle    2f2 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 32b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 32e:	c9                   	leave  
+ 32f:	c3                   	ret    
+
+00000330 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 336:	8b 45 08             	mov    0x8(%ebp),%eax
+ 339:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 33c:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 33f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 342:	eb 17                	jmp    35b <memmove+0x2b>
+    *dst++ = *src++;
+ 344:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 347:	8d 50 01             	lea    0x1(%eax),%edx
+ 34a:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 34d:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 350:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 353:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 356:	0f b6 12             	movzbl (%edx),%edx
+ 359:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 35b:	8b 45 10             	mov    0x10(%ebp),%eax
+ 35e:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 361:	89 55 10             	mov    %edx,0x10(%ebp)
+ 364:	85 c0                	test   %eax,%eax
+ 366:	7f dc                	jg     344 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 368:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 36b:	c9                   	leave  
+ 36c:	c3                   	ret    
+
+0000036d <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 36d:	b8 01 00 00 00       	mov    $0x1,%eax
+ 372:	cd 40                	int    $0x40
+ 374:	c3                   	ret    
+
+00000375 <exit>:
+SYSCALL(exit)
+ 375:	b8 02 00 00 00       	mov    $0x2,%eax
+ 37a:	cd 40                	int    $0x40
+ 37c:	c3                   	ret    
+
+0000037d <wait>:
+SYSCALL(wait)
+ 37d:	b8 03 00 00 00       	mov    $0x3,%eax
+ 382:	cd 40                	int    $0x40
+ 384:	c3                   	ret    
+
+00000385 <pipe>:
+SYSCALL(pipe)
+ 385:	b8 04 00 00 00       	mov    $0x4,%eax
+ 38a:	cd 40                	int    $0x40
+ 38c:	c3                   	ret    
+
+0000038d <read>:
+SYSCALL(read)
+ 38d:	b8 05 00 00 00       	mov    $0x5,%eax
+ 392:	cd 40                	int    $0x40
+ 394:	c3                   	ret    
+
+00000395 <write>:
+SYSCALL(write)
+ 395:	b8 10 00 00 00       	mov    $0x10,%eax
+ 39a:	cd 40                	int    $0x40
+ 39c:	c3                   	ret    
+
+0000039d <close>:
+SYSCALL(close)
+ 39d:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3a2:	cd 40                	int    $0x40
+ 3a4:	c3                   	ret    
+
+000003a5 <kill>:
+SYSCALL(kill)
+ 3a5:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3aa:	cd 40                	int    $0x40
+ 3ac:	c3                   	ret    
+
+000003ad <exec>:
+SYSCALL(exec)
+ 3ad:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3b2:	cd 40                	int    $0x40
+ 3b4:	c3                   	ret    
+
+000003b5 <open>:
+SYSCALL(open)
+ 3b5:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3ba:	cd 40                	int    $0x40
+ 3bc:	c3                   	ret    
+
+000003bd <mknod>:
+SYSCALL(mknod)
+ 3bd:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3c2:	cd 40                	int    $0x40
+ 3c4:	c3                   	ret    
+
+000003c5 <unlink>:
+SYSCALL(unlink)
+ 3c5:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3ca:	cd 40                	int    $0x40
+ 3cc:	c3                   	ret    
+
+000003cd <fstat>:
+SYSCALL(fstat)
+ 3cd:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3d2:	cd 40                	int    $0x40
+ 3d4:	c3                   	ret    
+
+000003d5 <link>:
+SYSCALL(link)
+ 3d5:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3da:	cd 40                	int    $0x40
+ 3dc:	c3                   	ret    
+
+000003dd <mkdir>:
+SYSCALL(mkdir)
+ 3dd:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3e2:	cd 40                	int    $0x40
+ 3e4:	c3                   	ret    
+
+000003e5 <chdir>:
+SYSCALL(chdir)
+ 3e5:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3ea:	cd 40                	int    $0x40
+ 3ec:	c3                   	ret    
+
+000003ed <dup>:
+SYSCALL(dup)
+ 3ed:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3f2:	cd 40                	int    $0x40
+ 3f4:	c3                   	ret    
+
+000003f5 <getpid>:
+SYSCALL(getpid)
+ 3f5:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3fa:	cd 40                	int    $0x40
+ 3fc:	c3                   	ret    
+
+000003fd <sbrk>:
+SYSCALL(sbrk)
+ 3fd:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 402:	cd 40                	int    $0x40
+ 404:	c3                   	ret    
+
+00000405 <sleep>:
+SYSCALL(sleep)
+ 405:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 40a:	cd 40                	int    $0x40
+ 40c:	c3                   	ret    
+
+0000040d <uptime>:
+SYSCALL(uptime)
+ 40d:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 412:	cd 40                	int    $0x40
+ 414:	c3                   	ret    
+
+00000415 <procstat>:
+SYSCALL(procstat) 
+ 415:	b8 16 00 00 00       	mov    $0x16,%eax
+ 41a:	cd 40                	int    $0x40
+ 41c:	c3                   	ret    
Los archivos binarios xv6-unrc/._fs.c y xv6-mod/._fs.c son distintos
diff -rupN xv6-unrc/fs.d xv6-mod/fs.d
--- xv6-unrc/fs.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/fs.d	2018-04-04 14:53:59.587509827 -0300
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h buf.h fs.h file.h
Los archivos binarios xv6-unrc/._fs.h y xv6-mod/._fs.h son distintos
Los archivos binarios xv6-unrc/fs.img y xv6-mod/fs.img son distintos
Los archivos binarios xv6-unrc/fs.o y xv6-mod/fs.o son distintos
Los archivos binarios xv6-unrc/._gdbutil y xv6-mod/._gdbutil son distintos
Los archivos binarios xv6-unrc/_grep y xv6-mod/_grep son distintos
diff -rupN xv6-unrc/grep.asm xv6-mod/grep.asm
--- xv6-unrc/grep.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/grep.asm	2018-04-04 14:53:52.807441825 -0300
@@ -0,0 +1,1553 @@
+
+_grep:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <grep>:
+char buf[1024];
+int match(char*, char*);
+
+void
+grep(char *pattern, int fd)
+{
+   0:	55                   	push   %ebp
+   1:	89 e5                	mov    %esp,%ebp
+   3:	83 ec 18             	sub    $0x18,%esp
+  int n, m;
+  char *p, *q;
+  
+  m = 0;
+   6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
+   d:	e9 ab 00 00 00       	jmp    bd <grep+0xbd>
+    m += n;
+  12:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  15:	01 45 f4             	add    %eax,-0xc(%ebp)
+    p = buf;
+  18:	c7 45 f0 00 0e 00 00 	movl   $0xe00,-0x10(%ebp)
+    while((q = strchr(p, '\n')) != 0){
+  1f:	eb 4a                	jmp    6b <grep+0x6b>
+      *q = 0;
+  21:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  24:	c6 00 00             	movb   $0x0,(%eax)
+      if(match(pattern, p)){
+  27:	83 ec 08             	sub    $0x8,%esp
+  2a:	ff 75 f0             	pushl  -0x10(%ebp)
+  2d:	ff 75 08             	pushl  0x8(%ebp)
+  30:	e8 9a 01 00 00       	call   1cf <match>
+  35:	83 c4 10             	add    $0x10,%esp
+  38:	85 c0                	test   %eax,%eax
+  3a:	74 26                	je     62 <grep+0x62>
+        *q = '\n';
+  3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  3f:	c6 00 0a             	movb   $0xa,(%eax)
+        write(1, p, q+1 - p);
+  42:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  45:	83 c0 01             	add    $0x1,%eax
+  48:	89 c2                	mov    %eax,%edx
+  4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  4d:	29 c2                	sub    %eax,%edx
+  4f:	89 d0                	mov    %edx,%eax
+  51:	83 ec 04             	sub    $0x4,%esp
+  54:	50                   	push   %eax
+  55:	ff 75 f0             	pushl  -0x10(%ebp)
+  58:	6a 01                	push   $0x1
+  5a:	e8 43 05 00 00       	call   5a2 <write>
+  5f:	83 c4 10             	add    $0x10,%esp
+      }
+      p = q+1;
+  62:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  65:	83 c0 01             	add    $0x1,%eax
+  68:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  
+  m = 0;
+  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
+    m += n;
+    p = buf;
+    while((q = strchr(p, '\n')) != 0){
+  6b:	83 ec 08             	sub    $0x8,%esp
+  6e:	6a 0a                	push   $0xa
+  70:	ff 75 f0             	pushl  -0x10(%ebp)
+  73:	e8 89 03 00 00       	call   401 <strchr>
+  78:	83 c4 10             	add    $0x10,%esp
+  7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  7e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  82:	75 9d                	jne    21 <grep+0x21>
+        *q = '\n';
+        write(1, p, q+1 - p);
+      }
+      p = q+1;
+    }
+    if(p == buf)
+  84:	81 7d f0 00 0e 00 00 	cmpl   $0xe00,-0x10(%ebp)
+  8b:	75 07                	jne    94 <grep+0x94>
+      m = 0;
+  8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if(m > 0){
+  94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  98:	7e 23                	jle    bd <grep+0xbd>
+      m -= p - buf;
+  9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  9d:	ba 00 0e 00 00       	mov    $0xe00,%edx
+  a2:	29 d0                	sub    %edx,%eax
+  a4:	29 45 f4             	sub    %eax,-0xc(%ebp)
+      memmove(buf, p, m);
+  a7:	83 ec 04             	sub    $0x4,%esp
+  aa:	ff 75 f4             	pushl  -0xc(%ebp)
+  ad:	ff 75 f0             	pushl  -0x10(%ebp)
+  b0:	68 00 0e 00 00       	push   $0xe00
+  b5:	e8 83 04 00 00       	call   53d <memmove>
+  ba:	83 c4 10             	add    $0x10,%esp
+{
+  int n, m;
+  char *p, *q;
+  
+  m = 0;
+  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
+  bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  c0:	ba 00 04 00 00       	mov    $0x400,%edx
+  c5:	29 c2                	sub    %eax,%edx
+  c7:	89 d0                	mov    %edx,%eax
+  c9:	89 c2                	mov    %eax,%edx
+  cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  ce:	05 00 0e 00 00       	add    $0xe00,%eax
+  d3:	83 ec 04             	sub    $0x4,%esp
+  d6:	52                   	push   %edx
+  d7:	50                   	push   %eax
+  d8:	ff 75 0c             	pushl  0xc(%ebp)
+  db:	e8 ba 04 00 00       	call   59a <read>
+  e0:	83 c4 10             	add    $0x10,%esp
+  e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+  ea:	0f 8f 22 ff ff ff    	jg     12 <grep+0x12>
+    if(m > 0){
+      m -= p - buf;
+      memmove(buf, p, m);
+    }
+  }
+}
+  f0:	90                   	nop
+  f1:	c9                   	leave  
+  f2:	c3                   	ret    
+
+000000f3 <main>:
+
+int
+main(int argc, char *argv[])
+{
+  f3:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  f7:	83 e4 f0             	and    $0xfffffff0,%esp
+  fa:	ff 71 fc             	pushl  -0x4(%ecx)
+  fd:	55                   	push   %ebp
+  fe:	89 e5                	mov    %esp,%ebp
+ 100:	53                   	push   %ebx
+ 101:	51                   	push   %ecx
+ 102:	83 ec 10             	sub    $0x10,%esp
+ 105:	89 cb                	mov    %ecx,%ebx
+  int fd, i;
+  char *pattern;
+  
+  if(argc <= 1){
+ 107:	83 3b 01             	cmpl   $0x1,(%ebx)
+ 10a:	7f 17                	jg     123 <main+0x30>
+    printf(2, "usage: grep pattern [file ...]\n");
+ 10c:	83 ec 08             	sub    $0x8,%esp
+ 10f:	68 b8 0a 00 00       	push   $0xab8
+ 114:	6a 02                	push   $0x2
+ 116:	e8 e6 05 00 00       	call   701 <printf>
+ 11b:	83 c4 10             	add    $0x10,%esp
+    exit();
+ 11e:	e8 5f 04 00 00       	call   582 <exit>
+  }
+  pattern = argv[1];
+ 123:	8b 43 04             	mov    0x4(%ebx),%eax
+ 126:	8b 40 04             	mov    0x4(%eax),%eax
+ 129:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  
+  if(argc <= 2){
+ 12c:	83 3b 02             	cmpl   $0x2,(%ebx)
+ 12f:	7f 15                	jg     146 <main+0x53>
+    grep(pattern, 0);
+ 131:	83 ec 08             	sub    $0x8,%esp
+ 134:	6a 00                	push   $0x0
+ 136:	ff 75 f0             	pushl  -0x10(%ebp)
+ 139:	e8 c2 fe ff ff       	call   0 <grep>
+ 13e:	83 c4 10             	add    $0x10,%esp
+    exit();
+ 141:	e8 3c 04 00 00       	call   582 <exit>
+  }
+
+  for(i = 2; i < argc; i++){
+ 146:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
+ 14d:	eb 74                	jmp    1c3 <main+0xd0>
+    if((fd = open(argv[i], 0)) < 0){
+ 14f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 152:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+ 159:	8b 43 04             	mov    0x4(%ebx),%eax
+ 15c:	01 d0                	add    %edx,%eax
+ 15e:	8b 00                	mov    (%eax),%eax
+ 160:	83 ec 08             	sub    $0x8,%esp
+ 163:	6a 00                	push   $0x0
+ 165:	50                   	push   %eax
+ 166:	e8 57 04 00 00       	call   5c2 <open>
+ 16b:	83 c4 10             	add    $0x10,%esp
+ 16e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 171:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 175:	79 29                	jns    1a0 <main+0xad>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+ 177:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 17a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+ 181:	8b 43 04             	mov    0x4(%ebx),%eax
+ 184:	01 d0                	add    %edx,%eax
+ 186:	8b 00                	mov    (%eax),%eax
+ 188:	83 ec 04             	sub    $0x4,%esp
+ 18b:	50                   	push   %eax
+ 18c:	68 d8 0a 00 00       	push   $0xad8
+ 191:	6a 01                	push   $0x1
+ 193:	e8 69 05 00 00       	call   701 <printf>
+ 198:	83 c4 10             	add    $0x10,%esp
+      exit();
+ 19b:	e8 e2 03 00 00       	call   582 <exit>
+    }
+    grep(pattern, fd);
+ 1a0:	83 ec 08             	sub    $0x8,%esp
+ 1a3:	ff 75 ec             	pushl  -0x14(%ebp)
+ 1a6:	ff 75 f0             	pushl  -0x10(%ebp)
+ 1a9:	e8 52 fe ff ff       	call   0 <grep>
+ 1ae:	83 c4 10             	add    $0x10,%esp
+    close(fd);
+ 1b1:	83 ec 0c             	sub    $0xc,%esp
+ 1b4:	ff 75 ec             	pushl  -0x14(%ebp)
+ 1b7:	e8 ee 03 00 00       	call   5aa <close>
+ 1bc:	83 c4 10             	add    $0x10,%esp
+  if(argc <= 2){
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+ 1bf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+ 1c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1c6:	3b 03                	cmp    (%ebx),%eax
+ 1c8:	7c 85                	jl     14f <main+0x5c>
+      exit();
+    }
+    grep(pattern, fd);
+    close(fd);
+  }
+  exit();
+ 1ca:	e8 b3 03 00 00       	call   582 <exit>
+
+000001cf <match>:
+int matchhere(char*, char*);
+int matchstar(int, char*, char*);
+
+int
+match(char *re, char *text)
+{
+ 1cf:	55                   	push   %ebp
+ 1d0:	89 e5                	mov    %esp,%ebp
+ 1d2:	83 ec 08             	sub    $0x8,%esp
+  if(re[0] == '^')
+ 1d5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d8:	0f b6 00             	movzbl (%eax),%eax
+ 1db:	3c 5e                	cmp    $0x5e,%al
+ 1dd:	75 17                	jne    1f6 <match+0x27>
+    return matchhere(re+1, text);
+ 1df:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e2:	83 c0 01             	add    $0x1,%eax
+ 1e5:	83 ec 08             	sub    $0x8,%esp
+ 1e8:	ff 75 0c             	pushl  0xc(%ebp)
+ 1eb:	50                   	push   %eax
+ 1ec:	e8 38 00 00 00       	call   229 <matchhere>
+ 1f1:	83 c4 10             	add    $0x10,%esp
+ 1f4:	eb 31                	jmp    227 <match+0x58>
+  do{  // must look at empty string
+    if(matchhere(re, text))
+ 1f6:	83 ec 08             	sub    $0x8,%esp
+ 1f9:	ff 75 0c             	pushl  0xc(%ebp)
+ 1fc:	ff 75 08             	pushl  0x8(%ebp)
+ 1ff:	e8 25 00 00 00       	call   229 <matchhere>
+ 204:	83 c4 10             	add    $0x10,%esp
+ 207:	85 c0                	test   %eax,%eax
+ 209:	74 07                	je     212 <match+0x43>
+      return 1;
+ 20b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 210:	eb 15                	jmp    227 <match+0x58>
+  }while(*text++ != '\0');
+ 212:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 215:	8d 50 01             	lea    0x1(%eax),%edx
+ 218:	89 55 0c             	mov    %edx,0xc(%ebp)
+ 21b:	0f b6 00             	movzbl (%eax),%eax
+ 21e:	84 c0                	test   %al,%al
+ 220:	75 d4                	jne    1f6 <match+0x27>
+  return 0;
+ 222:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 227:	c9                   	leave  
+ 228:	c3                   	ret    
+
+00000229 <matchhere>:
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+ 229:	55                   	push   %ebp
+ 22a:	89 e5                	mov    %esp,%ebp
+ 22c:	83 ec 08             	sub    $0x8,%esp
+  if(re[0] == '\0')
+ 22f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 232:	0f b6 00             	movzbl (%eax),%eax
+ 235:	84 c0                	test   %al,%al
+ 237:	75 0a                	jne    243 <matchhere+0x1a>
+    return 1;
+ 239:	b8 01 00 00 00       	mov    $0x1,%eax
+ 23e:	e9 99 00 00 00       	jmp    2dc <matchhere+0xb3>
+  if(re[1] == '*')
+ 243:	8b 45 08             	mov    0x8(%ebp),%eax
+ 246:	83 c0 01             	add    $0x1,%eax
+ 249:	0f b6 00             	movzbl (%eax),%eax
+ 24c:	3c 2a                	cmp    $0x2a,%al
+ 24e:	75 21                	jne    271 <matchhere+0x48>
+    return matchstar(re[0], re+2, text);
+ 250:	8b 45 08             	mov    0x8(%ebp),%eax
+ 253:	8d 50 02             	lea    0x2(%eax),%edx
+ 256:	8b 45 08             	mov    0x8(%ebp),%eax
+ 259:	0f b6 00             	movzbl (%eax),%eax
+ 25c:	0f be c0             	movsbl %al,%eax
+ 25f:	83 ec 04             	sub    $0x4,%esp
+ 262:	ff 75 0c             	pushl  0xc(%ebp)
+ 265:	52                   	push   %edx
+ 266:	50                   	push   %eax
+ 267:	e8 72 00 00 00       	call   2de <matchstar>
+ 26c:	83 c4 10             	add    $0x10,%esp
+ 26f:	eb 6b                	jmp    2dc <matchhere+0xb3>
+  if(re[0] == '$' && re[1] == '\0')
+ 271:	8b 45 08             	mov    0x8(%ebp),%eax
+ 274:	0f b6 00             	movzbl (%eax),%eax
+ 277:	3c 24                	cmp    $0x24,%al
+ 279:	75 1d                	jne    298 <matchhere+0x6f>
+ 27b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27e:	83 c0 01             	add    $0x1,%eax
+ 281:	0f b6 00             	movzbl (%eax),%eax
+ 284:	84 c0                	test   %al,%al
+ 286:	75 10                	jne    298 <matchhere+0x6f>
+    return *text == '\0';
+ 288:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 28b:	0f b6 00             	movzbl (%eax),%eax
+ 28e:	84 c0                	test   %al,%al
+ 290:	0f 94 c0             	sete   %al
+ 293:	0f b6 c0             	movzbl %al,%eax
+ 296:	eb 44                	jmp    2dc <matchhere+0xb3>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 298:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 29b:	0f b6 00             	movzbl (%eax),%eax
+ 29e:	84 c0                	test   %al,%al
+ 2a0:	74 35                	je     2d7 <matchhere+0xae>
+ 2a2:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2a5:	0f b6 00             	movzbl (%eax),%eax
+ 2a8:	3c 2e                	cmp    $0x2e,%al
+ 2aa:	74 10                	je     2bc <matchhere+0x93>
+ 2ac:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2af:	0f b6 10             	movzbl (%eax),%edx
+ 2b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 2b5:	0f b6 00             	movzbl (%eax),%eax
+ 2b8:	38 c2                	cmp    %al,%dl
+ 2ba:	75 1b                	jne    2d7 <matchhere+0xae>
+    return matchhere(re+1, text+1);
+ 2bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 2bf:	8d 50 01             	lea    0x1(%eax),%edx
+ 2c2:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2c5:	83 c0 01             	add    $0x1,%eax
+ 2c8:	83 ec 08             	sub    $0x8,%esp
+ 2cb:	52                   	push   %edx
+ 2cc:	50                   	push   %eax
+ 2cd:	e8 57 ff ff ff       	call   229 <matchhere>
+ 2d2:	83 c4 10             	add    $0x10,%esp
+ 2d5:	eb 05                	jmp    2dc <matchhere+0xb3>
+  return 0;
+ 2d7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 2dc:	c9                   	leave  
+ 2dd:	c3                   	ret    
+
+000002de <matchstar>:
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+ 2de:	55                   	push   %ebp
+ 2df:	89 e5                	mov    %esp,%ebp
+ 2e1:	83 ec 08             	sub    $0x8,%esp
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+ 2e4:	83 ec 08             	sub    $0x8,%esp
+ 2e7:	ff 75 10             	pushl  0x10(%ebp)
+ 2ea:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ed:	e8 37 ff ff ff       	call   229 <matchhere>
+ 2f2:	83 c4 10             	add    $0x10,%esp
+ 2f5:	85 c0                	test   %eax,%eax
+ 2f7:	74 07                	je     300 <matchstar+0x22>
+      return 1;
+ 2f9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2fe:	eb 29                	jmp    329 <matchstar+0x4b>
+  }while(*text!='\0' && (*text++==c || c=='.'));
+ 300:	8b 45 10             	mov    0x10(%ebp),%eax
+ 303:	0f b6 00             	movzbl (%eax),%eax
+ 306:	84 c0                	test   %al,%al
+ 308:	74 1a                	je     324 <matchstar+0x46>
+ 30a:	8b 45 10             	mov    0x10(%ebp),%eax
+ 30d:	8d 50 01             	lea    0x1(%eax),%edx
+ 310:	89 55 10             	mov    %edx,0x10(%ebp)
+ 313:	0f b6 00             	movzbl (%eax),%eax
+ 316:	0f be c0             	movsbl %al,%eax
+ 319:	3b 45 08             	cmp    0x8(%ebp),%eax
+ 31c:	74 c6                	je     2e4 <matchstar+0x6>
+ 31e:	83 7d 08 2e          	cmpl   $0x2e,0x8(%ebp)
+ 322:	74 c0                	je     2e4 <matchstar+0x6>
+  return 0;
+ 324:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 329:	c9                   	leave  
+ 32a:	c3                   	ret    
+
+0000032b <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+ 32b:	55                   	push   %ebp
+ 32c:	89 e5                	mov    %esp,%ebp
+ 32e:	57                   	push   %edi
+ 32f:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+ 330:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 333:	8b 55 10             	mov    0x10(%ebp),%edx
+ 336:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 339:	89 cb                	mov    %ecx,%ebx
+ 33b:	89 df                	mov    %ebx,%edi
+ 33d:	89 d1                	mov    %edx,%ecx
+ 33f:	fc                   	cld    
+ 340:	f3 aa                	rep stos %al,%es:(%edi)
+ 342:	89 ca                	mov    %ecx,%edx
+ 344:	89 fb                	mov    %edi,%ebx
+ 346:	89 5d 08             	mov    %ebx,0x8(%ebp)
+ 349:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+ 34c:	90                   	nop
+ 34d:	5b                   	pop    %ebx
+ 34e:	5f                   	pop    %edi
+ 34f:	5d                   	pop    %ebp
+ 350:	c3                   	ret    
+
+00000351 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+ 351:	55                   	push   %ebp
+ 352:	89 e5                	mov    %esp,%ebp
+ 354:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+ 357:	8b 45 08             	mov    0x8(%ebp),%eax
+ 35a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+ 35d:	90                   	nop
+ 35e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 361:	8d 50 01             	lea    0x1(%eax),%edx
+ 364:	89 55 08             	mov    %edx,0x8(%ebp)
+ 367:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 36a:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 36d:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+ 370:	0f b6 12             	movzbl (%edx),%edx
+ 373:	88 10                	mov    %dl,(%eax)
+ 375:	0f b6 00             	movzbl (%eax),%eax
+ 378:	84 c0                	test   %al,%al
+ 37a:	75 e2                	jne    35e <strcpy+0xd>
+    ;
+  return os;
+ 37c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 37f:	c9                   	leave  
+ 380:	c3                   	ret    
+
+00000381 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 381:	55                   	push   %ebp
+ 382:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+ 384:	eb 08                	jmp    38e <strcmp+0xd>
+    p++, q++;
+ 386:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 38a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 38e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 391:	0f b6 00             	movzbl (%eax),%eax
+ 394:	84 c0                	test   %al,%al
+ 396:	74 10                	je     3a8 <strcmp+0x27>
+ 398:	8b 45 08             	mov    0x8(%ebp),%eax
+ 39b:	0f b6 10             	movzbl (%eax),%edx
+ 39e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3a1:	0f b6 00             	movzbl (%eax),%eax
+ 3a4:	38 c2                	cmp    %al,%dl
+ 3a6:	74 de                	je     386 <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 3a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3ab:	0f b6 00             	movzbl (%eax),%eax
+ 3ae:	0f b6 d0             	movzbl %al,%edx
+ 3b1:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3b4:	0f b6 00             	movzbl (%eax),%eax
+ 3b7:	0f b6 c0             	movzbl %al,%eax
+ 3ba:	29 c2                	sub    %eax,%edx
+ 3bc:	89 d0                	mov    %edx,%eax
+}
+ 3be:	5d                   	pop    %ebp
+ 3bf:	c3                   	ret    
+
+000003c0 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 3cd:	eb 04                	jmp    3d3 <strlen+0x13>
+ 3cf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 3d3:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 3d6:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3d9:	01 d0                	add    %edx,%eax
+ 3db:	0f b6 00             	movzbl (%eax),%eax
+ 3de:	84 c0                	test   %al,%al
+ 3e0:	75 ed                	jne    3cf <strlen+0xf>
+    ;
+  return n;
+ 3e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 3e5:	c9                   	leave  
+ 3e6:	c3                   	ret    
+
+000003e7 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3e7:	55                   	push   %ebp
+ 3e8:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 3ea:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3ed:	50                   	push   %eax
+ 3ee:	ff 75 0c             	pushl  0xc(%ebp)
+ 3f1:	ff 75 08             	pushl  0x8(%ebp)
+ 3f4:	e8 32 ff ff ff       	call   32b <stosb>
+ 3f9:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 3fc:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 3ff:	c9                   	leave  
+ 400:	c3                   	ret    
+
+00000401 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 401:	55                   	push   %ebp
+ 402:	89 e5                	mov    %esp,%ebp
+ 404:	83 ec 04             	sub    $0x4,%esp
+ 407:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 40a:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 40d:	eb 14                	jmp    423 <strchr+0x22>
+    if(*s == c)
+ 40f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 412:	0f b6 00             	movzbl (%eax),%eax
+ 415:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 418:	75 05                	jne    41f <strchr+0x1e>
+      return (char*)s;
+ 41a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 41d:	eb 13                	jmp    432 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 41f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 423:	8b 45 08             	mov    0x8(%ebp),%eax
+ 426:	0f b6 00             	movzbl (%eax),%eax
+ 429:	84 c0                	test   %al,%al
+ 42b:	75 e2                	jne    40f <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 42d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 432:	c9                   	leave  
+ 433:	c3                   	ret    
+
+00000434 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 434:	55                   	push   %ebp
+ 435:	89 e5                	mov    %esp,%ebp
+ 437:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 43a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 441:	eb 42                	jmp    485 <gets+0x51>
+    cc = read(0, &c, 1);
+ 443:	83 ec 04             	sub    $0x4,%esp
+ 446:	6a 01                	push   $0x1
+ 448:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 44b:	50                   	push   %eax
+ 44c:	6a 00                	push   $0x0
+ 44e:	e8 47 01 00 00       	call   59a <read>
+ 453:	83 c4 10             	add    $0x10,%esp
+ 456:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 459:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 45d:	7e 33                	jle    492 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 45f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 462:	8d 50 01             	lea    0x1(%eax),%edx
+ 465:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 468:	89 c2                	mov    %eax,%edx
+ 46a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 46d:	01 c2                	add    %eax,%edx
+ 46f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 473:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 475:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 479:	3c 0a                	cmp    $0xa,%al
+ 47b:	74 16                	je     493 <gets+0x5f>
+ 47d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 481:	3c 0d                	cmp    $0xd,%al
+ 483:	74 0e                	je     493 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 485:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 488:	83 c0 01             	add    $0x1,%eax
+ 48b:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 48e:	7c b3                	jl     443 <gets+0xf>
+ 490:	eb 01                	jmp    493 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 492:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 493:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 496:	8b 45 08             	mov    0x8(%ebp),%eax
+ 499:	01 d0                	add    %edx,%eax
+ 49b:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 49e:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 4a1:	c9                   	leave  
+ 4a2:	c3                   	ret    
+
+000004a3 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 4a3:	55                   	push   %ebp
+ 4a4:	89 e5                	mov    %esp,%ebp
+ 4a6:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4a9:	83 ec 08             	sub    $0x8,%esp
+ 4ac:	6a 00                	push   $0x0
+ 4ae:	ff 75 08             	pushl  0x8(%ebp)
+ 4b1:	e8 0c 01 00 00       	call   5c2 <open>
+ 4b6:	83 c4 10             	add    $0x10,%esp
+ 4b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 4bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 4c0:	79 07                	jns    4c9 <stat+0x26>
+    return -1;
+ 4c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 4c7:	eb 25                	jmp    4ee <stat+0x4b>
+  r = fstat(fd, st);
+ 4c9:	83 ec 08             	sub    $0x8,%esp
+ 4cc:	ff 75 0c             	pushl  0xc(%ebp)
+ 4cf:	ff 75 f4             	pushl  -0xc(%ebp)
+ 4d2:	e8 03 01 00 00       	call   5da <fstat>
+ 4d7:	83 c4 10             	add    $0x10,%esp
+ 4da:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 4dd:	83 ec 0c             	sub    $0xc,%esp
+ 4e0:	ff 75 f4             	pushl  -0xc(%ebp)
+ 4e3:	e8 c2 00 00 00       	call   5aa <close>
+ 4e8:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 4eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 4ee:	c9                   	leave  
+ 4ef:	c3                   	ret    
+
+000004f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 4f0:	55                   	push   %ebp
+ 4f1:	89 e5                	mov    %esp,%ebp
+ 4f3:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 4f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 4fd:	eb 25                	jmp    524 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 4ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 502:	89 d0                	mov    %edx,%eax
+ 504:	c1 e0 02             	shl    $0x2,%eax
+ 507:	01 d0                	add    %edx,%eax
+ 509:	01 c0                	add    %eax,%eax
+ 50b:	89 c1                	mov    %eax,%ecx
+ 50d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 510:	8d 50 01             	lea    0x1(%eax),%edx
+ 513:	89 55 08             	mov    %edx,0x8(%ebp)
+ 516:	0f b6 00             	movzbl (%eax),%eax
+ 519:	0f be c0             	movsbl %al,%eax
+ 51c:	01 c8                	add    %ecx,%eax
+ 51e:	83 e8 30             	sub    $0x30,%eax
+ 521:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 524:	8b 45 08             	mov    0x8(%ebp),%eax
+ 527:	0f b6 00             	movzbl (%eax),%eax
+ 52a:	3c 2f                	cmp    $0x2f,%al
+ 52c:	7e 0a                	jle    538 <atoi+0x48>
+ 52e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 531:	0f b6 00             	movzbl (%eax),%eax
+ 534:	3c 39                	cmp    $0x39,%al
+ 536:	7e c7                	jle    4ff <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 538:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 53b:	c9                   	leave  
+ 53c:	c3                   	ret    
+
+0000053d <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 53d:	55                   	push   %ebp
+ 53e:	89 e5                	mov    %esp,%ebp
+ 540:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 543:	8b 45 08             	mov    0x8(%ebp),%eax
+ 546:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 549:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 54c:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 54f:	eb 17                	jmp    568 <memmove+0x2b>
+    *dst++ = *src++;
+ 551:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 554:	8d 50 01             	lea    0x1(%eax),%edx
+ 557:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 55a:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 55d:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 560:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 563:	0f b6 12             	movzbl (%edx),%edx
+ 566:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 568:	8b 45 10             	mov    0x10(%ebp),%eax
+ 56b:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 56e:	89 55 10             	mov    %edx,0x10(%ebp)
+ 571:	85 c0                	test   %eax,%eax
+ 573:	7f dc                	jg     551 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 575:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 578:	c9                   	leave  
+ 579:	c3                   	ret    
+
+0000057a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 57a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <exit>:
+SYSCALL(exit)
+ 582:	b8 02 00 00 00       	mov    $0x2,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <wait>:
+SYSCALL(wait)
+ 58a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+
+00000592 <pipe>:
+SYSCALL(pipe)
+ 592:	b8 04 00 00 00       	mov    $0x4,%eax
+ 597:	cd 40                	int    $0x40
+ 599:	c3                   	ret    
+
+0000059a <read>:
+SYSCALL(read)
+ 59a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 59f:	cd 40                	int    $0x40
+ 5a1:	c3                   	ret    
+
+000005a2 <write>:
+SYSCALL(write)
+ 5a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5a7:	cd 40                	int    $0x40
+ 5a9:	c3                   	ret    
+
+000005aa <close>:
+SYSCALL(close)
+ 5aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5af:	cd 40                	int    $0x40
+ 5b1:	c3                   	ret    
+
+000005b2 <kill>:
+SYSCALL(kill)
+ 5b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5b7:	cd 40                	int    $0x40
+ 5b9:	c3                   	ret    
+
+000005ba <exec>:
+SYSCALL(exec)
+ 5ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5bf:	cd 40                	int    $0x40
+ 5c1:	c3                   	ret    
+
+000005c2 <open>:
+SYSCALL(open)
+ 5c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5c7:	cd 40                	int    $0x40
+ 5c9:	c3                   	ret    
+
+000005ca <mknod>:
+SYSCALL(mknod)
+ 5ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5cf:	cd 40                	int    $0x40
+ 5d1:	c3                   	ret    
+
+000005d2 <unlink>:
+SYSCALL(unlink)
+ 5d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5d7:	cd 40                	int    $0x40
+ 5d9:	c3                   	ret    
+
+000005da <fstat>:
+SYSCALL(fstat)
+ 5da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5df:	cd 40                	int    $0x40
+ 5e1:	c3                   	ret    
+
+000005e2 <link>:
+SYSCALL(link)
+ 5e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5e7:	cd 40                	int    $0x40
+ 5e9:	c3                   	ret    
+
+000005ea <mkdir>:
+SYSCALL(mkdir)
+ 5ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5ef:	cd 40                	int    $0x40
+ 5f1:	c3                   	ret    
+
+000005f2 <chdir>:
+SYSCALL(chdir)
+ 5f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5f7:	cd 40                	int    $0x40
+ 5f9:	c3                   	ret    
+
+000005fa <dup>:
+SYSCALL(dup)
+ 5fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5ff:	cd 40                	int    $0x40
+ 601:	c3                   	ret    
+
+00000602 <getpid>:
+SYSCALL(getpid)
+ 602:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 607:	cd 40                	int    $0x40
+ 609:	c3                   	ret    
+
+0000060a <sbrk>:
+SYSCALL(sbrk)
+ 60a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 60f:	cd 40                	int    $0x40
+ 611:	c3                   	ret    
+
+00000612 <sleep>:
+SYSCALL(sleep)
+ 612:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 617:	cd 40                	int    $0x40
+ 619:	c3                   	ret    
+
+0000061a <uptime>:
+SYSCALL(uptime)
+ 61a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 61f:	cd 40                	int    $0x40
+ 621:	c3                   	ret    
+
+00000622 <procstat>:
+SYSCALL(procstat) 
+ 622:	b8 16 00 00 00       	mov    $0x16,%eax
+ 627:	cd 40                	int    $0x40
+ 629:	c3                   	ret    
+
+0000062a <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 62a:	55                   	push   %ebp
+ 62b:	89 e5                	mov    %esp,%ebp
+ 62d:	83 ec 18             	sub    $0x18,%esp
+ 630:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 633:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 636:	83 ec 04             	sub    $0x4,%esp
+ 639:	6a 01                	push   $0x1
+ 63b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 63e:	50                   	push   %eax
+ 63f:	ff 75 08             	pushl  0x8(%ebp)
+ 642:	e8 5b ff ff ff       	call   5a2 <write>
+ 647:	83 c4 10             	add    $0x10,%esp
+}
+ 64a:	90                   	nop
+ 64b:	c9                   	leave  
+ 64c:	c3                   	ret    
+
+0000064d <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 64d:	55                   	push   %ebp
+ 64e:	89 e5                	mov    %esp,%ebp
+ 650:	53                   	push   %ebx
+ 651:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 654:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 65b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 65f:	74 17                	je     678 <printint+0x2b>
+ 661:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 665:	79 11                	jns    678 <printint+0x2b>
+    neg = 1;
+ 667:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 66e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 671:	f7 d8                	neg    %eax
+ 673:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 676:	eb 06                	jmp    67e <printint+0x31>
+  } else {
+    x = xx;
+ 678:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 67b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 67e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 685:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 688:	8d 41 01             	lea    0x1(%ecx),%eax
+ 68b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 68e:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 691:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 694:	ba 00 00 00 00       	mov    $0x0,%edx
+ 699:	f7 f3                	div    %ebx
+ 69b:	89 d0                	mov    %edx,%eax
+ 69d:	0f b6 80 c4 0d 00 00 	movzbl 0xdc4(%eax),%eax
+ 6a4:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 6a8:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 6ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 6ae:	ba 00 00 00 00       	mov    $0x0,%edx
+ 6b3:	f7 f3                	div    %ebx
+ 6b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 6b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 6bc:	75 c7                	jne    685 <printint+0x38>
+  if(neg)
+ 6be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 6c2:	74 2d                	je     6f1 <printint+0xa4>
+    buf[i++] = '-';
+ 6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 6c7:	8d 50 01             	lea    0x1(%eax),%edx
+ 6ca:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 6cd:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 6d2:	eb 1d                	jmp    6f1 <printint+0xa4>
+    putc(fd, buf[i]);
+ 6d4:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 6d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 6da:	01 d0                	add    %edx,%eax
+ 6dc:	0f b6 00             	movzbl (%eax),%eax
+ 6df:	0f be c0             	movsbl %al,%eax
+ 6e2:	83 ec 08             	sub    $0x8,%esp
+ 6e5:	50                   	push   %eax
+ 6e6:	ff 75 08             	pushl  0x8(%ebp)
+ 6e9:	e8 3c ff ff ff       	call   62a <putc>
+ 6ee:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 6f1:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 6f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 6f9:	79 d9                	jns    6d4 <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 6fb:	90                   	nop
+ 6fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 6ff:	c9                   	leave  
+ 700:	c3                   	ret    
+
+00000701 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 701:	55                   	push   %ebp
+ 702:	89 e5                	mov    %esp,%ebp
+ 704:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 70e:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 711:	83 c0 04             	add    $0x4,%eax
+ 714:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 717:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 71e:	e9 59 01 00 00       	jmp    87c <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 723:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 726:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 729:	01 d0                	add    %edx,%eax
+ 72b:	0f b6 00             	movzbl (%eax),%eax
+ 72e:	0f be c0             	movsbl %al,%eax
+ 731:	25 ff 00 00 00       	and    $0xff,%eax
+ 736:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 739:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 73d:	75 2c                	jne    76b <printf+0x6a>
+      if(c == '%'){
+ 73f:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 743:	75 0c                	jne    751 <printf+0x50>
+        state = '%';
+ 745:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 74c:	e9 27 01 00 00       	jmp    878 <printf+0x177>
+      } else {
+        putc(fd, c);
+ 751:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 754:	0f be c0             	movsbl %al,%eax
+ 757:	83 ec 08             	sub    $0x8,%esp
+ 75a:	50                   	push   %eax
+ 75b:	ff 75 08             	pushl  0x8(%ebp)
+ 75e:	e8 c7 fe ff ff       	call   62a <putc>
+ 763:	83 c4 10             	add    $0x10,%esp
+ 766:	e9 0d 01 00 00       	jmp    878 <printf+0x177>
+      }
+    } else if(state == '%'){
+ 76b:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 76f:	0f 85 03 01 00 00    	jne    878 <printf+0x177>
+      if(c == 'd'){
+ 775:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 779:	75 1e                	jne    799 <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 77b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 77e:	8b 00                	mov    (%eax),%eax
+ 780:	6a 01                	push   $0x1
+ 782:	6a 0a                	push   $0xa
+ 784:	50                   	push   %eax
+ 785:	ff 75 08             	pushl  0x8(%ebp)
+ 788:	e8 c0 fe ff ff       	call   64d <printint>
+ 78d:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 790:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 794:	e9 d8 00 00 00       	jmp    871 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 799:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 79d:	74 06                	je     7a5 <printf+0xa4>
+ 79f:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 7a3:	75 1e                	jne    7c3 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 7a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 7a8:	8b 00                	mov    (%eax),%eax
+ 7aa:	6a 00                	push   $0x0
+ 7ac:	6a 10                	push   $0x10
+ 7ae:	50                   	push   %eax
+ 7af:	ff 75 08             	pushl  0x8(%ebp)
+ 7b2:	e8 96 fe ff ff       	call   64d <printint>
+ 7b7:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 7ba:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 7be:	e9 ae 00 00 00       	jmp    871 <printf+0x170>
+      } else if(c == 's'){
+ 7c3:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 7c7:	75 43                	jne    80c <printf+0x10b>
+        s = (char*)*ap;
+ 7c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 7cc:	8b 00                	mov    (%eax),%eax
+ 7ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 7d1:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 7d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 7d9:	75 25                	jne    800 <printf+0xff>
+          s = "(null)";
+ 7db:	c7 45 f4 ee 0a 00 00 	movl   $0xaee,-0xc(%ebp)
+        while(*s != 0){
+ 7e2:	eb 1c                	jmp    800 <printf+0xff>
+          putc(fd, *s);
+ 7e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7e7:	0f b6 00             	movzbl (%eax),%eax
+ 7ea:	0f be c0             	movsbl %al,%eax
+ 7ed:	83 ec 08             	sub    $0x8,%esp
+ 7f0:	50                   	push   %eax
+ 7f1:	ff 75 08             	pushl  0x8(%ebp)
+ 7f4:	e8 31 fe ff ff       	call   62a <putc>
+ 7f9:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 7fc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 800:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 803:	0f b6 00             	movzbl (%eax),%eax
+ 806:	84 c0                	test   %al,%al
+ 808:	75 da                	jne    7e4 <printf+0xe3>
+ 80a:	eb 65                	jmp    871 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 80c:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 810:	75 1d                	jne    82f <printf+0x12e>
+        putc(fd, *ap);
+ 812:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 815:	8b 00                	mov    (%eax),%eax
+ 817:	0f be c0             	movsbl %al,%eax
+ 81a:	83 ec 08             	sub    $0x8,%esp
+ 81d:	50                   	push   %eax
+ 81e:	ff 75 08             	pushl  0x8(%ebp)
+ 821:	e8 04 fe ff ff       	call   62a <putc>
+ 826:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 829:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 82d:	eb 42                	jmp    871 <printf+0x170>
+      } else if(c == '%'){
+ 82f:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 833:	75 17                	jne    84c <printf+0x14b>
+        putc(fd, c);
+ 835:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 838:	0f be c0             	movsbl %al,%eax
+ 83b:	83 ec 08             	sub    $0x8,%esp
+ 83e:	50                   	push   %eax
+ 83f:	ff 75 08             	pushl  0x8(%ebp)
+ 842:	e8 e3 fd ff ff       	call   62a <putc>
+ 847:	83 c4 10             	add    $0x10,%esp
+ 84a:	eb 25                	jmp    871 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 84c:	83 ec 08             	sub    $0x8,%esp
+ 84f:	6a 25                	push   $0x25
+ 851:	ff 75 08             	pushl  0x8(%ebp)
+ 854:	e8 d1 fd ff ff       	call   62a <putc>
+ 859:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 85c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 85f:	0f be c0             	movsbl %al,%eax
+ 862:	83 ec 08             	sub    $0x8,%esp
+ 865:	50                   	push   %eax
+ 866:	ff 75 08             	pushl  0x8(%ebp)
+ 869:	e8 bc fd ff ff       	call   62a <putc>
+ 86e:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 871:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 878:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 87c:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 87f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 882:	01 d0                	add    %edx,%eax
+ 884:	0f b6 00             	movzbl (%eax),%eax
+ 887:	84 c0                	test   %al,%al
+ 889:	0f 85 94 fe ff ff    	jne    723 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 88f:	90                   	nop
+ 890:	c9                   	leave  
+ 891:	c3                   	ret    
+
+00000892 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 892:	55                   	push   %ebp
+ 893:	89 e5                	mov    %esp,%ebp
+ 895:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 898:	8b 45 08             	mov    0x8(%ebp),%eax
+ 89b:	83 e8 08             	sub    $0x8,%eax
+ 89e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8a1:	a1 e8 0d 00 00       	mov    0xde8,%eax
+ 8a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 8a9:	eb 24                	jmp    8cf <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8ae:	8b 00                	mov    (%eax),%eax
+ 8b0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 8b3:	77 12                	ja     8c7 <free+0x35>
+ 8b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 8b8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 8bb:	77 24                	ja     8e1 <free+0x4f>
+ 8bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8c0:	8b 00                	mov    (%eax),%eax
+ 8c2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 8c5:	77 1a                	ja     8e1 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8ca:	8b 00                	mov    (%eax),%eax
+ 8cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 8cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 8d2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 8d5:	76 d4                	jbe    8ab <free+0x19>
+ 8d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8da:	8b 00                	mov    (%eax),%eax
+ 8dc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 8df:	76 ca                	jbe    8ab <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 8e4:	8b 40 04             	mov    0x4(%eax),%eax
+ 8e7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 8ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 8f1:	01 c2                	add    %eax,%edx
+ 8f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8f6:	8b 00                	mov    (%eax),%eax
+ 8f8:	39 c2                	cmp    %eax,%edx
+ 8fa:	75 24                	jne    920 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 8fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 8ff:	8b 50 04             	mov    0x4(%eax),%edx
+ 902:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 905:	8b 00                	mov    (%eax),%eax
+ 907:	8b 40 04             	mov    0x4(%eax),%eax
+ 90a:	01 c2                	add    %eax,%edx
+ 90c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 90f:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 912:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 915:	8b 00                	mov    (%eax),%eax
+ 917:	8b 10                	mov    (%eax),%edx
+ 919:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 91c:	89 10                	mov    %edx,(%eax)
+ 91e:	eb 0a                	jmp    92a <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 920:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 923:	8b 10                	mov    (%eax),%edx
+ 925:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 928:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 92a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 92d:	8b 40 04             	mov    0x4(%eax),%eax
+ 930:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 937:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 93a:	01 d0                	add    %edx,%eax
+ 93c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 93f:	75 20                	jne    961 <free+0xcf>
+    p->s.size += bp->s.size;
+ 941:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 944:	8b 50 04             	mov    0x4(%eax),%edx
+ 947:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 94a:	8b 40 04             	mov    0x4(%eax),%eax
+ 94d:	01 c2                	add    %eax,%edx
+ 94f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 952:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 955:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 958:	8b 10                	mov    (%eax),%edx
+ 95a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 95d:	89 10                	mov    %edx,(%eax)
+ 95f:	eb 08                	jmp    969 <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 961:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 964:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 967:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 969:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 96c:	a3 e8 0d 00 00       	mov    %eax,0xde8
+}
+ 971:	90                   	nop
+ 972:	c9                   	leave  
+ 973:	c3                   	ret    
+
+00000974 <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 97a:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 981:	77 07                	ja     98a <morecore+0x16>
+    nu = 4096;
+ 983:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 98a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 98d:	c1 e0 03             	shl    $0x3,%eax
+ 990:	83 ec 0c             	sub    $0xc,%esp
+ 993:	50                   	push   %eax
+ 994:	e8 71 fc ff ff       	call   60a <sbrk>
+ 999:	83 c4 10             	add    $0x10,%esp
+ 99c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 99f:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 9a3:	75 07                	jne    9ac <morecore+0x38>
+    return 0;
+ 9a5:	b8 00 00 00 00       	mov    $0x0,%eax
+ 9aa:	eb 26                	jmp    9d2 <morecore+0x5e>
+  hp = (Header*)p;
+ 9ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 9af:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 9b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 9b5:	8b 55 08             	mov    0x8(%ebp),%edx
+ 9b8:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 9be:	83 c0 08             	add    $0x8,%eax
+ 9c1:	83 ec 0c             	sub    $0xc,%esp
+ 9c4:	50                   	push   %eax
+ 9c5:	e8 c8 fe ff ff       	call   892 <free>
+ 9ca:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 9cd:	a1 e8 0d 00 00       	mov    0xde8,%eax
+}
+ 9d2:	c9                   	leave  
+ 9d3:	c3                   	ret    
+
+000009d4 <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 9d4:	55                   	push   %ebp
+ 9d5:	89 e5                	mov    %esp,%ebp
+ 9d7:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9da:	8b 45 08             	mov    0x8(%ebp),%eax
+ 9dd:	83 c0 07             	add    $0x7,%eax
+ 9e0:	c1 e8 03             	shr    $0x3,%eax
+ 9e3:	83 c0 01             	add    $0x1,%eax
+ 9e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 9e9:	a1 e8 0d 00 00       	mov    0xde8,%eax
+ 9ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 9f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 9f5:	75 23                	jne    a1a <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 9f7:	c7 45 f0 e0 0d 00 00 	movl   $0xde0,-0x10(%ebp)
+ 9fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ a01:	a3 e8 0d 00 00       	mov    %eax,0xde8
+ a06:	a1 e8 0d 00 00       	mov    0xde8,%eax
+ a0b:	a3 e0 0d 00 00       	mov    %eax,0xde0
+    base.s.size = 0;
+ a10:	c7 05 e4 0d 00 00 00 	movl   $0x0,0xde4
+ a17:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ a1d:	8b 00                	mov    (%eax),%eax
+ a1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ a22:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a25:	8b 40 04             	mov    0x4(%eax),%eax
+ a28:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ a2b:	72 4d                	jb     a7a <malloc+0xa6>
+      if(p->s.size == nunits)
+ a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a30:	8b 40 04             	mov    0x4(%eax),%eax
+ a33:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ a36:	75 0c                	jne    a44 <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a3b:	8b 10                	mov    (%eax),%edx
+ a3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ a40:	89 10                	mov    %edx,(%eax)
+ a42:	eb 26                	jmp    a6a <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a47:	8b 40 04             	mov    0x4(%eax),%eax
+ a4a:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ a4d:	89 c2                	mov    %eax,%edx
+ a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a52:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a58:	8b 40 04             	mov    0x4(%eax),%eax
+ a5b:	c1 e0 03             	shl    $0x3,%eax
+ a5e:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a64:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ a67:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ a6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ a6d:	a3 e8 0d 00 00       	mov    %eax,0xde8
+      return (void*)(p + 1);
+ a72:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a75:	83 c0 08             	add    $0x8,%eax
+ a78:	eb 3b                	jmp    ab5 <malloc+0xe1>
+    }
+    if(p == freep)
+ a7a:	a1 e8 0d 00 00       	mov    0xde8,%eax
+ a7f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ a82:	75 1e                	jne    aa2 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ a84:	83 ec 0c             	sub    $0xc,%esp
+ a87:	ff 75 ec             	pushl  -0x14(%ebp)
+ a8a:	e8 e5 fe ff ff       	call   974 <morecore>
+ a8f:	83 c4 10             	add    $0x10,%esp
+ a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ a95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ a99:	75 07                	jne    aa2 <malloc+0xce>
+        return 0;
+ a9b:	b8 00 00 00 00       	mov    $0x0,%eax
+ aa0:	eb 13                	jmp    ab5 <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ aa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ aab:	8b 00                	mov    (%eax),%eax
+ aad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ ab0:	e9 6d ff ff ff       	jmp    a22 <malloc+0x4e>
+}
+ ab5:	c9                   	leave  
+ ab6:	c3                   	ret    
diff -rupN xv6-unrc/grep.sym xv6-mod/grep.sym
--- xv6-unrc/grep.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/grep.sym	2018-04-04 14:53:52.827442025 -0300
@@ -0,0 +1,66 @@
+00000000 .text
+00000ab8 .rodata
+00000af8 .eh_frame
+00000dc4 .data
+00000de0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 grep.c
+00000000 ulib.c
+0000032b stosb
+00000000 printf.c
+0000062a putc
+0000064d printint
+00000dc4 digits.1109
+00000000 umalloc.c
+00000de0 base
+00000de8 freep
+00000974 morecore
+00000351 strcpy
+00000701 printf
+0000053d memmove
+00000229 matchhere
+000005ca mknod
+00000434 gets
+00000602 getpid
+00000000 grep
+000009d4 malloc
+00000622 procstat
+00000612 sleep
+00000592 pipe
+000005a2 write
+000005da fstat
+000005b2 kill
+000005f2 chdir
+000005ba exec
+0000058a wait
+0000059a read
+000005d2 unlink
+0000057a fork
+0000060a sbrk
+0000061a uptime
+00000dd5 __bss_start
+000003e7 memset
+000000f3 main
+000002de matchstar
+00000381 strcmp
+000005fa dup
+00000e00 buf
+000004a3 stat
+00000dd5 _edata
+00001200 _end
+000001cf match
+000005e2 link
+00000582 exit
+000004f0 atoi
+000003c0 strlen
+000005c2 open
+00000401 strchr
+000005ea mkdir
+000005aa close
+00000892 free
Los archivos binarios xv6-unrc/._ide.c y xv6-mod/._ide.c son distintos
diff -rupN xv6-unrc/ide.d xv6-mod/ide.d
--- xv6-unrc/ide.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/ide.d	2018-04-04 14:53:59.863512595 -0300
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h buf.h
Los archivos binarios xv6-unrc/ide.o y xv6-mod/ide.o son distintos
Los archivos binarios xv6-unrc/_init y xv6-mod/_init son distintos
diff -rupN xv6-unrc/init.asm xv6-mod/init.asm
--- xv6-unrc/init.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/init.asm	2018-04-04 14:53:53.099444753 -0300
@@ -0,0 +1,1258 @@
+
+_init:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 14             	sub    $0x14,%esp
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+  11:	83 ec 08             	sub    $0x8,%esp
+  14:	6a 02                	push   $0x2
+  16:	68 90 08 00 00       	push   $0x890
+  1b:	e8 78 03 00 00       	call   398 <open>
+  20:	83 c4 10             	add    $0x10,%esp
+  23:	85 c0                	test   %eax,%eax
+  25:	79 26                	jns    4d <main+0x4d>
+    mknod("console", 1, 1);
+  27:	83 ec 04             	sub    $0x4,%esp
+  2a:	6a 01                	push   $0x1
+  2c:	6a 01                	push   $0x1
+  2e:	68 90 08 00 00       	push   $0x890
+  33:	e8 68 03 00 00       	call   3a0 <mknod>
+  38:	83 c4 10             	add    $0x10,%esp
+    open("console", O_RDWR);
+  3b:	83 ec 08             	sub    $0x8,%esp
+  3e:	6a 02                	push   $0x2
+  40:	68 90 08 00 00       	push   $0x890
+  45:	e8 4e 03 00 00       	call   398 <open>
+  4a:	83 c4 10             	add    $0x10,%esp
+  }
+  dup(0);  // stdout
+  4d:	83 ec 0c             	sub    $0xc,%esp
+  50:	6a 00                	push   $0x0
+  52:	e8 79 03 00 00       	call   3d0 <dup>
+  57:	83 c4 10             	add    $0x10,%esp
+  dup(0);  // stderr
+  5a:	83 ec 0c             	sub    $0xc,%esp
+  5d:	6a 00                	push   $0x0
+  5f:	e8 6c 03 00 00       	call   3d0 <dup>
+  64:	83 c4 10             	add    $0x10,%esp
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  67:	83 ec 08             	sub    $0x8,%esp
+  6a:	68 98 08 00 00       	push   $0x898
+  6f:	6a 01                	push   $0x1
+  71:	e8 61 04 00 00       	call   4d7 <printf>
+  76:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  79:	e8 d2 02 00 00       	call   350 <fork>
+  7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(pid < 0){
+  81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  85:	79 17                	jns    9e <main+0x9e>
+      printf(1, "init: fork failed\n");
+  87:	83 ec 08             	sub    $0x8,%esp
+  8a:	68 ab 08 00 00       	push   $0x8ab
+  8f:	6a 01                	push   $0x1
+  91:	e8 41 04 00 00       	call   4d7 <printf>
+  96:	83 c4 10             	add    $0x10,%esp
+      exit();
+  99:	e8 ba 02 00 00       	call   358 <exit>
+    }
+    if(pid == 0){
+  9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  a2:	75 3e                	jne    e2 <main+0xe2>
+      exec("sh", argv);
+  a4:	83 ec 08             	sub    $0x8,%esp
+  a7:	68 2c 0b 00 00       	push   $0xb2c
+  ac:	68 8d 08 00 00       	push   $0x88d
+  b1:	e8 da 02 00 00       	call   390 <exec>
+  b6:	83 c4 10             	add    $0x10,%esp
+      printf(1, "init: exec sh failed\n");
+  b9:	83 ec 08             	sub    $0x8,%esp
+  bc:	68 be 08 00 00       	push   $0x8be
+  c1:	6a 01                	push   $0x1
+  c3:	e8 0f 04 00 00       	call   4d7 <printf>
+  c8:	83 c4 10             	add    $0x10,%esp
+      exit();
+  cb:	e8 88 02 00 00       	call   358 <exit>
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+      printf(1, "zombie!\n");
+  d0:	83 ec 08             	sub    $0x8,%esp
+  d3:	68 d4 08 00 00       	push   $0x8d4
+  d8:	6a 01                	push   $0x1
+  da:	e8 f8 03 00 00       	call   4d7 <printf>
+  df:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0){
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  e2:	e8 79 02 00 00       	call   360 <wait>
+  e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  ee:	0f 88 73 ff ff ff    	js     67 <main+0x67>
+  f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+  fa:	75 d4                	jne    d0 <main+0xd0>
+      printf(1, "zombie!\n");
+  }
+  fc:	e9 66 ff ff ff       	jmp    67 <main+0x67>
+
+00000101 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+ 101:	55                   	push   %ebp
+ 102:	89 e5                	mov    %esp,%ebp
+ 104:	57                   	push   %edi
+ 105:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+ 106:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 109:	8b 55 10             	mov    0x10(%ebp),%edx
+ 10c:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 10f:	89 cb                	mov    %ecx,%ebx
+ 111:	89 df                	mov    %ebx,%edi
+ 113:	89 d1                	mov    %edx,%ecx
+ 115:	fc                   	cld    
+ 116:	f3 aa                	rep stos %al,%es:(%edi)
+ 118:	89 ca                	mov    %ecx,%edx
+ 11a:	89 fb                	mov    %edi,%ebx
+ 11c:	89 5d 08             	mov    %ebx,0x8(%ebp)
+ 11f:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+ 122:	90                   	nop
+ 123:	5b                   	pop    %ebx
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+
+00000127 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+ 127:	55                   	push   %ebp
+ 128:	89 e5                	mov    %esp,%ebp
+ 12a:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+ 12d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 130:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+ 133:	90                   	nop
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8d 50 01             	lea    0x1(%eax),%edx
+ 13a:	89 55 08             	mov    %edx,0x8(%ebp)
+ 13d:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 140:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 143:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+ 146:	0f b6 12             	movzbl (%edx),%edx
+ 149:	88 10                	mov    %dl,(%eax)
+ 14b:	0f b6 00             	movzbl (%eax),%eax
+ 14e:	84 c0                	test   %al,%al
+ 150:	75 e2                	jne    134 <strcpy+0xd>
+    ;
+  return os;
+ 152:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 155:	c9                   	leave  
+ 156:	c3                   	ret    
+
+00000157 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 157:	55                   	push   %ebp
+ 158:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+ 15a:	eb 08                	jmp    164 <strcmp+0xd>
+    p++, q++;
+ 15c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 160:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 164:	8b 45 08             	mov    0x8(%ebp),%eax
+ 167:	0f b6 00             	movzbl (%eax),%eax
+ 16a:	84 c0                	test   %al,%al
+ 16c:	74 10                	je     17e <strcmp+0x27>
+ 16e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 171:	0f b6 10             	movzbl (%eax),%edx
+ 174:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 177:	0f b6 00             	movzbl (%eax),%eax
+ 17a:	38 c2                	cmp    %al,%dl
+ 17c:	74 de                	je     15c <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 17e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 181:	0f b6 00             	movzbl (%eax),%eax
+ 184:	0f b6 d0             	movzbl %al,%edx
+ 187:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 18a:	0f b6 00             	movzbl (%eax),%eax
+ 18d:	0f b6 c0             	movzbl %al,%eax
+ 190:	29 c2                	sub    %eax,%edx
+ 192:	89 d0                	mov    %edx,%eax
+}
+ 194:	5d                   	pop    %ebp
+ 195:	c3                   	ret    
+
+00000196 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 196:	55                   	push   %ebp
+ 197:	89 e5                	mov    %esp,%ebp
+ 199:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 19c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 1a3:	eb 04                	jmp    1a9 <strlen+0x13>
+ 1a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 1a9:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 1ac:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1af:	01 d0                	add    %edx,%eax
+ 1b1:	0f b6 00             	movzbl (%eax),%eax
+ 1b4:	84 c0                	test   %al,%al
+ 1b6:	75 ed                	jne    1a5 <strlen+0xf>
+    ;
+  return n;
+ 1b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 1bb:	c9                   	leave  
+ 1bc:	c3                   	ret    
+
+000001bd <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1bd:	55                   	push   %ebp
+ 1be:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 1c0:	8b 45 10             	mov    0x10(%ebp),%eax
+ 1c3:	50                   	push   %eax
+ 1c4:	ff 75 0c             	pushl  0xc(%ebp)
+ 1c7:	ff 75 08             	pushl  0x8(%ebp)
+ 1ca:	e8 32 ff ff ff       	call   101 <stosb>
+ 1cf:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 1d2:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 1d5:	c9                   	leave  
+ 1d6:	c3                   	ret    
+
+000001d7 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1d7:	55                   	push   %ebp
+ 1d8:	89 e5                	mov    %esp,%ebp
+ 1da:	83 ec 04             	sub    $0x4,%esp
+ 1dd:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1e0:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 1e3:	eb 14                	jmp    1f9 <strchr+0x22>
+    if(*s == c)
+ 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e8:	0f b6 00             	movzbl (%eax),%eax
+ 1eb:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 1ee:	75 05                	jne    1f5 <strchr+0x1e>
+      return (char*)s;
+ 1f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f3:	eb 13                	jmp    208 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 1f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 1f9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fc:	0f b6 00             	movzbl (%eax),%eax
+ 1ff:	84 c0                	test   %al,%al
+ 201:	75 e2                	jne    1e5 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 203:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 208:	c9                   	leave  
+ 209:	c3                   	ret    
+
+0000020a <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 20a:	55                   	push   %ebp
+ 20b:	89 e5                	mov    %esp,%ebp
+ 20d:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 210:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 217:	eb 42                	jmp    25b <gets+0x51>
+    cc = read(0, &c, 1);
+ 219:	83 ec 04             	sub    $0x4,%esp
+ 21c:	6a 01                	push   $0x1
+ 21e:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 221:	50                   	push   %eax
+ 222:	6a 00                	push   $0x0
+ 224:	e8 47 01 00 00       	call   370 <read>
+ 229:	83 c4 10             	add    $0x10,%esp
+ 22c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 22f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 233:	7e 33                	jle    268 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 235:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 238:	8d 50 01             	lea    0x1(%eax),%edx
+ 23b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 23e:	89 c2                	mov    %eax,%edx
+ 240:	8b 45 08             	mov    0x8(%ebp),%eax
+ 243:	01 c2                	add    %eax,%edx
+ 245:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 249:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 24b:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 24f:	3c 0a                	cmp    $0xa,%al
+ 251:	74 16                	je     269 <gets+0x5f>
+ 253:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 257:	3c 0d                	cmp    $0xd,%al
+ 259:	74 0e                	je     269 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 25b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 25e:	83 c0 01             	add    $0x1,%eax
+ 261:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 264:	7c b3                	jl     219 <gets+0xf>
+ 266:	eb 01                	jmp    269 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 268:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 269:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 26c:	8b 45 08             	mov    0x8(%ebp),%eax
+ 26f:	01 d0                	add    %edx,%eax
+ 271:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 274:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 277:	c9                   	leave  
+ 278:	c3                   	ret    
+
+00000279 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 279:	55                   	push   %ebp
+ 27a:	89 e5                	mov    %esp,%ebp
+ 27c:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 27f:	83 ec 08             	sub    $0x8,%esp
+ 282:	6a 00                	push   $0x0
+ 284:	ff 75 08             	pushl  0x8(%ebp)
+ 287:	e8 0c 01 00 00       	call   398 <open>
+ 28c:	83 c4 10             	add    $0x10,%esp
+ 28f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 292:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 296:	79 07                	jns    29f <stat+0x26>
+    return -1;
+ 298:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 29d:	eb 25                	jmp    2c4 <stat+0x4b>
+  r = fstat(fd, st);
+ 29f:	83 ec 08             	sub    $0x8,%esp
+ 2a2:	ff 75 0c             	pushl  0xc(%ebp)
+ 2a5:	ff 75 f4             	pushl  -0xc(%ebp)
+ 2a8:	e8 03 01 00 00       	call   3b0 <fstat>
+ 2ad:	83 c4 10             	add    $0x10,%esp
+ 2b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 2b3:	83 ec 0c             	sub    $0xc,%esp
+ 2b6:	ff 75 f4             	pushl  -0xc(%ebp)
+ 2b9:	e8 c2 00 00 00       	call   380 <close>
+ 2be:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 2c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 2c4:	c9                   	leave  
+ 2c5:	c3                   	ret    
+
+000002c6 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2c6:	55                   	push   %ebp
+ 2c7:	89 e5                	mov    %esp,%ebp
+ 2c9:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 2cc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 2d3:	eb 25                	jmp    2fa <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 2d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 2d8:	89 d0                	mov    %edx,%eax
+ 2da:	c1 e0 02             	shl    $0x2,%eax
+ 2dd:	01 d0                	add    %edx,%eax
+ 2df:	01 c0                	add    %eax,%eax
+ 2e1:	89 c1                	mov    %eax,%ecx
+ 2e3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2e6:	8d 50 01             	lea    0x1(%eax),%edx
+ 2e9:	89 55 08             	mov    %edx,0x8(%ebp)
+ 2ec:	0f b6 00             	movzbl (%eax),%eax
+ 2ef:	0f be c0             	movsbl %al,%eax
+ 2f2:	01 c8                	add    %ecx,%eax
+ 2f4:	83 e8 30             	sub    $0x30,%eax
+ 2f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2fa:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2fd:	0f b6 00             	movzbl (%eax),%eax
+ 300:	3c 2f                	cmp    $0x2f,%al
+ 302:	7e 0a                	jle    30e <atoi+0x48>
+ 304:	8b 45 08             	mov    0x8(%ebp),%eax
+ 307:	0f b6 00             	movzbl (%eax),%eax
+ 30a:	3c 39                	cmp    $0x39,%al
+ 30c:	7e c7                	jle    2d5 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 30e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 311:	c9                   	leave  
+ 312:	c3                   	ret    
+
+00000313 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 313:	55                   	push   %ebp
+ 314:	89 e5                	mov    %esp,%ebp
+ 316:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 319:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31c:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 31f:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 322:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 325:	eb 17                	jmp    33e <memmove+0x2b>
+    *dst++ = *src++;
+ 327:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 32a:	8d 50 01             	lea    0x1(%eax),%edx
+ 32d:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 330:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 333:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 336:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 339:	0f b6 12             	movzbl (%edx),%edx
+ 33c:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 33e:	8b 45 10             	mov    0x10(%ebp),%eax
+ 341:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 344:	89 55 10             	mov    %edx,0x10(%ebp)
+ 347:	85 c0                	test   %eax,%eax
+ 349:	7f dc                	jg     327 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 34b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 34e:	c9                   	leave  
+ 34f:	c3                   	ret    
+
+00000350 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 350:	b8 01 00 00 00       	mov    $0x1,%eax
+ 355:	cd 40                	int    $0x40
+ 357:	c3                   	ret    
+
+00000358 <exit>:
+SYSCALL(exit)
+ 358:	b8 02 00 00 00       	mov    $0x2,%eax
+ 35d:	cd 40                	int    $0x40
+ 35f:	c3                   	ret    
+
+00000360 <wait>:
+SYSCALL(wait)
+ 360:	b8 03 00 00 00       	mov    $0x3,%eax
+ 365:	cd 40                	int    $0x40
+ 367:	c3                   	ret    
+
+00000368 <pipe>:
+SYSCALL(pipe)
+ 368:	b8 04 00 00 00       	mov    $0x4,%eax
+ 36d:	cd 40                	int    $0x40
+ 36f:	c3                   	ret    
+
+00000370 <read>:
+SYSCALL(read)
+ 370:	b8 05 00 00 00       	mov    $0x5,%eax
+ 375:	cd 40                	int    $0x40
+ 377:	c3                   	ret    
+
+00000378 <write>:
+SYSCALL(write)
+ 378:	b8 10 00 00 00       	mov    $0x10,%eax
+ 37d:	cd 40                	int    $0x40
+ 37f:	c3                   	ret    
+
+00000380 <close>:
+SYSCALL(close)
+ 380:	b8 15 00 00 00       	mov    $0x15,%eax
+ 385:	cd 40                	int    $0x40
+ 387:	c3                   	ret    
+
+00000388 <kill>:
+SYSCALL(kill)
+ 388:	b8 06 00 00 00       	mov    $0x6,%eax
+ 38d:	cd 40                	int    $0x40
+ 38f:	c3                   	ret    
+
+00000390 <exec>:
+SYSCALL(exec)
+ 390:	b8 07 00 00 00       	mov    $0x7,%eax
+ 395:	cd 40                	int    $0x40
+ 397:	c3                   	ret    
+
+00000398 <open>:
+SYSCALL(open)
+ 398:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 39d:	cd 40                	int    $0x40
+ 39f:	c3                   	ret    
+
+000003a0 <mknod>:
+SYSCALL(mknod)
+ 3a0:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3a5:	cd 40                	int    $0x40
+ 3a7:	c3                   	ret    
+
+000003a8 <unlink>:
+SYSCALL(unlink)
+ 3a8:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3ad:	cd 40                	int    $0x40
+ 3af:	c3                   	ret    
+
+000003b0 <fstat>:
+SYSCALL(fstat)
+ 3b0:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3b5:	cd 40                	int    $0x40
+ 3b7:	c3                   	ret    
+
+000003b8 <link>:
+SYSCALL(link)
+ 3b8:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3bd:	cd 40                	int    $0x40
+ 3bf:	c3                   	ret    
+
+000003c0 <mkdir>:
+SYSCALL(mkdir)
+ 3c0:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3c5:	cd 40                	int    $0x40
+ 3c7:	c3                   	ret    
+
+000003c8 <chdir>:
+SYSCALL(chdir)
+ 3c8:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3cd:	cd 40                	int    $0x40
+ 3cf:	c3                   	ret    
+
+000003d0 <dup>:
+SYSCALL(dup)
+ 3d0:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3d5:	cd 40                	int    $0x40
+ 3d7:	c3                   	ret    
+
+000003d8 <getpid>:
+SYSCALL(getpid)
+ 3d8:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3dd:	cd 40                	int    $0x40
+ 3df:	c3                   	ret    
+
+000003e0 <sbrk>:
+SYSCALL(sbrk)
+ 3e0:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3e5:	cd 40                	int    $0x40
+ 3e7:	c3                   	ret    
+
+000003e8 <sleep>:
+SYSCALL(sleep)
+ 3e8:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3ed:	cd 40                	int    $0x40
+ 3ef:	c3                   	ret    
+
+000003f0 <uptime>:
+SYSCALL(uptime)
+ 3f0:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3f5:	cd 40                	int    $0x40
+ 3f7:	c3                   	ret    
+
+000003f8 <procstat>:
+SYSCALL(procstat) 
+ 3f8:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3fd:	cd 40                	int    $0x40
+ 3ff:	c3                   	ret    
+
+00000400 <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	83 ec 18             	sub    $0x18,%esp
+ 406:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 409:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 40c:	83 ec 04             	sub    $0x4,%esp
+ 40f:	6a 01                	push   $0x1
+ 411:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 414:	50                   	push   %eax
+ 415:	ff 75 08             	pushl  0x8(%ebp)
+ 418:	e8 5b ff ff ff       	call   378 <write>
+ 41d:	83 c4 10             	add    $0x10,%esp
+}
+ 420:	90                   	nop
+ 421:	c9                   	leave  
+ 422:	c3                   	ret    
+
+00000423 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 423:	55                   	push   %ebp
+ 424:	89 e5                	mov    %esp,%ebp
+ 426:	53                   	push   %ebx
+ 427:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 42a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 431:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 435:	74 17                	je     44e <printint+0x2b>
+ 437:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 43b:	79 11                	jns    44e <printint+0x2b>
+    neg = 1;
+ 43d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 444:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 447:	f7 d8                	neg    %eax
+ 449:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 44c:	eb 06                	jmp    454 <printint+0x31>
+  } else {
+    x = xx;
+ 44e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 451:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 454:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 45b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 45e:	8d 41 01             	lea    0x1(%ecx),%eax
+ 461:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 464:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 467:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 46a:	ba 00 00 00 00       	mov    $0x0,%edx
+ 46f:	f7 f3                	div    %ebx
+ 471:	89 d0                	mov    %edx,%eax
+ 473:	0f b6 80 34 0b 00 00 	movzbl 0xb34(%eax),%eax
+ 47a:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 47e:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 481:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 484:	ba 00 00 00 00       	mov    $0x0,%edx
+ 489:	f7 f3                	div    %ebx
+ 48b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 48e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 492:	75 c7                	jne    45b <printint+0x38>
+  if(neg)
+ 494:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 498:	74 2d                	je     4c7 <printint+0xa4>
+    buf[i++] = '-';
+ 49a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 49d:	8d 50 01             	lea    0x1(%eax),%edx
+ 4a0:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 4a3:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 4a8:	eb 1d                	jmp    4c7 <printint+0xa4>
+    putc(fd, buf[i]);
+ 4aa:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 4ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 4b0:	01 d0                	add    %edx,%eax
+ 4b2:	0f b6 00             	movzbl (%eax),%eax
+ 4b5:	0f be c0             	movsbl %al,%eax
+ 4b8:	83 ec 08             	sub    $0x8,%esp
+ 4bb:	50                   	push   %eax
+ 4bc:	ff 75 08             	pushl  0x8(%ebp)
+ 4bf:	e8 3c ff ff ff       	call   400 <putc>
+ 4c4:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 4c7:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 4cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 4cf:	79 d9                	jns    4aa <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 4d1:	90                   	nop
+ 4d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 4d5:	c9                   	leave  
+ 4d6:	c3                   	ret    
+
+000004d7 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 4d7:	55                   	push   %ebp
+ 4d8:	89 e5                	mov    %esp,%ebp
+ 4da:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 4dd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 4e4:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 4e7:	83 c0 04             	add    $0x4,%eax
+ 4ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 4ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 4f4:	e9 59 01 00 00       	jmp    652 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 4f9:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 4fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 4ff:	01 d0                	add    %edx,%eax
+ 501:	0f b6 00             	movzbl (%eax),%eax
+ 504:	0f be c0             	movsbl %al,%eax
+ 507:	25 ff 00 00 00       	and    $0xff,%eax
+ 50c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 50f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 513:	75 2c                	jne    541 <printf+0x6a>
+      if(c == '%'){
+ 515:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 519:	75 0c                	jne    527 <printf+0x50>
+        state = '%';
+ 51b:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 522:	e9 27 01 00 00       	jmp    64e <printf+0x177>
+      } else {
+        putc(fd, c);
+ 527:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 52a:	0f be c0             	movsbl %al,%eax
+ 52d:	83 ec 08             	sub    $0x8,%esp
+ 530:	50                   	push   %eax
+ 531:	ff 75 08             	pushl  0x8(%ebp)
+ 534:	e8 c7 fe ff ff       	call   400 <putc>
+ 539:	83 c4 10             	add    $0x10,%esp
+ 53c:	e9 0d 01 00 00       	jmp    64e <printf+0x177>
+      }
+    } else if(state == '%'){
+ 541:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 545:	0f 85 03 01 00 00    	jne    64e <printf+0x177>
+      if(c == 'd'){
+ 54b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 54f:	75 1e                	jne    56f <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 551:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 554:	8b 00                	mov    (%eax),%eax
+ 556:	6a 01                	push   $0x1
+ 558:	6a 0a                	push   $0xa
+ 55a:	50                   	push   %eax
+ 55b:	ff 75 08             	pushl  0x8(%ebp)
+ 55e:	e8 c0 fe ff ff       	call   423 <printint>
+ 563:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 566:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 56a:	e9 d8 00 00 00       	jmp    647 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 56f:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 573:	74 06                	je     57b <printf+0xa4>
+ 575:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 579:	75 1e                	jne    599 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 57b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 57e:	8b 00                	mov    (%eax),%eax
+ 580:	6a 00                	push   $0x0
+ 582:	6a 10                	push   $0x10
+ 584:	50                   	push   %eax
+ 585:	ff 75 08             	pushl  0x8(%ebp)
+ 588:	e8 96 fe ff ff       	call   423 <printint>
+ 58d:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 590:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 594:	e9 ae 00 00 00       	jmp    647 <printf+0x170>
+      } else if(c == 's'){
+ 599:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 59d:	75 43                	jne    5e2 <printf+0x10b>
+        s = (char*)*ap;
+ 59f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 5a2:	8b 00                	mov    (%eax),%eax
+ 5a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 5a7:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 5ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 5af:	75 25                	jne    5d6 <printf+0xff>
+          s = "(null)";
+ 5b1:	c7 45 f4 dd 08 00 00 	movl   $0x8dd,-0xc(%ebp)
+        while(*s != 0){
+ 5b8:	eb 1c                	jmp    5d6 <printf+0xff>
+          putc(fd, *s);
+ 5ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 5bd:	0f b6 00             	movzbl (%eax),%eax
+ 5c0:	0f be c0             	movsbl %al,%eax
+ 5c3:	83 ec 08             	sub    $0x8,%esp
+ 5c6:	50                   	push   %eax
+ 5c7:	ff 75 08             	pushl  0x8(%ebp)
+ 5ca:	e8 31 fe ff ff       	call   400 <putc>
+ 5cf:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 5d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 5d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 5d9:	0f b6 00             	movzbl (%eax),%eax
+ 5dc:	84 c0                	test   %al,%al
+ 5de:	75 da                	jne    5ba <printf+0xe3>
+ 5e0:	eb 65                	jmp    647 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5e2:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 5e6:	75 1d                	jne    605 <printf+0x12e>
+        putc(fd, *ap);
+ 5e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 5eb:	8b 00                	mov    (%eax),%eax
+ 5ed:	0f be c0             	movsbl %al,%eax
+ 5f0:	83 ec 08             	sub    $0x8,%esp
+ 5f3:	50                   	push   %eax
+ 5f4:	ff 75 08             	pushl  0x8(%ebp)
+ 5f7:	e8 04 fe ff ff       	call   400 <putc>
+ 5fc:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 5ff:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 603:	eb 42                	jmp    647 <printf+0x170>
+      } else if(c == '%'){
+ 605:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 609:	75 17                	jne    622 <printf+0x14b>
+        putc(fd, c);
+ 60b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 60e:	0f be c0             	movsbl %al,%eax
+ 611:	83 ec 08             	sub    $0x8,%esp
+ 614:	50                   	push   %eax
+ 615:	ff 75 08             	pushl  0x8(%ebp)
+ 618:	e8 e3 fd ff ff       	call   400 <putc>
+ 61d:	83 c4 10             	add    $0x10,%esp
+ 620:	eb 25                	jmp    647 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 622:	83 ec 08             	sub    $0x8,%esp
+ 625:	6a 25                	push   $0x25
+ 627:	ff 75 08             	pushl  0x8(%ebp)
+ 62a:	e8 d1 fd ff ff       	call   400 <putc>
+ 62f:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 632:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 635:	0f be c0             	movsbl %al,%eax
+ 638:	83 ec 08             	sub    $0x8,%esp
+ 63b:	50                   	push   %eax
+ 63c:	ff 75 08             	pushl  0x8(%ebp)
+ 63f:	e8 bc fd ff ff       	call   400 <putc>
+ 644:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 647:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 64e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 652:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 655:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 658:	01 d0                	add    %edx,%eax
+ 65a:	0f b6 00             	movzbl (%eax),%eax
+ 65d:	84 c0                	test   %al,%al
+ 65f:	0f 85 94 fe ff ff    	jne    4f9 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 665:	90                   	nop
+ 666:	c9                   	leave  
+ 667:	c3                   	ret    
+
+00000668 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 668:	55                   	push   %ebp
+ 669:	89 e5                	mov    %esp,%ebp
+ 66b:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 66e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 671:	83 e8 08             	sub    $0x8,%eax
+ 674:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 677:	a1 50 0b 00 00       	mov    0xb50,%eax
+ 67c:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 67f:	eb 24                	jmp    6a5 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 681:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 684:	8b 00                	mov    (%eax),%eax
+ 686:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 689:	77 12                	ja     69d <free+0x35>
+ 68b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 68e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 691:	77 24                	ja     6b7 <free+0x4f>
+ 693:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 696:	8b 00                	mov    (%eax),%eax
+ 698:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 69b:	77 1a                	ja     6b7 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 69d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6a0:	8b 00                	mov    (%eax),%eax
+ 6a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 6a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6a8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 6ab:	76 d4                	jbe    681 <free+0x19>
+ 6ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6b0:	8b 00                	mov    (%eax),%eax
+ 6b2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 6b5:	76 ca                	jbe    681 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6ba:	8b 40 04             	mov    0x4(%eax),%eax
+ 6bd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 6c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6c7:	01 c2                	add    %eax,%edx
+ 6c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6cc:	8b 00                	mov    (%eax),%eax
+ 6ce:	39 c2                	cmp    %eax,%edx
+ 6d0:	75 24                	jne    6f6 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 6d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6d5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6db:	8b 00                	mov    (%eax),%eax
+ 6dd:	8b 40 04             	mov    0x4(%eax),%eax
+ 6e0:	01 c2                	add    %eax,%edx
+ 6e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6e5:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6eb:	8b 00                	mov    (%eax),%eax
+ 6ed:	8b 10                	mov    (%eax),%edx
+ 6ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6f2:	89 10                	mov    %edx,(%eax)
+ 6f4:	eb 0a                	jmp    700 <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6f9:	8b 10                	mov    (%eax),%edx
+ 6fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6fe:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 700:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 703:	8b 40 04             	mov    0x4(%eax),%eax
+ 706:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 70d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 710:	01 d0                	add    %edx,%eax
+ 712:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 715:	75 20                	jne    737 <free+0xcf>
+    p->s.size += bp->s.size;
+ 717:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 71a:	8b 50 04             	mov    0x4(%eax),%edx
+ 71d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 720:	8b 40 04             	mov    0x4(%eax),%eax
+ 723:	01 c2                	add    %eax,%edx
+ 725:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 728:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 72b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 72e:	8b 10                	mov    (%eax),%edx
+ 730:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 733:	89 10                	mov    %edx,(%eax)
+ 735:	eb 08                	jmp    73f <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 737:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 73a:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 73d:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 73f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 742:	a3 50 0b 00 00       	mov    %eax,0xb50
+}
+ 747:	90                   	nop
+ 748:	c9                   	leave  
+ 749:	c3                   	ret    
+
+0000074a <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 74a:	55                   	push   %ebp
+ 74b:	89 e5                	mov    %esp,%ebp
+ 74d:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 750:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 757:	77 07                	ja     760 <morecore+0x16>
+    nu = 4096;
+ 759:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 760:	8b 45 08             	mov    0x8(%ebp),%eax
+ 763:	c1 e0 03             	shl    $0x3,%eax
+ 766:	83 ec 0c             	sub    $0xc,%esp
+ 769:	50                   	push   %eax
+ 76a:	e8 71 fc ff ff       	call   3e0 <sbrk>
+ 76f:	83 c4 10             	add    $0x10,%esp
+ 772:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 775:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 779:	75 07                	jne    782 <morecore+0x38>
+    return 0;
+ 77b:	b8 00 00 00 00       	mov    $0x0,%eax
+ 780:	eb 26                	jmp    7a8 <morecore+0x5e>
+  hp = (Header*)p;
+ 782:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 785:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 788:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 78b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 78e:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 791:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 794:	83 c0 08             	add    $0x8,%eax
+ 797:	83 ec 0c             	sub    $0xc,%esp
+ 79a:	50                   	push   %eax
+ 79b:	e8 c8 fe ff ff       	call   668 <free>
+ 7a0:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 7a3:	a1 50 0b 00 00       	mov    0xb50,%eax
+}
+ 7a8:	c9                   	leave  
+ 7a9:	c3                   	ret    
+
+000007aa <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 7aa:	55                   	push   %ebp
+ 7ab:	89 e5                	mov    %esp,%ebp
+ 7ad:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7b0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7b3:	83 c0 07             	add    $0x7,%eax
+ 7b6:	c1 e8 03             	shr    $0x3,%eax
+ 7b9:	83 c0 01             	add    $0x1,%eax
+ 7bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 7bf:	a1 50 0b 00 00       	mov    0xb50,%eax
+ 7c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 7c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 7cb:	75 23                	jne    7f0 <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 7cd:	c7 45 f0 48 0b 00 00 	movl   $0xb48,-0x10(%ebp)
+ 7d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7d7:	a3 50 0b 00 00       	mov    %eax,0xb50
+ 7dc:	a1 50 0b 00 00       	mov    0xb50,%eax
+ 7e1:	a3 48 0b 00 00       	mov    %eax,0xb48
+    base.s.size = 0;
+ 7e6:	c7 05 4c 0b 00 00 00 	movl   $0x0,0xb4c
+ 7ed:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7f3:	8b 00                	mov    (%eax),%eax
+ 7f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 7f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7fb:	8b 40 04             	mov    0x4(%eax),%eax
+ 7fe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 801:	72 4d                	jb     850 <malloc+0xa6>
+      if(p->s.size == nunits)
+ 803:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 806:	8b 40 04             	mov    0x4(%eax),%eax
+ 809:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 80c:	75 0c                	jne    81a <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 80e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 811:	8b 10                	mov    (%eax),%edx
+ 813:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 816:	89 10                	mov    %edx,(%eax)
+ 818:	eb 26                	jmp    840 <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 81a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 81d:	8b 40 04             	mov    0x4(%eax),%eax
+ 820:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 823:	89 c2                	mov    %eax,%edx
+ 825:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 828:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 82b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 82e:	8b 40 04             	mov    0x4(%eax),%eax
+ 831:	c1 e0 03             	shl    $0x3,%eax
+ 834:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 837:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 83a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 83d:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 840:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 843:	a3 50 0b 00 00       	mov    %eax,0xb50
+      return (void*)(p + 1);
+ 848:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 84b:	83 c0 08             	add    $0x8,%eax
+ 84e:	eb 3b                	jmp    88b <malloc+0xe1>
+    }
+    if(p == freep)
+ 850:	a1 50 0b 00 00       	mov    0xb50,%eax
+ 855:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 858:	75 1e                	jne    878 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 85a:	83 ec 0c             	sub    $0xc,%esp
+ 85d:	ff 75 ec             	pushl  -0x14(%ebp)
+ 860:	e8 e5 fe ff ff       	call   74a <morecore>
+ 865:	83 c4 10             	add    $0x10,%esp
+ 868:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 86b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 86f:	75 07                	jne    878 <malloc+0xce>
+        return 0;
+ 871:	b8 00 00 00 00       	mov    $0x0,%eax
+ 876:	eb 13                	jmp    88b <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 878:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 87b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 87e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 881:	8b 00                	mov    (%eax),%eax
+ 883:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 886:	e9 6d ff ff ff       	jmp    7f8 <malloc+0x4e>
+}
+ 88b:	c9                   	leave  
+ 88c:	c3                   	ret    
Los archivos binarios xv6-unrc/initcode y xv6-mod/initcode son distintos
diff -rupN xv6-unrc/initcode.asm xv6-mod/initcode.asm
--- xv6-unrc/initcode.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/initcode.asm	2018-04-04 14:54:50.224017696 -0300
@@ -0,0 +1,43 @@
+
+initcode.o:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -rupN xv6-unrc/initcode.d xv6-mod/initcode.d
--- xv6-unrc/initcode.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/initcode.d	2018-04-04 14:54:50.160017053 -0300
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Los archivos binarios xv6-unrc/initcode.o y xv6-mod/initcode.o son distintos
Los archivos binarios xv6-unrc/initcode.out y xv6-mod/initcode.out son distintos
Los archivos binarios xv6-unrc/._initcode.S y xv6-mod/._initcode.S son distintos
diff -rupN xv6-unrc/init.sym xv6-mod/init.sym
--- xv6-unrc/init.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/init.sym	2018-04-04 14:53:53.115444914 -0300
@@ -0,0 +1,62 @@
+00000000 .text
+0000088d .rodata
+000008e4 .eh_frame
+00000b2c .data
+00000b48 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 init.c
+00000000 ulib.c
+00000101 stosb
+00000000 printf.c
+00000400 putc
+00000423 printint
+00000b34 digits.1109
+00000000 umalloc.c
+00000b48 base
+00000b50 freep
+0000074a morecore
+00000127 strcpy
+000004d7 printf
+00000b2c argv
+00000313 memmove
+000003a0 mknod
+0000020a gets
+000003d8 getpid
+000007aa malloc
+000003f8 procstat
+000003e8 sleep
+00000368 pipe
+00000378 write
+000003b0 fstat
+00000388 kill
+000003c8 chdir
+00000390 exec
+00000360 wait
+00000370 read
+000003a8 unlink
+00000350 fork
+000003e0 sbrk
+000003f0 uptime
+00000b45 __bss_start
+000001bd memset
+00000000 main
+00000157 strcmp
+000003d0 dup
+00000279 stat
+00000b45 _edata
+00000b54 _end
+000003b8 link
+00000358 exit
+000002c6 atoi
+00000196 strlen
+00000398 open
+000001d7 strchr
+000003c0 mkdir
+00000380 close
+00000668 free
Los archivos binarios xv6-unrc/._ioapic.c y xv6-mod/._ioapic.c son distintos
diff -rupN xv6-unrc/ioapic.d xv6-mod/ioapic.d
--- xv6-unrc/ioapic.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/ioapic.d	2018-04-04 14:54:00.043514401 -0300
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Los archivos binarios xv6-unrc/ioapic.o y xv6-mod/ioapic.o son distintos
Los archivos binarios xv6-unrc/._kalloc.c y xv6-mod/._kalloc.c son distintos
diff -rupN xv6-unrc/kalloc.d xv6-mod/kalloc.d
--- xv6-unrc/kalloc.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/kalloc.d	2018-04-04 14:54:00.199515965 -0300
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Los archivos binarios xv6-unrc/kalloc.o y xv6-mod/kalloc.o son distintos
Los archivos binarios xv6-unrc/._kbd.c y xv6-mod/._kbd.c son distintos
diff -rupN xv6-unrc/kbd.d xv6-mod/kbd.d
--- xv6-unrc/kbd.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/kbd.d	2018-04-04 14:54:00.383517811 -0300
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Los archivos binarios xv6-unrc/._kbd.h y xv6-mod/._kbd.h son distintos
Los archivos binarios xv6-unrc/kbd.o y xv6-mod/kbd.o son distintos
Los archivos binarios xv6-unrc/kernel y xv6-mod/kernel son distintos
diff -rupN xv6-unrc/kernel.asm xv6-mod/kernel.asm
--- xv6-unrc/kernel.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/kernel.asm	2018-04-04 15:21:50.304266613 -0300
@@ -0,0 +1,18270 @@
+
+kernel:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+80100012:	0f 22 e0             	mov    %eax,%cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
+  movl    %eax, %cr3
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PG|CR0_WP), %eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+  movl    %eax, %cr0
+80100025:	0f 22 c0             	mov    %eax,%cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+80100028:	bc 50 c6 10 80       	mov    $0x8010c650,%esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+8010002d:	b8 f6 37 10 80       	mov    $0x801037f6,%eax
+  jmp *%eax
+80100032:	ff e0                	jmp    *%eax
+
+80100034 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100034:	55                   	push   %ebp
+80100035:	89 e5                	mov    %esp,%ebp
+80100037:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  initlock(&bcache.lock, "bcache");
+8010003a:	83 ec 08             	sub    $0x8,%esp
+8010003d:	68 e4 84 10 80       	push   $0x801084e4
+80100042:	68 60 c6 10 80       	push   $0x8010c660
+80100047:	e8 e8 4e 00 00       	call   80104f34 <initlock>
+8010004c:	83 c4 10             	add    $0x10,%esp
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+8010004f:	c7 05 70 05 11 80 64 	movl   $0x80110564,0x80110570
+80100056:	05 11 80 
+  bcache.head.next = &bcache.head;
+80100059:	c7 05 74 05 11 80 64 	movl   $0x80110564,0x80110574
+80100060:	05 11 80 
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100063:	c7 45 f4 94 c6 10 80 	movl   $0x8010c694,-0xc(%ebp)
+8010006a:	eb 3a                	jmp    801000a6 <binit+0x72>
+    b->next = bcache.head.next;
+8010006c:	8b 15 74 05 11 80    	mov    0x80110574,%edx
+80100072:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100075:	89 50 10             	mov    %edx,0x10(%eax)
+    b->prev = &bcache.head;
+80100078:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010007b:	c7 40 0c 64 05 11 80 	movl   $0x80110564,0xc(%eax)
+    b->dev = -1;
+80100082:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100085:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
+    bcache.head.next->prev = b;
+8010008c:	a1 74 05 11 80       	mov    0x80110574,%eax
+80100091:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80100094:	89 50 0c             	mov    %edx,0xc(%eax)
+    bcache.head.next = b;
+80100097:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010009a:	a3 74 05 11 80       	mov    %eax,0x80110574
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+8010009f:	81 45 f4 18 02 00 00 	addl   $0x218,-0xc(%ebp)
+801000a6:	b8 64 05 11 80       	mov    $0x80110564,%eax
+801000ab:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+801000ae:	72 bc                	jb     8010006c <binit+0x38>
+    b->prev = &bcache.head;
+    b->dev = -1;
+    bcache.head.next->prev = b;
+    bcache.head.next = b;
+  }
+}
+801000b0:	90                   	nop
+801000b1:	c9                   	leave  
+801000b2:	c3                   	ret    
+
+801000b3 <bget>:
+// Look through buffer cache for sector on device dev.
+// If not found, allocate a buffer.
+// In either case, return B_BUSY buffer.
+static struct buf*
+bget(uint dev, uint sector)
+{
+801000b3:	55                   	push   %ebp
+801000b4:	89 e5                	mov    %esp,%ebp
+801000b6:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  acquire(&bcache.lock);
+801000b9:	83 ec 0c             	sub    $0xc,%esp
+801000bc:	68 60 c6 10 80       	push   $0x8010c660
+801000c1:	e8 90 4e 00 00       	call   80104f56 <acquire>
+801000c6:	83 c4 10             	add    $0x10,%esp
+
+ loop:
+  // Is the sector already cached?
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+801000c9:	a1 74 05 11 80       	mov    0x80110574,%eax
+801000ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801000d1:	eb 67                	jmp    8010013a <bget+0x87>
+    if(b->dev == dev && b->sector == sector){
+801000d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801000d6:	8b 40 04             	mov    0x4(%eax),%eax
+801000d9:	3b 45 08             	cmp    0x8(%ebp),%eax
+801000dc:	75 53                	jne    80100131 <bget+0x7e>
+801000de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801000e1:	8b 40 08             	mov    0x8(%eax),%eax
+801000e4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+801000e7:	75 48                	jne    80100131 <bget+0x7e>
+      if(!(b->flags & B_BUSY)){
+801000e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801000ec:	8b 00                	mov    (%eax),%eax
+801000ee:	83 e0 01             	and    $0x1,%eax
+801000f1:	85 c0                	test   %eax,%eax
+801000f3:	75 27                	jne    8010011c <bget+0x69>
+        b->flags |= B_BUSY;
+801000f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801000f8:	8b 00                	mov    (%eax),%eax
+801000fa:	83 c8 01             	or     $0x1,%eax
+801000fd:	89 c2                	mov    %eax,%edx
+801000ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100102:	89 10                	mov    %edx,(%eax)
+        release(&bcache.lock);
+80100104:	83 ec 0c             	sub    $0xc,%esp
+80100107:	68 60 c6 10 80       	push   $0x8010c660
+8010010c:	e8 ac 4e 00 00       	call   80104fbd <release>
+80100111:	83 c4 10             	add    $0x10,%esp
+        return b;
+80100114:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100117:	e9 98 00 00 00       	jmp    801001b4 <bget+0x101>
+      }
+      sleep(b, &bcache.lock);
+8010011c:	83 ec 08             	sub    $0x8,%esp
+8010011f:	68 60 c6 10 80       	push   $0x8010c660
+80100124:	ff 75 f4             	pushl  -0xc(%ebp)
+80100127:	e8 31 4b 00 00       	call   80104c5d <sleep>
+8010012c:	83 c4 10             	add    $0x10,%esp
+      goto loop;
+8010012f:	eb 98                	jmp    801000c9 <bget+0x16>
+
+  acquire(&bcache.lock);
+
+ loop:
+  // Is the sector already cached?
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+80100131:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100134:	8b 40 10             	mov    0x10(%eax),%eax
+80100137:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010013a:	81 7d f4 64 05 11 80 	cmpl   $0x80110564,-0xc(%ebp)
+80100141:	75 90                	jne    801000d3 <bget+0x20>
+  }
+
+  // Not cached; recycle some non-busy and clean buffer.
+  // "clean" because B_DIRTY and !B_BUSY means log.c
+  // hasn't yet committed the changes to the buffer.
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100143:	a1 70 05 11 80       	mov    0x80110570,%eax
+80100148:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010014b:	eb 51                	jmp    8010019e <bget+0xeb>
+    if((b->flags & B_BUSY) == 0 && (b->flags & B_DIRTY) == 0){
+8010014d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100150:	8b 00                	mov    (%eax),%eax
+80100152:	83 e0 01             	and    $0x1,%eax
+80100155:	85 c0                	test   %eax,%eax
+80100157:	75 3c                	jne    80100195 <bget+0xe2>
+80100159:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010015c:	8b 00                	mov    (%eax),%eax
+8010015e:	83 e0 04             	and    $0x4,%eax
+80100161:	85 c0                	test   %eax,%eax
+80100163:	75 30                	jne    80100195 <bget+0xe2>
+      b->dev = dev;
+80100165:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100168:	8b 55 08             	mov    0x8(%ebp),%edx
+8010016b:	89 50 04             	mov    %edx,0x4(%eax)
+      b->sector = sector;
+8010016e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100171:	8b 55 0c             	mov    0xc(%ebp),%edx
+80100174:	89 50 08             	mov    %edx,0x8(%eax)
+      b->flags = B_BUSY;
+80100177:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010017a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+      release(&bcache.lock);
+80100180:	83 ec 0c             	sub    $0xc,%esp
+80100183:	68 60 c6 10 80       	push   $0x8010c660
+80100188:	e8 30 4e 00 00       	call   80104fbd <release>
+8010018d:	83 c4 10             	add    $0x10,%esp
+      return b;
+80100190:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100193:	eb 1f                	jmp    801001b4 <bget+0x101>
+  }
+
+  // Not cached; recycle some non-busy and clean buffer.
+  // "clean" because B_DIRTY and !B_BUSY means log.c
+  // hasn't yet committed the changes to the buffer.
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100195:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100198:	8b 40 0c             	mov    0xc(%eax),%eax
+8010019b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010019e:	81 7d f4 64 05 11 80 	cmpl   $0x80110564,-0xc(%ebp)
+801001a5:	75 a6                	jne    8010014d <bget+0x9a>
+      b->flags = B_BUSY;
+      release(&bcache.lock);
+      return b;
+    }
+  }
+  panic("bget: no buffers");
+801001a7:	83 ec 0c             	sub    $0xc,%esp
+801001aa:	68 eb 84 10 80       	push   $0x801084eb
+801001af:	e8 b2 03 00 00       	call   80100566 <panic>
+}
+801001b4:	c9                   	leave  
+801001b5:	c3                   	ret    
+
+801001b6 <bread>:
+
+// Return a B_BUSY buf with the contents of the indicated disk sector.
+struct buf*
+bread(uint dev, uint sector)
+{
+801001b6:	55                   	push   %ebp
+801001b7:	89 e5                	mov    %esp,%ebp
+801001b9:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  b = bget(dev, sector);
+801001bc:	83 ec 08             	sub    $0x8,%esp
+801001bf:	ff 75 0c             	pushl  0xc(%ebp)
+801001c2:	ff 75 08             	pushl  0x8(%ebp)
+801001c5:	e8 e9 fe ff ff       	call   801000b3 <bget>
+801001ca:	83 c4 10             	add    $0x10,%esp
+801001cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(!(b->flags & B_VALID))
+801001d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801001d3:	8b 00                	mov    (%eax),%eax
+801001d5:	83 e0 02             	and    $0x2,%eax
+801001d8:	85 c0                	test   %eax,%eax
+801001da:	75 0e                	jne    801001ea <bread+0x34>
+    iderw(b);
+801001dc:	83 ec 0c             	sub    $0xc,%esp
+801001df:	ff 75 f4             	pushl  -0xc(%ebp)
+801001e2:	e8 85 26 00 00       	call   8010286c <iderw>
+801001e7:	83 c4 10             	add    $0x10,%esp
+  return b;
+801001ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+801001ed:	c9                   	leave  
+801001ee:	c3                   	ret    
+
+801001ef <bwrite>:
+
+// Write b's contents to disk.  Must be B_BUSY.
+void
+bwrite(struct buf *b)
+{
+801001ef:	55                   	push   %ebp
+801001f0:	89 e5                	mov    %esp,%ebp
+801001f2:	83 ec 08             	sub    $0x8,%esp
+  if((b->flags & B_BUSY) == 0)
+801001f5:	8b 45 08             	mov    0x8(%ebp),%eax
+801001f8:	8b 00                	mov    (%eax),%eax
+801001fa:	83 e0 01             	and    $0x1,%eax
+801001fd:	85 c0                	test   %eax,%eax
+801001ff:	75 0d                	jne    8010020e <bwrite+0x1f>
+    panic("bwrite");
+80100201:	83 ec 0c             	sub    $0xc,%esp
+80100204:	68 fc 84 10 80       	push   $0x801084fc
+80100209:	e8 58 03 00 00       	call   80100566 <panic>
+  b->flags |= B_DIRTY;
+8010020e:	8b 45 08             	mov    0x8(%ebp),%eax
+80100211:	8b 00                	mov    (%eax),%eax
+80100213:	83 c8 04             	or     $0x4,%eax
+80100216:	89 c2                	mov    %eax,%edx
+80100218:	8b 45 08             	mov    0x8(%ebp),%eax
+8010021b:	89 10                	mov    %edx,(%eax)
+  iderw(b);
+8010021d:	83 ec 0c             	sub    $0xc,%esp
+80100220:	ff 75 08             	pushl  0x8(%ebp)
+80100223:	e8 44 26 00 00       	call   8010286c <iderw>
+80100228:	83 c4 10             	add    $0x10,%esp
+}
+8010022b:	90                   	nop
+8010022c:	c9                   	leave  
+8010022d:	c3                   	ret    
+
+8010022e <brelse>:
+
+// Release a B_BUSY buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+8010022e:	55                   	push   %ebp
+8010022f:	89 e5                	mov    %esp,%ebp
+80100231:	83 ec 08             	sub    $0x8,%esp
+  if((b->flags & B_BUSY) == 0)
+80100234:	8b 45 08             	mov    0x8(%ebp),%eax
+80100237:	8b 00                	mov    (%eax),%eax
+80100239:	83 e0 01             	and    $0x1,%eax
+8010023c:	85 c0                	test   %eax,%eax
+8010023e:	75 0d                	jne    8010024d <brelse+0x1f>
+    panic("brelse");
+80100240:	83 ec 0c             	sub    $0xc,%esp
+80100243:	68 03 85 10 80       	push   $0x80108503
+80100248:	e8 19 03 00 00       	call   80100566 <panic>
+
+  acquire(&bcache.lock);
+8010024d:	83 ec 0c             	sub    $0xc,%esp
+80100250:	68 60 c6 10 80       	push   $0x8010c660
+80100255:	e8 fc 4c 00 00       	call   80104f56 <acquire>
+8010025a:	83 c4 10             	add    $0x10,%esp
+
+  b->next->prev = b->prev;
+8010025d:	8b 45 08             	mov    0x8(%ebp),%eax
+80100260:	8b 40 10             	mov    0x10(%eax),%eax
+80100263:	8b 55 08             	mov    0x8(%ebp),%edx
+80100266:	8b 52 0c             	mov    0xc(%edx),%edx
+80100269:	89 50 0c             	mov    %edx,0xc(%eax)
+  b->prev->next = b->next;
+8010026c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010026f:	8b 40 0c             	mov    0xc(%eax),%eax
+80100272:	8b 55 08             	mov    0x8(%ebp),%edx
+80100275:	8b 52 10             	mov    0x10(%edx),%edx
+80100278:	89 50 10             	mov    %edx,0x10(%eax)
+  b->next = bcache.head.next;
+8010027b:	8b 15 74 05 11 80    	mov    0x80110574,%edx
+80100281:	8b 45 08             	mov    0x8(%ebp),%eax
+80100284:	89 50 10             	mov    %edx,0x10(%eax)
+  b->prev = &bcache.head;
+80100287:	8b 45 08             	mov    0x8(%ebp),%eax
+8010028a:	c7 40 0c 64 05 11 80 	movl   $0x80110564,0xc(%eax)
+  bcache.head.next->prev = b;
+80100291:	a1 74 05 11 80       	mov    0x80110574,%eax
+80100296:	8b 55 08             	mov    0x8(%ebp),%edx
+80100299:	89 50 0c             	mov    %edx,0xc(%eax)
+  bcache.head.next = b;
+8010029c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010029f:	a3 74 05 11 80       	mov    %eax,0x80110574
+
+  b->flags &= ~B_BUSY;
+801002a4:	8b 45 08             	mov    0x8(%ebp),%eax
+801002a7:	8b 00                	mov    (%eax),%eax
+801002a9:	83 e0 fe             	and    $0xfffffffe,%eax
+801002ac:	89 c2                	mov    %eax,%edx
+801002ae:	8b 45 08             	mov    0x8(%ebp),%eax
+801002b1:	89 10                	mov    %edx,(%eax)
+  wakeup(b);
+801002b3:	83 ec 0c             	sub    $0xc,%esp
+801002b6:	ff 75 08             	pushl  0x8(%ebp)
+801002b9:	e8 8a 4a 00 00       	call   80104d48 <wakeup>
+801002be:	83 c4 10             	add    $0x10,%esp
+
+  release(&bcache.lock);
+801002c1:	83 ec 0c             	sub    $0xc,%esp
+801002c4:	68 60 c6 10 80       	push   $0x8010c660
+801002c9:	e8 ef 4c 00 00       	call   80104fbd <release>
+801002ce:	83 c4 10             	add    $0x10,%esp
+}
+801002d1:	90                   	nop
+801002d2:	c9                   	leave  
+801002d3:	c3                   	ret    
+
+801002d4 <inb>:
+// Routines to let C code use special x86 instructions.
+
+static inline uchar
+inb(ushort port)
+{
+801002d4:	55                   	push   %ebp
+801002d5:	89 e5                	mov    %esp,%ebp
+801002d7:	83 ec 14             	sub    $0x14,%esp
+801002da:	8b 45 08             	mov    0x8(%ebp),%eax
+801002dd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801002e1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+801002e5:	89 c2                	mov    %eax,%edx
+801002e7:	ec                   	in     (%dx),%al
+801002e8:	88 45 ff             	mov    %al,-0x1(%ebp)
+  return data;
+801002eb:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
+}
+801002ef:	c9                   	leave  
+801002f0:	c3                   	ret    
+
+801002f1 <outb>:
+               "memory", "cc");
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+801002f1:	55                   	push   %ebp
+801002f2:	89 e5                	mov    %esp,%ebp
+801002f4:	83 ec 08             	sub    $0x8,%esp
+801002f7:	8b 55 08             	mov    0x8(%ebp),%edx
+801002fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+801002fd:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
+80100301:	88 45 f8             	mov    %al,-0x8(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100304:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
+80100308:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+8010030c:	ee                   	out    %al,(%dx)
+}
+8010030d:	90                   	nop
+8010030e:	c9                   	leave  
+8010030f:	c3                   	ret    
+
+80100310 <cli>:
+  asm volatile("movw %0, %%gs" : : "r" (v));
+}
+
+static inline void
+cli(void)
+{
+80100310:	55                   	push   %ebp
+80100311:	89 e5                	mov    %esp,%ebp
+  asm volatile("cli");
+80100313:	fa                   	cli    
+}
+80100314:	90                   	nop
+80100315:	5d                   	pop    %ebp
+80100316:	c3                   	ret    
+
+80100317 <printint>:
+  int locking;
+} cons;
+
+static void
+printint(int xx, int base, int sign)
+{
+80100317:	55                   	push   %ebp
+80100318:	89 e5                	mov    %esp,%ebp
+8010031a:	53                   	push   %ebx
+8010031b:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789abcdef";
+  char buf[16];
+  int i;
+  uint x;
+
+  if(sign && (sign = xx < 0))
+8010031e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+80100322:	74 1c                	je     80100340 <printint+0x29>
+80100324:	8b 45 08             	mov    0x8(%ebp),%eax
+80100327:	c1 e8 1f             	shr    $0x1f,%eax
+8010032a:	0f b6 c0             	movzbl %al,%eax
+8010032d:	89 45 10             	mov    %eax,0x10(%ebp)
+80100330:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+80100334:	74 0a                	je     80100340 <printint+0x29>
+    x = -xx;
+80100336:	8b 45 08             	mov    0x8(%ebp),%eax
+80100339:	f7 d8                	neg    %eax
+8010033b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+8010033e:	eb 06                	jmp    80100346 <printint+0x2f>
+  else
+    x = xx;
+80100340:	8b 45 08             	mov    0x8(%ebp),%eax
+80100343:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+  i = 0;
+80100346:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+8010034d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+80100350:	8d 41 01             	lea    0x1(%ecx),%eax
+80100353:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80100356:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+80100359:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010035c:	ba 00 00 00 00       	mov    $0x0,%edx
+80100361:	f7 f3                	div    %ebx
+80100363:	89 d0                	mov    %edx,%eax
+80100365:	0f b6 80 04 90 10 80 	movzbl -0x7fef6ffc(%eax),%eax
+8010036c:	88 44 0d e0          	mov    %al,-0x20(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+80100370:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+80100373:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80100376:	ba 00 00 00 00       	mov    $0x0,%edx
+8010037b:	f7 f3                	div    %ebx
+8010037d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80100380:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80100384:	75 c7                	jne    8010034d <printint+0x36>
+
+  if(sign)
+80100386:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+8010038a:	74 2a                	je     801003b6 <printint+0x9f>
+    buf[i++] = '-';
+8010038c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010038f:	8d 50 01             	lea    0x1(%eax),%edx
+80100392:	89 55 f4             	mov    %edx,-0xc(%ebp)
+80100395:	c6 44 05 e0 2d       	movb   $0x2d,-0x20(%ebp,%eax,1)
+
+  while(--i >= 0)
+8010039a:	eb 1a                	jmp    801003b6 <printint+0x9f>
+    consputc(buf[i]);
+8010039c:	8d 55 e0             	lea    -0x20(%ebp),%edx
+8010039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801003a2:	01 d0                	add    %edx,%eax
+801003a4:	0f b6 00             	movzbl (%eax),%eax
+801003a7:	0f be c0             	movsbl %al,%eax
+801003aa:	83 ec 0c             	sub    $0xc,%esp
+801003ad:	50                   	push   %eax
+801003ae:	e8 c3 03 00 00       	call   80100776 <consputc>
+801003b3:	83 c4 10             	add    $0x10,%esp
+  }while((x /= base) != 0);
+
+  if(sign)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+801003b6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+801003ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801003be:	79 dc                	jns    8010039c <printint+0x85>
+    consputc(buf[i]);
+}
+801003c0:	90                   	nop
+801003c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801003c4:	c9                   	leave  
+801003c5:	c3                   	ret    
+
+801003c6 <cprintf>:
+//PAGEBREAK: 50
+
+// Print to the console. only understands %d, %x, %p, %s.
+void
+cprintf(char *fmt, ...)
+{
+801003c6:	55                   	push   %ebp
+801003c7:	89 e5                	mov    %esp,%ebp
+801003c9:	83 ec 28             	sub    $0x28,%esp
+  int i, c, locking;
+  uint *argp;
+  char *s;
+
+  locking = cons.locking;
+801003cc:	a1 f4 b5 10 80       	mov    0x8010b5f4,%eax
+801003d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  if(locking)
+801003d4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+801003d8:	74 10                	je     801003ea <cprintf+0x24>
+    acquire(&cons.lock);
+801003da:	83 ec 0c             	sub    $0xc,%esp
+801003dd:	68 c0 b5 10 80       	push   $0x8010b5c0
+801003e2:	e8 6f 4b 00 00       	call   80104f56 <acquire>
+801003e7:	83 c4 10             	add    $0x10,%esp
+
+  if (fmt == 0)
+801003ea:	8b 45 08             	mov    0x8(%ebp),%eax
+801003ed:	85 c0                	test   %eax,%eax
+801003ef:	75 0d                	jne    801003fe <cprintf+0x38>
+    panic("null fmt");
+801003f1:	83 ec 0c             	sub    $0xc,%esp
+801003f4:	68 0a 85 10 80       	push   $0x8010850a
+801003f9:	e8 68 01 00 00       	call   80100566 <panic>
+
+  argp = (uint*)(void*)(&fmt + 1);
+801003fe:	8d 45 0c             	lea    0xc(%ebp),%eax
+80100401:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100404:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+8010040b:	e9 1a 01 00 00       	jmp    8010052a <cprintf+0x164>
+    if(c != '%'){
+80100410:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+80100414:	74 13                	je     80100429 <cprintf+0x63>
+      consputc(c);
+80100416:	83 ec 0c             	sub    $0xc,%esp
+80100419:	ff 75 e4             	pushl  -0x1c(%ebp)
+8010041c:	e8 55 03 00 00       	call   80100776 <consputc>
+80100421:	83 c4 10             	add    $0x10,%esp
+      continue;
+80100424:	e9 fd 00 00 00       	jmp    80100526 <cprintf+0x160>
+    }
+    c = fmt[++i] & 0xff;
+80100429:	8b 55 08             	mov    0x8(%ebp),%edx
+8010042c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80100430:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100433:	01 d0                	add    %edx,%eax
+80100435:	0f b6 00             	movzbl (%eax),%eax
+80100438:	0f be c0             	movsbl %al,%eax
+8010043b:	25 ff 00 00 00       	and    $0xff,%eax
+80100440:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(c == 0)
+80100443:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+80100447:	0f 84 ff 00 00 00    	je     8010054c <cprintf+0x186>
+      break;
+    switch(c){
+8010044d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100450:	83 f8 70             	cmp    $0x70,%eax
+80100453:	74 47                	je     8010049c <cprintf+0xd6>
+80100455:	83 f8 70             	cmp    $0x70,%eax
+80100458:	7f 13                	jg     8010046d <cprintf+0xa7>
+8010045a:	83 f8 25             	cmp    $0x25,%eax
+8010045d:	0f 84 98 00 00 00    	je     801004fb <cprintf+0x135>
+80100463:	83 f8 64             	cmp    $0x64,%eax
+80100466:	74 14                	je     8010047c <cprintf+0xb6>
+80100468:	e9 9d 00 00 00       	jmp    8010050a <cprintf+0x144>
+8010046d:	83 f8 73             	cmp    $0x73,%eax
+80100470:	74 47                	je     801004b9 <cprintf+0xf3>
+80100472:	83 f8 78             	cmp    $0x78,%eax
+80100475:	74 25                	je     8010049c <cprintf+0xd6>
+80100477:	e9 8e 00 00 00       	jmp    8010050a <cprintf+0x144>
+    case 'd':
+      printint(*argp++, 10, 1);
+8010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010047f:	8d 50 04             	lea    0x4(%eax),%edx
+80100482:	89 55 f0             	mov    %edx,-0x10(%ebp)
+80100485:	8b 00                	mov    (%eax),%eax
+80100487:	83 ec 04             	sub    $0x4,%esp
+8010048a:	6a 01                	push   $0x1
+8010048c:	6a 0a                	push   $0xa
+8010048e:	50                   	push   %eax
+8010048f:	e8 83 fe ff ff       	call   80100317 <printint>
+80100494:	83 c4 10             	add    $0x10,%esp
+      break;
+80100497:	e9 8a 00 00 00       	jmp    80100526 <cprintf+0x160>
+    case 'x':
+    case 'p':
+      printint(*argp++, 16, 0);
+8010049c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010049f:	8d 50 04             	lea    0x4(%eax),%edx
+801004a2:	89 55 f0             	mov    %edx,-0x10(%ebp)
+801004a5:	8b 00                	mov    (%eax),%eax
+801004a7:	83 ec 04             	sub    $0x4,%esp
+801004aa:	6a 00                	push   $0x0
+801004ac:	6a 10                	push   $0x10
+801004ae:	50                   	push   %eax
+801004af:	e8 63 fe ff ff       	call   80100317 <printint>
+801004b4:	83 c4 10             	add    $0x10,%esp
+      break;
+801004b7:	eb 6d                	jmp    80100526 <cprintf+0x160>
+    case 's':
+      if((s = (char*)*argp++) == 0)
+801004b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801004bc:	8d 50 04             	lea    0x4(%eax),%edx
+801004bf:	89 55 f0             	mov    %edx,-0x10(%ebp)
+801004c2:	8b 00                	mov    (%eax),%eax
+801004c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+801004c7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+801004cb:	75 22                	jne    801004ef <cprintf+0x129>
+        s = "(null)";
+801004cd:	c7 45 ec 13 85 10 80 	movl   $0x80108513,-0x14(%ebp)
+      for(; *s; s++)
+801004d4:	eb 19                	jmp    801004ef <cprintf+0x129>
+        consputc(*s);
+801004d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801004d9:	0f b6 00             	movzbl (%eax),%eax
+801004dc:	0f be c0             	movsbl %al,%eax
+801004df:	83 ec 0c             	sub    $0xc,%esp
+801004e2:	50                   	push   %eax
+801004e3:	e8 8e 02 00 00       	call   80100776 <consputc>
+801004e8:	83 c4 10             	add    $0x10,%esp
+      printint(*argp++, 16, 0);
+      break;
+    case 's':
+      if((s = (char*)*argp++) == 0)
+        s = "(null)";
+      for(; *s; s++)
+801004eb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+801004ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801004f2:	0f b6 00             	movzbl (%eax),%eax
+801004f5:	84 c0                	test   %al,%al
+801004f7:	75 dd                	jne    801004d6 <cprintf+0x110>
+        consputc(*s);
+      break;
+801004f9:	eb 2b                	jmp    80100526 <cprintf+0x160>
+    case '%':
+      consputc('%');
+801004fb:	83 ec 0c             	sub    $0xc,%esp
+801004fe:	6a 25                	push   $0x25
+80100500:	e8 71 02 00 00       	call   80100776 <consputc>
+80100505:	83 c4 10             	add    $0x10,%esp
+      break;
+80100508:	eb 1c                	jmp    80100526 <cprintf+0x160>
+    default:
+      // Print unknown % sequence to draw attention.
+      consputc('%');
+8010050a:	83 ec 0c             	sub    $0xc,%esp
+8010050d:	6a 25                	push   $0x25
+8010050f:	e8 62 02 00 00       	call   80100776 <consputc>
+80100514:	83 c4 10             	add    $0x10,%esp
+      consputc(c);
+80100517:	83 ec 0c             	sub    $0xc,%esp
+8010051a:	ff 75 e4             	pushl  -0x1c(%ebp)
+8010051d:	e8 54 02 00 00       	call   80100776 <consputc>
+80100522:	83 c4 10             	add    $0x10,%esp
+      break;
+80100525:	90                   	nop
+
+  if (fmt == 0)
+    panic("null fmt");
+
+  argp = (uint*)(void*)(&fmt + 1);
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100526:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+8010052a:	8b 55 08             	mov    0x8(%ebp),%edx
+8010052d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100530:	01 d0                	add    %edx,%eax
+80100532:	0f b6 00             	movzbl (%eax),%eax
+80100535:	0f be c0             	movsbl %al,%eax
+80100538:	25 ff 00 00 00       	and    $0xff,%eax
+8010053d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80100540:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+80100544:	0f 85 c6 fe ff ff    	jne    80100410 <cprintf+0x4a>
+8010054a:	eb 01                	jmp    8010054d <cprintf+0x187>
+      consputc(c);
+      continue;
+    }
+    c = fmt[++i] & 0xff;
+    if(c == 0)
+      break;
+8010054c:	90                   	nop
+      consputc(c);
+      break;
+    }
+  }
+
+  if(locking)
+8010054d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+80100551:	74 10                	je     80100563 <cprintf+0x19d>
+    release(&cons.lock);
+80100553:	83 ec 0c             	sub    $0xc,%esp
+80100556:	68 c0 b5 10 80       	push   $0x8010b5c0
+8010055b:	e8 5d 4a 00 00       	call   80104fbd <release>
+80100560:	83 c4 10             	add    $0x10,%esp
+}
+80100563:	90                   	nop
+80100564:	c9                   	leave  
+80100565:	c3                   	ret    
+
+80100566 <panic>:
+
+void
+panic(char *s)
+{
+80100566:	55                   	push   %ebp
+80100567:	89 e5                	mov    %esp,%ebp
+80100569:	83 ec 38             	sub    $0x38,%esp
+  int i;
+  uint pcs[10];
+  
+  cli();
+8010056c:	e8 9f fd ff ff       	call   80100310 <cli>
+  cons.locking = 0;
+80100571:	c7 05 f4 b5 10 80 00 	movl   $0x0,0x8010b5f4
+80100578:	00 00 00 
+  cprintf("cpu%d: panic: ", cpu->id);
+8010057b:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80100581:	0f b6 00             	movzbl (%eax),%eax
+80100584:	0f b6 c0             	movzbl %al,%eax
+80100587:	83 ec 08             	sub    $0x8,%esp
+8010058a:	50                   	push   %eax
+8010058b:	68 1a 85 10 80       	push   $0x8010851a
+80100590:	e8 31 fe ff ff       	call   801003c6 <cprintf>
+80100595:	83 c4 10             	add    $0x10,%esp
+  cprintf(s);
+80100598:	8b 45 08             	mov    0x8(%ebp),%eax
+8010059b:	83 ec 0c             	sub    $0xc,%esp
+8010059e:	50                   	push   %eax
+8010059f:	e8 22 fe ff ff       	call   801003c6 <cprintf>
+801005a4:	83 c4 10             	add    $0x10,%esp
+  cprintf("\n");
+801005a7:	83 ec 0c             	sub    $0xc,%esp
+801005aa:	68 29 85 10 80       	push   $0x80108529
+801005af:	e8 12 fe ff ff       	call   801003c6 <cprintf>
+801005b4:	83 c4 10             	add    $0x10,%esp
+  getcallerpcs(&s, pcs);
+801005b7:	83 ec 08             	sub    $0x8,%esp
+801005ba:	8d 45 cc             	lea    -0x34(%ebp),%eax
+801005bd:	50                   	push   %eax
+801005be:	8d 45 08             	lea    0x8(%ebp),%eax
+801005c1:	50                   	push   %eax
+801005c2:	e8 48 4a 00 00       	call   8010500f <getcallerpcs>
+801005c7:	83 c4 10             	add    $0x10,%esp
+  for(i=0; i<10; i++)
+801005ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+801005d1:	eb 1c                	jmp    801005ef <panic+0x89>
+    cprintf(" %p", pcs[i]);
+801005d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801005d6:	8b 44 85 cc          	mov    -0x34(%ebp,%eax,4),%eax
+801005da:	83 ec 08             	sub    $0x8,%esp
+801005dd:	50                   	push   %eax
+801005de:	68 2b 85 10 80       	push   $0x8010852b
+801005e3:	e8 de fd ff ff       	call   801003c6 <cprintf>
+801005e8:	83 c4 10             	add    $0x10,%esp
+  cons.locking = 0;
+  cprintf("cpu%d: panic: ", cpu->id);
+  cprintf(s);
+  cprintf("\n");
+  getcallerpcs(&s, pcs);
+  for(i=0; i<10; i++)
+801005eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+801005ef:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+801005f3:	7e de                	jle    801005d3 <panic+0x6d>
+    cprintf(" %p", pcs[i]);
+  panicked = 1; // freeze other CPU
+801005f5:	c7 05 a0 b5 10 80 01 	movl   $0x1,0x8010b5a0
+801005fc:	00 00 00 
+  for(;;)
+    ;
+801005ff:	eb fe                	jmp    801005ff <panic+0x99>
+
+80100601 <cgaputc>:
+#define CRTPORT 0x3d4
+static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
+
+static void
+cgaputc(int c)
+{
+80100601:	55                   	push   %ebp
+80100602:	89 e5                	mov    %esp,%ebp
+80100604:	83 ec 18             	sub    $0x18,%esp
+  int pos;
+  
+  // Cursor position: col + 80*row.
+  outb(CRTPORT, 14);
+80100607:	6a 0e                	push   $0xe
+80100609:	68 d4 03 00 00       	push   $0x3d4
+8010060e:	e8 de fc ff ff       	call   801002f1 <outb>
+80100613:	83 c4 08             	add    $0x8,%esp
+  pos = inb(CRTPORT+1) << 8;
+80100616:	68 d5 03 00 00       	push   $0x3d5
+8010061b:	e8 b4 fc ff ff       	call   801002d4 <inb>
+80100620:	83 c4 04             	add    $0x4,%esp
+80100623:	0f b6 c0             	movzbl %al,%eax
+80100626:	c1 e0 08             	shl    $0x8,%eax
+80100629:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  outb(CRTPORT, 15);
+8010062c:	6a 0f                	push   $0xf
+8010062e:	68 d4 03 00 00       	push   $0x3d4
+80100633:	e8 b9 fc ff ff       	call   801002f1 <outb>
+80100638:	83 c4 08             	add    $0x8,%esp
+  pos |= inb(CRTPORT+1);
+8010063b:	68 d5 03 00 00       	push   $0x3d5
+80100640:	e8 8f fc ff ff       	call   801002d4 <inb>
+80100645:	83 c4 04             	add    $0x4,%esp
+80100648:	0f b6 c0             	movzbl %al,%eax
+8010064b:	09 45 f4             	or     %eax,-0xc(%ebp)
+
+  if(c == '\n')
+8010064e:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
+80100652:	75 30                	jne    80100684 <cgaputc+0x83>
+    pos += 80 - pos%80;
+80100654:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+80100657:	ba 67 66 66 66       	mov    $0x66666667,%edx
+8010065c:	89 c8                	mov    %ecx,%eax
+8010065e:	f7 ea                	imul   %edx
+80100660:	c1 fa 05             	sar    $0x5,%edx
+80100663:	89 c8                	mov    %ecx,%eax
+80100665:	c1 f8 1f             	sar    $0x1f,%eax
+80100668:	29 c2                	sub    %eax,%edx
+8010066a:	89 d0                	mov    %edx,%eax
+8010066c:	c1 e0 02             	shl    $0x2,%eax
+8010066f:	01 d0                	add    %edx,%eax
+80100671:	c1 e0 04             	shl    $0x4,%eax
+80100674:	29 c1                	sub    %eax,%ecx
+80100676:	89 ca                	mov    %ecx,%edx
+80100678:	b8 50 00 00 00       	mov    $0x50,%eax
+8010067d:	29 d0                	sub    %edx,%eax
+8010067f:	01 45 f4             	add    %eax,-0xc(%ebp)
+80100682:	eb 34                	jmp    801006b8 <cgaputc+0xb7>
+  else if(c == BACKSPACE){
+80100684:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
+8010068b:	75 0c                	jne    80100699 <cgaputc+0x98>
+    if(pos > 0) --pos;
+8010068d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80100691:	7e 25                	jle    801006b8 <cgaputc+0xb7>
+80100693:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+80100697:	eb 1f                	jmp    801006b8 <cgaputc+0xb7>
+  } else
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+80100699:	8b 0d 00 90 10 80    	mov    0x80109000,%ecx
+8010069f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801006a2:	8d 50 01             	lea    0x1(%eax),%edx
+801006a5:	89 55 f4             	mov    %edx,-0xc(%ebp)
+801006a8:	01 c0                	add    %eax,%eax
+801006aa:	01 c8                	add    %ecx,%eax
+801006ac:	8b 55 08             	mov    0x8(%ebp),%edx
+801006af:	0f b6 d2             	movzbl %dl,%edx
+801006b2:	80 ce 07             	or     $0x7,%dh
+801006b5:	66 89 10             	mov    %dx,(%eax)
+  
+  if((pos/80) >= 24){  // Scroll up.
+801006b8:	81 7d f4 7f 07 00 00 	cmpl   $0x77f,-0xc(%ebp)
+801006bf:	7e 4c                	jle    8010070d <cgaputc+0x10c>
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+801006c1:	a1 00 90 10 80       	mov    0x80109000,%eax
+801006c6:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
+801006cc:	a1 00 90 10 80       	mov    0x80109000,%eax
+801006d1:	83 ec 04             	sub    $0x4,%esp
+801006d4:	68 60 0e 00 00       	push   $0xe60
+801006d9:	52                   	push   %edx
+801006da:	50                   	push   %eax
+801006db:	e8 98 4b 00 00       	call   80105278 <memmove>
+801006e0:	83 c4 10             	add    $0x10,%esp
+    pos -= 80;
+801006e3:	83 6d f4 50          	subl   $0x50,-0xc(%ebp)
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+801006e7:	b8 80 07 00 00       	mov    $0x780,%eax
+801006ec:	2b 45 f4             	sub    -0xc(%ebp),%eax
+801006ef:	8d 14 00             	lea    (%eax,%eax,1),%edx
+801006f2:	a1 00 90 10 80       	mov    0x80109000,%eax
+801006f7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+801006fa:	01 c9                	add    %ecx,%ecx
+801006fc:	01 c8                	add    %ecx,%eax
+801006fe:	83 ec 04             	sub    $0x4,%esp
+80100701:	52                   	push   %edx
+80100702:	6a 00                	push   $0x0
+80100704:	50                   	push   %eax
+80100705:	e8 af 4a 00 00       	call   801051b9 <memset>
+8010070a:	83 c4 10             	add    $0x10,%esp
+  }
+  
+  outb(CRTPORT, 14);
+8010070d:	83 ec 08             	sub    $0x8,%esp
+80100710:	6a 0e                	push   $0xe
+80100712:	68 d4 03 00 00       	push   $0x3d4
+80100717:	e8 d5 fb ff ff       	call   801002f1 <outb>
+8010071c:	83 c4 10             	add    $0x10,%esp
+  outb(CRTPORT+1, pos>>8);
+8010071f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100722:	c1 f8 08             	sar    $0x8,%eax
+80100725:	0f b6 c0             	movzbl %al,%eax
+80100728:	83 ec 08             	sub    $0x8,%esp
+8010072b:	50                   	push   %eax
+8010072c:	68 d5 03 00 00       	push   $0x3d5
+80100731:	e8 bb fb ff ff       	call   801002f1 <outb>
+80100736:	83 c4 10             	add    $0x10,%esp
+  outb(CRTPORT, 15);
+80100739:	83 ec 08             	sub    $0x8,%esp
+8010073c:	6a 0f                	push   $0xf
+8010073e:	68 d4 03 00 00       	push   $0x3d4
+80100743:	e8 a9 fb ff ff       	call   801002f1 <outb>
+80100748:	83 c4 10             	add    $0x10,%esp
+  outb(CRTPORT+1, pos);
+8010074b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010074e:	0f b6 c0             	movzbl %al,%eax
+80100751:	83 ec 08             	sub    $0x8,%esp
+80100754:	50                   	push   %eax
+80100755:	68 d5 03 00 00       	push   $0x3d5
+8010075a:	e8 92 fb ff ff       	call   801002f1 <outb>
+8010075f:	83 c4 10             	add    $0x10,%esp
+  crt[pos] = ' ' | 0x0700;
+80100762:	a1 00 90 10 80       	mov    0x80109000,%eax
+80100767:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010076a:	01 d2                	add    %edx,%edx
+8010076c:	01 d0                	add    %edx,%eax
+8010076e:	66 c7 00 20 07       	movw   $0x720,(%eax)
+}
+80100773:	90                   	nop
+80100774:	c9                   	leave  
+80100775:	c3                   	ret    
+
+80100776 <consputc>:
+
+void
+consputc(int c)
+{
+80100776:	55                   	push   %ebp
+80100777:	89 e5                	mov    %esp,%ebp
+80100779:	83 ec 08             	sub    $0x8,%esp
+  if(panicked){
+8010077c:	a1 a0 b5 10 80       	mov    0x8010b5a0,%eax
+80100781:	85 c0                	test   %eax,%eax
+80100783:	74 07                	je     8010078c <consputc+0x16>
+    cli();
+80100785:	e8 86 fb ff ff       	call   80100310 <cli>
+    for(;;)
+      ;
+8010078a:	eb fe                	jmp    8010078a <consputc+0x14>
+  }
+
+  if(c == BACKSPACE){
+8010078c:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
+80100793:	75 29                	jne    801007be <consputc+0x48>
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+80100795:	83 ec 0c             	sub    $0xc,%esp
+80100798:	6a 08                	push   $0x8
+8010079a:	e8 cb 63 00 00       	call   80106b6a <uartputc>
+8010079f:	83 c4 10             	add    $0x10,%esp
+801007a2:	83 ec 0c             	sub    $0xc,%esp
+801007a5:	6a 20                	push   $0x20
+801007a7:	e8 be 63 00 00       	call   80106b6a <uartputc>
+801007ac:	83 c4 10             	add    $0x10,%esp
+801007af:	83 ec 0c             	sub    $0xc,%esp
+801007b2:	6a 08                	push   $0x8
+801007b4:	e8 b1 63 00 00       	call   80106b6a <uartputc>
+801007b9:	83 c4 10             	add    $0x10,%esp
+801007bc:	eb 0e                	jmp    801007cc <consputc+0x56>
+  } else
+    uartputc(c);
+801007be:	83 ec 0c             	sub    $0xc,%esp
+801007c1:	ff 75 08             	pushl  0x8(%ebp)
+801007c4:	e8 a1 63 00 00       	call   80106b6a <uartputc>
+801007c9:	83 c4 10             	add    $0x10,%esp
+  cgaputc(c);
+801007cc:	83 ec 0c             	sub    $0xc,%esp
+801007cf:	ff 75 08             	pushl  0x8(%ebp)
+801007d2:	e8 2a fe ff ff       	call   80100601 <cgaputc>
+801007d7:	83 c4 10             	add    $0x10,%esp
+}
+801007da:	90                   	nop
+801007db:	c9                   	leave  
+801007dc:	c3                   	ret    
+
+801007dd <consoleintr>:
+
+#define C(x)  ((x)-'@')  // Control-x
+
+void
+consoleintr(int (*getc)(void))
+{
+801007dd:	55                   	push   %ebp
+801007de:	89 e5                	mov    %esp,%ebp
+801007e0:	83 ec 18             	sub    $0x18,%esp
+  int c;
+
+  acquire(&input.lock);
+801007e3:	83 ec 0c             	sub    $0xc,%esp
+801007e6:	68 80 07 11 80       	push   $0x80110780
+801007eb:	e8 66 47 00 00       	call   80104f56 <acquire>
+801007f0:	83 c4 10             	add    $0x10,%esp
+  while((c = getc()) >= 0){
+801007f3:	e9 42 01 00 00       	jmp    8010093a <consoleintr+0x15d>
+    switch(c){
+801007f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801007fb:	83 f8 10             	cmp    $0x10,%eax
+801007fe:	74 1e                	je     8010081e <consoleintr+0x41>
+80100800:	83 f8 10             	cmp    $0x10,%eax
+80100803:	7f 0a                	jg     8010080f <consoleintr+0x32>
+80100805:	83 f8 08             	cmp    $0x8,%eax
+80100808:	74 69                	je     80100873 <consoleintr+0x96>
+8010080a:	e9 99 00 00 00       	jmp    801008a8 <consoleintr+0xcb>
+8010080f:	83 f8 15             	cmp    $0x15,%eax
+80100812:	74 31                	je     80100845 <consoleintr+0x68>
+80100814:	83 f8 7f             	cmp    $0x7f,%eax
+80100817:	74 5a                	je     80100873 <consoleintr+0x96>
+80100819:	e9 8a 00 00 00       	jmp    801008a8 <consoleintr+0xcb>
+    case C('P'):  // Process listing.
+      procdump();
+8010081e:	e8 e0 45 00 00       	call   80104e03 <procdump>
+      break;
+80100823:	e9 12 01 00 00       	jmp    8010093a <consoleintr+0x15d>
+    case C('U'):  // Kill line.
+      while(input.e != input.w &&
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+        input.e--;
+80100828:	a1 3c 08 11 80       	mov    0x8011083c,%eax
+8010082d:	83 e8 01             	sub    $0x1,%eax
+80100830:	a3 3c 08 11 80       	mov    %eax,0x8011083c
+        consputc(BACKSPACE);
+80100835:	83 ec 0c             	sub    $0xc,%esp
+80100838:	68 00 01 00 00       	push   $0x100
+8010083d:	e8 34 ff ff ff       	call   80100776 <consputc>
+80100842:	83 c4 10             	add    $0x10,%esp
+    switch(c){
+    case C('P'):  // Process listing.
+      procdump();
+      break;
+    case C('U'):  // Kill line.
+      while(input.e != input.w &&
+80100845:	8b 15 3c 08 11 80    	mov    0x8011083c,%edx
+8010084b:	a1 38 08 11 80       	mov    0x80110838,%eax
+80100850:	39 c2                	cmp    %eax,%edx
+80100852:	0f 84 e2 00 00 00    	je     8010093a <consoleintr+0x15d>
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+80100858:	a1 3c 08 11 80       	mov    0x8011083c,%eax
+8010085d:	83 e8 01             	sub    $0x1,%eax
+80100860:	83 e0 7f             	and    $0x7f,%eax
+80100863:	0f b6 80 b4 07 11 80 	movzbl -0x7feef84c(%eax),%eax
+    switch(c){
+    case C('P'):  // Process listing.
+      procdump();
+      break;
+    case C('U'):  // Kill line.
+      while(input.e != input.w &&
+8010086a:	3c 0a                	cmp    $0xa,%al
+8010086c:	75 ba                	jne    80100828 <consoleintr+0x4b>
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+        input.e--;
+        consputc(BACKSPACE);
+      }
+      break;
+8010086e:	e9 c7 00 00 00       	jmp    8010093a <consoleintr+0x15d>
+    case C('H'): case '\x7f':  // Backspace
+      if(input.e != input.w){
+80100873:	8b 15 3c 08 11 80    	mov    0x8011083c,%edx
+80100879:	a1 38 08 11 80       	mov    0x80110838,%eax
+8010087e:	39 c2                	cmp    %eax,%edx
+80100880:	0f 84 b4 00 00 00    	je     8010093a <consoleintr+0x15d>
+        input.e--;
+80100886:	a1 3c 08 11 80       	mov    0x8011083c,%eax
+8010088b:	83 e8 01             	sub    $0x1,%eax
+8010088e:	a3 3c 08 11 80       	mov    %eax,0x8011083c
+        consputc(BACKSPACE);
+80100893:	83 ec 0c             	sub    $0xc,%esp
+80100896:	68 00 01 00 00       	push   $0x100
+8010089b:	e8 d6 fe ff ff       	call   80100776 <consputc>
+801008a0:	83 c4 10             	add    $0x10,%esp
+      }
+      break;
+801008a3:	e9 92 00 00 00       	jmp    8010093a <consoleintr+0x15d>
+    default:
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+801008a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801008ac:	0f 84 87 00 00 00    	je     80100939 <consoleintr+0x15c>
+801008b2:	8b 15 3c 08 11 80    	mov    0x8011083c,%edx
+801008b8:	a1 34 08 11 80       	mov    0x80110834,%eax
+801008bd:	29 c2                	sub    %eax,%edx
+801008bf:	89 d0                	mov    %edx,%eax
+801008c1:	83 f8 7f             	cmp    $0x7f,%eax
+801008c4:	77 73                	ja     80100939 <consoleintr+0x15c>
+        c = (c == '\r') ? '\n' : c;
+801008c6:	83 7d f4 0d          	cmpl   $0xd,-0xc(%ebp)
+801008ca:	74 05                	je     801008d1 <consoleintr+0xf4>
+801008cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801008cf:	eb 05                	jmp    801008d6 <consoleintr+0xf9>
+801008d1:	b8 0a 00 00 00       	mov    $0xa,%eax
+801008d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008d9:	a1 3c 08 11 80       	mov    0x8011083c,%eax
+801008de:	8d 50 01             	lea    0x1(%eax),%edx
+801008e1:	89 15 3c 08 11 80    	mov    %edx,0x8011083c
+801008e7:	83 e0 7f             	and    $0x7f,%eax
+801008ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801008ed:	88 90 b4 07 11 80    	mov    %dl,-0x7feef84c(%eax)
+        consputc(c);
+801008f3:	83 ec 0c             	sub    $0xc,%esp
+801008f6:	ff 75 f4             	pushl  -0xc(%ebp)
+801008f9:	e8 78 fe ff ff       	call   80100776 <consputc>
+801008fe:	83 c4 10             	add    $0x10,%esp
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+80100901:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
+80100905:	74 18                	je     8010091f <consoleintr+0x142>
+80100907:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+8010090b:	74 12                	je     8010091f <consoleintr+0x142>
+8010090d:	a1 3c 08 11 80       	mov    0x8011083c,%eax
+80100912:	8b 15 34 08 11 80    	mov    0x80110834,%edx
+80100918:	83 ea 80             	sub    $0xffffff80,%edx
+8010091b:	39 d0                	cmp    %edx,%eax
+8010091d:	75 1a                	jne    80100939 <consoleintr+0x15c>
+          input.w = input.e;
+8010091f:	a1 3c 08 11 80       	mov    0x8011083c,%eax
+80100924:	a3 38 08 11 80       	mov    %eax,0x80110838
+          wakeup(&input.r);
+80100929:	83 ec 0c             	sub    $0xc,%esp
+8010092c:	68 34 08 11 80       	push   $0x80110834
+80100931:	e8 12 44 00 00       	call   80104d48 <wakeup>
+80100936:	83 c4 10             	add    $0x10,%esp
+        }
+      }
+      break;
+80100939:	90                   	nop
+consoleintr(int (*getc)(void))
+{
+  int c;
+
+  acquire(&input.lock);
+  while((c = getc()) >= 0){
+8010093a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010093d:	ff d0                	call   *%eax
+8010093f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80100942:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80100946:	0f 89 ac fe ff ff    	jns    801007f8 <consoleintr+0x1b>
+        }
+      }
+      break;
+    }
+  }
+  release(&input.lock);
+8010094c:	83 ec 0c             	sub    $0xc,%esp
+8010094f:	68 80 07 11 80       	push   $0x80110780
+80100954:	e8 64 46 00 00       	call   80104fbd <release>
+80100959:	83 c4 10             	add    $0x10,%esp
+}
+8010095c:	90                   	nop
+8010095d:	c9                   	leave  
+8010095e:	c3                   	ret    
+
+8010095f <consoleread>:
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+8010095f:	55                   	push   %ebp
+80100960:	89 e5                	mov    %esp,%ebp
+80100962:	83 ec 18             	sub    $0x18,%esp
+  uint target;
+  int c;
+
+  iunlock(ip);
+80100965:	83 ec 0c             	sub    $0xc,%esp
+80100968:	ff 75 08             	pushl  0x8(%ebp)
+8010096b:	e8 f3 10 00 00       	call   80101a63 <iunlock>
+80100970:	83 c4 10             	add    $0x10,%esp
+  target = n;
+80100973:	8b 45 10             	mov    0x10(%ebp),%eax
+80100976:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  acquire(&input.lock);
+80100979:	83 ec 0c             	sub    $0xc,%esp
+8010097c:	68 80 07 11 80       	push   $0x80110780
+80100981:	e8 d0 45 00 00       	call   80104f56 <acquire>
+80100986:	83 c4 10             	add    $0x10,%esp
+  while(n > 0){
+80100989:	e9 ac 00 00 00       	jmp    80100a3a <consoleread+0xdb>
+    while(input.r == input.w){
+      if(proc->killed){
+8010098e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80100994:	8b 40 24             	mov    0x24(%eax),%eax
+80100997:	85 c0                	test   %eax,%eax
+80100999:	74 28                	je     801009c3 <consoleread+0x64>
+        release(&input.lock);
+8010099b:	83 ec 0c             	sub    $0xc,%esp
+8010099e:	68 80 07 11 80       	push   $0x80110780
+801009a3:	e8 15 46 00 00       	call   80104fbd <release>
+801009a8:	83 c4 10             	add    $0x10,%esp
+        ilock(ip);
+801009ab:	83 ec 0c             	sub    $0xc,%esp
+801009ae:	ff 75 08             	pushl  0x8(%ebp)
+801009b1:	e8 55 0f 00 00       	call   8010190b <ilock>
+801009b6:	83 c4 10             	add    $0x10,%esp
+        return -1;
+801009b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801009be:	e9 ab 00 00 00       	jmp    80100a6e <consoleread+0x10f>
+      }
+      sleep(&input.r, &input.lock);
+801009c3:	83 ec 08             	sub    $0x8,%esp
+801009c6:	68 80 07 11 80       	push   $0x80110780
+801009cb:	68 34 08 11 80       	push   $0x80110834
+801009d0:	e8 88 42 00 00       	call   80104c5d <sleep>
+801009d5:	83 c4 10             	add    $0x10,%esp
+
+  iunlock(ip);
+  target = n;
+  acquire(&input.lock);
+  while(n > 0){
+    while(input.r == input.w){
+801009d8:	8b 15 34 08 11 80    	mov    0x80110834,%edx
+801009de:	a1 38 08 11 80       	mov    0x80110838,%eax
+801009e3:	39 c2                	cmp    %eax,%edx
+801009e5:	74 a7                	je     8010098e <consoleread+0x2f>
+        ilock(ip);
+        return -1;
+      }
+      sleep(&input.r, &input.lock);
+    }
+    c = input.buf[input.r++ % INPUT_BUF];
+801009e7:	a1 34 08 11 80       	mov    0x80110834,%eax
+801009ec:	8d 50 01             	lea    0x1(%eax),%edx
+801009ef:	89 15 34 08 11 80    	mov    %edx,0x80110834
+801009f5:	83 e0 7f             	and    $0x7f,%eax
+801009f8:	0f b6 80 b4 07 11 80 	movzbl -0x7feef84c(%eax),%eax
+801009ff:	0f be c0             	movsbl %al,%eax
+80100a02:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(c == C('D')){  // EOF
+80100a05:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+80100a09:	75 17                	jne    80100a22 <consoleread+0xc3>
+      if(n < target){
+80100a0b:	8b 45 10             	mov    0x10(%ebp),%eax
+80100a0e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80100a11:	73 2f                	jae    80100a42 <consoleread+0xe3>
+        // Save ^D for next time, to make sure
+        // caller gets a 0-byte result.
+        input.r--;
+80100a13:	a1 34 08 11 80       	mov    0x80110834,%eax
+80100a18:	83 e8 01             	sub    $0x1,%eax
+80100a1b:	a3 34 08 11 80       	mov    %eax,0x80110834
+      }
+      break;
+80100a20:	eb 20                	jmp    80100a42 <consoleread+0xe3>
+    }
+    *dst++ = c;
+80100a22:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100a25:	8d 50 01             	lea    0x1(%eax),%edx
+80100a28:	89 55 0c             	mov    %edx,0xc(%ebp)
+80100a2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80100a2e:	88 10                	mov    %dl,(%eax)
+    --n;
+80100a30:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+    if(c == '\n')
+80100a34:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
+80100a38:	74 0b                	je     80100a45 <consoleread+0xe6>
+  int c;
+
+  iunlock(ip);
+  target = n;
+  acquire(&input.lock);
+  while(n > 0){
+80100a3a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+80100a3e:	7f 98                	jg     801009d8 <consoleread+0x79>
+80100a40:	eb 04                	jmp    80100a46 <consoleread+0xe7>
+      if(n < target){
+        // Save ^D for next time, to make sure
+        // caller gets a 0-byte result.
+        input.r--;
+      }
+      break;
+80100a42:	90                   	nop
+80100a43:	eb 01                	jmp    80100a46 <consoleread+0xe7>
+    }
+    *dst++ = c;
+    --n;
+    if(c == '\n')
+      break;
+80100a45:	90                   	nop
+  }
+  release(&input.lock);
+80100a46:	83 ec 0c             	sub    $0xc,%esp
+80100a49:	68 80 07 11 80       	push   $0x80110780
+80100a4e:	e8 6a 45 00 00       	call   80104fbd <release>
+80100a53:	83 c4 10             	add    $0x10,%esp
+  ilock(ip);
+80100a56:	83 ec 0c             	sub    $0xc,%esp
+80100a59:	ff 75 08             	pushl  0x8(%ebp)
+80100a5c:	e8 aa 0e 00 00       	call   8010190b <ilock>
+80100a61:	83 c4 10             	add    $0x10,%esp
+
+  return target - n;
+80100a64:	8b 45 10             	mov    0x10(%ebp),%eax
+80100a67:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80100a6a:	29 c2                	sub    %eax,%edx
+80100a6c:	89 d0                	mov    %edx,%eax
+}
+80100a6e:	c9                   	leave  
+80100a6f:	c3                   	ret    
+
+80100a70 <consolewrite>:
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+80100a70:	55                   	push   %ebp
+80100a71:	89 e5                	mov    %esp,%ebp
+80100a73:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  iunlock(ip);
+80100a76:	83 ec 0c             	sub    $0xc,%esp
+80100a79:	ff 75 08             	pushl  0x8(%ebp)
+80100a7c:	e8 e2 0f 00 00       	call   80101a63 <iunlock>
+80100a81:	83 c4 10             	add    $0x10,%esp
+  acquire(&cons.lock);
+80100a84:	83 ec 0c             	sub    $0xc,%esp
+80100a87:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100a8c:	e8 c5 44 00 00       	call   80104f56 <acquire>
+80100a91:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < n; i++)
+80100a94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80100a9b:	eb 21                	jmp    80100abe <consolewrite+0x4e>
+    consputc(buf[i] & 0xff);
+80100a9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80100aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100aa3:	01 d0                	add    %edx,%eax
+80100aa5:	0f b6 00             	movzbl (%eax),%eax
+80100aa8:	0f be c0             	movsbl %al,%eax
+80100aab:	0f b6 c0             	movzbl %al,%eax
+80100aae:	83 ec 0c             	sub    $0xc,%esp
+80100ab1:	50                   	push   %eax
+80100ab2:	e8 bf fc ff ff       	call   80100776 <consputc>
+80100ab7:	83 c4 10             	add    $0x10,%esp
+{
+  int i;
+
+  iunlock(ip);
+  acquire(&cons.lock);
+  for(i = 0; i < n; i++)
+80100aba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80100abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100ac1:	3b 45 10             	cmp    0x10(%ebp),%eax
+80100ac4:	7c d7                	jl     80100a9d <consolewrite+0x2d>
+    consputc(buf[i] & 0xff);
+  release(&cons.lock);
+80100ac6:	83 ec 0c             	sub    $0xc,%esp
+80100ac9:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100ace:	e8 ea 44 00 00       	call   80104fbd <release>
+80100ad3:	83 c4 10             	add    $0x10,%esp
+  ilock(ip);
+80100ad6:	83 ec 0c             	sub    $0xc,%esp
+80100ad9:	ff 75 08             	pushl  0x8(%ebp)
+80100adc:	e8 2a 0e 00 00       	call   8010190b <ilock>
+80100ae1:	83 c4 10             	add    $0x10,%esp
+
+  return n;
+80100ae4:	8b 45 10             	mov    0x10(%ebp),%eax
+}
+80100ae7:	c9                   	leave  
+80100ae8:	c3                   	ret    
+
+80100ae9 <consoleinit>:
+
+void
+consoleinit(void)
+{
+80100ae9:	55                   	push   %ebp
+80100aea:	89 e5                	mov    %esp,%ebp
+80100aec:	83 ec 08             	sub    $0x8,%esp
+  initlock(&cons.lock, "console");
+80100aef:	83 ec 08             	sub    $0x8,%esp
+80100af2:	68 2f 85 10 80       	push   $0x8010852f
+80100af7:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100afc:	e8 33 44 00 00       	call   80104f34 <initlock>
+80100b01:	83 c4 10             	add    $0x10,%esp
+  initlock(&input.lock, "input");
+80100b04:	83 ec 08             	sub    $0x8,%esp
+80100b07:	68 37 85 10 80       	push   $0x80108537
+80100b0c:	68 80 07 11 80       	push   $0x80110780
+80100b11:	e8 1e 44 00 00       	call   80104f34 <initlock>
+80100b16:	83 c4 10             	add    $0x10,%esp
+
+  devsw[CONSOLE].write = consolewrite;
+80100b19:	c7 05 ec 11 11 80 70 	movl   $0x80100a70,0x801111ec
+80100b20:	0a 10 80 
+  devsw[CONSOLE].read = consoleread;
+80100b23:	c7 05 e8 11 11 80 5f 	movl   $0x8010095f,0x801111e8
+80100b2a:	09 10 80 
+  cons.locking = 1;
+80100b2d:	c7 05 f4 b5 10 80 01 	movl   $0x1,0x8010b5f4
+80100b34:	00 00 00 
+
+  picenable(IRQ_KBD);
+80100b37:	83 ec 0c             	sub    $0xc,%esp
+80100b3a:	6a 01                	push   $0x1
+80100b3c:	e8 56 33 00 00       	call   80103e97 <picenable>
+80100b41:	83 c4 10             	add    $0x10,%esp
+  ioapicenable(IRQ_KBD, 0);
+80100b44:	83 ec 08             	sub    $0x8,%esp
+80100b47:	6a 00                	push   $0x0
+80100b49:	6a 01                	push   $0x1
+80100b4b:	e8 e9 1e 00 00       	call   80102a39 <ioapicenable>
+80100b50:	83 c4 10             	add    $0x10,%esp
+}
+80100b53:	90                   	nop
+80100b54:	c9                   	leave  
+80100b55:	c3                   	ret    
+
+80100b56 <exec>:
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+80100b56:	55                   	push   %ebp
+80100b57:	89 e5                	mov    %esp,%ebp
+80100b59:	81 ec 18 01 00 00    	sub    $0x118,%esp
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+
+  begin_op();
+80100b5f:	e8 50 29 00 00       	call   801034b4 <begin_op>
+  if((ip = namei(path)) == 0){
+80100b64:	83 ec 0c             	sub    $0xc,%esp
+80100b67:	ff 75 08             	pushl  0x8(%ebp)
+80100b6a:	e8 54 19 00 00       	call   801024c3 <namei>
+80100b6f:	83 c4 10             	add    $0x10,%esp
+80100b72:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80100b75:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+80100b79:	75 0f                	jne    80100b8a <exec+0x34>
+    end_op();
+80100b7b:	e8 c0 29 00 00       	call   80103540 <end_op>
+    return -1;
+80100b80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100b85:	e9 ce 03 00 00       	jmp    80100f58 <exec+0x402>
+  }
+  ilock(ip);
+80100b8a:	83 ec 0c             	sub    $0xc,%esp
+80100b8d:	ff 75 d8             	pushl  -0x28(%ebp)
+80100b90:	e8 76 0d 00 00       	call   8010190b <ilock>
+80100b95:	83 c4 10             	add    $0x10,%esp
+  pgdir = 0;
+80100b98:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
+80100b9f:	6a 34                	push   $0x34
+80100ba1:	6a 00                	push   $0x0
+80100ba3:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
+80100ba9:	50                   	push   %eax
+80100baa:	ff 75 d8             	pushl  -0x28(%ebp)
+80100bad:	e8 c1 12 00 00       	call   80101e73 <readi>
+80100bb2:	83 c4 10             	add    $0x10,%esp
+80100bb5:	83 f8 33             	cmp    $0x33,%eax
+80100bb8:	0f 86 49 03 00 00    	jbe    80100f07 <exec+0x3b1>
+    goto bad;
+  if(elf.magic != ELF_MAGIC)
+80100bbe:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+80100bc4:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
+80100bc9:	0f 85 3b 03 00 00    	jne    80100f0a <exec+0x3b4>
+    goto bad;
+
+  if((pgdir = setupkvm()) == 0)
+80100bcf:	e8 eb 70 00 00       	call   80107cbf <setupkvm>
+80100bd4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80100bd7:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
+80100bdb:	0f 84 2c 03 00 00    	je     80100f0d <exec+0x3b7>
+    goto bad;
+
+  // Load program into memory.
+  sz = 0;
+80100be1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100be8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+80100bef:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
+80100bf5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+80100bf8:	e9 ab 00 00 00       	jmp    80100ca8 <exec+0x152>
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+80100bfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80100c00:	6a 20                	push   $0x20
+80100c02:	50                   	push   %eax
+80100c03:	8d 85 ec fe ff ff    	lea    -0x114(%ebp),%eax
+80100c09:	50                   	push   %eax
+80100c0a:	ff 75 d8             	pushl  -0x28(%ebp)
+80100c0d:	e8 61 12 00 00       	call   80101e73 <readi>
+80100c12:	83 c4 10             	add    $0x10,%esp
+80100c15:	83 f8 20             	cmp    $0x20,%eax
+80100c18:	0f 85 f2 02 00 00    	jne    80100f10 <exec+0x3ba>
+      goto bad;
+    if(ph.type != ELF_PROG_LOAD)
+80100c1e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
+80100c24:	83 f8 01             	cmp    $0x1,%eax
+80100c27:	75 71                	jne    80100c9a <exec+0x144>
+      continue;
+    if(ph.memsz < ph.filesz)
+80100c29:	8b 95 00 ff ff ff    	mov    -0x100(%ebp),%edx
+80100c2f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
+80100c35:	39 c2                	cmp    %eax,%edx
+80100c37:	0f 82 d6 02 00 00    	jb     80100f13 <exec+0x3bd>
+      goto bad;
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+80100c3d:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
+80100c43:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
+80100c49:	01 d0                	add    %edx,%eax
+80100c4b:	83 ec 04             	sub    $0x4,%esp
+80100c4e:	50                   	push   %eax
+80100c4f:	ff 75 e0             	pushl  -0x20(%ebp)
+80100c52:	ff 75 d4             	pushl  -0x2c(%ebp)
+80100c55:	e8 0c 74 00 00       	call   80108066 <allocuvm>
+80100c5a:	83 c4 10             	add    $0x10,%esp
+80100c5d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80100c60:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+80100c64:	0f 84 ac 02 00 00    	je     80100f16 <exec+0x3c0>
+      goto bad;
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+80100c6a:	8b 95 fc fe ff ff    	mov    -0x104(%ebp),%edx
+80100c70:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
+80100c76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
+80100c7c:	83 ec 0c             	sub    $0xc,%esp
+80100c7f:	52                   	push   %edx
+80100c80:	50                   	push   %eax
+80100c81:	ff 75 d8             	pushl  -0x28(%ebp)
+80100c84:	51                   	push   %ecx
+80100c85:	ff 75 d4             	pushl  -0x2c(%ebp)
+80100c88:	e8 02 73 00 00       	call   80107f8f <loaduvm>
+80100c8d:	83 c4 20             	add    $0x20,%esp
+80100c90:	85 c0                	test   %eax,%eax
+80100c92:	0f 88 81 02 00 00    	js     80100f19 <exec+0x3c3>
+80100c98:	eb 01                	jmp    80100c9b <exec+0x145>
+  sz = 0;
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+      goto bad;
+    if(ph.type != ELF_PROG_LOAD)
+      continue;
+80100c9a:	90                   	nop
+  if((pgdir = setupkvm()) == 0)
+    goto bad;
+
+  // Load program into memory.
+  sz = 0;
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100c9b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+80100c9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80100ca2:	83 c0 20             	add    $0x20,%eax
+80100ca5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+80100ca8:	0f b7 85 38 ff ff ff 	movzwl -0xc8(%ebp),%eax
+80100caf:	0f b7 c0             	movzwl %ax,%eax
+80100cb2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+80100cb5:	0f 8f 42 ff ff ff    	jg     80100bfd <exec+0xa7>
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+      goto bad;
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+      goto bad;
+  }
+  iunlockput(ip);
+80100cbb:	83 ec 0c             	sub    $0xc,%esp
+80100cbe:	ff 75 d8             	pushl  -0x28(%ebp)
+80100cc1:	e8 ff 0e 00 00       	call   80101bc5 <iunlockput>
+80100cc6:	83 c4 10             	add    $0x10,%esp
+  end_op();
+80100cc9:	e8 72 28 00 00       	call   80103540 <end_op>
+  ip = 0;
+80100cce:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
+
+  // Allocate two pages at the next page boundary.
+  // Make the first inaccessible.  Use the second as the user stack.
+  sz = PGROUNDUP(sz);
+80100cd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80100cd8:	05 ff 0f 00 00       	add    $0xfff,%eax
+80100cdd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80100ce2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80100ce5:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80100ce8:	05 00 20 00 00       	add    $0x2000,%eax
+80100ced:	83 ec 04             	sub    $0x4,%esp
+80100cf0:	50                   	push   %eax
+80100cf1:	ff 75 e0             	pushl  -0x20(%ebp)
+80100cf4:	ff 75 d4             	pushl  -0x2c(%ebp)
+80100cf7:	e8 6a 73 00 00       	call   80108066 <allocuvm>
+80100cfc:	83 c4 10             	add    $0x10,%esp
+80100cff:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80100d02:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+80100d06:	0f 84 10 02 00 00    	je     80100f1c <exec+0x3c6>
+    goto bad;
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100d0c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80100d0f:	2d 00 20 00 00       	sub    $0x2000,%eax
+80100d14:	83 ec 08             	sub    $0x8,%esp
+80100d17:	50                   	push   %eax
+80100d18:	ff 75 d4             	pushl  -0x2c(%ebp)
+80100d1b:	e8 6c 75 00 00       	call   8010828c <clearpteu>
+80100d20:	83 c4 10             	add    $0x10,%esp
+  sp = sz;
+80100d23:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80100d26:	89 45 dc             	mov    %eax,-0x24(%ebp)
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+80100d29:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80100d30:	e9 96 00 00 00       	jmp    80100dcb <exec+0x275>
+    if(argc >= MAXARG)
+80100d35:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
+80100d39:	0f 87 e0 01 00 00    	ja     80100f1f <exec+0x3c9>
+      goto bad;
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100d3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100d42:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80100d49:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100d4c:	01 d0                	add    %edx,%eax
+80100d4e:	8b 00                	mov    (%eax),%eax
+80100d50:	83 ec 0c             	sub    $0xc,%esp
+80100d53:	50                   	push   %eax
+80100d54:	e8 ad 46 00 00       	call   80105406 <strlen>
+80100d59:	83 c4 10             	add    $0x10,%esp
+80100d5c:	89 c2                	mov    %eax,%edx
+80100d5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80100d61:	29 d0                	sub    %edx,%eax
+80100d63:	83 e8 01             	sub    $0x1,%eax
+80100d66:	83 e0 fc             	and    $0xfffffffc,%eax
+80100d69:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100d6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100d6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80100d76:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100d79:	01 d0                	add    %edx,%eax
+80100d7b:	8b 00                	mov    (%eax),%eax
+80100d7d:	83 ec 0c             	sub    $0xc,%esp
+80100d80:	50                   	push   %eax
+80100d81:	e8 80 46 00 00       	call   80105406 <strlen>
+80100d86:	83 c4 10             	add    $0x10,%esp
+80100d89:	83 c0 01             	add    $0x1,%eax
+80100d8c:	89 c1                	mov    %eax,%ecx
+80100d8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100d91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80100d98:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100d9b:	01 d0                	add    %edx,%eax
+80100d9d:	8b 00                	mov    (%eax),%eax
+80100d9f:	51                   	push   %ecx
+80100da0:	50                   	push   %eax
+80100da1:	ff 75 dc             	pushl  -0x24(%ebp)
+80100da4:	ff 75 d4             	pushl  -0x2c(%ebp)
+80100da7:	e8 97 76 00 00       	call   80108443 <copyout>
+80100dac:	83 c4 10             	add    $0x10,%esp
+80100daf:	85 c0                	test   %eax,%eax
+80100db1:	0f 88 6b 01 00 00    	js     80100f22 <exec+0x3cc>
+      goto bad;
+    ustack[3+argc] = sp;
+80100db7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100dba:	8d 50 03             	lea    0x3(%eax),%edx
+80100dbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80100dc0:	89 84 95 40 ff ff ff 	mov    %eax,-0xc0(%ebp,%edx,4)
+    goto bad;
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+  sp = sz;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+80100dc7:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+80100dcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100dce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80100dd5:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100dd8:	01 d0                	add    %edx,%eax
+80100dda:	8b 00                	mov    (%eax),%eax
+80100ddc:	85 c0                	test   %eax,%eax
+80100dde:	0f 85 51 ff ff ff    	jne    80100d35 <exec+0x1df>
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+      goto bad;
+    ustack[3+argc] = sp;
+  }
+  ustack[3+argc] = 0;
+80100de4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100de7:	83 c0 03             	add    $0x3,%eax
+80100dea:	c7 84 85 40 ff ff ff 	movl   $0x0,-0xc0(%ebp,%eax,4)
+80100df1:	00 00 00 00 
+
+  ustack[0] = 0xffffffff;  // fake return PC
+80100df5:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
+80100dfc:	ff ff ff 
+  ustack[1] = argc;
+80100dff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100e02:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100e08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100e0b:	83 c0 01             	add    $0x1,%eax
+80100e0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80100e15:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80100e18:	29 d0                	sub    %edx,%eax
+80100e1a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
+
+  sp -= (3+argc+1) * 4;
+80100e20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100e23:	83 c0 04             	add    $0x4,%eax
+80100e26:	c1 e0 02             	shl    $0x2,%eax
+80100e29:	29 45 dc             	sub    %eax,-0x24(%ebp)
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100e2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100e2f:	83 c0 04             	add    $0x4,%eax
+80100e32:	c1 e0 02             	shl    $0x2,%eax
+80100e35:	50                   	push   %eax
+80100e36:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
+80100e3c:	50                   	push   %eax
+80100e3d:	ff 75 dc             	pushl  -0x24(%ebp)
+80100e40:	ff 75 d4             	pushl  -0x2c(%ebp)
+80100e43:	e8 fb 75 00 00       	call   80108443 <copyout>
+80100e48:	83 c4 10             	add    $0x10,%esp
+80100e4b:	85 c0                	test   %eax,%eax
+80100e4d:	0f 88 d2 00 00 00    	js     80100f25 <exec+0x3cf>
+    goto bad;
+
+  // Save program name for debugging.
+  for(last=s=path; *s; s++)
+80100e53:	8b 45 08             	mov    0x8(%ebp),%eax
+80100e56:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80100e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100e5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80100e5f:	eb 17                	jmp    80100e78 <exec+0x322>
+    if(*s == '/')
+80100e61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100e64:	0f b6 00             	movzbl (%eax),%eax
+80100e67:	3c 2f                	cmp    $0x2f,%al
+80100e69:	75 09                	jne    80100e74 <exec+0x31e>
+      last = s+1;
+80100e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100e6e:	83 c0 01             	add    $0x1,%eax
+80100e71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  sp -= (3+argc+1) * 4;
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+    goto bad;
+
+  // Save program name for debugging.
+  for(last=s=path; *s; s++)
+80100e74:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80100e78:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100e7b:	0f b6 00             	movzbl (%eax),%eax
+80100e7e:	84 c0                	test   %al,%al
+80100e80:	75 df                	jne    80100e61 <exec+0x30b>
+    if(*s == '/')
+      last = s+1;
+  safestrcpy(proc->name, last, sizeof(proc->name));
+80100e82:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80100e88:	83 c0 6c             	add    $0x6c,%eax
+80100e8b:	83 ec 04             	sub    $0x4,%esp
+80100e8e:	6a 10                	push   $0x10
+80100e90:	ff 75 f0             	pushl  -0x10(%ebp)
+80100e93:	50                   	push   %eax
+80100e94:	e8 23 45 00 00       	call   801053bc <safestrcpy>
+80100e99:	83 c4 10             	add    $0x10,%esp
+
+  // Commit to the user image.
+  oldpgdir = proc->pgdir;
+80100e9c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80100ea2:	8b 40 04             	mov    0x4(%eax),%eax
+80100ea5:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  proc->pgdir = pgdir;
+80100ea8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80100eae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+80100eb1:	89 50 04             	mov    %edx,0x4(%eax)
+  proc->sz = sz;
+80100eb4:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80100eba:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80100ebd:	89 10                	mov    %edx,(%eax)
+  proc->tf->eip = elf.entry;  // main
+80100ebf:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80100ec5:	8b 40 18             	mov    0x18(%eax),%eax
+80100ec8:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
+80100ece:	89 50 38             	mov    %edx,0x38(%eax)
+  proc->tf->esp = sp;
+80100ed1:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80100ed7:	8b 40 18             	mov    0x18(%eax),%eax
+80100eda:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80100edd:	89 50 44             	mov    %edx,0x44(%eax)
+  switchuvm(proc);
+80100ee0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80100ee6:	83 ec 0c             	sub    $0xc,%esp
+80100ee9:	50                   	push   %eax
+80100eea:	e8 b7 6e 00 00       	call   80107da6 <switchuvm>
+80100eef:	83 c4 10             	add    $0x10,%esp
+  freevm(oldpgdir);
+80100ef2:	83 ec 0c             	sub    $0xc,%esp
+80100ef5:	ff 75 d0             	pushl  -0x30(%ebp)
+80100ef8:	e8 ef 72 00 00       	call   801081ec <freevm>
+80100efd:	83 c4 10             	add    $0x10,%esp
+  return 0;
+80100f00:	b8 00 00 00 00       	mov    $0x0,%eax
+80100f05:	eb 51                	jmp    80100f58 <exec+0x402>
+  ilock(ip);
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
+    goto bad;
+80100f07:	90                   	nop
+80100f08:	eb 1c                	jmp    80100f26 <exec+0x3d0>
+  if(elf.magic != ELF_MAGIC)
+    goto bad;
+80100f0a:	90                   	nop
+80100f0b:	eb 19                	jmp    80100f26 <exec+0x3d0>
+
+  if((pgdir = setupkvm()) == 0)
+    goto bad;
+80100f0d:	90                   	nop
+80100f0e:	eb 16                	jmp    80100f26 <exec+0x3d0>
+
+  // Load program into memory.
+  sz = 0;
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+      goto bad;
+80100f10:	90                   	nop
+80100f11:	eb 13                	jmp    80100f26 <exec+0x3d0>
+    if(ph.type != ELF_PROG_LOAD)
+      continue;
+    if(ph.memsz < ph.filesz)
+      goto bad;
+80100f13:	90                   	nop
+80100f14:	eb 10                	jmp    80100f26 <exec+0x3d0>
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+      goto bad;
+80100f16:	90                   	nop
+80100f17:	eb 0d                	jmp    80100f26 <exec+0x3d0>
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+      goto bad;
+80100f19:	90                   	nop
+80100f1a:	eb 0a                	jmp    80100f26 <exec+0x3d0>
+
+  // Allocate two pages at the next page boundary.
+  // Make the first inaccessible.  Use the second as the user stack.
+  sz = PGROUNDUP(sz);
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+    goto bad;
+80100f1c:	90                   	nop
+80100f1d:	eb 07                	jmp    80100f26 <exec+0x3d0>
+  sp = sz;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+    if(argc >= MAXARG)
+      goto bad;
+80100f1f:	90                   	nop
+80100f20:	eb 04                	jmp    80100f26 <exec+0x3d0>
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+      goto bad;
+80100f22:	90                   	nop
+80100f23:	eb 01                	jmp    80100f26 <exec+0x3d0>
+  ustack[1] = argc;
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+
+  sp -= (3+argc+1) * 4;
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+    goto bad;
+80100f25:	90                   	nop
+  switchuvm(proc);
+  freevm(oldpgdir);
+  return 0;
+
+ bad:
+  if(pgdir)
+80100f26:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
+80100f2a:	74 0e                	je     80100f3a <exec+0x3e4>
+    freevm(pgdir);
+80100f2c:	83 ec 0c             	sub    $0xc,%esp
+80100f2f:	ff 75 d4             	pushl  -0x2c(%ebp)
+80100f32:	e8 b5 72 00 00       	call   801081ec <freevm>
+80100f37:	83 c4 10             	add    $0x10,%esp
+  if(ip){
+80100f3a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+80100f3e:	74 13                	je     80100f53 <exec+0x3fd>
+    iunlockput(ip);
+80100f40:	83 ec 0c             	sub    $0xc,%esp
+80100f43:	ff 75 d8             	pushl  -0x28(%ebp)
+80100f46:	e8 7a 0c 00 00       	call   80101bc5 <iunlockput>
+80100f4b:	83 c4 10             	add    $0x10,%esp
+    end_op();
+80100f4e:	e8 ed 25 00 00       	call   80103540 <end_op>
+  }
+  return -1;
+80100f53:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100f58:	c9                   	leave  
+80100f59:	c3                   	ret    
+
+80100f5a <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+80100f5a:	55                   	push   %ebp
+80100f5b:	89 e5                	mov    %esp,%ebp
+80100f5d:	83 ec 08             	sub    $0x8,%esp
+  initlock(&ftable.lock, "ftable");
+80100f60:	83 ec 08             	sub    $0x8,%esp
+80100f63:	68 3d 85 10 80       	push   $0x8010853d
+80100f68:	68 40 08 11 80       	push   $0x80110840
+80100f6d:	e8 c2 3f 00 00       	call   80104f34 <initlock>
+80100f72:	83 c4 10             	add    $0x10,%esp
+}
+80100f75:	90                   	nop
+80100f76:	c9                   	leave  
+80100f77:	c3                   	ret    
+
+80100f78 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+80100f78:	55                   	push   %ebp
+80100f79:	89 e5                	mov    %esp,%ebp
+80100f7b:	83 ec 18             	sub    $0x18,%esp
+  struct file *f;
+
+  acquire(&ftable.lock);
+80100f7e:	83 ec 0c             	sub    $0xc,%esp
+80100f81:	68 40 08 11 80       	push   $0x80110840
+80100f86:	e8 cb 3f 00 00       	call   80104f56 <acquire>
+80100f8b:	83 c4 10             	add    $0x10,%esp
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100f8e:	c7 45 f4 74 08 11 80 	movl   $0x80110874,-0xc(%ebp)
+80100f95:	eb 2d                	jmp    80100fc4 <filealloc+0x4c>
+    if(f->ref == 0){
+80100f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100f9a:	8b 40 04             	mov    0x4(%eax),%eax
+80100f9d:	85 c0                	test   %eax,%eax
+80100f9f:	75 1f                	jne    80100fc0 <filealloc+0x48>
+      f->ref = 1;
+80100fa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100fa4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
+      release(&ftable.lock);
+80100fab:	83 ec 0c             	sub    $0xc,%esp
+80100fae:	68 40 08 11 80       	push   $0x80110840
+80100fb3:	e8 05 40 00 00       	call   80104fbd <release>
+80100fb8:	83 c4 10             	add    $0x10,%esp
+      return f;
+80100fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80100fbe:	eb 23                	jmp    80100fe3 <filealloc+0x6b>
+filealloc(void)
+{
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100fc0:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)
+80100fc4:	b8 d4 11 11 80       	mov    $0x801111d4,%eax
+80100fc9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+80100fcc:	72 c9                	jb     80100f97 <filealloc+0x1f>
+      f->ref = 1;
+      release(&ftable.lock);
+      return f;
+    }
+  }
+  release(&ftable.lock);
+80100fce:	83 ec 0c             	sub    $0xc,%esp
+80100fd1:	68 40 08 11 80       	push   $0x80110840
+80100fd6:	e8 e2 3f 00 00       	call   80104fbd <release>
+80100fdb:	83 c4 10             	add    $0x10,%esp
+  return 0;
+80100fde:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80100fe3:	c9                   	leave  
+80100fe4:	c3                   	ret    
+
+80100fe5 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+80100fe5:	55                   	push   %ebp
+80100fe6:	89 e5                	mov    %esp,%ebp
+80100fe8:	83 ec 08             	sub    $0x8,%esp
+  acquire(&ftable.lock);
+80100feb:	83 ec 0c             	sub    $0xc,%esp
+80100fee:	68 40 08 11 80       	push   $0x80110840
+80100ff3:	e8 5e 3f 00 00       	call   80104f56 <acquire>
+80100ff8:	83 c4 10             	add    $0x10,%esp
+  if(f->ref < 1)
+80100ffb:	8b 45 08             	mov    0x8(%ebp),%eax
+80100ffe:	8b 40 04             	mov    0x4(%eax),%eax
+80101001:	85 c0                	test   %eax,%eax
+80101003:	7f 0d                	jg     80101012 <filedup+0x2d>
+    panic("filedup");
+80101005:	83 ec 0c             	sub    $0xc,%esp
+80101008:	68 44 85 10 80       	push   $0x80108544
+8010100d:	e8 54 f5 ff ff       	call   80100566 <panic>
+  f->ref++;
+80101012:	8b 45 08             	mov    0x8(%ebp),%eax
+80101015:	8b 40 04             	mov    0x4(%eax),%eax
+80101018:	8d 50 01             	lea    0x1(%eax),%edx
+8010101b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010101e:	89 50 04             	mov    %edx,0x4(%eax)
+  release(&ftable.lock);
+80101021:	83 ec 0c             	sub    $0xc,%esp
+80101024:	68 40 08 11 80       	push   $0x80110840
+80101029:	e8 8f 3f 00 00       	call   80104fbd <release>
+8010102e:	83 c4 10             	add    $0x10,%esp
+  return f;
+80101031:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+80101034:	c9                   	leave  
+80101035:	c3                   	ret    
+
+80101036 <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+80101036:	55                   	push   %ebp
+80101037:	89 e5                	mov    %esp,%ebp
+80101039:	83 ec 28             	sub    $0x28,%esp
+  struct file ff;
+
+  acquire(&ftable.lock);
+8010103c:	83 ec 0c             	sub    $0xc,%esp
+8010103f:	68 40 08 11 80       	push   $0x80110840
+80101044:	e8 0d 3f 00 00       	call   80104f56 <acquire>
+80101049:	83 c4 10             	add    $0x10,%esp
+  if(f->ref < 1)
+8010104c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010104f:	8b 40 04             	mov    0x4(%eax),%eax
+80101052:	85 c0                	test   %eax,%eax
+80101054:	7f 0d                	jg     80101063 <fileclose+0x2d>
+    panic("fileclose");
+80101056:	83 ec 0c             	sub    $0xc,%esp
+80101059:	68 4c 85 10 80       	push   $0x8010854c
+8010105e:	e8 03 f5 ff ff       	call   80100566 <panic>
+  if(--f->ref > 0){
+80101063:	8b 45 08             	mov    0x8(%ebp),%eax
+80101066:	8b 40 04             	mov    0x4(%eax),%eax
+80101069:	8d 50 ff             	lea    -0x1(%eax),%edx
+8010106c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010106f:	89 50 04             	mov    %edx,0x4(%eax)
+80101072:	8b 45 08             	mov    0x8(%ebp),%eax
+80101075:	8b 40 04             	mov    0x4(%eax),%eax
+80101078:	85 c0                	test   %eax,%eax
+8010107a:	7e 15                	jle    80101091 <fileclose+0x5b>
+    release(&ftable.lock);
+8010107c:	83 ec 0c             	sub    $0xc,%esp
+8010107f:	68 40 08 11 80       	push   $0x80110840
+80101084:	e8 34 3f 00 00       	call   80104fbd <release>
+80101089:	83 c4 10             	add    $0x10,%esp
+8010108c:	e9 8b 00 00 00       	jmp    8010111c <fileclose+0xe6>
+    return;
+  }
+  ff = *f;
+80101091:	8b 45 08             	mov    0x8(%ebp),%eax
+80101094:	8b 10                	mov    (%eax),%edx
+80101096:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80101099:	8b 50 04             	mov    0x4(%eax),%edx
+8010109c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+8010109f:	8b 50 08             	mov    0x8(%eax),%edx
+801010a2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+801010a5:	8b 50 0c             	mov    0xc(%eax),%edx
+801010a8:	89 55 ec             	mov    %edx,-0x14(%ebp)
+801010ab:	8b 50 10             	mov    0x10(%eax),%edx
+801010ae:	89 55 f0             	mov    %edx,-0x10(%ebp)
+801010b1:	8b 40 14             	mov    0x14(%eax),%eax
+801010b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  f->ref = 0;
+801010b7:	8b 45 08             	mov    0x8(%ebp),%eax
+801010ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  f->type = FD_NONE;
+801010c1:	8b 45 08             	mov    0x8(%ebp),%eax
+801010c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  release(&ftable.lock);
+801010ca:	83 ec 0c             	sub    $0xc,%esp
+801010cd:	68 40 08 11 80       	push   $0x80110840
+801010d2:	e8 e6 3e 00 00       	call   80104fbd <release>
+801010d7:	83 c4 10             	add    $0x10,%esp
+  
+  if(ff.type == FD_PIPE)
+801010da:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801010dd:	83 f8 01             	cmp    $0x1,%eax
+801010e0:	75 19                	jne    801010fb <fileclose+0xc5>
+    pipeclose(ff.pipe, ff.writable);
+801010e2:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+801010e6:	0f be d0             	movsbl %al,%edx
+801010e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801010ec:	83 ec 08             	sub    $0x8,%esp
+801010ef:	52                   	push   %edx
+801010f0:	50                   	push   %eax
+801010f1:	e8 0a 30 00 00       	call   80104100 <pipeclose>
+801010f6:	83 c4 10             	add    $0x10,%esp
+801010f9:	eb 21                	jmp    8010111c <fileclose+0xe6>
+  else if(ff.type == FD_INODE){
+801010fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801010fe:	83 f8 02             	cmp    $0x2,%eax
+80101101:	75 19                	jne    8010111c <fileclose+0xe6>
+    begin_op();
+80101103:	e8 ac 23 00 00       	call   801034b4 <begin_op>
+    iput(ff.ip);
+80101108:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010110b:	83 ec 0c             	sub    $0xc,%esp
+8010110e:	50                   	push   %eax
+8010110f:	e8 c1 09 00 00       	call   80101ad5 <iput>
+80101114:	83 c4 10             	add    $0x10,%esp
+    end_op();
+80101117:	e8 24 24 00 00       	call   80103540 <end_op>
+  }
+}
+8010111c:	c9                   	leave  
+8010111d:	c3                   	ret    
+
+8010111e <filestat>:
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+8010111e:	55                   	push   %ebp
+8010111f:	89 e5                	mov    %esp,%ebp
+80101121:	83 ec 08             	sub    $0x8,%esp
+  if(f->type == FD_INODE){
+80101124:	8b 45 08             	mov    0x8(%ebp),%eax
+80101127:	8b 00                	mov    (%eax),%eax
+80101129:	83 f8 02             	cmp    $0x2,%eax
+8010112c:	75 40                	jne    8010116e <filestat+0x50>
+    ilock(f->ip);
+8010112e:	8b 45 08             	mov    0x8(%ebp),%eax
+80101131:	8b 40 10             	mov    0x10(%eax),%eax
+80101134:	83 ec 0c             	sub    $0xc,%esp
+80101137:	50                   	push   %eax
+80101138:	e8 ce 07 00 00       	call   8010190b <ilock>
+8010113d:	83 c4 10             	add    $0x10,%esp
+    stati(f->ip, st);
+80101140:	8b 45 08             	mov    0x8(%ebp),%eax
+80101143:	8b 40 10             	mov    0x10(%eax),%eax
+80101146:	83 ec 08             	sub    $0x8,%esp
+80101149:	ff 75 0c             	pushl  0xc(%ebp)
+8010114c:	50                   	push   %eax
+8010114d:	e8 db 0c 00 00       	call   80101e2d <stati>
+80101152:	83 c4 10             	add    $0x10,%esp
+    iunlock(f->ip);
+80101155:	8b 45 08             	mov    0x8(%ebp),%eax
+80101158:	8b 40 10             	mov    0x10(%eax),%eax
+8010115b:	83 ec 0c             	sub    $0xc,%esp
+8010115e:	50                   	push   %eax
+8010115f:	e8 ff 08 00 00       	call   80101a63 <iunlock>
+80101164:	83 c4 10             	add    $0x10,%esp
+    return 0;
+80101167:	b8 00 00 00 00       	mov    $0x0,%eax
+8010116c:	eb 05                	jmp    80101173 <filestat+0x55>
+  }
+  return -1;
+8010116e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80101173:	c9                   	leave  
+80101174:	c3                   	ret    
+
+80101175 <fileread>:
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+80101175:	55                   	push   %ebp
+80101176:	89 e5                	mov    %esp,%ebp
+80101178:	83 ec 18             	sub    $0x18,%esp
+  int r;
+
+  if(f->readable == 0)
+8010117b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010117e:	0f b6 40 08          	movzbl 0x8(%eax),%eax
+80101182:	84 c0                	test   %al,%al
+80101184:	75 0a                	jne    80101190 <fileread+0x1b>
+    return -1;
+80101186:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010118b:	e9 9b 00 00 00       	jmp    8010122b <fileread+0xb6>
+  if(f->type == FD_PIPE)
+80101190:	8b 45 08             	mov    0x8(%ebp),%eax
+80101193:	8b 00                	mov    (%eax),%eax
+80101195:	83 f8 01             	cmp    $0x1,%eax
+80101198:	75 1a                	jne    801011b4 <fileread+0x3f>
+    return piperead(f->pipe, addr, n);
+8010119a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010119d:	8b 40 0c             	mov    0xc(%eax),%eax
+801011a0:	83 ec 04             	sub    $0x4,%esp
+801011a3:	ff 75 10             	pushl  0x10(%ebp)
+801011a6:	ff 75 0c             	pushl  0xc(%ebp)
+801011a9:	50                   	push   %eax
+801011aa:	e8 f9 30 00 00       	call   801042a8 <piperead>
+801011af:	83 c4 10             	add    $0x10,%esp
+801011b2:	eb 77                	jmp    8010122b <fileread+0xb6>
+  if(f->type == FD_INODE){
+801011b4:	8b 45 08             	mov    0x8(%ebp),%eax
+801011b7:	8b 00                	mov    (%eax),%eax
+801011b9:	83 f8 02             	cmp    $0x2,%eax
+801011bc:	75 60                	jne    8010121e <fileread+0xa9>
+    ilock(f->ip);
+801011be:	8b 45 08             	mov    0x8(%ebp),%eax
+801011c1:	8b 40 10             	mov    0x10(%eax),%eax
+801011c4:	83 ec 0c             	sub    $0xc,%esp
+801011c7:	50                   	push   %eax
+801011c8:	e8 3e 07 00 00       	call   8010190b <ilock>
+801011cd:	83 c4 10             	add    $0x10,%esp
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+801011d0:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801011d3:	8b 45 08             	mov    0x8(%ebp),%eax
+801011d6:	8b 50 14             	mov    0x14(%eax),%edx
+801011d9:	8b 45 08             	mov    0x8(%ebp),%eax
+801011dc:	8b 40 10             	mov    0x10(%eax),%eax
+801011df:	51                   	push   %ecx
+801011e0:	52                   	push   %edx
+801011e1:	ff 75 0c             	pushl  0xc(%ebp)
+801011e4:	50                   	push   %eax
+801011e5:	e8 89 0c 00 00       	call   80101e73 <readi>
+801011ea:	83 c4 10             	add    $0x10,%esp
+801011ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801011f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801011f4:	7e 11                	jle    80101207 <fileread+0x92>
+      f->off += r;
+801011f6:	8b 45 08             	mov    0x8(%ebp),%eax
+801011f9:	8b 50 14             	mov    0x14(%eax),%edx
+801011fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801011ff:	01 c2                	add    %eax,%edx
+80101201:	8b 45 08             	mov    0x8(%ebp),%eax
+80101204:	89 50 14             	mov    %edx,0x14(%eax)
+    iunlock(f->ip);
+80101207:	8b 45 08             	mov    0x8(%ebp),%eax
+8010120a:	8b 40 10             	mov    0x10(%eax),%eax
+8010120d:	83 ec 0c             	sub    $0xc,%esp
+80101210:	50                   	push   %eax
+80101211:	e8 4d 08 00 00       	call   80101a63 <iunlock>
+80101216:	83 c4 10             	add    $0x10,%esp
+    return r;
+80101219:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010121c:	eb 0d                	jmp    8010122b <fileread+0xb6>
+  }
+  panic("fileread");
+8010121e:	83 ec 0c             	sub    $0xc,%esp
+80101221:	68 56 85 10 80       	push   $0x80108556
+80101226:	e8 3b f3 ff ff       	call   80100566 <panic>
+}
+8010122b:	c9                   	leave  
+8010122c:	c3                   	ret    
+
+8010122d <filewrite>:
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+8010122d:	55                   	push   %ebp
+8010122e:	89 e5                	mov    %esp,%ebp
+80101230:	53                   	push   %ebx
+80101231:	83 ec 14             	sub    $0x14,%esp
+  int r;
+
+  if(f->writable == 0)
+80101234:	8b 45 08             	mov    0x8(%ebp),%eax
+80101237:	0f b6 40 09          	movzbl 0x9(%eax),%eax
+8010123b:	84 c0                	test   %al,%al
+8010123d:	75 0a                	jne    80101249 <filewrite+0x1c>
+    return -1;
+8010123f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101244:	e9 1b 01 00 00       	jmp    80101364 <filewrite+0x137>
+  if(f->type == FD_PIPE)
+80101249:	8b 45 08             	mov    0x8(%ebp),%eax
+8010124c:	8b 00                	mov    (%eax),%eax
+8010124e:	83 f8 01             	cmp    $0x1,%eax
+80101251:	75 1d                	jne    80101270 <filewrite+0x43>
+    return pipewrite(f->pipe, addr, n);
+80101253:	8b 45 08             	mov    0x8(%ebp),%eax
+80101256:	8b 40 0c             	mov    0xc(%eax),%eax
+80101259:	83 ec 04             	sub    $0x4,%esp
+8010125c:	ff 75 10             	pushl  0x10(%ebp)
+8010125f:	ff 75 0c             	pushl  0xc(%ebp)
+80101262:	50                   	push   %eax
+80101263:	e8 42 2f 00 00       	call   801041aa <pipewrite>
+80101268:	83 c4 10             	add    $0x10,%esp
+8010126b:	e9 f4 00 00 00       	jmp    80101364 <filewrite+0x137>
+  if(f->type == FD_INODE){
+80101270:	8b 45 08             	mov    0x8(%ebp),%eax
+80101273:	8b 00                	mov    (%eax),%eax
+80101275:	83 f8 02             	cmp    $0x2,%eax
+80101278:	0f 85 d9 00 00 00    	jne    80101357 <filewrite+0x12a>
+    // the maximum log transaction size, including
+    // i-node, indirect block, allocation blocks,
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((LOGSIZE-1-1-2) / 2) * 512;
+8010127e:	c7 45 ec 00 1a 00 00 	movl   $0x1a00,-0x14(%ebp)
+    int i = 0;
+80101285:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while(i < n){
+8010128c:	e9 a3 00 00 00       	jmp    80101334 <filewrite+0x107>
+      int n1 = n - i;
+80101291:	8b 45 10             	mov    0x10(%ebp),%eax
+80101294:	2b 45 f4             	sub    -0xc(%ebp),%eax
+80101297:	89 45 f0             	mov    %eax,-0x10(%ebp)
+      if(n1 > max)
+8010129a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010129d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+801012a0:	7e 06                	jle    801012a8 <filewrite+0x7b>
+        n1 = max;
+801012a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801012a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+      begin_op();
+801012a8:	e8 07 22 00 00       	call   801034b4 <begin_op>
+      ilock(f->ip);
+801012ad:	8b 45 08             	mov    0x8(%ebp),%eax
+801012b0:	8b 40 10             	mov    0x10(%eax),%eax
+801012b3:	83 ec 0c             	sub    $0xc,%esp
+801012b6:	50                   	push   %eax
+801012b7:	e8 4f 06 00 00       	call   8010190b <ilock>
+801012bc:	83 c4 10             	add    $0x10,%esp
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+801012bf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+801012c2:	8b 45 08             	mov    0x8(%ebp),%eax
+801012c5:	8b 50 14             	mov    0x14(%eax),%edx
+801012c8:	8b 5d f4             	mov    -0xc(%ebp),%ebx
+801012cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+801012ce:	01 c3                	add    %eax,%ebx
+801012d0:	8b 45 08             	mov    0x8(%ebp),%eax
+801012d3:	8b 40 10             	mov    0x10(%eax),%eax
+801012d6:	51                   	push   %ecx
+801012d7:	52                   	push   %edx
+801012d8:	53                   	push   %ebx
+801012d9:	50                   	push   %eax
+801012da:	e8 eb 0c 00 00       	call   80101fca <writei>
+801012df:	83 c4 10             	add    $0x10,%esp
+801012e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
+801012e5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+801012e9:	7e 11                	jle    801012fc <filewrite+0xcf>
+        f->off += r;
+801012eb:	8b 45 08             	mov    0x8(%ebp),%eax
+801012ee:	8b 50 14             	mov    0x14(%eax),%edx
+801012f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
+801012f4:	01 c2                	add    %eax,%edx
+801012f6:	8b 45 08             	mov    0x8(%ebp),%eax
+801012f9:	89 50 14             	mov    %edx,0x14(%eax)
+      iunlock(f->ip);
+801012fc:	8b 45 08             	mov    0x8(%ebp),%eax
+801012ff:	8b 40 10             	mov    0x10(%eax),%eax
+80101302:	83 ec 0c             	sub    $0xc,%esp
+80101305:	50                   	push   %eax
+80101306:	e8 58 07 00 00       	call   80101a63 <iunlock>
+8010130b:	83 c4 10             	add    $0x10,%esp
+      end_op();
+8010130e:	e8 2d 22 00 00       	call   80103540 <end_op>
+
+      if(r < 0)
+80101313:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+80101317:	78 29                	js     80101342 <filewrite+0x115>
+        break;
+      if(r != n1)
+80101319:	8b 45 e8             	mov    -0x18(%ebp),%eax
+8010131c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+8010131f:	74 0d                	je     8010132e <filewrite+0x101>
+        panic("short filewrite");
+80101321:	83 ec 0c             	sub    $0xc,%esp
+80101324:	68 5f 85 10 80       	push   $0x8010855f
+80101329:	e8 38 f2 ff ff       	call   80100566 <panic>
+      i += r;
+8010132e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80101331:	01 45 f4             	add    %eax,-0xc(%ebp)
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((LOGSIZE-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+80101334:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101337:	3b 45 10             	cmp    0x10(%ebp),%eax
+8010133a:	0f 8c 51 ff ff ff    	jl     80101291 <filewrite+0x64>
+80101340:	eb 01                	jmp    80101343 <filewrite+0x116>
+        f->off += r;
+      iunlock(f->ip);
+      end_op();
+
+      if(r < 0)
+        break;
+80101342:	90                   	nop
+      if(r != n1)
+        panic("short filewrite");
+      i += r;
+    }
+    return i == n ? n : -1;
+80101343:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101346:	3b 45 10             	cmp    0x10(%ebp),%eax
+80101349:	75 05                	jne    80101350 <filewrite+0x123>
+8010134b:	8b 45 10             	mov    0x10(%ebp),%eax
+8010134e:	eb 14                	jmp    80101364 <filewrite+0x137>
+80101350:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101355:	eb 0d                	jmp    80101364 <filewrite+0x137>
+  }
+  panic("filewrite");
+80101357:	83 ec 0c             	sub    $0xc,%esp
+8010135a:	68 6f 85 10 80       	push   $0x8010856f
+8010135f:	e8 02 f2 ff ff       	call   80100566 <panic>
+}
+80101364:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101367:	c9                   	leave  
+80101368:	c3                   	ret    
+
+80101369 <readsb>:
+static void itrunc(struct inode*);
+
+// Read the super block.
+void
+readsb(int dev, struct superblock *sb)
+{
+80101369:	55                   	push   %ebp
+8010136a:	89 e5                	mov    %esp,%ebp
+8010136c:	83 ec 18             	sub    $0x18,%esp
+  struct buf *bp;
+  
+  bp = bread(dev, 1);
+8010136f:	8b 45 08             	mov    0x8(%ebp),%eax
+80101372:	83 ec 08             	sub    $0x8,%esp
+80101375:	6a 01                	push   $0x1
+80101377:	50                   	push   %eax
+80101378:	e8 39 ee ff ff       	call   801001b6 <bread>
+8010137d:	83 c4 10             	add    $0x10,%esp
+80101380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  memmove(sb, bp->data, sizeof(*sb));
+80101383:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101386:	83 c0 18             	add    $0x18,%eax
+80101389:	83 ec 04             	sub    $0x4,%esp
+8010138c:	6a 10                	push   $0x10
+8010138e:	50                   	push   %eax
+8010138f:	ff 75 0c             	pushl  0xc(%ebp)
+80101392:	e8 e1 3e 00 00       	call   80105278 <memmove>
+80101397:	83 c4 10             	add    $0x10,%esp
+  brelse(bp);
+8010139a:	83 ec 0c             	sub    $0xc,%esp
+8010139d:	ff 75 f4             	pushl  -0xc(%ebp)
+801013a0:	e8 89 ee ff ff       	call   8010022e <brelse>
+801013a5:	83 c4 10             	add    $0x10,%esp
+}
+801013a8:	90                   	nop
+801013a9:	c9                   	leave  
+801013aa:	c3                   	ret    
+
+801013ab <bzero>:
+
+// Zero a block.
+static void
+bzero(int dev, int bno)
+{
+801013ab:	55                   	push   %ebp
+801013ac:	89 e5                	mov    %esp,%ebp
+801013ae:	83 ec 18             	sub    $0x18,%esp
+  struct buf *bp;
+  
+  bp = bread(dev, bno);
+801013b1:	8b 55 0c             	mov    0xc(%ebp),%edx
+801013b4:	8b 45 08             	mov    0x8(%ebp),%eax
+801013b7:	83 ec 08             	sub    $0x8,%esp
+801013ba:	52                   	push   %edx
+801013bb:	50                   	push   %eax
+801013bc:	e8 f5 ed ff ff       	call   801001b6 <bread>
+801013c1:	83 c4 10             	add    $0x10,%esp
+801013c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  memset(bp->data, 0, BSIZE);
+801013c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801013ca:	83 c0 18             	add    $0x18,%eax
+801013cd:	83 ec 04             	sub    $0x4,%esp
+801013d0:	68 00 02 00 00       	push   $0x200
+801013d5:	6a 00                	push   $0x0
+801013d7:	50                   	push   %eax
+801013d8:	e8 dc 3d 00 00       	call   801051b9 <memset>
+801013dd:	83 c4 10             	add    $0x10,%esp
+  log_write(bp);
+801013e0:	83 ec 0c             	sub    $0xc,%esp
+801013e3:	ff 75 f4             	pushl  -0xc(%ebp)
+801013e6:	e8 01 23 00 00       	call   801036ec <log_write>
+801013eb:	83 c4 10             	add    $0x10,%esp
+  brelse(bp);
+801013ee:	83 ec 0c             	sub    $0xc,%esp
+801013f1:	ff 75 f4             	pushl  -0xc(%ebp)
+801013f4:	e8 35 ee ff ff       	call   8010022e <brelse>
+801013f9:	83 c4 10             	add    $0x10,%esp
+}
+801013fc:	90                   	nop
+801013fd:	c9                   	leave  
+801013fe:	c3                   	ret    
+
+801013ff <balloc>:
+// Blocks. 
+
+// Allocate a zeroed disk block.
+static uint
+balloc(uint dev)
+{
+801013ff:	55                   	push   %ebp
+80101400:	89 e5                	mov    %esp,%ebp
+80101402:	83 ec 28             	sub    $0x28,%esp
+  int b, bi, m;
+  struct buf *bp;
+  struct superblock sb;
+
+  bp = 0;
+80101405:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  readsb(dev, &sb);
+8010140c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010140f:	83 ec 08             	sub    $0x8,%esp
+80101412:	8d 55 d8             	lea    -0x28(%ebp),%edx
+80101415:	52                   	push   %edx
+80101416:	50                   	push   %eax
+80101417:	e8 4d ff ff ff       	call   80101369 <readsb>
+8010141c:	83 c4 10             	add    $0x10,%esp
+  for(b = 0; b < sb.size; b += BPB){
+8010141f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80101426:	e9 15 01 00 00       	jmp    80101540 <balloc+0x141>
+    bp = bread(dev, BBLOCK(b, sb.ninodes));
+8010142b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010142e:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
+80101434:	85 c0                	test   %eax,%eax
+80101436:	0f 48 c2             	cmovs  %edx,%eax
+80101439:	c1 f8 0c             	sar    $0xc,%eax
+8010143c:	89 c2                	mov    %eax,%edx
+8010143e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101441:	c1 e8 03             	shr    $0x3,%eax
+80101444:	01 d0                	add    %edx,%eax
+80101446:	83 c0 03             	add    $0x3,%eax
+80101449:	83 ec 08             	sub    $0x8,%esp
+8010144c:	50                   	push   %eax
+8010144d:	ff 75 08             	pushl  0x8(%ebp)
+80101450:	e8 61 ed ff ff       	call   801001b6 <bread>
+80101455:	83 c4 10             	add    $0x10,%esp
+80101458:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+8010145b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+80101462:	e9 a6 00 00 00       	jmp    8010150d <balloc+0x10e>
+      m = 1 << (bi % 8);
+80101467:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010146a:	99                   	cltd   
+8010146b:	c1 ea 1d             	shr    $0x1d,%edx
+8010146e:	01 d0                	add    %edx,%eax
+80101470:	83 e0 07             	and    $0x7,%eax
+80101473:	29 d0                	sub    %edx,%eax
+80101475:	ba 01 00 00 00       	mov    $0x1,%edx
+8010147a:	89 c1                	mov    %eax,%ecx
+8010147c:	d3 e2                	shl    %cl,%edx
+8010147e:	89 d0                	mov    %edx,%eax
+80101480:	89 45 e8             	mov    %eax,-0x18(%ebp)
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+80101483:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101486:	8d 50 07             	lea    0x7(%eax),%edx
+80101489:	85 c0                	test   %eax,%eax
+8010148b:	0f 48 c2             	cmovs  %edx,%eax
+8010148e:	c1 f8 03             	sar    $0x3,%eax
+80101491:	89 c2                	mov    %eax,%edx
+80101493:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80101496:	0f b6 44 10 18       	movzbl 0x18(%eax,%edx,1),%eax
+8010149b:	0f b6 c0             	movzbl %al,%eax
+8010149e:	23 45 e8             	and    -0x18(%ebp),%eax
+801014a1:	85 c0                	test   %eax,%eax
+801014a3:	75 64                	jne    80101509 <balloc+0x10a>
+        bp->data[bi/8] |= m;  // Mark block in use.
+801014a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801014a8:	8d 50 07             	lea    0x7(%eax),%edx
+801014ab:	85 c0                	test   %eax,%eax
+801014ad:	0f 48 c2             	cmovs  %edx,%eax
+801014b0:	c1 f8 03             	sar    $0x3,%eax
+801014b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
+801014b6:	0f b6 54 02 18       	movzbl 0x18(%edx,%eax,1),%edx
+801014bb:	89 d1                	mov    %edx,%ecx
+801014bd:	8b 55 e8             	mov    -0x18(%ebp),%edx
+801014c0:	09 ca                	or     %ecx,%edx
+801014c2:	89 d1                	mov    %edx,%ecx
+801014c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+801014c7:	88 4c 02 18          	mov    %cl,0x18(%edx,%eax,1)
+        log_write(bp);
+801014cb:	83 ec 0c             	sub    $0xc,%esp
+801014ce:	ff 75 ec             	pushl  -0x14(%ebp)
+801014d1:	e8 16 22 00 00       	call   801036ec <log_write>
+801014d6:	83 c4 10             	add    $0x10,%esp
+        brelse(bp);
+801014d9:	83 ec 0c             	sub    $0xc,%esp
+801014dc:	ff 75 ec             	pushl  -0x14(%ebp)
+801014df:	e8 4a ed ff ff       	call   8010022e <brelse>
+801014e4:	83 c4 10             	add    $0x10,%esp
+        bzero(dev, b + bi);
+801014e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801014ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801014ed:	01 c2                	add    %eax,%edx
+801014ef:	8b 45 08             	mov    0x8(%ebp),%eax
+801014f2:	83 ec 08             	sub    $0x8,%esp
+801014f5:	52                   	push   %edx
+801014f6:	50                   	push   %eax
+801014f7:	e8 af fe ff ff       	call   801013ab <bzero>
+801014fc:	83 c4 10             	add    $0x10,%esp
+        return b + bi;
+801014ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101502:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101505:	01 d0                	add    %edx,%eax
+80101507:	eb 52                	jmp    8010155b <balloc+0x15c>
+
+  bp = 0;
+  readsb(dev, &sb);
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb.ninodes));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+80101509:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+8010150d:	81 7d f0 ff 0f 00 00 	cmpl   $0xfff,-0x10(%ebp)
+80101514:	7f 15                	jg     8010152b <balloc+0x12c>
+80101516:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101519:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010151c:	01 d0                	add    %edx,%eax
+8010151e:	89 c2                	mov    %eax,%edx
+80101520:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101523:	39 c2                	cmp    %eax,%edx
+80101525:	0f 82 3c ff ff ff    	jb     80101467 <balloc+0x68>
+        brelse(bp);
+        bzero(dev, b + bi);
+        return b + bi;
+      }
+    }
+    brelse(bp);
+8010152b:	83 ec 0c             	sub    $0xc,%esp
+8010152e:	ff 75 ec             	pushl  -0x14(%ebp)
+80101531:	e8 f8 ec ff ff       	call   8010022e <brelse>
+80101536:	83 c4 10             	add    $0x10,%esp
+  struct buf *bp;
+  struct superblock sb;
+
+  bp = 0;
+  readsb(dev, &sb);
+  for(b = 0; b < sb.size; b += BPB){
+80101539:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+80101540:	8b 55 d8             	mov    -0x28(%ebp),%edx
+80101543:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101546:	39 c2                	cmp    %eax,%edx
+80101548:	0f 87 dd fe ff ff    	ja     8010142b <balloc+0x2c>
+        return b + bi;
+      }
+    }
+    brelse(bp);
+  }
+  panic("balloc: out of blocks");
+8010154e:	83 ec 0c             	sub    $0xc,%esp
+80101551:	68 79 85 10 80       	push   $0x80108579
+80101556:	e8 0b f0 ff ff       	call   80100566 <panic>
+}
+8010155b:	c9                   	leave  
+8010155c:	c3                   	ret    
+
+8010155d <bfree>:
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+8010155d:	55                   	push   %ebp
+8010155e:	89 e5                	mov    %esp,%ebp
+80101560:	83 ec 28             	sub    $0x28,%esp
+  struct buf *bp;
+  struct superblock sb;
+  int bi, m;
+
+  readsb(dev, &sb);
+80101563:	83 ec 08             	sub    $0x8,%esp
+80101566:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80101569:	50                   	push   %eax
+8010156a:	ff 75 08             	pushl  0x8(%ebp)
+8010156d:	e8 f7 fd ff ff       	call   80101369 <readsb>
+80101572:	83 c4 10             	add    $0x10,%esp
+  bp = bread(dev, BBLOCK(b, sb.ninodes));
+80101575:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101578:	c1 e8 0c             	shr    $0xc,%eax
+8010157b:	89 c2                	mov    %eax,%edx
+8010157d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101580:	c1 e8 03             	shr    $0x3,%eax
+80101583:	01 d0                	add    %edx,%eax
+80101585:	8d 50 03             	lea    0x3(%eax),%edx
+80101588:	8b 45 08             	mov    0x8(%ebp),%eax
+8010158b:	83 ec 08             	sub    $0x8,%esp
+8010158e:	52                   	push   %edx
+8010158f:	50                   	push   %eax
+80101590:	e8 21 ec ff ff       	call   801001b6 <bread>
+80101595:	83 c4 10             	add    $0x10,%esp
+80101598:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  bi = b % BPB;
+8010159b:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010159e:	25 ff 0f 00 00       	and    $0xfff,%eax
+801015a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  m = 1 << (bi % 8);
+801015a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801015a9:	99                   	cltd   
+801015aa:	c1 ea 1d             	shr    $0x1d,%edx
+801015ad:	01 d0                	add    %edx,%eax
+801015af:	83 e0 07             	and    $0x7,%eax
+801015b2:	29 d0                	sub    %edx,%eax
+801015b4:	ba 01 00 00 00       	mov    $0x1,%edx
+801015b9:	89 c1                	mov    %eax,%ecx
+801015bb:	d3 e2                	shl    %cl,%edx
+801015bd:	89 d0                	mov    %edx,%eax
+801015bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((bp->data[bi/8] & m) == 0)
+801015c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801015c5:	8d 50 07             	lea    0x7(%eax),%edx
+801015c8:	85 c0                	test   %eax,%eax
+801015ca:	0f 48 c2             	cmovs  %edx,%eax
+801015cd:	c1 f8 03             	sar    $0x3,%eax
+801015d0:	89 c2                	mov    %eax,%edx
+801015d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801015d5:	0f b6 44 10 18       	movzbl 0x18(%eax,%edx,1),%eax
+801015da:	0f b6 c0             	movzbl %al,%eax
+801015dd:	23 45 ec             	and    -0x14(%ebp),%eax
+801015e0:	85 c0                	test   %eax,%eax
+801015e2:	75 0d                	jne    801015f1 <bfree+0x94>
+    panic("freeing free block");
+801015e4:	83 ec 0c             	sub    $0xc,%esp
+801015e7:	68 8f 85 10 80       	push   $0x8010858f
+801015ec:	e8 75 ef ff ff       	call   80100566 <panic>
+  bp->data[bi/8] &= ~m;
+801015f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801015f4:	8d 50 07             	lea    0x7(%eax),%edx
+801015f7:	85 c0                	test   %eax,%eax
+801015f9:	0f 48 c2             	cmovs  %edx,%eax
+801015fc:	c1 f8 03             	sar    $0x3,%eax
+801015ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101602:	0f b6 54 02 18       	movzbl 0x18(%edx,%eax,1),%edx
+80101607:	89 d1                	mov    %edx,%ecx
+80101609:	8b 55 ec             	mov    -0x14(%ebp),%edx
+8010160c:	f7 d2                	not    %edx
+8010160e:	21 ca                	and    %ecx,%edx
+80101610:	89 d1                	mov    %edx,%ecx
+80101612:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101615:	88 4c 02 18          	mov    %cl,0x18(%edx,%eax,1)
+  log_write(bp);
+80101619:	83 ec 0c             	sub    $0xc,%esp
+8010161c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010161f:	e8 c8 20 00 00       	call   801036ec <log_write>
+80101624:	83 c4 10             	add    $0x10,%esp
+  brelse(bp);
+80101627:	83 ec 0c             	sub    $0xc,%esp
+8010162a:	ff 75 f4             	pushl  -0xc(%ebp)
+8010162d:	e8 fc eb ff ff       	call   8010022e <brelse>
+80101632:	83 c4 10             	add    $0x10,%esp
+}
+80101635:	90                   	nop
+80101636:	c9                   	leave  
+80101637:	c3                   	ret    
+
+80101638 <iinit>:
+  struct inode inode[NINODE];
+} icache;
+
+void
+iinit(void)
+{
+80101638:	55                   	push   %ebp
+80101639:	89 e5                	mov    %esp,%ebp
+8010163b:	83 ec 08             	sub    $0x8,%esp
+  initlock(&icache.lock, "icache");
+8010163e:	83 ec 08             	sub    $0x8,%esp
+80101641:	68 a2 85 10 80       	push   $0x801085a2
+80101646:	68 40 12 11 80       	push   $0x80111240
+8010164b:	e8 e4 38 00 00       	call   80104f34 <initlock>
+80101650:	83 c4 10             	add    $0x10,%esp
+}
+80101653:	90                   	nop
+80101654:	c9                   	leave  
+80101655:	c3                   	ret    
+
+80101656 <ialloc>:
+//PAGEBREAK!
+// Allocate a new inode with the given type on device dev.
+// A free inode has a type of zero.
+struct inode*
+ialloc(uint dev, short type)
+{
+80101656:	55                   	push   %ebp
+80101657:	89 e5                	mov    %esp,%ebp
+80101659:	83 ec 38             	sub    $0x38,%esp
+8010165c:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010165f:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+  struct superblock sb;
+
+  readsb(dev, &sb);
+80101663:	8b 45 08             	mov    0x8(%ebp),%eax
+80101666:	83 ec 08             	sub    $0x8,%esp
+80101669:	8d 55 dc             	lea    -0x24(%ebp),%edx
+8010166c:	52                   	push   %edx
+8010166d:	50                   	push   %eax
+8010166e:	e8 f6 fc ff ff       	call   80101369 <readsb>
+80101673:	83 c4 10             	add    $0x10,%esp
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101676:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+8010167d:	e9 98 00 00 00       	jmp    8010171a <ialloc+0xc4>
+    bp = bread(dev, IBLOCK(inum));
+80101682:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101685:	c1 e8 03             	shr    $0x3,%eax
+80101688:	83 c0 02             	add    $0x2,%eax
+8010168b:	83 ec 08             	sub    $0x8,%esp
+8010168e:	50                   	push   %eax
+8010168f:	ff 75 08             	pushl  0x8(%ebp)
+80101692:	e8 1f eb ff ff       	call   801001b6 <bread>
+80101697:	83 c4 10             	add    $0x10,%esp
+8010169a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    dip = (struct dinode*)bp->data + inum%IPB;
+8010169d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801016a0:	8d 50 18             	lea    0x18(%eax),%edx
+801016a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801016a6:	83 e0 07             	and    $0x7,%eax
+801016a9:	c1 e0 06             	shl    $0x6,%eax
+801016ac:	01 d0                	add    %edx,%eax
+801016ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if(dip->type == 0){  // a free inode
+801016b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801016b4:	0f b7 00             	movzwl (%eax),%eax
+801016b7:	66 85 c0             	test   %ax,%ax
+801016ba:	75 4c                	jne    80101708 <ialloc+0xb2>
+      memset(dip, 0, sizeof(*dip));
+801016bc:	83 ec 04             	sub    $0x4,%esp
+801016bf:	6a 40                	push   $0x40
+801016c1:	6a 00                	push   $0x0
+801016c3:	ff 75 ec             	pushl  -0x14(%ebp)
+801016c6:	e8 ee 3a 00 00       	call   801051b9 <memset>
+801016cb:	83 c4 10             	add    $0x10,%esp
+      dip->type = type;
+801016ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801016d1:	0f b7 55 d4          	movzwl -0x2c(%ebp),%edx
+801016d5:	66 89 10             	mov    %dx,(%eax)
+      log_write(bp);   // mark it allocated on the disk
+801016d8:	83 ec 0c             	sub    $0xc,%esp
+801016db:	ff 75 f0             	pushl  -0x10(%ebp)
+801016de:	e8 09 20 00 00       	call   801036ec <log_write>
+801016e3:	83 c4 10             	add    $0x10,%esp
+      brelse(bp);
+801016e6:	83 ec 0c             	sub    $0xc,%esp
+801016e9:	ff 75 f0             	pushl  -0x10(%ebp)
+801016ec:	e8 3d eb ff ff       	call   8010022e <brelse>
+801016f1:	83 c4 10             	add    $0x10,%esp
+      return iget(dev, inum);
+801016f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801016f7:	83 ec 08             	sub    $0x8,%esp
+801016fa:	50                   	push   %eax
+801016fb:	ff 75 08             	pushl  0x8(%ebp)
+801016fe:	e8 ef 00 00 00       	call   801017f2 <iget>
+80101703:	83 c4 10             	add    $0x10,%esp
+80101706:	eb 2d                	jmp    80101735 <ialloc+0xdf>
+    }
+    brelse(bp);
+80101708:	83 ec 0c             	sub    $0xc,%esp
+8010170b:	ff 75 f0             	pushl  -0x10(%ebp)
+8010170e:	e8 1b eb ff ff       	call   8010022e <brelse>
+80101713:	83 c4 10             	add    $0x10,%esp
+  struct dinode *dip;
+  struct superblock sb;
+
+  readsb(dev, &sb);
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101716:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+8010171a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010171d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101720:	39 c2                	cmp    %eax,%edx
+80101722:	0f 87 5a ff ff ff    	ja     80101682 <ialloc+0x2c>
+      brelse(bp);
+      return iget(dev, inum);
+    }
+    brelse(bp);
+  }
+  panic("ialloc: no inodes");
+80101728:	83 ec 0c             	sub    $0xc,%esp
+8010172b:	68 a9 85 10 80       	push   $0x801085a9
+80101730:	e8 31 ee ff ff       	call   80100566 <panic>
+}
+80101735:	c9                   	leave  
+80101736:	c3                   	ret    
+
+80101737 <iupdate>:
+
+// Copy a modified in-memory inode to disk.
+void
+iupdate(struct inode *ip)
+{
+80101737:	55                   	push   %ebp
+80101738:	89 e5                	mov    %esp,%ebp
+8010173a:	83 ec 18             	sub    $0x18,%esp
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum));
+8010173d:	8b 45 08             	mov    0x8(%ebp),%eax
+80101740:	8b 40 04             	mov    0x4(%eax),%eax
+80101743:	c1 e8 03             	shr    $0x3,%eax
+80101746:	8d 50 02             	lea    0x2(%eax),%edx
+80101749:	8b 45 08             	mov    0x8(%ebp),%eax
+8010174c:	8b 00                	mov    (%eax),%eax
+8010174e:	83 ec 08             	sub    $0x8,%esp
+80101751:	52                   	push   %edx
+80101752:	50                   	push   %eax
+80101753:	e8 5e ea ff ff       	call   801001b6 <bread>
+80101758:	83 c4 10             	add    $0x10,%esp
+8010175b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+8010175e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101761:	8d 50 18             	lea    0x18(%eax),%edx
+80101764:	8b 45 08             	mov    0x8(%ebp),%eax
+80101767:	8b 40 04             	mov    0x4(%eax),%eax
+8010176a:	83 e0 07             	and    $0x7,%eax
+8010176d:	c1 e0 06             	shl    $0x6,%eax
+80101770:	01 d0                	add    %edx,%eax
+80101772:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  dip->type = ip->type;
+80101775:	8b 45 08             	mov    0x8(%ebp),%eax
+80101778:	0f b7 50 10          	movzwl 0x10(%eax),%edx
+8010177c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010177f:	66 89 10             	mov    %dx,(%eax)
+  dip->major = ip->major;
+80101782:	8b 45 08             	mov    0x8(%ebp),%eax
+80101785:	0f b7 50 12          	movzwl 0x12(%eax),%edx
+80101789:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010178c:	66 89 50 02          	mov    %dx,0x2(%eax)
+  dip->minor = ip->minor;
+80101790:	8b 45 08             	mov    0x8(%ebp),%eax
+80101793:	0f b7 50 14          	movzwl 0x14(%eax),%edx
+80101797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010179a:	66 89 50 04          	mov    %dx,0x4(%eax)
+  dip->nlink = ip->nlink;
+8010179e:	8b 45 08             	mov    0x8(%ebp),%eax
+801017a1:	0f b7 50 16          	movzwl 0x16(%eax),%edx
+801017a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801017a8:	66 89 50 06          	mov    %dx,0x6(%eax)
+  dip->size = ip->size;
+801017ac:	8b 45 08             	mov    0x8(%ebp),%eax
+801017af:	8b 50 18             	mov    0x18(%eax),%edx
+801017b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801017b5:	89 50 08             	mov    %edx,0x8(%eax)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801017b8:	8b 45 08             	mov    0x8(%ebp),%eax
+801017bb:	8d 50 1c             	lea    0x1c(%eax),%edx
+801017be:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801017c1:	83 c0 0c             	add    $0xc,%eax
+801017c4:	83 ec 04             	sub    $0x4,%esp
+801017c7:	6a 34                	push   $0x34
+801017c9:	52                   	push   %edx
+801017ca:	50                   	push   %eax
+801017cb:	e8 a8 3a 00 00       	call   80105278 <memmove>
+801017d0:	83 c4 10             	add    $0x10,%esp
+  log_write(bp);
+801017d3:	83 ec 0c             	sub    $0xc,%esp
+801017d6:	ff 75 f4             	pushl  -0xc(%ebp)
+801017d9:	e8 0e 1f 00 00       	call   801036ec <log_write>
+801017de:	83 c4 10             	add    $0x10,%esp
+  brelse(bp);
+801017e1:	83 ec 0c             	sub    $0xc,%esp
+801017e4:	ff 75 f4             	pushl  -0xc(%ebp)
+801017e7:	e8 42 ea ff ff       	call   8010022e <brelse>
+801017ec:	83 c4 10             	add    $0x10,%esp
+}
+801017ef:	90                   	nop
+801017f0:	c9                   	leave  
+801017f1:	c3                   	ret    
+
+801017f2 <iget>:
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+801017f2:	55                   	push   %ebp
+801017f3:	89 e5                	mov    %esp,%ebp
+801017f5:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+801017f8:	83 ec 0c             	sub    $0xc,%esp
+801017fb:	68 40 12 11 80       	push   $0x80111240
+80101800:	e8 51 37 00 00       	call   80104f56 <acquire>
+80101805:	83 c4 10             	add    $0x10,%esp
+
+  // Is the inode already cached?
+  empty = 0;
+80101808:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010180f:	c7 45 f4 74 12 11 80 	movl   $0x80111274,-0xc(%ebp)
+80101816:	eb 5d                	jmp    80101875 <iget+0x83>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101818:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010181b:	8b 40 08             	mov    0x8(%eax),%eax
+8010181e:	85 c0                	test   %eax,%eax
+80101820:	7e 39                	jle    8010185b <iget+0x69>
+80101822:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101825:	8b 00                	mov    (%eax),%eax
+80101827:	3b 45 08             	cmp    0x8(%ebp),%eax
+8010182a:	75 2f                	jne    8010185b <iget+0x69>
+8010182c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010182f:	8b 40 04             	mov    0x4(%eax),%eax
+80101832:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80101835:	75 24                	jne    8010185b <iget+0x69>
+      ip->ref++;
+80101837:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010183a:	8b 40 08             	mov    0x8(%eax),%eax
+8010183d:	8d 50 01             	lea    0x1(%eax),%edx
+80101840:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101843:	89 50 08             	mov    %edx,0x8(%eax)
+      release(&icache.lock);
+80101846:	83 ec 0c             	sub    $0xc,%esp
+80101849:	68 40 12 11 80       	push   $0x80111240
+8010184e:	e8 6a 37 00 00       	call   80104fbd <release>
+80101853:	83 c4 10             	add    $0x10,%esp
+      return ip;
+80101856:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101859:	eb 74                	jmp    801018cf <iget+0xdd>
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+8010185b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+8010185f:	75 10                	jne    80101871 <iget+0x7f>
+80101861:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101864:	8b 40 08             	mov    0x8(%eax),%eax
+80101867:	85 c0                	test   %eax,%eax
+80101869:	75 06                	jne    80101871 <iget+0x7f>
+      empty = ip;
+8010186b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010186e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101871:	83 45 f4 50          	addl   $0x50,-0xc(%ebp)
+80101875:	81 7d f4 14 22 11 80 	cmpl   $0x80112214,-0xc(%ebp)
+8010187c:	72 9a                	jb     80101818 <iget+0x26>
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+8010187e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80101882:	75 0d                	jne    80101891 <iget+0x9f>
+    panic("iget: no inodes");
+80101884:	83 ec 0c             	sub    $0xc,%esp
+80101887:	68 bb 85 10 80       	push   $0x801085bb
+8010188c:	e8 d5 ec ff ff       	call   80100566 <panic>
+
+  ip = empty;
+80101891:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101894:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  ip->dev = dev;
+80101897:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010189a:	8b 55 08             	mov    0x8(%ebp),%edx
+8010189d:	89 10                	mov    %edx,(%eax)
+  ip->inum = inum;
+8010189f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801018a2:	8b 55 0c             	mov    0xc(%ebp),%edx
+801018a5:	89 50 04             	mov    %edx,0x4(%eax)
+  ip->ref = 1;
+801018a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801018ab:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
+  ip->flags = 0;
+801018b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801018b5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+  release(&icache.lock);
+801018bc:	83 ec 0c             	sub    $0xc,%esp
+801018bf:	68 40 12 11 80       	push   $0x80111240
+801018c4:	e8 f4 36 00 00       	call   80104fbd <release>
+801018c9:	83 c4 10             	add    $0x10,%esp
+
+  return ip;
+801018cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+801018cf:	c9                   	leave  
+801018d0:	c3                   	ret    
+
+801018d1 <idup>:
+
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+801018d1:	55                   	push   %ebp
+801018d2:	89 e5                	mov    %esp,%ebp
+801018d4:	83 ec 08             	sub    $0x8,%esp
+  acquire(&icache.lock);
+801018d7:	83 ec 0c             	sub    $0xc,%esp
+801018da:	68 40 12 11 80       	push   $0x80111240
+801018df:	e8 72 36 00 00       	call   80104f56 <acquire>
+801018e4:	83 c4 10             	add    $0x10,%esp
+  ip->ref++;
+801018e7:	8b 45 08             	mov    0x8(%ebp),%eax
+801018ea:	8b 40 08             	mov    0x8(%eax),%eax
+801018ed:	8d 50 01             	lea    0x1(%eax),%edx
+801018f0:	8b 45 08             	mov    0x8(%ebp),%eax
+801018f3:	89 50 08             	mov    %edx,0x8(%eax)
+  release(&icache.lock);
+801018f6:	83 ec 0c             	sub    $0xc,%esp
+801018f9:	68 40 12 11 80       	push   $0x80111240
+801018fe:	e8 ba 36 00 00       	call   80104fbd <release>
+80101903:	83 c4 10             	add    $0x10,%esp
+  return ip;
+80101906:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+80101909:	c9                   	leave  
+8010190a:	c3                   	ret    
+
+8010190b <ilock>:
+
+// Lock the given inode.
+// Reads the inode from disk if necessary.
+void
+ilock(struct inode *ip)
+{
+8010190b:	55                   	push   %ebp
+8010190c:	89 e5                	mov    %esp,%ebp
+8010190e:	83 ec 18             	sub    $0x18,%esp
+  struct buf *bp;
+  struct dinode *dip;
+
+  if(ip == 0 || ip->ref < 1)
+80101911:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+80101915:	74 0a                	je     80101921 <ilock+0x16>
+80101917:	8b 45 08             	mov    0x8(%ebp),%eax
+8010191a:	8b 40 08             	mov    0x8(%eax),%eax
+8010191d:	85 c0                	test   %eax,%eax
+8010191f:	7f 0d                	jg     8010192e <ilock+0x23>
+    panic("ilock");
+80101921:	83 ec 0c             	sub    $0xc,%esp
+80101924:	68 cb 85 10 80       	push   $0x801085cb
+80101929:	e8 38 ec ff ff       	call   80100566 <panic>
+
+  acquire(&icache.lock);
+8010192e:	83 ec 0c             	sub    $0xc,%esp
+80101931:	68 40 12 11 80       	push   $0x80111240
+80101936:	e8 1b 36 00 00       	call   80104f56 <acquire>
+8010193b:	83 c4 10             	add    $0x10,%esp
+  while(ip->flags & I_BUSY)
+8010193e:	eb 13                	jmp    80101953 <ilock+0x48>
+    sleep(ip, &icache.lock);
+80101940:	83 ec 08             	sub    $0x8,%esp
+80101943:	68 40 12 11 80       	push   $0x80111240
+80101948:	ff 75 08             	pushl  0x8(%ebp)
+8010194b:	e8 0d 33 00 00       	call   80104c5d <sleep>
+80101950:	83 c4 10             	add    $0x10,%esp
+
+  if(ip == 0 || ip->ref < 1)
+    panic("ilock");
+
+  acquire(&icache.lock);
+  while(ip->flags & I_BUSY)
+80101953:	8b 45 08             	mov    0x8(%ebp),%eax
+80101956:	8b 40 0c             	mov    0xc(%eax),%eax
+80101959:	83 e0 01             	and    $0x1,%eax
+8010195c:	85 c0                	test   %eax,%eax
+8010195e:	75 e0                	jne    80101940 <ilock+0x35>
+    sleep(ip, &icache.lock);
+  ip->flags |= I_BUSY;
+80101960:	8b 45 08             	mov    0x8(%ebp),%eax
+80101963:	8b 40 0c             	mov    0xc(%eax),%eax
+80101966:	83 c8 01             	or     $0x1,%eax
+80101969:	89 c2                	mov    %eax,%edx
+8010196b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010196e:	89 50 0c             	mov    %edx,0xc(%eax)
+  release(&icache.lock);
+80101971:	83 ec 0c             	sub    $0xc,%esp
+80101974:	68 40 12 11 80       	push   $0x80111240
+80101979:	e8 3f 36 00 00       	call   80104fbd <release>
+8010197e:	83 c4 10             	add    $0x10,%esp
+
+  if(!(ip->flags & I_VALID)){
+80101981:	8b 45 08             	mov    0x8(%ebp),%eax
+80101984:	8b 40 0c             	mov    0xc(%eax),%eax
+80101987:	83 e0 02             	and    $0x2,%eax
+8010198a:	85 c0                	test   %eax,%eax
+8010198c:	0f 85 ce 00 00 00    	jne    80101a60 <ilock+0x155>
+    bp = bread(ip->dev, IBLOCK(ip->inum));
+80101992:	8b 45 08             	mov    0x8(%ebp),%eax
+80101995:	8b 40 04             	mov    0x4(%eax),%eax
+80101998:	c1 e8 03             	shr    $0x3,%eax
+8010199b:	8d 50 02             	lea    0x2(%eax),%edx
+8010199e:	8b 45 08             	mov    0x8(%ebp),%eax
+801019a1:	8b 00                	mov    (%eax),%eax
+801019a3:	83 ec 08             	sub    $0x8,%esp
+801019a6:	52                   	push   %edx
+801019a7:	50                   	push   %eax
+801019a8:	e8 09 e8 ff ff       	call   801001b6 <bread>
+801019ad:	83 c4 10             	add    $0x10,%esp
+801019b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801019b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801019b6:	8d 50 18             	lea    0x18(%eax),%edx
+801019b9:	8b 45 08             	mov    0x8(%ebp),%eax
+801019bc:	8b 40 04             	mov    0x4(%eax),%eax
+801019bf:	83 e0 07             	and    $0x7,%eax
+801019c2:	c1 e0 06             	shl    $0x6,%eax
+801019c5:	01 d0                	add    %edx,%eax
+801019c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    ip->type = dip->type;
+801019ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801019cd:	0f b7 10             	movzwl (%eax),%edx
+801019d0:	8b 45 08             	mov    0x8(%ebp),%eax
+801019d3:	66 89 50 10          	mov    %dx,0x10(%eax)
+    ip->major = dip->major;
+801019d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801019da:	0f b7 50 02          	movzwl 0x2(%eax),%edx
+801019de:	8b 45 08             	mov    0x8(%ebp),%eax
+801019e1:	66 89 50 12          	mov    %dx,0x12(%eax)
+    ip->minor = dip->minor;
+801019e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801019e8:	0f b7 50 04          	movzwl 0x4(%eax),%edx
+801019ec:	8b 45 08             	mov    0x8(%ebp),%eax
+801019ef:	66 89 50 14          	mov    %dx,0x14(%eax)
+    ip->nlink = dip->nlink;
+801019f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801019f6:	0f b7 50 06          	movzwl 0x6(%eax),%edx
+801019fa:	8b 45 08             	mov    0x8(%ebp),%eax
+801019fd:	66 89 50 16          	mov    %dx,0x16(%eax)
+    ip->size = dip->size;
+80101a01:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101a04:	8b 50 08             	mov    0x8(%eax),%edx
+80101a07:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a0a:	89 50 18             	mov    %edx,0x18(%eax)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+80101a0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101a10:	8d 50 0c             	lea    0xc(%eax),%edx
+80101a13:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a16:	83 c0 1c             	add    $0x1c,%eax
+80101a19:	83 ec 04             	sub    $0x4,%esp
+80101a1c:	6a 34                	push   $0x34
+80101a1e:	52                   	push   %edx
+80101a1f:	50                   	push   %eax
+80101a20:	e8 53 38 00 00       	call   80105278 <memmove>
+80101a25:	83 c4 10             	add    $0x10,%esp
+    brelse(bp);
+80101a28:	83 ec 0c             	sub    $0xc,%esp
+80101a2b:	ff 75 f4             	pushl  -0xc(%ebp)
+80101a2e:	e8 fb e7 ff ff       	call   8010022e <brelse>
+80101a33:	83 c4 10             	add    $0x10,%esp
+    ip->flags |= I_VALID;
+80101a36:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a39:	8b 40 0c             	mov    0xc(%eax),%eax
+80101a3c:	83 c8 02             	or     $0x2,%eax
+80101a3f:	89 c2                	mov    %eax,%edx
+80101a41:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a44:	89 50 0c             	mov    %edx,0xc(%eax)
+    if(ip->type == 0)
+80101a47:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a4a:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80101a4e:	66 85 c0             	test   %ax,%ax
+80101a51:	75 0d                	jne    80101a60 <ilock+0x155>
+      panic("ilock: no type");
+80101a53:	83 ec 0c             	sub    $0xc,%esp
+80101a56:	68 d1 85 10 80       	push   $0x801085d1
+80101a5b:	e8 06 eb ff ff       	call   80100566 <panic>
+  }
+}
+80101a60:	90                   	nop
+80101a61:	c9                   	leave  
+80101a62:	c3                   	ret    
+
+80101a63 <iunlock>:
+
+// Unlock the given inode.
+void
+iunlock(struct inode *ip)
+{
+80101a63:	55                   	push   %ebp
+80101a64:	89 e5                	mov    %esp,%ebp
+80101a66:	83 ec 08             	sub    $0x8,%esp
+  if(ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1)
+80101a69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+80101a6d:	74 17                	je     80101a86 <iunlock+0x23>
+80101a6f:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a72:	8b 40 0c             	mov    0xc(%eax),%eax
+80101a75:	83 e0 01             	and    $0x1,%eax
+80101a78:	85 c0                	test   %eax,%eax
+80101a7a:	74 0a                	je     80101a86 <iunlock+0x23>
+80101a7c:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a7f:	8b 40 08             	mov    0x8(%eax),%eax
+80101a82:	85 c0                	test   %eax,%eax
+80101a84:	7f 0d                	jg     80101a93 <iunlock+0x30>
+    panic("iunlock");
+80101a86:	83 ec 0c             	sub    $0xc,%esp
+80101a89:	68 e0 85 10 80       	push   $0x801085e0
+80101a8e:	e8 d3 ea ff ff       	call   80100566 <panic>
+
+  acquire(&icache.lock);
+80101a93:	83 ec 0c             	sub    $0xc,%esp
+80101a96:	68 40 12 11 80       	push   $0x80111240
+80101a9b:	e8 b6 34 00 00       	call   80104f56 <acquire>
+80101aa0:	83 c4 10             	add    $0x10,%esp
+  ip->flags &= ~I_BUSY;
+80101aa3:	8b 45 08             	mov    0x8(%ebp),%eax
+80101aa6:	8b 40 0c             	mov    0xc(%eax),%eax
+80101aa9:	83 e0 fe             	and    $0xfffffffe,%eax
+80101aac:	89 c2                	mov    %eax,%edx
+80101aae:	8b 45 08             	mov    0x8(%ebp),%eax
+80101ab1:	89 50 0c             	mov    %edx,0xc(%eax)
+  wakeup(ip);
+80101ab4:	83 ec 0c             	sub    $0xc,%esp
+80101ab7:	ff 75 08             	pushl  0x8(%ebp)
+80101aba:	e8 89 32 00 00       	call   80104d48 <wakeup>
+80101abf:	83 c4 10             	add    $0x10,%esp
+  release(&icache.lock);
+80101ac2:	83 ec 0c             	sub    $0xc,%esp
+80101ac5:	68 40 12 11 80       	push   $0x80111240
+80101aca:	e8 ee 34 00 00       	call   80104fbd <release>
+80101acf:	83 c4 10             	add    $0x10,%esp
+}
+80101ad2:	90                   	nop
+80101ad3:	c9                   	leave  
+80101ad4:	c3                   	ret    
+
+80101ad5 <iput>:
+// to it, free the inode (and its content) on disk.
+// All calls to iput() must be inside a transaction in
+// case it has to free the inode.
+void
+iput(struct inode *ip)
+{
+80101ad5:	55                   	push   %ebp
+80101ad6:	89 e5                	mov    %esp,%ebp
+80101ad8:	83 ec 08             	sub    $0x8,%esp
+  acquire(&icache.lock);
+80101adb:	83 ec 0c             	sub    $0xc,%esp
+80101ade:	68 40 12 11 80       	push   $0x80111240
+80101ae3:	e8 6e 34 00 00       	call   80104f56 <acquire>
+80101ae8:	83 c4 10             	add    $0x10,%esp
+  if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
+80101aeb:	8b 45 08             	mov    0x8(%ebp),%eax
+80101aee:	8b 40 08             	mov    0x8(%eax),%eax
+80101af1:	83 f8 01             	cmp    $0x1,%eax
+80101af4:	0f 85 a9 00 00 00    	jne    80101ba3 <iput+0xce>
+80101afa:	8b 45 08             	mov    0x8(%ebp),%eax
+80101afd:	8b 40 0c             	mov    0xc(%eax),%eax
+80101b00:	83 e0 02             	and    $0x2,%eax
+80101b03:	85 c0                	test   %eax,%eax
+80101b05:	0f 84 98 00 00 00    	je     80101ba3 <iput+0xce>
+80101b0b:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b0e:	0f b7 40 16          	movzwl 0x16(%eax),%eax
+80101b12:	66 85 c0             	test   %ax,%ax
+80101b15:	0f 85 88 00 00 00    	jne    80101ba3 <iput+0xce>
+    // inode has no links and no other references: truncate and free.
+    if(ip->flags & I_BUSY)
+80101b1b:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b1e:	8b 40 0c             	mov    0xc(%eax),%eax
+80101b21:	83 e0 01             	and    $0x1,%eax
+80101b24:	85 c0                	test   %eax,%eax
+80101b26:	74 0d                	je     80101b35 <iput+0x60>
+      panic("iput busy");
+80101b28:	83 ec 0c             	sub    $0xc,%esp
+80101b2b:	68 e8 85 10 80       	push   $0x801085e8
+80101b30:	e8 31 ea ff ff       	call   80100566 <panic>
+    ip->flags |= I_BUSY;
+80101b35:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b38:	8b 40 0c             	mov    0xc(%eax),%eax
+80101b3b:	83 c8 01             	or     $0x1,%eax
+80101b3e:	89 c2                	mov    %eax,%edx
+80101b40:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b43:	89 50 0c             	mov    %edx,0xc(%eax)
+    release(&icache.lock);
+80101b46:	83 ec 0c             	sub    $0xc,%esp
+80101b49:	68 40 12 11 80       	push   $0x80111240
+80101b4e:	e8 6a 34 00 00       	call   80104fbd <release>
+80101b53:	83 c4 10             	add    $0x10,%esp
+    itrunc(ip);
+80101b56:	83 ec 0c             	sub    $0xc,%esp
+80101b59:	ff 75 08             	pushl  0x8(%ebp)
+80101b5c:	e8 a8 01 00 00       	call   80101d09 <itrunc>
+80101b61:	83 c4 10             	add    $0x10,%esp
+    ip->type = 0;
+80101b64:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b67:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
+    iupdate(ip);
+80101b6d:	83 ec 0c             	sub    $0xc,%esp
+80101b70:	ff 75 08             	pushl  0x8(%ebp)
+80101b73:	e8 bf fb ff ff       	call   80101737 <iupdate>
+80101b78:	83 c4 10             	add    $0x10,%esp
+    acquire(&icache.lock);
+80101b7b:	83 ec 0c             	sub    $0xc,%esp
+80101b7e:	68 40 12 11 80       	push   $0x80111240
+80101b83:	e8 ce 33 00 00       	call   80104f56 <acquire>
+80101b88:	83 c4 10             	add    $0x10,%esp
+    ip->flags = 0;
+80101b8b:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b8e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    wakeup(ip);
+80101b95:	83 ec 0c             	sub    $0xc,%esp
+80101b98:	ff 75 08             	pushl  0x8(%ebp)
+80101b9b:	e8 a8 31 00 00       	call   80104d48 <wakeup>
+80101ba0:	83 c4 10             	add    $0x10,%esp
+  }
+  ip->ref--;
+80101ba3:	8b 45 08             	mov    0x8(%ebp),%eax
+80101ba6:	8b 40 08             	mov    0x8(%eax),%eax
+80101ba9:	8d 50 ff             	lea    -0x1(%eax),%edx
+80101bac:	8b 45 08             	mov    0x8(%ebp),%eax
+80101baf:	89 50 08             	mov    %edx,0x8(%eax)
+  release(&icache.lock);
+80101bb2:	83 ec 0c             	sub    $0xc,%esp
+80101bb5:	68 40 12 11 80       	push   $0x80111240
+80101bba:	e8 fe 33 00 00       	call   80104fbd <release>
+80101bbf:	83 c4 10             	add    $0x10,%esp
+}
+80101bc2:	90                   	nop
+80101bc3:	c9                   	leave  
+80101bc4:	c3                   	ret    
+
+80101bc5 <iunlockput>:
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+80101bc5:	55                   	push   %ebp
+80101bc6:	89 e5                	mov    %esp,%ebp
+80101bc8:	83 ec 08             	sub    $0x8,%esp
+  iunlock(ip);
+80101bcb:	83 ec 0c             	sub    $0xc,%esp
+80101bce:	ff 75 08             	pushl  0x8(%ebp)
+80101bd1:	e8 8d fe ff ff       	call   80101a63 <iunlock>
+80101bd6:	83 c4 10             	add    $0x10,%esp
+  iput(ip);
+80101bd9:	83 ec 0c             	sub    $0xc,%esp
+80101bdc:	ff 75 08             	pushl  0x8(%ebp)
+80101bdf:	e8 f1 fe ff ff       	call   80101ad5 <iput>
+80101be4:	83 c4 10             	add    $0x10,%esp
+}
+80101be7:	90                   	nop
+80101be8:	c9                   	leave  
+80101be9:	c3                   	ret    
+
+80101bea <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+80101bea:	55                   	push   %ebp
+80101beb:	89 e5                	mov    %esp,%ebp
+80101bed:	53                   	push   %ebx
+80101bee:	83 ec 14             	sub    $0x14,%esp
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+80101bf1:	83 7d 0c 0b          	cmpl   $0xb,0xc(%ebp)
+80101bf5:	77 42                	ja     80101c39 <bmap+0x4f>
+    if((addr = ip->addrs[bn]) == 0)
+80101bf7:	8b 45 08             	mov    0x8(%ebp),%eax
+80101bfa:	8b 55 0c             	mov    0xc(%ebp),%edx
+80101bfd:	83 c2 04             	add    $0x4,%edx
+80101c00:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
+80101c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80101c07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80101c0b:	75 24                	jne    80101c31 <bmap+0x47>
+      ip->addrs[bn] = addr = balloc(ip->dev);
+80101c0d:	8b 45 08             	mov    0x8(%ebp),%eax
+80101c10:	8b 00                	mov    (%eax),%eax
+80101c12:	83 ec 0c             	sub    $0xc,%esp
+80101c15:	50                   	push   %eax
+80101c16:	e8 e4 f7 ff ff       	call   801013ff <balloc>
+80101c1b:	83 c4 10             	add    $0x10,%esp
+80101c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80101c21:	8b 45 08             	mov    0x8(%ebp),%eax
+80101c24:	8b 55 0c             	mov    0xc(%ebp),%edx
+80101c27:	8d 4a 04             	lea    0x4(%edx),%ecx
+80101c2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101c2d:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
+    return addr;
+80101c31:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101c34:	e9 cb 00 00 00       	jmp    80101d04 <bmap+0x11a>
+  }
+  bn -= NDIRECT;
+80101c39:	83 6d 0c 0c          	subl   $0xc,0xc(%ebp)
+
+  if(bn < NINDIRECT){
+80101c3d:	83 7d 0c 7f          	cmpl   $0x7f,0xc(%ebp)
+80101c41:	0f 87 b0 00 00 00    	ja     80101cf7 <bmap+0x10d>
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+80101c47:	8b 45 08             	mov    0x8(%ebp),%eax
+80101c4a:	8b 40 4c             	mov    0x4c(%eax),%eax
+80101c4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80101c50:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80101c54:	75 1d                	jne    80101c73 <bmap+0x89>
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+80101c56:	8b 45 08             	mov    0x8(%ebp),%eax
+80101c59:	8b 00                	mov    (%eax),%eax
+80101c5b:	83 ec 0c             	sub    $0xc,%esp
+80101c5e:	50                   	push   %eax
+80101c5f:	e8 9b f7 ff ff       	call   801013ff <balloc>
+80101c64:	83 c4 10             	add    $0x10,%esp
+80101c67:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80101c6a:	8b 45 08             	mov    0x8(%ebp),%eax
+80101c6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101c70:	89 50 4c             	mov    %edx,0x4c(%eax)
+    bp = bread(ip->dev, addr);
+80101c73:	8b 45 08             	mov    0x8(%ebp),%eax
+80101c76:	8b 00                	mov    (%eax),%eax
+80101c78:	83 ec 08             	sub    $0x8,%esp
+80101c7b:	ff 75 f4             	pushl  -0xc(%ebp)
+80101c7e:	50                   	push   %eax
+80101c7f:	e8 32 e5 ff ff       	call   801001b6 <bread>
+80101c84:	83 c4 10             	add    $0x10,%esp
+80101c87:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    a = (uint*)bp->data;
+80101c8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101c8d:	83 c0 18             	add    $0x18,%eax
+80101c90:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if((addr = a[bn]) == 0){
+80101c93:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101c96:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80101c9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80101ca0:	01 d0                	add    %edx,%eax
+80101ca2:	8b 00                	mov    (%eax),%eax
+80101ca4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80101ca7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80101cab:	75 37                	jne    80101ce4 <bmap+0xfa>
+      a[bn] = addr = balloc(ip->dev);
+80101cad:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101cb0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80101cb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80101cba:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
+80101cbd:	8b 45 08             	mov    0x8(%ebp),%eax
+80101cc0:	8b 00                	mov    (%eax),%eax
+80101cc2:	83 ec 0c             	sub    $0xc,%esp
+80101cc5:	50                   	push   %eax
+80101cc6:	e8 34 f7 ff ff       	call   801013ff <balloc>
+80101ccb:	83 c4 10             	add    $0x10,%esp
+80101cce:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80101cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101cd4:	89 03                	mov    %eax,(%ebx)
+      log_write(bp);
+80101cd6:	83 ec 0c             	sub    $0xc,%esp
+80101cd9:	ff 75 f0             	pushl  -0x10(%ebp)
+80101cdc:	e8 0b 1a 00 00       	call   801036ec <log_write>
+80101ce1:	83 c4 10             	add    $0x10,%esp
+    }
+    brelse(bp);
+80101ce4:	83 ec 0c             	sub    $0xc,%esp
+80101ce7:	ff 75 f0             	pushl  -0x10(%ebp)
+80101cea:	e8 3f e5 ff ff       	call   8010022e <brelse>
+80101cef:	83 c4 10             	add    $0x10,%esp
+    return addr;
+80101cf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101cf5:	eb 0d                	jmp    80101d04 <bmap+0x11a>
+  }
+
+  panic("bmap: out of range");
+80101cf7:	83 ec 0c             	sub    $0xc,%esp
+80101cfa:	68 f2 85 10 80       	push   $0x801085f2
+80101cff:	e8 62 e8 ff ff       	call   80100566 <panic>
+}
+80101d04:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101d07:	c9                   	leave  
+80101d08:	c3                   	ret    
+
+80101d09 <itrunc>:
+// to it (no directory entries referring to it)
+// and has no in-memory reference to it (is
+// not an open file or current directory).
+static void
+itrunc(struct inode *ip)
+{
+80101d09:	55                   	push   %ebp
+80101d0a:	89 e5                	mov    %esp,%ebp
+80101d0c:	83 ec 18             	sub    $0x18,%esp
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+80101d0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80101d16:	eb 45                	jmp    80101d5d <itrunc+0x54>
+    if(ip->addrs[i]){
+80101d18:	8b 45 08             	mov    0x8(%ebp),%eax
+80101d1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101d1e:	83 c2 04             	add    $0x4,%edx
+80101d21:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
+80101d25:	85 c0                	test   %eax,%eax
+80101d27:	74 30                	je     80101d59 <itrunc+0x50>
+      bfree(ip->dev, ip->addrs[i]);
+80101d29:	8b 45 08             	mov    0x8(%ebp),%eax
+80101d2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101d2f:	83 c2 04             	add    $0x4,%edx
+80101d32:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
+80101d36:	8b 55 08             	mov    0x8(%ebp),%edx
+80101d39:	8b 12                	mov    (%edx),%edx
+80101d3b:	83 ec 08             	sub    $0x8,%esp
+80101d3e:	50                   	push   %eax
+80101d3f:	52                   	push   %edx
+80101d40:	e8 18 f8 ff ff       	call   8010155d <bfree>
+80101d45:	83 c4 10             	add    $0x10,%esp
+      ip->addrs[i] = 0;
+80101d48:	8b 45 08             	mov    0x8(%ebp),%eax
+80101d4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80101d4e:	83 c2 04             	add    $0x4,%edx
+80101d51:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
+80101d58:	00 
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+80101d59:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80101d5d:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
+80101d61:	7e b5                	jle    80101d18 <itrunc+0xf>
+      bfree(ip->dev, ip->addrs[i]);
+      ip->addrs[i] = 0;
+    }
+  }
+  
+  if(ip->addrs[NDIRECT]){
+80101d63:	8b 45 08             	mov    0x8(%ebp),%eax
+80101d66:	8b 40 4c             	mov    0x4c(%eax),%eax
+80101d69:	85 c0                	test   %eax,%eax
+80101d6b:	0f 84 a1 00 00 00    	je     80101e12 <itrunc+0x109>
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+80101d71:	8b 45 08             	mov    0x8(%ebp),%eax
+80101d74:	8b 50 4c             	mov    0x4c(%eax),%edx
+80101d77:	8b 45 08             	mov    0x8(%ebp),%eax
+80101d7a:	8b 00                	mov    (%eax),%eax
+80101d7c:	83 ec 08             	sub    $0x8,%esp
+80101d7f:	52                   	push   %edx
+80101d80:	50                   	push   %eax
+80101d81:	e8 30 e4 ff ff       	call   801001b6 <bread>
+80101d86:	83 c4 10             	add    $0x10,%esp
+80101d89:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    a = (uint*)bp->data;
+80101d8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80101d8f:	83 c0 18             	add    $0x18,%eax
+80101d92:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    for(j = 0; j < NINDIRECT; j++){
+80101d95:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+80101d9c:	eb 3c                	jmp    80101dda <itrunc+0xd1>
+      if(a[j])
+80101d9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101da1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80101da8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80101dab:	01 d0                	add    %edx,%eax
+80101dad:	8b 00                	mov    (%eax),%eax
+80101daf:	85 c0                	test   %eax,%eax
+80101db1:	74 23                	je     80101dd6 <itrunc+0xcd>
+        bfree(ip->dev, a[j]);
+80101db3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101db6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80101dbd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80101dc0:	01 d0                	add    %edx,%eax
+80101dc2:	8b 00                	mov    (%eax),%eax
+80101dc4:	8b 55 08             	mov    0x8(%ebp),%edx
+80101dc7:	8b 12                	mov    (%edx),%edx
+80101dc9:	83 ec 08             	sub    $0x8,%esp
+80101dcc:	50                   	push   %eax
+80101dcd:	52                   	push   %edx
+80101dce:	e8 8a f7 ff ff       	call   8010155d <bfree>
+80101dd3:	83 c4 10             	add    $0x10,%esp
+  }
+  
+  if(ip->addrs[NDIRECT]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    a = (uint*)bp->data;
+    for(j = 0; j < NINDIRECT; j++){
+80101dd6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+80101dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101ddd:	83 f8 7f             	cmp    $0x7f,%eax
+80101de0:	76 bc                	jbe    80101d9e <itrunc+0x95>
+      if(a[j])
+        bfree(ip->dev, a[j]);
+    }
+    brelse(bp);
+80101de2:	83 ec 0c             	sub    $0xc,%esp
+80101de5:	ff 75 ec             	pushl  -0x14(%ebp)
+80101de8:	e8 41 e4 ff ff       	call   8010022e <brelse>
+80101ded:	83 c4 10             	add    $0x10,%esp
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+80101df0:	8b 45 08             	mov    0x8(%ebp),%eax
+80101df3:	8b 40 4c             	mov    0x4c(%eax),%eax
+80101df6:	8b 55 08             	mov    0x8(%ebp),%edx
+80101df9:	8b 12                	mov    (%edx),%edx
+80101dfb:	83 ec 08             	sub    $0x8,%esp
+80101dfe:	50                   	push   %eax
+80101dff:	52                   	push   %edx
+80101e00:	e8 58 f7 ff ff       	call   8010155d <bfree>
+80101e05:	83 c4 10             	add    $0x10,%esp
+    ip->addrs[NDIRECT] = 0;
+80101e08:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e0b:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
+  }
+
+  ip->size = 0;
+80101e12:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e15:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+  iupdate(ip);
+80101e1c:	83 ec 0c             	sub    $0xc,%esp
+80101e1f:	ff 75 08             	pushl  0x8(%ebp)
+80101e22:	e8 10 f9 ff ff       	call   80101737 <iupdate>
+80101e27:	83 c4 10             	add    $0x10,%esp
+}
+80101e2a:	90                   	nop
+80101e2b:	c9                   	leave  
+80101e2c:	c3                   	ret    
+
+80101e2d <stati>:
+
+// Copy stat information from inode.
+void
+stati(struct inode *ip, struct stat *st)
+{
+80101e2d:	55                   	push   %ebp
+80101e2e:	89 e5                	mov    %esp,%ebp
+  st->dev = ip->dev;
+80101e30:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e33:	8b 00                	mov    (%eax),%eax
+80101e35:	89 c2                	mov    %eax,%edx
+80101e37:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101e3a:	89 50 04             	mov    %edx,0x4(%eax)
+  st->ino = ip->inum;
+80101e3d:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e40:	8b 50 04             	mov    0x4(%eax),%edx
+80101e43:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101e46:	89 50 08             	mov    %edx,0x8(%eax)
+  st->type = ip->type;
+80101e49:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e4c:	0f b7 50 10          	movzwl 0x10(%eax),%edx
+80101e50:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101e53:	66 89 10             	mov    %dx,(%eax)
+  st->nlink = ip->nlink;
+80101e56:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e59:	0f b7 50 16          	movzwl 0x16(%eax),%edx
+80101e5d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101e60:	66 89 50 0c          	mov    %dx,0xc(%eax)
+  st->size = ip->size;
+80101e64:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e67:	8b 50 18             	mov    0x18(%eax),%edx
+80101e6a:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101e6d:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80101e70:	90                   	nop
+80101e71:	5d                   	pop    %ebp
+80101e72:	c3                   	ret    
+
+80101e73 <readi>:
+
+//PAGEBREAK!
+// Read data from inode.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+80101e73:	55                   	push   %ebp
+80101e74:	89 e5                	mov    %esp,%ebp
+80101e76:	83 ec 18             	sub    $0x18,%esp
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101e79:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e7c:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80101e80:	66 83 f8 03          	cmp    $0x3,%ax
+80101e84:	75 5c                	jne    80101ee2 <readi+0x6f>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+80101e86:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e89:	0f b7 40 12          	movzwl 0x12(%eax),%eax
+80101e8d:	66 85 c0             	test   %ax,%ax
+80101e90:	78 20                	js     80101eb2 <readi+0x3f>
+80101e92:	8b 45 08             	mov    0x8(%ebp),%eax
+80101e95:	0f b7 40 12          	movzwl 0x12(%eax),%eax
+80101e99:	66 83 f8 09          	cmp    $0x9,%ax
+80101e9d:	7f 13                	jg     80101eb2 <readi+0x3f>
+80101e9f:	8b 45 08             	mov    0x8(%ebp),%eax
+80101ea2:	0f b7 40 12          	movzwl 0x12(%eax),%eax
+80101ea6:	98                   	cwtl   
+80101ea7:	8b 04 c5 e0 11 11 80 	mov    -0x7feeee20(,%eax,8),%eax
+80101eae:	85 c0                	test   %eax,%eax
+80101eb0:	75 0a                	jne    80101ebc <readi+0x49>
+      return -1;
+80101eb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101eb7:	e9 0c 01 00 00       	jmp    80101fc8 <readi+0x155>
+    return devsw[ip->major].read(ip, dst, n);
+80101ebc:	8b 45 08             	mov    0x8(%ebp),%eax
+80101ebf:	0f b7 40 12          	movzwl 0x12(%eax),%eax
+80101ec3:	98                   	cwtl   
+80101ec4:	8b 04 c5 e0 11 11 80 	mov    -0x7feeee20(,%eax,8),%eax
+80101ecb:	8b 55 14             	mov    0x14(%ebp),%edx
+80101ece:	83 ec 04             	sub    $0x4,%esp
+80101ed1:	52                   	push   %edx
+80101ed2:	ff 75 0c             	pushl  0xc(%ebp)
+80101ed5:	ff 75 08             	pushl  0x8(%ebp)
+80101ed8:	ff d0                	call   *%eax
+80101eda:	83 c4 10             	add    $0x10,%esp
+80101edd:	e9 e6 00 00 00       	jmp    80101fc8 <readi+0x155>
+  }
+
+  if(off > ip->size || off + n < off)
+80101ee2:	8b 45 08             	mov    0x8(%ebp),%eax
+80101ee5:	8b 40 18             	mov    0x18(%eax),%eax
+80101ee8:	3b 45 10             	cmp    0x10(%ebp),%eax
+80101eeb:	72 0d                	jb     80101efa <readi+0x87>
+80101eed:	8b 55 10             	mov    0x10(%ebp),%edx
+80101ef0:	8b 45 14             	mov    0x14(%ebp),%eax
+80101ef3:	01 d0                	add    %edx,%eax
+80101ef5:	3b 45 10             	cmp    0x10(%ebp),%eax
+80101ef8:	73 0a                	jae    80101f04 <readi+0x91>
+    return -1;
+80101efa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101eff:	e9 c4 00 00 00       	jmp    80101fc8 <readi+0x155>
+  if(off + n > ip->size)
+80101f04:	8b 55 10             	mov    0x10(%ebp),%edx
+80101f07:	8b 45 14             	mov    0x14(%ebp),%eax
+80101f0a:	01 c2                	add    %eax,%edx
+80101f0c:	8b 45 08             	mov    0x8(%ebp),%eax
+80101f0f:	8b 40 18             	mov    0x18(%eax),%eax
+80101f12:	39 c2                	cmp    %eax,%edx
+80101f14:	76 0c                	jbe    80101f22 <readi+0xaf>
+    n = ip->size - off;
+80101f16:	8b 45 08             	mov    0x8(%ebp),%eax
+80101f19:	8b 40 18             	mov    0x18(%eax),%eax
+80101f1c:	2b 45 10             	sub    0x10(%ebp),%eax
+80101f1f:	89 45 14             	mov    %eax,0x14(%ebp)
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101f22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80101f29:	e9 8b 00 00 00       	jmp    80101fb9 <readi+0x146>
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101f2e:	8b 45 10             	mov    0x10(%ebp),%eax
+80101f31:	c1 e8 09             	shr    $0x9,%eax
+80101f34:	83 ec 08             	sub    $0x8,%esp
+80101f37:	50                   	push   %eax
+80101f38:	ff 75 08             	pushl  0x8(%ebp)
+80101f3b:	e8 aa fc ff ff       	call   80101bea <bmap>
+80101f40:	83 c4 10             	add    $0x10,%esp
+80101f43:	89 c2                	mov    %eax,%edx
+80101f45:	8b 45 08             	mov    0x8(%ebp),%eax
+80101f48:	8b 00                	mov    (%eax),%eax
+80101f4a:	83 ec 08             	sub    $0x8,%esp
+80101f4d:	52                   	push   %edx
+80101f4e:	50                   	push   %eax
+80101f4f:	e8 62 e2 ff ff       	call   801001b6 <bread>
+80101f54:	83 c4 10             	add    $0x10,%esp
+80101f57:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101f5a:	8b 45 10             	mov    0x10(%ebp),%eax
+80101f5d:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101f62:	ba 00 02 00 00       	mov    $0x200,%edx
+80101f67:	29 c2                	sub    %eax,%edx
+80101f69:	8b 45 14             	mov    0x14(%ebp),%eax
+80101f6c:	2b 45 f4             	sub    -0xc(%ebp),%eax
+80101f6f:	39 c2                	cmp    %eax,%edx
+80101f71:	0f 46 c2             	cmovbe %edx,%eax
+80101f74:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    memmove(dst, bp->data + off%BSIZE, m);
+80101f77:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80101f7a:	8d 50 18             	lea    0x18(%eax),%edx
+80101f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+80101f80:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101f85:	01 d0                	add    %edx,%eax
+80101f87:	83 ec 04             	sub    $0x4,%esp
+80101f8a:	ff 75 ec             	pushl  -0x14(%ebp)
+80101f8d:	50                   	push   %eax
+80101f8e:	ff 75 0c             	pushl  0xc(%ebp)
+80101f91:	e8 e2 32 00 00       	call   80105278 <memmove>
+80101f96:	83 c4 10             	add    $0x10,%esp
+    brelse(bp);
+80101f99:	83 ec 0c             	sub    $0xc,%esp
+80101f9c:	ff 75 f0             	pushl  -0x10(%ebp)
+80101f9f:	e8 8a e2 ff ff       	call   8010022e <brelse>
+80101fa4:	83 c4 10             	add    $0x10,%esp
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101fa7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80101faa:	01 45 f4             	add    %eax,-0xc(%ebp)
+80101fad:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80101fb0:	01 45 10             	add    %eax,0x10(%ebp)
+80101fb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80101fb6:	01 45 0c             	add    %eax,0xc(%ebp)
+80101fb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80101fbc:	3b 45 14             	cmp    0x14(%ebp),%eax
+80101fbf:	0f 82 69 ff ff ff    	jb     80101f2e <readi+0xbb>
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(dst, bp->data + off%BSIZE, m);
+    brelse(bp);
+  }
+  return n;
+80101fc5:	8b 45 14             	mov    0x14(%ebp),%eax
+}
+80101fc8:	c9                   	leave  
+80101fc9:	c3                   	ret    
+
+80101fca <writei>:
+
+// PAGEBREAK!
+// Write data to inode.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80101fca:	55                   	push   %ebp
+80101fcb:	89 e5                	mov    %esp,%ebp
+80101fcd:	83 ec 18             	sub    $0x18,%esp
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101fd0:	8b 45 08             	mov    0x8(%ebp),%eax
+80101fd3:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80101fd7:	66 83 f8 03          	cmp    $0x3,%ax
+80101fdb:	75 5c                	jne    80102039 <writei+0x6f>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+80101fdd:	8b 45 08             	mov    0x8(%ebp),%eax
+80101fe0:	0f b7 40 12          	movzwl 0x12(%eax),%eax
+80101fe4:	66 85 c0             	test   %ax,%ax
+80101fe7:	78 20                	js     80102009 <writei+0x3f>
+80101fe9:	8b 45 08             	mov    0x8(%ebp),%eax
+80101fec:	0f b7 40 12          	movzwl 0x12(%eax),%eax
+80101ff0:	66 83 f8 09          	cmp    $0x9,%ax
+80101ff4:	7f 13                	jg     80102009 <writei+0x3f>
+80101ff6:	8b 45 08             	mov    0x8(%ebp),%eax
+80101ff9:	0f b7 40 12          	movzwl 0x12(%eax),%eax
+80101ffd:	98                   	cwtl   
+80101ffe:	8b 04 c5 e4 11 11 80 	mov    -0x7feeee1c(,%eax,8),%eax
+80102005:	85 c0                	test   %eax,%eax
+80102007:	75 0a                	jne    80102013 <writei+0x49>
+      return -1;
+80102009:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010200e:	e9 3d 01 00 00       	jmp    80102150 <writei+0x186>
+    return devsw[ip->major].write(ip, src, n);
+80102013:	8b 45 08             	mov    0x8(%ebp),%eax
+80102016:	0f b7 40 12          	movzwl 0x12(%eax),%eax
+8010201a:	98                   	cwtl   
+8010201b:	8b 04 c5 e4 11 11 80 	mov    -0x7feeee1c(,%eax,8),%eax
+80102022:	8b 55 14             	mov    0x14(%ebp),%edx
+80102025:	83 ec 04             	sub    $0x4,%esp
+80102028:	52                   	push   %edx
+80102029:	ff 75 0c             	pushl  0xc(%ebp)
+8010202c:	ff 75 08             	pushl  0x8(%ebp)
+8010202f:	ff d0                	call   *%eax
+80102031:	83 c4 10             	add    $0x10,%esp
+80102034:	e9 17 01 00 00       	jmp    80102150 <writei+0x186>
+  }
+
+  if(off > ip->size || off + n < off)
+80102039:	8b 45 08             	mov    0x8(%ebp),%eax
+8010203c:	8b 40 18             	mov    0x18(%eax),%eax
+8010203f:	3b 45 10             	cmp    0x10(%ebp),%eax
+80102042:	72 0d                	jb     80102051 <writei+0x87>
+80102044:	8b 55 10             	mov    0x10(%ebp),%edx
+80102047:	8b 45 14             	mov    0x14(%ebp),%eax
+8010204a:	01 d0                	add    %edx,%eax
+8010204c:	3b 45 10             	cmp    0x10(%ebp),%eax
+8010204f:	73 0a                	jae    8010205b <writei+0x91>
+    return -1;
+80102051:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102056:	e9 f5 00 00 00       	jmp    80102150 <writei+0x186>
+  if(off + n > MAXFILE*BSIZE)
+8010205b:	8b 55 10             	mov    0x10(%ebp),%edx
+8010205e:	8b 45 14             	mov    0x14(%ebp),%eax
+80102061:	01 d0                	add    %edx,%eax
+80102063:	3d 00 18 01 00       	cmp    $0x11800,%eax
+80102068:	76 0a                	jbe    80102074 <writei+0xaa>
+    return -1;
+8010206a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010206f:	e9 dc 00 00 00       	jmp    80102150 <writei+0x186>
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80102074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+8010207b:	e9 99 00 00 00       	jmp    80102119 <writei+0x14f>
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80102080:	8b 45 10             	mov    0x10(%ebp),%eax
+80102083:	c1 e8 09             	shr    $0x9,%eax
+80102086:	83 ec 08             	sub    $0x8,%esp
+80102089:	50                   	push   %eax
+8010208a:	ff 75 08             	pushl  0x8(%ebp)
+8010208d:	e8 58 fb ff ff       	call   80101bea <bmap>
+80102092:	83 c4 10             	add    $0x10,%esp
+80102095:	89 c2                	mov    %eax,%edx
+80102097:	8b 45 08             	mov    0x8(%ebp),%eax
+8010209a:	8b 00                	mov    (%eax),%eax
+8010209c:	83 ec 08             	sub    $0x8,%esp
+8010209f:	52                   	push   %edx
+801020a0:	50                   	push   %eax
+801020a1:	e8 10 e1 ff ff       	call   801001b6 <bread>
+801020a6:	83 c4 10             	add    $0x10,%esp
+801020a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+801020ac:	8b 45 10             	mov    0x10(%ebp),%eax
+801020af:	25 ff 01 00 00       	and    $0x1ff,%eax
+801020b4:	ba 00 02 00 00       	mov    $0x200,%edx
+801020b9:	29 c2                	sub    %eax,%edx
+801020bb:	8b 45 14             	mov    0x14(%ebp),%eax
+801020be:	2b 45 f4             	sub    -0xc(%ebp),%eax
+801020c1:	39 c2                	cmp    %eax,%edx
+801020c3:	0f 46 c2             	cmovbe %edx,%eax
+801020c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    memmove(bp->data + off%BSIZE, src, m);
+801020c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801020cc:	8d 50 18             	lea    0x18(%eax),%edx
+801020cf:	8b 45 10             	mov    0x10(%ebp),%eax
+801020d2:	25 ff 01 00 00       	and    $0x1ff,%eax
+801020d7:	01 d0                	add    %edx,%eax
+801020d9:	83 ec 04             	sub    $0x4,%esp
+801020dc:	ff 75 ec             	pushl  -0x14(%ebp)
+801020df:	ff 75 0c             	pushl  0xc(%ebp)
+801020e2:	50                   	push   %eax
+801020e3:	e8 90 31 00 00       	call   80105278 <memmove>
+801020e8:	83 c4 10             	add    $0x10,%esp
+    log_write(bp);
+801020eb:	83 ec 0c             	sub    $0xc,%esp
+801020ee:	ff 75 f0             	pushl  -0x10(%ebp)
+801020f1:	e8 f6 15 00 00       	call   801036ec <log_write>
+801020f6:	83 c4 10             	add    $0x10,%esp
+    brelse(bp);
+801020f9:	83 ec 0c             	sub    $0xc,%esp
+801020fc:	ff 75 f0             	pushl  -0x10(%ebp)
+801020ff:	e8 2a e1 ff ff       	call   8010022e <brelse>
+80102104:	83 c4 10             	add    $0x10,%esp
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80102107:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010210a:	01 45 f4             	add    %eax,-0xc(%ebp)
+8010210d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80102110:	01 45 10             	add    %eax,0x10(%ebp)
+80102113:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80102116:	01 45 0c             	add    %eax,0xc(%ebp)
+80102119:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010211c:	3b 45 14             	cmp    0x14(%ebp),%eax
+8010211f:	0f 82 5b ff ff ff    	jb     80102080 <writei+0xb6>
+    memmove(bp->data + off%BSIZE, src, m);
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(n > 0 && off > ip->size){
+80102125:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+80102129:	74 22                	je     8010214d <writei+0x183>
+8010212b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010212e:	8b 40 18             	mov    0x18(%eax),%eax
+80102131:	3b 45 10             	cmp    0x10(%ebp),%eax
+80102134:	73 17                	jae    8010214d <writei+0x183>
+    ip->size = off;
+80102136:	8b 45 08             	mov    0x8(%ebp),%eax
+80102139:	8b 55 10             	mov    0x10(%ebp),%edx
+8010213c:	89 50 18             	mov    %edx,0x18(%eax)
+    iupdate(ip);
+8010213f:	83 ec 0c             	sub    $0xc,%esp
+80102142:	ff 75 08             	pushl  0x8(%ebp)
+80102145:	e8 ed f5 ff ff       	call   80101737 <iupdate>
+8010214a:	83 c4 10             	add    $0x10,%esp
+  }
+  return n;
+8010214d:	8b 45 14             	mov    0x14(%ebp),%eax
+}
+80102150:	c9                   	leave  
+80102151:	c3                   	ret    
+
+80102152 <namecmp>:
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+80102152:	55                   	push   %ebp
+80102153:	89 e5                	mov    %esp,%ebp
+80102155:	83 ec 08             	sub    $0x8,%esp
+  return strncmp(s, t, DIRSIZ);
+80102158:	83 ec 04             	sub    $0x4,%esp
+8010215b:	6a 0e                	push   $0xe
+8010215d:	ff 75 0c             	pushl  0xc(%ebp)
+80102160:	ff 75 08             	pushl  0x8(%ebp)
+80102163:	e8 a6 31 00 00       	call   8010530e <strncmp>
+80102168:	83 c4 10             	add    $0x10,%esp
+}
+8010216b:	c9                   	leave  
+8010216c:	c3                   	ret    
+
+8010216d <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+8010216d:	55                   	push   %ebp
+8010216e:	89 e5                	mov    %esp,%ebp
+80102170:	83 ec 28             	sub    $0x28,%esp
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+80102173:	8b 45 08             	mov    0x8(%ebp),%eax
+80102176:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+8010217a:	66 83 f8 01          	cmp    $0x1,%ax
+8010217e:	74 0d                	je     8010218d <dirlookup+0x20>
+    panic("dirlookup not DIR");
+80102180:	83 ec 0c             	sub    $0xc,%esp
+80102183:	68 05 86 10 80       	push   $0x80108605
+80102188:	e8 d9 e3 ff ff       	call   80100566 <panic>
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+8010218d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80102194:	eb 7b                	jmp    80102211 <dirlookup+0xa4>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80102196:	6a 10                	push   $0x10
+80102198:	ff 75 f4             	pushl  -0xc(%ebp)
+8010219b:	8d 45 e0             	lea    -0x20(%ebp),%eax
+8010219e:	50                   	push   %eax
+8010219f:	ff 75 08             	pushl  0x8(%ebp)
+801021a2:	e8 cc fc ff ff       	call   80101e73 <readi>
+801021a7:	83 c4 10             	add    $0x10,%esp
+801021aa:	83 f8 10             	cmp    $0x10,%eax
+801021ad:	74 0d                	je     801021bc <dirlookup+0x4f>
+      panic("dirlink read");
+801021af:	83 ec 0c             	sub    $0xc,%esp
+801021b2:	68 17 86 10 80       	push   $0x80108617
+801021b7:	e8 aa e3 ff ff       	call   80100566 <panic>
+    if(de.inum == 0)
+801021bc:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
+801021c0:	66 85 c0             	test   %ax,%ax
+801021c3:	74 47                	je     8010220c <dirlookup+0x9f>
+      continue;
+    if(namecmp(name, de.name) == 0){
+801021c5:	83 ec 08             	sub    $0x8,%esp
+801021c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801021cb:	83 c0 02             	add    $0x2,%eax
+801021ce:	50                   	push   %eax
+801021cf:	ff 75 0c             	pushl  0xc(%ebp)
+801021d2:	e8 7b ff ff ff       	call   80102152 <namecmp>
+801021d7:	83 c4 10             	add    $0x10,%esp
+801021da:	85 c0                	test   %eax,%eax
+801021dc:	75 2f                	jne    8010220d <dirlookup+0xa0>
+      // entry matches path element
+      if(poff)
+801021de:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+801021e2:	74 08                	je     801021ec <dirlookup+0x7f>
+        *poff = off;
+801021e4:	8b 45 10             	mov    0x10(%ebp),%eax
+801021e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801021ea:	89 10                	mov    %edx,(%eax)
+      inum = de.inum;
+801021ec:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
+801021f0:	0f b7 c0             	movzwl %ax,%eax
+801021f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+      return iget(dp->dev, inum);
+801021f6:	8b 45 08             	mov    0x8(%ebp),%eax
+801021f9:	8b 00                	mov    (%eax),%eax
+801021fb:	83 ec 08             	sub    $0x8,%esp
+801021fe:	ff 75 f0             	pushl  -0x10(%ebp)
+80102201:	50                   	push   %eax
+80102202:	e8 eb f5 ff ff       	call   801017f2 <iget>
+80102207:	83 c4 10             	add    $0x10,%esp
+8010220a:	eb 19                	jmp    80102225 <dirlookup+0xb8>
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+    if(de.inum == 0)
+      continue;
+8010220c:	90                   	nop
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+8010220d:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
+80102211:	8b 45 08             	mov    0x8(%ebp),%eax
+80102214:	8b 40 18             	mov    0x18(%eax),%eax
+80102217:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010221a:	0f 87 76 ff ff ff    	ja     80102196 <dirlookup+0x29>
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+80102220:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80102225:	c9                   	leave  
+80102226:	c3                   	ret    
+
+80102227 <dirlink>:
+
+// Write a new directory entry (name, inum) into the directory dp.
+int
+dirlink(struct inode *dp, char *name, uint inum)
+{
+80102227:	55                   	push   %ebp
+80102228:	89 e5                	mov    %esp,%ebp
+8010222a:	83 ec 28             	sub    $0x28,%esp
+  int off;
+  struct dirent de;
+  struct inode *ip;
+
+  // Check that name is not present.
+  if((ip = dirlookup(dp, name, 0)) != 0){
+8010222d:	83 ec 04             	sub    $0x4,%esp
+80102230:	6a 00                	push   $0x0
+80102232:	ff 75 0c             	pushl  0xc(%ebp)
+80102235:	ff 75 08             	pushl  0x8(%ebp)
+80102238:	e8 30 ff ff ff       	call   8010216d <dirlookup>
+8010223d:	83 c4 10             	add    $0x10,%esp
+80102240:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80102243:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80102247:	74 18                	je     80102261 <dirlink+0x3a>
+    iput(ip);
+80102249:	83 ec 0c             	sub    $0xc,%esp
+8010224c:	ff 75 f0             	pushl  -0x10(%ebp)
+8010224f:	e8 81 f8 ff ff       	call   80101ad5 <iput>
+80102254:	83 c4 10             	add    $0x10,%esp
+    return -1;
+80102257:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010225c:	e9 9c 00 00 00       	jmp    801022fd <dirlink+0xd6>
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80102261:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80102268:	eb 39                	jmp    801022a3 <dirlink+0x7c>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+8010226a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010226d:	6a 10                	push   $0x10
+8010226f:	50                   	push   %eax
+80102270:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80102273:	50                   	push   %eax
+80102274:	ff 75 08             	pushl  0x8(%ebp)
+80102277:	e8 f7 fb ff ff       	call   80101e73 <readi>
+8010227c:	83 c4 10             	add    $0x10,%esp
+8010227f:	83 f8 10             	cmp    $0x10,%eax
+80102282:	74 0d                	je     80102291 <dirlink+0x6a>
+      panic("dirlink read");
+80102284:	83 ec 0c             	sub    $0xc,%esp
+80102287:	68 17 86 10 80       	push   $0x80108617
+8010228c:	e8 d5 e2 ff ff       	call   80100566 <panic>
+    if(de.inum == 0)
+80102291:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
+80102295:	66 85 c0             	test   %ax,%ax
+80102298:	74 18                	je     801022b2 <dirlink+0x8b>
+    iput(ip);
+    return -1;
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+8010229a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010229d:	83 c0 10             	add    $0x10,%eax
+801022a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801022a3:	8b 45 08             	mov    0x8(%ebp),%eax
+801022a6:	8b 50 18             	mov    0x18(%eax),%edx
+801022a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801022ac:	39 c2                	cmp    %eax,%edx
+801022ae:	77 ba                	ja     8010226a <dirlink+0x43>
+801022b0:	eb 01                	jmp    801022b3 <dirlink+0x8c>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+    if(de.inum == 0)
+      break;
+801022b2:	90                   	nop
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+801022b3:	83 ec 04             	sub    $0x4,%esp
+801022b6:	6a 0e                	push   $0xe
+801022b8:	ff 75 0c             	pushl  0xc(%ebp)
+801022bb:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801022be:	83 c0 02             	add    $0x2,%eax
+801022c1:	50                   	push   %eax
+801022c2:	e8 9d 30 00 00       	call   80105364 <strncpy>
+801022c7:	83 c4 10             	add    $0x10,%esp
+  de.inum = inum;
+801022ca:	8b 45 10             	mov    0x10(%ebp),%eax
+801022cd:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801022d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801022d4:	6a 10                	push   $0x10
+801022d6:	50                   	push   %eax
+801022d7:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801022da:	50                   	push   %eax
+801022db:	ff 75 08             	pushl  0x8(%ebp)
+801022de:	e8 e7 fc ff ff       	call   80101fca <writei>
+801022e3:	83 c4 10             	add    $0x10,%esp
+801022e6:	83 f8 10             	cmp    $0x10,%eax
+801022e9:	74 0d                	je     801022f8 <dirlink+0xd1>
+    panic("dirlink");
+801022eb:	83 ec 0c             	sub    $0xc,%esp
+801022ee:	68 24 86 10 80       	push   $0x80108624
+801022f3:	e8 6e e2 ff ff       	call   80100566 <panic>
+  
+  return 0;
+801022f8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801022fd:	c9                   	leave  
+801022fe:	c3                   	ret    
+
+801022ff <skipelem>:
+//   skipelem("a", name) = "", setting name = "a"
+//   skipelem("", name) = skipelem("////", name) = 0
+//
+static char*
+skipelem(char *path, char *name)
+{
+801022ff:	55                   	push   %ebp
+80102300:	89 e5                	mov    %esp,%ebp
+80102302:	83 ec 18             	sub    $0x18,%esp
+  char *s;
+  int len;
+
+  while(*path == '/')
+80102305:	eb 04                	jmp    8010230b <skipelem+0xc>
+    path++;
+80102307:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+skipelem(char *path, char *name)
+{
+  char *s;
+  int len;
+
+  while(*path == '/')
+8010230b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010230e:	0f b6 00             	movzbl (%eax),%eax
+80102311:	3c 2f                	cmp    $0x2f,%al
+80102313:	74 f2                	je     80102307 <skipelem+0x8>
+    path++;
+  if(*path == 0)
+80102315:	8b 45 08             	mov    0x8(%ebp),%eax
+80102318:	0f b6 00             	movzbl (%eax),%eax
+8010231b:	84 c0                	test   %al,%al
+8010231d:	75 07                	jne    80102326 <skipelem+0x27>
+    return 0;
+8010231f:	b8 00 00 00 00       	mov    $0x0,%eax
+80102324:	eb 7b                	jmp    801023a1 <skipelem+0xa2>
+  s = path;
+80102326:	8b 45 08             	mov    0x8(%ebp),%eax
+80102329:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  while(*path != '/' && *path != 0)
+8010232c:	eb 04                	jmp    80102332 <skipelem+0x33>
+    path++;
+8010232e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  while(*path == '/')
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+80102332:	8b 45 08             	mov    0x8(%ebp),%eax
+80102335:	0f b6 00             	movzbl (%eax),%eax
+80102338:	3c 2f                	cmp    $0x2f,%al
+8010233a:	74 0a                	je     80102346 <skipelem+0x47>
+8010233c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010233f:	0f b6 00             	movzbl (%eax),%eax
+80102342:	84 c0                	test   %al,%al
+80102344:	75 e8                	jne    8010232e <skipelem+0x2f>
+    path++;
+  len = path - s;
+80102346:	8b 55 08             	mov    0x8(%ebp),%edx
+80102349:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010234c:	29 c2                	sub    %eax,%edx
+8010234e:	89 d0                	mov    %edx,%eax
+80102350:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(len >= DIRSIZ)
+80102353:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
+80102357:	7e 15                	jle    8010236e <skipelem+0x6f>
+    memmove(name, s, DIRSIZ);
+80102359:	83 ec 04             	sub    $0x4,%esp
+8010235c:	6a 0e                	push   $0xe
+8010235e:	ff 75 f4             	pushl  -0xc(%ebp)
+80102361:	ff 75 0c             	pushl  0xc(%ebp)
+80102364:	e8 0f 2f 00 00       	call   80105278 <memmove>
+80102369:	83 c4 10             	add    $0x10,%esp
+8010236c:	eb 26                	jmp    80102394 <skipelem+0x95>
+  else {
+    memmove(name, s, len);
+8010236e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80102371:	83 ec 04             	sub    $0x4,%esp
+80102374:	50                   	push   %eax
+80102375:	ff 75 f4             	pushl  -0xc(%ebp)
+80102378:	ff 75 0c             	pushl  0xc(%ebp)
+8010237b:	e8 f8 2e 00 00       	call   80105278 <memmove>
+80102380:	83 c4 10             	add    $0x10,%esp
+    name[len] = 0;
+80102383:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80102386:	8b 45 0c             	mov    0xc(%ebp),%eax
+80102389:	01 d0                	add    %edx,%eax
+8010238b:	c6 00 00             	movb   $0x0,(%eax)
+  }
+  while(*path == '/')
+8010238e:	eb 04                	jmp    80102394 <skipelem+0x95>
+    path++;
+80102390:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+    name[len] = 0;
+  }
+  while(*path == '/')
+80102394:	8b 45 08             	mov    0x8(%ebp),%eax
+80102397:	0f b6 00             	movzbl (%eax),%eax
+8010239a:	3c 2f                	cmp    $0x2f,%al
+8010239c:	74 f2                	je     80102390 <skipelem+0x91>
+    path++;
+  return path;
+8010239e:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+801023a1:	c9                   	leave  
+801023a2:	c3                   	ret    
+
+801023a3 <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+801023a3:	55                   	push   %ebp
+801023a4:	89 e5                	mov    %esp,%ebp
+801023a6:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+801023a9:	8b 45 08             	mov    0x8(%ebp),%eax
+801023ac:	0f b6 00             	movzbl (%eax),%eax
+801023af:	3c 2f                	cmp    $0x2f,%al
+801023b1:	75 17                	jne    801023ca <namex+0x27>
+    ip = iget(ROOTDEV, ROOTINO);
+801023b3:	83 ec 08             	sub    $0x8,%esp
+801023b6:	6a 01                	push   $0x1
+801023b8:	6a 01                	push   $0x1
+801023ba:	e8 33 f4 ff ff       	call   801017f2 <iget>
+801023bf:	83 c4 10             	add    $0x10,%esp
+801023c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801023c5:	e9 bb 00 00 00       	jmp    80102485 <namex+0xe2>
+  else
+    ip = idup(proc->cwd);
+801023ca:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801023d0:	8b 40 68             	mov    0x68(%eax),%eax
+801023d3:	83 ec 0c             	sub    $0xc,%esp
+801023d6:	50                   	push   %eax
+801023d7:	e8 f5 f4 ff ff       	call   801018d1 <idup>
+801023dc:	83 c4 10             	add    $0x10,%esp
+801023df:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+  while((path = skipelem(path, name)) != 0){
+801023e2:	e9 9e 00 00 00       	jmp    80102485 <namex+0xe2>
+    ilock(ip);
+801023e7:	83 ec 0c             	sub    $0xc,%esp
+801023ea:	ff 75 f4             	pushl  -0xc(%ebp)
+801023ed:	e8 19 f5 ff ff       	call   8010190b <ilock>
+801023f2:	83 c4 10             	add    $0x10,%esp
+    if(ip->type != T_DIR){
+801023f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801023f8:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+801023fc:	66 83 f8 01          	cmp    $0x1,%ax
+80102400:	74 18                	je     8010241a <namex+0x77>
+      iunlockput(ip);
+80102402:	83 ec 0c             	sub    $0xc,%esp
+80102405:	ff 75 f4             	pushl  -0xc(%ebp)
+80102408:	e8 b8 f7 ff ff       	call   80101bc5 <iunlockput>
+8010240d:	83 c4 10             	add    $0x10,%esp
+      return 0;
+80102410:	b8 00 00 00 00       	mov    $0x0,%eax
+80102415:	e9 a7 00 00 00       	jmp    801024c1 <namex+0x11e>
+    }
+    if(nameiparent && *path == '\0'){
+8010241a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+8010241e:	74 20                	je     80102440 <namex+0x9d>
+80102420:	8b 45 08             	mov    0x8(%ebp),%eax
+80102423:	0f b6 00             	movzbl (%eax),%eax
+80102426:	84 c0                	test   %al,%al
+80102428:	75 16                	jne    80102440 <namex+0x9d>
+      // Stop one level early.
+      iunlock(ip);
+8010242a:	83 ec 0c             	sub    $0xc,%esp
+8010242d:	ff 75 f4             	pushl  -0xc(%ebp)
+80102430:	e8 2e f6 ff ff       	call   80101a63 <iunlock>
+80102435:	83 c4 10             	add    $0x10,%esp
+      return ip;
+80102438:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010243b:	e9 81 00 00 00       	jmp    801024c1 <namex+0x11e>
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+80102440:	83 ec 04             	sub    $0x4,%esp
+80102443:	6a 00                	push   $0x0
+80102445:	ff 75 10             	pushl  0x10(%ebp)
+80102448:	ff 75 f4             	pushl  -0xc(%ebp)
+8010244b:	e8 1d fd ff ff       	call   8010216d <dirlookup>
+80102450:	83 c4 10             	add    $0x10,%esp
+80102453:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80102456:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+8010245a:	75 15                	jne    80102471 <namex+0xce>
+      iunlockput(ip);
+8010245c:	83 ec 0c             	sub    $0xc,%esp
+8010245f:	ff 75 f4             	pushl  -0xc(%ebp)
+80102462:	e8 5e f7 ff ff       	call   80101bc5 <iunlockput>
+80102467:	83 c4 10             	add    $0x10,%esp
+      return 0;
+8010246a:	b8 00 00 00 00       	mov    $0x0,%eax
+8010246f:	eb 50                	jmp    801024c1 <namex+0x11e>
+    }
+    iunlockput(ip);
+80102471:	83 ec 0c             	sub    $0xc,%esp
+80102474:	ff 75 f4             	pushl  -0xc(%ebp)
+80102477:	e8 49 f7 ff ff       	call   80101bc5 <iunlockput>
+8010247c:	83 c4 10             	add    $0x10,%esp
+    ip = next;
+8010247f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80102482:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(*path == '/')
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(proc->cwd);
+
+  while((path = skipelem(path, name)) != 0){
+80102485:	83 ec 08             	sub    $0x8,%esp
+80102488:	ff 75 10             	pushl  0x10(%ebp)
+8010248b:	ff 75 08             	pushl  0x8(%ebp)
+8010248e:	e8 6c fe ff ff       	call   801022ff <skipelem>
+80102493:	83 c4 10             	add    $0x10,%esp
+80102496:	89 45 08             	mov    %eax,0x8(%ebp)
+80102499:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+8010249d:	0f 85 44 ff ff ff    	jne    801023e7 <namex+0x44>
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+801024a3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+801024a7:	74 15                	je     801024be <namex+0x11b>
+    iput(ip);
+801024a9:	83 ec 0c             	sub    $0xc,%esp
+801024ac:	ff 75 f4             	pushl  -0xc(%ebp)
+801024af:	e8 21 f6 ff ff       	call   80101ad5 <iput>
+801024b4:	83 c4 10             	add    $0x10,%esp
+    return 0;
+801024b7:	b8 00 00 00 00       	mov    $0x0,%eax
+801024bc:	eb 03                	jmp    801024c1 <namex+0x11e>
+  }
+  return ip;
+801024be:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+801024c1:	c9                   	leave  
+801024c2:	c3                   	ret    
+
+801024c3 <namei>:
+
+struct inode*
+namei(char *path)
+{
+801024c3:	55                   	push   %ebp
+801024c4:	89 e5                	mov    %esp,%ebp
+801024c6:	83 ec 18             	sub    $0x18,%esp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+801024c9:	83 ec 04             	sub    $0x4,%esp
+801024cc:	8d 45 ea             	lea    -0x16(%ebp),%eax
+801024cf:	50                   	push   %eax
+801024d0:	6a 00                	push   $0x0
+801024d2:	ff 75 08             	pushl  0x8(%ebp)
+801024d5:	e8 c9 fe ff ff       	call   801023a3 <namex>
+801024da:	83 c4 10             	add    $0x10,%esp
+}
+801024dd:	c9                   	leave  
+801024de:	c3                   	ret    
+
+801024df <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+801024df:	55                   	push   %ebp
+801024e0:	89 e5                	mov    %esp,%ebp
+801024e2:	83 ec 08             	sub    $0x8,%esp
+  return namex(path, 1, name);
+801024e5:	83 ec 04             	sub    $0x4,%esp
+801024e8:	ff 75 0c             	pushl  0xc(%ebp)
+801024eb:	6a 01                	push   $0x1
+801024ed:	ff 75 08             	pushl  0x8(%ebp)
+801024f0:	e8 ae fe ff ff       	call   801023a3 <namex>
+801024f5:	83 c4 10             	add    $0x10,%esp
+}
+801024f8:	c9                   	leave  
+801024f9:	c3                   	ret    
+
+801024fa <inb>:
+// Routines to let C code use special x86 instructions.
+
+static inline uchar
+inb(ushort port)
+{
+801024fa:	55                   	push   %ebp
+801024fb:	89 e5                	mov    %esp,%ebp
+801024fd:	83 ec 14             	sub    $0x14,%esp
+80102500:	8b 45 08             	mov    0x8(%ebp),%eax
+80102503:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102507:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+8010250b:	89 c2                	mov    %eax,%edx
+8010250d:	ec                   	in     (%dx),%al
+8010250e:	88 45 ff             	mov    %al,-0x1(%ebp)
+  return data;
+80102511:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
+}
+80102515:	c9                   	leave  
+80102516:	c3                   	ret    
+
+80102517 <insl>:
+
+static inline void
+insl(int port, void *addr, int cnt)
+{
+80102517:	55                   	push   %ebp
+80102518:	89 e5                	mov    %esp,%ebp
+8010251a:	57                   	push   %edi
+8010251b:	53                   	push   %ebx
+  asm volatile("cld; rep insl" :
+8010251c:	8b 55 08             	mov    0x8(%ebp),%edx
+8010251f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102522:	8b 45 10             	mov    0x10(%ebp),%eax
+80102525:	89 cb                	mov    %ecx,%ebx
+80102527:	89 df                	mov    %ebx,%edi
+80102529:	89 c1                	mov    %eax,%ecx
+8010252b:	fc                   	cld    
+8010252c:	f3 6d                	rep insl (%dx),%es:(%edi)
+8010252e:	89 c8                	mov    %ecx,%eax
+80102530:	89 fb                	mov    %edi,%ebx
+80102532:	89 5d 0c             	mov    %ebx,0xc(%ebp)
+80102535:	89 45 10             	mov    %eax,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "d" (port), "0" (addr), "1" (cnt) :
+               "memory", "cc");
+}
+80102538:	90                   	nop
+80102539:	5b                   	pop    %ebx
+8010253a:	5f                   	pop    %edi
+8010253b:	5d                   	pop    %ebp
+8010253c:	c3                   	ret    
+
+8010253d <outb>:
+
+static inline void
+outb(ushort port, uchar data)
+{
+8010253d:	55                   	push   %ebp
+8010253e:	89 e5                	mov    %esp,%ebp
+80102540:	83 ec 08             	sub    $0x8,%esp
+80102543:	8b 55 08             	mov    0x8(%ebp),%edx
+80102546:	8b 45 0c             	mov    0xc(%ebp),%eax
+80102549:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
+8010254d:	88 45 f8             	mov    %al,-0x8(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102550:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
+80102554:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+80102558:	ee                   	out    %al,(%dx)
+}
+80102559:	90                   	nop
+8010255a:	c9                   	leave  
+8010255b:	c3                   	ret    
+
+8010255c <outsl>:
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+}
+
+static inline void
+outsl(int port, const void *addr, int cnt)
+{
+8010255c:	55                   	push   %ebp
+8010255d:	89 e5                	mov    %esp,%ebp
+8010255f:	56                   	push   %esi
+80102560:	53                   	push   %ebx
+  asm volatile("cld; rep outsl" :
+80102561:	8b 55 08             	mov    0x8(%ebp),%edx
+80102564:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102567:	8b 45 10             	mov    0x10(%ebp),%eax
+8010256a:	89 cb                	mov    %ecx,%ebx
+8010256c:	89 de                	mov    %ebx,%esi
+8010256e:	89 c1                	mov    %eax,%ecx
+80102570:	fc                   	cld    
+80102571:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+80102573:	89 c8                	mov    %ecx,%eax
+80102575:	89 f3                	mov    %esi,%ebx
+80102577:	89 5d 0c             	mov    %ebx,0xc(%ebp)
+8010257a:	89 45 10             	mov    %eax,0x10(%ebp)
+               "=S" (addr), "=c" (cnt) :
+               "d" (port), "0" (addr), "1" (cnt) :
+               "cc");
+}
+8010257d:	90                   	nop
+8010257e:	5b                   	pop    %ebx
+8010257f:	5e                   	pop    %esi
+80102580:	5d                   	pop    %ebp
+80102581:	c3                   	ret    
+
+80102582 <idewait>:
+static void idestart(struct buf*);
+
+// Wait for IDE disk to become ready.
+static int
+idewait(int checkerr)
+{
+80102582:	55                   	push   %ebp
+80102583:	89 e5                	mov    %esp,%ebp
+80102585:	83 ec 10             	sub    $0x10,%esp
+  int r;
+
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY) 
+80102588:	90                   	nop
+80102589:	68 f7 01 00 00       	push   $0x1f7
+8010258e:	e8 67 ff ff ff       	call   801024fa <inb>
+80102593:	83 c4 04             	add    $0x4,%esp
+80102596:	0f b6 c0             	movzbl %al,%eax
+80102599:	89 45 fc             	mov    %eax,-0x4(%ebp)
+8010259c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+8010259f:	25 c0 00 00 00       	and    $0xc0,%eax
+801025a4:	83 f8 40             	cmp    $0x40,%eax
+801025a7:	75 e0                	jne    80102589 <idewait+0x7>
+    ;
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+801025a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+801025ad:	74 11                	je     801025c0 <idewait+0x3e>
+801025af:	8b 45 fc             	mov    -0x4(%ebp),%eax
+801025b2:	83 e0 21             	and    $0x21,%eax
+801025b5:	85 c0                	test   %eax,%eax
+801025b7:	74 07                	je     801025c0 <idewait+0x3e>
+    return -1;
+801025b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801025be:	eb 05                	jmp    801025c5 <idewait+0x43>
+  return 0;
+801025c0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801025c5:	c9                   	leave  
+801025c6:	c3                   	ret    
+
+801025c7 <ideinit>:
+
+void
+ideinit(void)
+{
+801025c7:	55                   	push   %ebp
+801025c8:	89 e5                	mov    %esp,%ebp
+801025ca:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  initlock(&idelock, "ide");
+801025cd:	83 ec 08             	sub    $0x8,%esp
+801025d0:	68 2c 86 10 80       	push   $0x8010862c
+801025d5:	68 00 b6 10 80       	push   $0x8010b600
+801025da:	e8 55 29 00 00       	call   80104f34 <initlock>
+801025df:	83 c4 10             	add    $0x10,%esp
+  picenable(IRQ_IDE);
+801025e2:	83 ec 0c             	sub    $0xc,%esp
+801025e5:	6a 0e                	push   $0xe
+801025e7:	e8 ab 18 00 00       	call   80103e97 <picenable>
+801025ec:	83 c4 10             	add    $0x10,%esp
+  ioapicenable(IRQ_IDE, ncpu - 1);
+801025ef:	a1 40 29 11 80       	mov    0x80112940,%eax
+801025f4:	83 e8 01             	sub    $0x1,%eax
+801025f7:	83 ec 08             	sub    $0x8,%esp
+801025fa:	50                   	push   %eax
+801025fb:	6a 0e                	push   $0xe
+801025fd:	e8 37 04 00 00       	call   80102a39 <ioapicenable>
+80102602:	83 c4 10             	add    $0x10,%esp
+  idewait(0);
+80102605:	83 ec 0c             	sub    $0xc,%esp
+80102608:	6a 00                	push   $0x0
+8010260a:	e8 73 ff ff ff       	call   80102582 <idewait>
+8010260f:	83 c4 10             	add    $0x10,%esp
+  
+  // Check if disk 1 is present
+  outb(0x1f6, 0xe0 | (1<<4));
+80102612:	83 ec 08             	sub    $0x8,%esp
+80102615:	68 f0 00 00 00       	push   $0xf0
+8010261a:	68 f6 01 00 00       	push   $0x1f6
+8010261f:	e8 19 ff ff ff       	call   8010253d <outb>
+80102624:	83 c4 10             	add    $0x10,%esp
+  for(i=0; i<1000; i++){
+80102627:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+8010262e:	eb 24                	jmp    80102654 <ideinit+0x8d>
+    if(inb(0x1f7) != 0){
+80102630:	83 ec 0c             	sub    $0xc,%esp
+80102633:	68 f7 01 00 00       	push   $0x1f7
+80102638:	e8 bd fe ff ff       	call   801024fa <inb>
+8010263d:	83 c4 10             	add    $0x10,%esp
+80102640:	84 c0                	test   %al,%al
+80102642:	74 0c                	je     80102650 <ideinit+0x89>
+      havedisk1 = 1;
+80102644:	c7 05 38 b6 10 80 01 	movl   $0x1,0x8010b638
+8010264b:	00 00 00 
+      break;
+8010264e:	eb 0d                	jmp    8010265d <ideinit+0x96>
+  ioapicenable(IRQ_IDE, ncpu - 1);
+  idewait(0);
+  
+  // Check if disk 1 is present
+  outb(0x1f6, 0xe0 | (1<<4));
+  for(i=0; i<1000; i++){
+80102650:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80102654:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
+8010265b:	7e d3                	jle    80102630 <ideinit+0x69>
+      break;
+    }
+  }
+  
+  // Switch back to disk 0.
+  outb(0x1f6, 0xe0 | (0<<4));
+8010265d:	83 ec 08             	sub    $0x8,%esp
+80102660:	68 e0 00 00 00       	push   $0xe0
+80102665:	68 f6 01 00 00       	push   $0x1f6
+8010266a:	e8 ce fe ff ff       	call   8010253d <outb>
+8010266f:	83 c4 10             	add    $0x10,%esp
+}
+80102672:	90                   	nop
+80102673:	c9                   	leave  
+80102674:	c3                   	ret    
+
+80102675 <idestart>:
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+80102675:	55                   	push   %ebp
+80102676:	89 e5                	mov    %esp,%ebp
+80102678:	83 ec 08             	sub    $0x8,%esp
+  if(b == 0)
+8010267b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+8010267f:	75 0d                	jne    8010268e <idestart+0x19>
+    panic("idestart");
+80102681:	83 ec 0c             	sub    $0xc,%esp
+80102684:	68 30 86 10 80       	push   $0x80108630
+80102689:	e8 d8 de ff ff       	call   80100566 <panic>
+
+  idewait(0);
+8010268e:	83 ec 0c             	sub    $0xc,%esp
+80102691:	6a 00                	push   $0x0
+80102693:	e8 ea fe ff ff       	call   80102582 <idewait>
+80102698:	83 c4 10             	add    $0x10,%esp
+  outb(0x3f6, 0);  // generate interrupt
+8010269b:	83 ec 08             	sub    $0x8,%esp
+8010269e:	6a 00                	push   $0x0
+801026a0:	68 f6 03 00 00       	push   $0x3f6
+801026a5:	e8 93 fe ff ff       	call   8010253d <outb>
+801026aa:	83 c4 10             	add    $0x10,%esp
+  outb(0x1f2, 1);  // number of sectors
+801026ad:	83 ec 08             	sub    $0x8,%esp
+801026b0:	6a 01                	push   $0x1
+801026b2:	68 f2 01 00 00       	push   $0x1f2
+801026b7:	e8 81 fe ff ff       	call   8010253d <outb>
+801026bc:	83 c4 10             	add    $0x10,%esp
+  outb(0x1f3, b->sector & 0xff);
+801026bf:	8b 45 08             	mov    0x8(%ebp),%eax
+801026c2:	8b 40 08             	mov    0x8(%eax),%eax
+801026c5:	0f b6 c0             	movzbl %al,%eax
+801026c8:	83 ec 08             	sub    $0x8,%esp
+801026cb:	50                   	push   %eax
+801026cc:	68 f3 01 00 00       	push   $0x1f3
+801026d1:	e8 67 fe ff ff       	call   8010253d <outb>
+801026d6:	83 c4 10             	add    $0x10,%esp
+  outb(0x1f4, (b->sector >> 8) & 0xff);
+801026d9:	8b 45 08             	mov    0x8(%ebp),%eax
+801026dc:	8b 40 08             	mov    0x8(%eax),%eax
+801026df:	c1 e8 08             	shr    $0x8,%eax
+801026e2:	0f b6 c0             	movzbl %al,%eax
+801026e5:	83 ec 08             	sub    $0x8,%esp
+801026e8:	50                   	push   %eax
+801026e9:	68 f4 01 00 00       	push   $0x1f4
+801026ee:	e8 4a fe ff ff       	call   8010253d <outb>
+801026f3:	83 c4 10             	add    $0x10,%esp
+  outb(0x1f5, (b->sector >> 16) & 0xff);
+801026f6:	8b 45 08             	mov    0x8(%ebp),%eax
+801026f9:	8b 40 08             	mov    0x8(%eax),%eax
+801026fc:	c1 e8 10             	shr    $0x10,%eax
+801026ff:	0f b6 c0             	movzbl %al,%eax
+80102702:	83 ec 08             	sub    $0x8,%esp
+80102705:	50                   	push   %eax
+80102706:	68 f5 01 00 00       	push   $0x1f5
+8010270b:	e8 2d fe ff ff       	call   8010253d <outb>
+80102710:	83 c4 10             	add    $0x10,%esp
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
+80102713:	8b 45 08             	mov    0x8(%ebp),%eax
+80102716:	8b 40 04             	mov    0x4(%eax),%eax
+80102719:	83 e0 01             	and    $0x1,%eax
+8010271c:	c1 e0 04             	shl    $0x4,%eax
+8010271f:	89 c2                	mov    %eax,%edx
+80102721:	8b 45 08             	mov    0x8(%ebp),%eax
+80102724:	8b 40 08             	mov    0x8(%eax),%eax
+80102727:	c1 e8 18             	shr    $0x18,%eax
+8010272a:	83 e0 0f             	and    $0xf,%eax
+8010272d:	09 d0                	or     %edx,%eax
+8010272f:	83 c8 e0             	or     $0xffffffe0,%eax
+80102732:	0f b6 c0             	movzbl %al,%eax
+80102735:	83 ec 08             	sub    $0x8,%esp
+80102738:	50                   	push   %eax
+80102739:	68 f6 01 00 00       	push   $0x1f6
+8010273e:	e8 fa fd ff ff       	call   8010253d <outb>
+80102743:	83 c4 10             	add    $0x10,%esp
+  if(b->flags & B_DIRTY){
+80102746:	8b 45 08             	mov    0x8(%ebp),%eax
+80102749:	8b 00                	mov    (%eax),%eax
+8010274b:	83 e0 04             	and    $0x4,%eax
+8010274e:	85 c0                	test   %eax,%eax
+80102750:	74 30                	je     80102782 <idestart+0x10d>
+    outb(0x1f7, IDE_CMD_WRITE);
+80102752:	83 ec 08             	sub    $0x8,%esp
+80102755:	6a 30                	push   $0x30
+80102757:	68 f7 01 00 00       	push   $0x1f7
+8010275c:	e8 dc fd ff ff       	call   8010253d <outb>
+80102761:	83 c4 10             	add    $0x10,%esp
+    outsl(0x1f0, b->data, 512/4);
+80102764:	8b 45 08             	mov    0x8(%ebp),%eax
+80102767:	83 c0 18             	add    $0x18,%eax
+8010276a:	83 ec 04             	sub    $0x4,%esp
+8010276d:	68 80 00 00 00       	push   $0x80
+80102772:	50                   	push   %eax
+80102773:	68 f0 01 00 00       	push   $0x1f0
+80102778:	e8 df fd ff ff       	call   8010255c <outsl>
+8010277d:	83 c4 10             	add    $0x10,%esp
+  } else {
+    outb(0x1f7, IDE_CMD_READ);
+  }
+}
+80102780:	eb 12                	jmp    80102794 <idestart+0x11f>
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
+  if(b->flags & B_DIRTY){
+    outb(0x1f7, IDE_CMD_WRITE);
+    outsl(0x1f0, b->data, 512/4);
+  } else {
+    outb(0x1f7, IDE_CMD_READ);
+80102782:	83 ec 08             	sub    $0x8,%esp
+80102785:	6a 20                	push   $0x20
+80102787:	68 f7 01 00 00       	push   $0x1f7
+8010278c:	e8 ac fd ff ff       	call   8010253d <outb>
+80102791:	83 c4 10             	add    $0x10,%esp
+  }
+}
+80102794:	90                   	nop
+80102795:	c9                   	leave  
+80102796:	c3                   	ret    
+
+80102797 <ideintr>:
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+80102797:	55                   	push   %ebp
+80102798:	89 e5                	mov    %esp,%ebp
+8010279a:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+8010279d:	83 ec 0c             	sub    $0xc,%esp
+801027a0:	68 00 b6 10 80       	push   $0x8010b600
+801027a5:	e8 ac 27 00 00       	call   80104f56 <acquire>
+801027aa:	83 c4 10             	add    $0x10,%esp
+  if((b = idequeue) == 0){
+801027ad:	a1 34 b6 10 80       	mov    0x8010b634,%eax
+801027b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801027b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801027b9:	75 15                	jne    801027d0 <ideintr+0x39>
+    release(&idelock);
+801027bb:	83 ec 0c             	sub    $0xc,%esp
+801027be:	68 00 b6 10 80       	push   $0x8010b600
+801027c3:	e8 f5 27 00 00       	call   80104fbd <release>
+801027c8:	83 c4 10             	add    $0x10,%esp
+    // cprintf("spurious IDE interrupt\n");
+    return;
+801027cb:	e9 9a 00 00 00       	jmp    8010286a <ideintr+0xd3>
+  }
+  idequeue = b->qnext;
+801027d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801027d3:	8b 40 14             	mov    0x14(%eax),%eax
+801027d6:	a3 34 b6 10 80       	mov    %eax,0x8010b634
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+801027db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801027de:	8b 00                	mov    (%eax),%eax
+801027e0:	83 e0 04             	and    $0x4,%eax
+801027e3:	85 c0                	test   %eax,%eax
+801027e5:	75 2d                	jne    80102814 <ideintr+0x7d>
+801027e7:	83 ec 0c             	sub    $0xc,%esp
+801027ea:	6a 01                	push   $0x1
+801027ec:	e8 91 fd ff ff       	call   80102582 <idewait>
+801027f1:	83 c4 10             	add    $0x10,%esp
+801027f4:	85 c0                	test   %eax,%eax
+801027f6:	78 1c                	js     80102814 <ideintr+0x7d>
+    insl(0x1f0, b->data, 512/4);
+801027f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801027fb:	83 c0 18             	add    $0x18,%eax
+801027fe:	83 ec 04             	sub    $0x4,%esp
+80102801:	68 80 00 00 00       	push   $0x80
+80102806:	50                   	push   %eax
+80102807:	68 f0 01 00 00       	push   $0x1f0
+8010280c:	e8 06 fd ff ff       	call   80102517 <insl>
+80102811:	83 c4 10             	add    $0x10,%esp
+  
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+80102814:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102817:	8b 00                	mov    (%eax),%eax
+80102819:	83 c8 02             	or     $0x2,%eax
+8010281c:	89 c2                	mov    %eax,%edx
+8010281e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102821:	89 10                	mov    %edx,(%eax)
+  b->flags &= ~B_DIRTY;
+80102823:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102826:	8b 00                	mov    (%eax),%eax
+80102828:	83 e0 fb             	and    $0xfffffffb,%eax
+8010282b:	89 c2                	mov    %eax,%edx
+8010282d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102830:	89 10                	mov    %edx,(%eax)
+  wakeup(b);
+80102832:	83 ec 0c             	sub    $0xc,%esp
+80102835:	ff 75 f4             	pushl  -0xc(%ebp)
+80102838:	e8 0b 25 00 00       	call   80104d48 <wakeup>
+8010283d:	83 c4 10             	add    $0x10,%esp
+  
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+80102840:	a1 34 b6 10 80       	mov    0x8010b634,%eax
+80102845:	85 c0                	test   %eax,%eax
+80102847:	74 11                	je     8010285a <ideintr+0xc3>
+    idestart(idequeue);
+80102849:	a1 34 b6 10 80       	mov    0x8010b634,%eax
+8010284e:	83 ec 0c             	sub    $0xc,%esp
+80102851:	50                   	push   %eax
+80102852:	e8 1e fe ff ff       	call   80102675 <idestart>
+80102857:	83 c4 10             	add    $0x10,%esp
+
+  release(&idelock);
+8010285a:	83 ec 0c             	sub    $0xc,%esp
+8010285d:	68 00 b6 10 80       	push   $0x8010b600
+80102862:	e8 56 27 00 00       	call   80104fbd <release>
+80102867:	83 c4 10             	add    $0x10,%esp
+}
+8010286a:	c9                   	leave  
+8010286b:	c3                   	ret    
+
+8010286c <iderw>:
+// Sync buf with disk. 
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+8010286c:	55                   	push   %ebp
+8010286d:	89 e5                	mov    %esp,%ebp
+8010286f:	83 ec 18             	sub    $0x18,%esp
+  struct buf **pp;
+
+  if(!(b->flags & B_BUSY))
+80102872:	8b 45 08             	mov    0x8(%ebp),%eax
+80102875:	8b 00                	mov    (%eax),%eax
+80102877:	83 e0 01             	and    $0x1,%eax
+8010287a:	85 c0                	test   %eax,%eax
+8010287c:	75 0d                	jne    8010288b <iderw+0x1f>
+    panic("iderw: buf not busy");
+8010287e:	83 ec 0c             	sub    $0xc,%esp
+80102881:	68 39 86 10 80       	push   $0x80108639
+80102886:	e8 db dc ff ff       	call   80100566 <panic>
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+8010288b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010288e:	8b 00                	mov    (%eax),%eax
+80102890:	83 e0 06             	and    $0x6,%eax
+80102893:	83 f8 02             	cmp    $0x2,%eax
+80102896:	75 0d                	jne    801028a5 <iderw+0x39>
+    panic("iderw: nothing to do");
+80102898:	83 ec 0c             	sub    $0xc,%esp
+8010289b:	68 4d 86 10 80       	push   $0x8010864d
+801028a0:	e8 c1 dc ff ff       	call   80100566 <panic>
+  if(b->dev != 0 && !havedisk1)
+801028a5:	8b 45 08             	mov    0x8(%ebp),%eax
+801028a8:	8b 40 04             	mov    0x4(%eax),%eax
+801028ab:	85 c0                	test   %eax,%eax
+801028ad:	74 16                	je     801028c5 <iderw+0x59>
+801028af:	a1 38 b6 10 80       	mov    0x8010b638,%eax
+801028b4:	85 c0                	test   %eax,%eax
+801028b6:	75 0d                	jne    801028c5 <iderw+0x59>
+    panic("iderw: ide disk 1 not present");
+801028b8:	83 ec 0c             	sub    $0xc,%esp
+801028bb:	68 62 86 10 80       	push   $0x80108662
+801028c0:	e8 a1 dc ff ff       	call   80100566 <panic>
+
+  acquire(&idelock);  //DOC:acquire-lock
+801028c5:	83 ec 0c             	sub    $0xc,%esp
+801028c8:	68 00 b6 10 80       	push   $0x8010b600
+801028cd:	e8 84 26 00 00       	call   80104f56 <acquire>
+801028d2:	83 c4 10             	add    $0x10,%esp
+
+  // Append b to idequeue.
+  b->qnext = 0;
+801028d5:	8b 45 08             	mov    0x8(%ebp),%eax
+801028d8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+801028df:	c7 45 f4 34 b6 10 80 	movl   $0x8010b634,-0xc(%ebp)
+801028e6:	eb 0b                	jmp    801028f3 <iderw+0x87>
+801028e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801028eb:	8b 00                	mov    (%eax),%eax
+801028ed:	83 c0 14             	add    $0x14,%eax
+801028f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801028f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801028f6:	8b 00                	mov    (%eax),%eax
+801028f8:	85 c0                	test   %eax,%eax
+801028fa:	75 ec                	jne    801028e8 <iderw+0x7c>
+    ;
+  *pp = b;
+801028fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801028ff:	8b 55 08             	mov    0x8(%ebp),%edx
+80102902:	89 10                	mov    %edx,(%eax)
+  
+  // Start disk if necessary.
+  if(idequeue == b)
+80102904:	a1 34 b6 10 80       	mov    0x8010b634,%eax
+80102909:	3b 45 08             	cmp    0x8(%ebp),%eax
+8010290c:	75 23                	jne    80102931 <iderw+0xc5>
+    idestart(b);
+8010290e:	83 ec 0c             	sub    $0xc,%esp
+80102911:	ff 75 08             	pushl  0x8(%ebp)
+80102914:	e8 5c fd ff ff       	call   80102675 <idestart>
+80102919:	83 c4 10             	add    $0x10,%esp
+  
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+8010291c:	eb 13                	jmp    80102931 <iderw+0xc5>
+    sleep(b, &idelock);
+8010291e:	83 ec 08             	sub    $0x8,%esp
+80102921:	68 00 b6 10 80       	push   $0x8010b600
+80102926:	ff 75 08             	pushl  0x8(%ebp)
+80102929:	e8 2f 23 00 00       	call   80104c5d <sleep>
+8010292e:	83 c4 10             	add    $0x10,%esp
+  // Start disk if necessary.
+  if(idequeue == b)
+    idestart(b);
+  
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+80102931:	8b 45 08             	mov    0x8(%ebp),%eax
+80102934:	8b 00                	mov    (%eax),%eax
+80102936:	83 e0 06             	and    $0x6,%eax
+80102939:	83 f8 02             	cmp    $0x2,%eax
+8010293c:	75 e0                	jne    8010291e <iderw+0xb2>
+    sleep(b, &idelock);
+  }
+
+  release(&idelock);
+8010293e:	83 ec 0c             	sub    $0xc,%esp
+80102941:	68 00 b6 10 80       	push   $0x8010b600
+80102946:	e8 72 26 00 00       	call   80104fbd <release>
+8010294b:	83 c4 10             	add    $0x10,%esp
+}
+8010294e:	90                   	nop
+8010294f:	c9                   	leave  
+80102950:	c3                   	ret    
+
+80102951 <ioapicread>:
+  uint data;
+};
+
+static uint
+ioapicread(int reg)
+{
+80102951:	55                   	push   %ebp
+80102952:	89 e5                	mov    %esp,%ebp
+  ioapic->reg = reg;
+80102954:	a1 14 22 11 80       	mov    0x80112214,%eax
+80102959:	8b 55 08             	mov    0x8(%ebp),%edx
+8010295c:	89 10                	mov    %edx,(%eax)
+  return ioapic->data;
+8010295e:	a1 14 22 11 80       	mov    0x80112214,%eax
+80102963:	8b 40 10             	mov    0x10(%eax),%eax
+}
+80102966:	5d                   	pop    %ebp
+80102967:	c3                   	ret    
+
+80102968 <ioapicwrite>:
+
+static void
+ioapicwrite(int reg, uint data)
+{
+80102968:	55                   	push   %ebp
+80102969:	89 e5                	mov    %esp,%ebp
+  ioapic->reg = reg;
+8010296b:	a1 14 22 11 80       	mov    0x80112214,%eax
+80102970:	8b 55 08             	mov    0x8(%ebp),%edx
+80102973:	89 10                	mov    %edx,(%eax)
+  ioapic->data = data;
+80102975:	a1 14 22 11 80       	mov    0x80112214,%eax
+8010297a:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010297d:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80102980:	90                   	nop
+80102981:	5d                   	pop    %ebp
+80102982:	c3                   	ret    
+
+80102983 <ioapicinit>:
+
+void
+ioapicinit(void)
+{
+80102983:	55                   	push   %ebp
+80102984:	89 e5                	mov    %esp,%ebp
+80102986:	83 ec 18             	sub    $0x18,%esp
+  int i, id, maxintr;
+
+  if(!ismp)
+80102989:	a1 44 23 11 80       	mov    0x80112344,%eax
+8010298e:	85 c0                	test   %eax,%eax
+80102990:	0f 84 a0 00 00 00    	je     80102a36 <ioapicinit+0xb3>
+    return;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+80102996:	c7 05 14 22 11 80 00 	movl   $0xfec00000,0x80112214
+8010299d:	00 c0 fe 
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+801029a0:	6a 01                	push   $0x1
+801029a2:	e8 aa ff ff ff       	call   80102951 <ioapicread>
+801029a7:	83 c4 04             	add    $0x4,%esp
+801029aa:	c1 e8 10             	shr    $0x10,%eax
+801029ad:	25 ff 00 00 00       	and    $0xff,%eax
+801029b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  id = ioapicread(REG_ID) >> 24;
+801029b5:	6a 00                	push   $0x0
+801029b7:	e8 95 ff ff ff       	call   80102951 <ioapicread>
+801029bc:	83 c4 04             	add    $0x4,%esp
+801029bf:	c1 e8 18             	shr    $0x18,%eax
+801029c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if(id != ioapicid)
+801029c5:	0f b6 05 40 23 11 80 	movzbl 0x80112340,%eax
+801029cc:	0f b6 c0             	movzbl %al,%eax
+801029cf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+801029d2:	74 10                	je     801029e4 <ioapicinit+0x61>
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+801029d4:	83 ec 0c             	sub    $0xc,%esp
+801029d7:	68 80 86 10 80       	push   $0x80108680
+801029dc:	e8 e5 d9 ff ff       	call   801003c6 <cprintf>
+801029e1:	83 c4 10             	add    $0x10,%esp
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+801029e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+801029eb:	eb 3f                	jmp    80102a2c <ioapicinit+0xa9>
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+801029ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801029f0:	83 c0 20             	add    $0x20,%eax
+801029f3:	0d 00 00 01 00       	or     $0x10000,%eax
+801029f8:	89 c2                	mov    %eax,%edx
+801029fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801029fd:	83 c0 08             	add    $0x8,%eax
+80102a00:	01 c0                	add    %eax,%eax
+80102a02:	83 ec 08             	sub    $0x8,%esp
+80102a05:	52                   	push   %edx
+80102a06:	50                   	push   %eax
+80102a07:	e8 5c ff ff ff       	call   80102968 <ioapicwrite>
+80102a0c:	83 c4 10             	add    $0x10,%esp
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+80102a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102a12:	83 c0 08             	add    $0x8,%eax
+80102a15:	01 c0                	add    %eax,%eax
+80102a17:	83 c0 01             	add    $0x1,%eax
+80102a1a:	83 ec 08             	sub    $0x8,%esp
+80102a1d:	6a 00                	push   $0x0
+80102a1f:	50                   	push   %eax
+80102a20:	e8 43 ff ff ff       	call   80102968 <ioapicwrite>
+80102a25:	83 c4 10             	add    $0x10,%esp
+  if(id != ioapicid)
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+80102a28:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80102a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102a2f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+80102a32:	7e b9                	jle    801029ed <ioapicinit+0x6a>
+80102a34:	eb 01                	jmp    80102a37 <ioapicinit+0xb4>
+ioapicinit(void)
+{
+  int i, id, maxintr;
+
+  if(!ismp)
+    return;
+80102a36:	90                   	nop
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+80102a37:	c9                   	leave  
+80102a38:	c3                   	ret    
+
+80102a39 <ioapicenable>:
+
+void
+ioapicenable(int irq, int cpunum)
+{
+80102a39:	55                   	push   %ebp
+80102a3a:	89 e5                	mov    %esp,%ebp
+  if(!ismp)
+80102a3c:	a1 44 23 11 80       	mov    0x80112344,%eax
+80102a41:	85 c0                	test   %eax,%eax
+80102a43:	74 39                	je     80102a7e <ioapicenable+0x45>
+    return;
+
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+80102a45:	8b 45 08             	mov    0x8(%ebp),%eax
+80102a48:	83 c0 20             	add    $0x20,%eax
+80102a4b:	89 c2                	mov    %eax,%edx
+80102a4d:	8b 45 08             	mov    0x8(%ebp),%eax
+80102a50:	83 c0 08             	add    $0x8,%eax
+80102a53:	01 c0                	add    %eax,%eax
+80102a55:	52                   	push   %edx
+80102a56:	50                   	push   %eax
+80102a57:	e8 0c ff ff ff       	call   80102968 <ioapicwrite>
+80102a5c:	83 c4 08             	add    $0x8,%esp
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+80102a5f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80102a62:	c1 e0 18             	shl    $0x18,%eax
+80102a65:	89 c2                	mov    %eax,%edx
+80102a67:	8b 45 08             	mov    0x8(%ebp),%eax
+80102a6a:	83 c0 08             	add    $0x8,%eax
+80102a6d:	01 c0                	add    %eax,%eax
+80102a6f:	83 c0 01             	add    $0x1,%eax
+80102a72:	52                   	push   %edx
+80102a73:	50                   	push   %eax
+80102a74:	e8 ef fe ff ff       	call   80102968 <ioapicwrite>
+80102a79:	83 c4 08             	add    $0x8,%esp
+80102a7c:	eb 01                	jmp    80102a7f <ioapicenable+0x46>
+
+void
+ioapicenable(int irq, int cpunum)
+{
+  if(!ismp)
+    return;
+80102a7e:	90                   	nop
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+}
+80102a7f:	c9                   	leave  
+80102a80:	c3                   	ret    
+
+80102a81 <v2p>:
+#define KERNBASE 0x80000000         // First kernel virtual address
+#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked
+
+#ifndef __ASSEMBLER__
+
+static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }
+80102a81:	55                   	push   %ebp
+80102a82:	89 e5                	mov    %esp,%ebp
+80102a84:	8b 45 08             	mov    0x8(%ebp),%eax
+80102a87:	05 00 00 00 80       	add    $0x80000000,%eax
+80102a8c:	5d                   	pop    %ebp
+80102a8d:	c3                   	ret    
+
+80102a8e <kinit1>:
+// the pages mapped by entrypgdir on free list.
+// 2. main() calls kinit2() with the rest of the physical pages
+// after installing a full page table that maps them on all cores.
+void
+kinit1(void *vstart, void *vend)
+{
+80102a8e:	55                   	push   %ebp
+80102a8f:	89 e5                	mov    %esp,%ebp
+80102a91:	83 ec 08             	sub    $0x8,%esp
+  initlock(&kmem.lock, "kmem");
+80102a94:	83 ec 08             	sub    $0x8,%esp
+80102a97:	68 b2 86 10 80       	push   $0x801086b2
+80102a9c:	68 20 22 11 80       	push   $0x80112220
+80102aa1:	e8 8e 24 00 00       	call   80104f34 <initlock>
+80102aa6:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 0;
+80102aa9:	c7 05 54 22 11 80 00 	movl   $0x0,0x80112254
+80102ab0:	00 00 00 
+  freerange(vstart, vend);
+80102ab3:	83 ec 08             	sub    $0x8,%esp
+80102ab6:	ff 75 0c             	pushl  0xc(%ebp)
+80102ab9:	ff 75 08             	pushl  0x8(%ebp)
+80102abc:	e8 2a 00 00 00       	call   80102aeb <freerange>
+80102ac1:	83 c4 10             	add    $0x10,%esp
+}
+80102ac4:	90                   	nop
+80102ac5:	c9                   	leave  
+80102ac6:	c3                   	ret    
+
+80102ac7 <kinit2>:
+
+void
+kinit2(void *vstart, void *vend)
+{
+80102ac7:	55                   	push   %ebp
+80102ac8:	89 e5                	mov    %esp,%ebp
+80102aca:	83 ec 08             	sub    $0x8,%esp
+  freerange(vstart, vend);
+80102acd:	83 ec 08             	sub    $0x8,%esp
+80102ad0:	ff 75 0c             	pushl  0xc(%ebp)
+80102ad3:	ff 75 08             	pushl  0x8(%ebp)
+80102ad6:	e8 10 00 00 00       	call   80102aeb <freerange>
+80102adb:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 1;
+80102ade:	c7 05 54 22 11 80 01 	movl   $0x1,0x80112254
+80102ae5:	00 00 00 
+}
+80102ae8:	90                   	nop
+80102ae9:	c9                   	leave  
+80102aea:	c3                   	ret    
+
+80102aeb <freerange>:
+
+void
+freerange(void *vstart, void *vend)
+{
+80102aeb:	55                   	push   %ebp
+80102aec:	89 e5                	mov    %esp,%ebp
+80102aee:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+80102af1:	8b 45 08             	mov    0x8(%ebp),%eax
+80102af4:	05 ff 0f 00 00       	add    $0xfff,%eax
+80102af9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80102afe:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102b01:	eb 15                	jmp    80102b18 <freerange+0x2d>
+    kfree(p);
+80102b03:	83 ec 0c             	sub    $0xc,%esp
+80102b06:	ff 75 f4             	pushl  -0xc(%ebp)
+80102b09:	e8 1a 00 00 00       	call   80102b28 <kfree>
+80102b0e:	83 c4 10             	add    $0x10,%esp
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102b11:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+80102b18:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102b1b:	05 00 10 00 00       	add    $0x1000,%eax
+80102b20:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80102b23:	76 de                	jbe    80102b03 <freerange+0x18>
+    kfree(p);
+}
+80102b25:	90                   	nop
+80102b26:	c9                   	leave  
+80102b27:	c3                   	ret    
+
+80102b28 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+80102b28:	55                   	push   %ebp
+80102b29:	89 e5                	mov    %esp,%ebp
+80102b2b:	83 ec 18             	sub    $0x18,%esp
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || v2p(v) >= PHYSTOP)
+80102b2e:	8b 45 08             	mov    0x8(%ebp),%eax
+80102b31:	25 ff 0f 00 00       	and    $0xfff,%eax
+80102b36:	85 c0                	test   %eax,%eax
+80102b38:	75 1b                	jne    80102b55 <kfree+0x2d>
+80102b3a:	81 7d 08 3c 52 11 80 	cmpl   $0x8011523c,0x8(%ebp)
+80102b41:	72 12                	jb     80102b55 <kfree+0x2d>
+80102b43:	ff 75 08             	pushl  0x8(%ebp)
+80102b46:	e8 36 ff ff ff       	call   80102a81 <v2p>
+80102b4b:	83 c4 04             	add    $0x4,%esp
+80102b4e:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+80102b53:	76 0d                	jbe    80102b62 <kfree+0x3a>
+    panic("kfree");
+80102b55:	83 ec 0c             	sub    $0xc,%esp
+80102b58:	68 b7 86 10 80       	push   $0x801086b7
+80102b5d:	e8 04 da ff ff       	call   80100566 <panic>
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+80102b62:	83 ec 04             	sub    $0x4,%esp
+80102b65:	68 00 10 00 00       	push   $0x1000
+80102b6a:	6a 01                	push   $0x1
+80102b6c:	ff 75 08             	pushl  0x8(%ebp)
+80102b6f:	e8 45 26 00 00       	call   801051b9 <memset>
+80102b74:	83 c4 10             	add    $0x10,%esp
+
+  if(kmem.use_lock)
+80102b77:	a1 54 22 11 80       	mov    0x80112254,%eax
+80102b7c:	85 c0                	test   %eax,%eax
+80102b7e:	74 10                	je     80102b90 <kfree+0x68>
+    acquire(&kmem.lock);
+80102b80:	83 ec 0c             	sub    $0xc,%esp
+80102b83:	68 20 22 11 80       	push   $0x80112220
+80102b88:	e8 c9 23 00 00       	call   80104f56 <acquire>
+80102b8d:	83 c4 10             	add    $0x10,%esp
+  r = (struct run*)v;
+80102b90:	8b 45 08             	mov    0x8(%ebp),%eax
+80102b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  r->next = kmem.freelist;
+80102b96:	8b 15 58 22 11 80    	mov    0x80112258,%edx
+80102b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102b9f:	89 10                	mov    %edx,(%eax)
+  kmem.freelist = r;
+80102ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102ba4:	a3 58 22 11 80       	mov    %eax,0x80112258
+  if(kmem.use_lock)
+80102ba9:	a1 54 22 11 80       	mov    0x80112254,%eax
+80102bae:	85 c0                	test   %eax,%eax
+80102bb0:	74 10                	je     80102bc2 <kfree+0x9a>
+    release(&kmem.lock);
+80102bb2:	83 ec 0c             	sub    $0xc,%esp
+80102bb5:	68 20 22 11 80       	push   $0x80112220
+80102bba:	e8 fe 23 00 00       	call   80104fbd <release>
+80102bbf:	83 c4 10             	add    $0x10,%esp
+}
+80102bc2:	90                   	nop
+80102bc3:	c9                   	leave  
+80102bc4:	c3                   	ret    
+
+80102bc5 <kalloc>:
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+char*
+kalloc(void)
+{
+80102bc5:	55                   	push   %ebp
+80102bc6:	89 e5                	mov    %esp,%ebp
+80102bc8:	83 ec 18             	sub    $0x18,%esp
+  struct run *r;
+
+  if(kmem.use_lock)
+80102bcb:	a1 54 22 11 80       	mov    0x80112254,%eax
+80102bd0:	85 c0                	test   %eax,%eax
+80102bd2:	74 10                	je     80102be4 <kalloc+0x1f>
+    acquire(&kmem.lock);
+80102bd4:	83 ec 0c             	sub    $0xc,%esp
+80102bd7:	68 20 22 11 80       	push   $0x80112220
+80102bdc:	e8 75 23 00 00       	call   80104f56 <acquire>
+80102be1:	83 c4 10             	add    $0x10,%esp
+  r = kmem.freelist;
+80102be4:	a1 58 22 11 80       	mov    0x80112258,%eax
+80102be9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(r)
+80102bec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80102bf0:	74 0a                	je     80102bfc <kalloc+0x37>
+    kmem.freelist = r->next;
+80102bf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102bf5:	8b 00                	mov    (%eax),%eax
+80102bf7:	a3 58 22 11 80       	mov    %eax,0x80112258
+  if(kmem.use_lock)
+80102bfc:	a1 54 22 11 80       	mov    0x80112254,%eax
+80102c01:	85 c0                	test   %eax,%eax
+80102c03:	74 10                	je     80102c15 <kalloc+0x50>
+    release(&kmem.lock);
+80102c05:	83 ec 0c             	sub    $0xc,%esp
+80102c08:	68 20 22 11 80       	push   $0x80112220
+80102c0d:	e8 ab 23 00 00       	call   80104fbd <release>
+80102c12:	83 c4 10             	add    $0x10,%esp
+  return (char*)r;
+80102c15:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+80102c18:	c9                   	leave  
+80102c19:	c3                   	ret    
+
+80102c1a <inb>:
+// Routines to let C code use special x86 instructions.
+
+static inline uchar
+inb(ushort port)
+{
+80102c1a:	55                   	push   %ebp
+80102c1b:	89 e5                	mov    %esp,%ebp
+80102c1d:	83 ec 14             	sub    $0x14,%esp
+80102c20:	8b 45 08             	mov    0x8(%ebp),%eax
+80102c23:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102c27:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+80102c2b:	89 c2                	mov    %eax,%edx
+80102c2d:	ec                   	in     (%dx),%al
+80102c2e:	88 45 ff             	mov    %al,-0x1(%ebp)
+  return data;
+80102c31:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
+}
+80102c35:	c9                   	leave  
+80102c36:	c3                   	ret    
+
+80102c37 <kbdgetc>:
+#include "defs.h"
+#include "kbd.h"
+
+int
+kbdgetc(void)
+{
+80102c37:	55                   	push   %ebp
+80102c38:	89 e5                	mov    %esp,%ebp
+80102c3a:	83 ec 10             	sub    $0x10,%esp
+  static uchar *charcode[4] = {
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+80102c3d:	6a 64                	push   $0x64
+80102c3f:	e8 d6 ff ff ff       	call   80102c1a <inb>
+80102c44:	83 c4 04             	add    $0x4,%esp
+80102c47:	0f b6 c0             	movzbl %al,%eax
+80102c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if((st & KBS_DIB) == 0)
+80102c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102c50:	83 e0 01             	and    $0x1,%eax
+80102c53:	85 c0                	test   %eax,%eax
+80102c55:	75 0a                	jne    80102c61 <kbdgetc+0x2a>
+    return -1;
+80102c57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102c5c:	e9 23 01 00 00       	jmp    80102d84 <kbdgetc+0x14d>
+  data = inb(KBDATAP);
+80102c61:	6a 60                	push   $0x60
+80102c63:	e8 b2 ff ff ff       	call   80102c1a <inb>
+80102c68:	83 c4 04             	add    $0x4,%esp
+80102c6b:	0f b6 c0             	movzbl %al,%eax
+80102c6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+
+  if(data == 0xE0){
+80102c71:	81 7d fc e0 00 00 00 	cmpl   $0xe0,-0x4(%ebp)
+80102c78:	75 17                	jne    80102c91 <kbdgetc+0x5a>
+    shift |= E0ESC;
+80102c7a:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102c7f:	83 c8 40             	or     $0x40,%eax
+80102c82:	a3 3c b6 10 80       	mov    %eax,0x8010b63c
+    return 0;
+80102c87:	b8 00 00 00 00       	mov    $0x0,%eax
+80102c8c:	e9 f3 00 00 00       	jmp    80102d84 <kbdgetc+0x14d>
+  } else if(data & 0x80){
+80102c91:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80102c94:	25 80 00 00 00       	and    $0x80,%eax
+80102c99:	85 c0                	test   %eax,%eax
+80102c9b:	74 45                	je     80102ce2 <kbdgetc+0xab>
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+80102c9d:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102ca2:	83 e0 40             	and    $0x40,%eax
+80102ca5:	85 c0                	test   %eax,%eax
+80102ca7:	75 08                	jne    80102cb1 <kbdgetc+0x7a>
+80102ca9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80102cac:	83 e0 7f             	and    $0x7f,%eax
+80102caf:	eb 03                	jmp    80102cb4 <kbdgetc+0x7d>
+80102cb1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80102cb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    shift &= ~(shiftcode[data] | E0ESC);
+80102cb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80102cba:	05 20 90 10 80       	add    $0x80109020,%eax
+80102cbf:	0f b6 00             	movzbl (%eax),%eax
+80102cc2:	83 c8 40             	or     $0x40,%eax
+80102cc5:	0f b6 c0             	movzbl %al,%eax
+80102cc8:	f7 d0                	not    %eax
+80102cca:	89 c2                	mov    %eax,%edx
+80102ccc:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102cd1:	21 d0                	and    %edx,%eax
+80102cd3:	a3 3c b6 10 80       	mov    %eax,0x8010b63c
+    return 0;
+80102cd8:	b8 00 00 00 00       	mov    $0x0,%eax
+80102cdd:	e9 a2 00 00 00       	jmp    80102d84 <kbdgetc+0x14d>
+  } else if(shift & E0ESC){
+80102ce2:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102ce7:	83 e0 40             	and    $0x40,%eax
+80102cea:	85 c0                	test   %eax,%eax
+80102cec:	74 14                	je     80102d02 <kbdgetc+0xcb>
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+80102cee:	81 4d fc 80 00 00 00 	orl    $0x80,-0x4(%ebp)
+    shift &= ~E0ESC;
+80102cf5:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102cfa:	83 e0 bf             	and    $0xffffffbf,%eax
+80102cfd:	a3 3c b6 10 80       	mov    %eax,0x8010b63c
+  }
+
+  shift |= shiftcode[data];
+80102d02:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80102d05:	05 20 90 10 80       	add    $0x80109020,%eax
+80102d0a:	0f b6 00             	movzbl (%eax),%eax
+80102d0d:	0f b6 d0             	movzbl %al,%edx
+80102d10:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102d15:	09 d0                	or     %edx,%eax
+80102d17:	a3 3c b6 10 80       	mov    %eax,0x8010b63c
+  shift ^= togglecode[data];
+80102d1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80102d1f:	05 20 91 10 80       	add    $0x80109120,%eax
+80102d24:	0f b6 00             	movzbl (%eax),%eax
+80102d27:	0f b6 d0             	movzbl %al,%edx
+80102d2a:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102d2f:	31 d0                	xor    %edx,%eax
+80102d31:	a3 3c b6 10 80       	mov    %eax,0x8010b63c
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102d36:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102d3b:	83 e0 03             	and    $0x3,%eax
+80102d3e:	8b 14 85 20 95 10 80 	mov    -0x7fef6ae0(,%eax,4),%edx
+80102d45:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80102d48:	01 d0                	add    %edx,%eax
+80102d4a:	0f b6 00             	movzbl (%eax),%eax
+80102d4d:	0f b6 c0             	movzbl %al,%eax
+80102d50:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  if(shift & CAPSLOCK){
+80102d53:	a1 3c b6 10 80       	mov    0x8010b63c,%eax
+80102d58:	83 e0 08             	and    $0x8,%eax
+80102d5b:	85 c0                	test   %eax,%eax
+80102d5d:	74 22                	je     80102d81 <kbdgetc+0x14a>
+    if('a' <= c && c <= 'z')
+80102d5f:	83 7d f8 60          	cmpl   $0x60,-0x8(%ebp)
+80102d63:	76 0c                	jbe    80102d71 <kbdgetc+0x13a>
+80102d65:	83 7d f8 7a          	cmpl   $0x7a,-0x8(%ebp)
+80102d69:	77 06                	ja     80102d71 <kbdgetc+0x13a>
+      c += 'A' - 'a';
+80102d6b:	83 6d f8 20          	subl   $0x20,-0x8(%ebp)
+80102d6f:	eb 10                	jmp    80102d81 <kbdgetc+0x14a>
+    else if('A' <= c && c <= 'Z')
+80102d71:	83 7d f8 40          	cmpl   $0x40,-0x8(%ebp)
+80102d75:	76 0a                	jbe    80102d81 <kbdgetc+0x14a>
+80102d77:	83 7d f8 5a          	cmpl   $0x5a,-0x8(%ebp)
+80102d7b:	77 04                	ja     80102d81 <kbdgetc+0x14a>
+      c += 'a' - 'A';
+80102d7d:	83 45 f8 20          	addl   $0x20,-0x8(%ebp)
+  }
+  return c;
+80102d81:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+80102d84:	c9                   	leave  
+80102d85:	c3                   	ret    
+
+80102d86 <kbdintr>:
+
+void
+kbdintr(void)
+{
+80102d86:	55                   	push   %ebp
+80102d87:	89 e5                	mov    %esp,%ebp
+80102d89:	83 ec 08             	sub    $0x8,%esp
+  consoleintr(kbdgetc);
+80102d8c:	83 ec 0c             	sub    $0xc,%esp
+80102d8f:	68 37 2c 10 80       	push   $0x80102c37
+80102d94:	e8 44 da ff ff       	call   801007dd <consoleintr>
+80102d99:	83 c4 10             	add    $0x10,%esp
+}
+80102d9c:	90                   	nop
+80102d9d:	c9                   	leave  
+80102d9e:	c3                   	ret    
+
+80102d9f <inb>:
+// Routines to let C code use special x86 instructions.
+
+static inline uchar
+inb(ushort port)
+{
+80102d9f:	55                   	push   %ebp
+80102da0:	89 e5                	mov    %esp,%ebp
+80102da2:	83 ec 14             	sub    $0x14,%esp
+80102da5:	8b 45 08             	mov    0x8(%ebp),%eax
+80102da8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102dac:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+80102db0:	89 c2                	mov    %eax,%edx
+80102db2:	ec                   	in     (%dx),%al
+80102db3:	88 45 ff             	mov    %al,-0x1(%ebp)
+  return data;
+80102db6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
+}
+80102dba:	c9                   	leave  
+80102dbb:	c3                   	ret    
+
+80102dbc <outb>:
+               "memory", "cc");
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+80102dbc:	55                   	push   %ebp
+80102dbd:	89 e5                	mov    %esp,%ebp
+80102dbf:	83 ec 08             	sub    $0x8,%esp
+80102dc2:	8b 55 08             	mov    0x8(%ebp),%edx
+80102dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
+80102dc8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
+80102dcc:	88 45 f8             	mov    %al,-0x8(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102dcf:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
+80102dd3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+80102dd7:	ee                   	out    %al,(%dx)
+}
+80102dd8:	90                   	nop
+80102dd9:	c9                   	leave  
+80102dda:	c3                   	ret    
+
+80102ddb <readeflags>:
+  asm volatile("ltr %0" : : "r" (sel));
+}
+
+static inline uint
+readeflags(void)
+{
+80102ddb:	55                   	push   %ebp
+80102ddc:	89 e5                	mov    %esp,%ebp
+80102dde:	83 ec 10             	sub    $0x10,%esp
+  uint eflags;
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80102de1:	9c                   	pushf  
+80102de2:	58                   	pop    %eax
+80102de3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  return eflags;
+80102de6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+80102de9:	c9                   	leave  
+80102dea:	c3                   	ret    
+
+80102deb <lapicw>:
+
+volatile uint *lapic;  // Initialized in mp.c
+
+static void
+lapicw(int index, int value)
+{
+80102deb:	55                   	push   %ebp
+80102dec:	89 e5                	mov    %esp,%ebp
+  lapic[index] = value;
+80102dee:	a1 5c 22 11 80       	mov    0x8011225c,%eax
+80102df3:	8b 55 08             	mov    0x8(%ebp),%edx
+80102df6:	c1 e2 02             	shl    $0x2,%edx
+80102df9:	01 c2                	add    %eax,%edx
+80102dfb:	8b 45 0c             	mov    0xc(%ebp),%eax
+80102dfe:	89 02                	mov    %eax,(%edx)
+  lapic[ID];  // wait for write to finish, by reading
+80102e00:	a1 5c 22 11 80       	mov    0x8011225c,%eax
+80102e05:	83 c0 20             	add    $0x20,%eax
+80102e08:	8b 00                	mov    (%eax),%eax
+}
+80102e0a:	90                   	nop
+80102e0b:	5d                   	pop    %ebp
+80102e0c:	c3                   	ret    
+
+80102e0d <lapicinit>:
+//PAGEBREAK!
+
+void
+lapicinit(void)
+{
+80102e0d:	55                   	push   %ebp
+80102e0e:	89 e5                	mov    %esp,%ebp
+  if(!lapic) 
+80102e10:	a1 5c 22 11 80       	mov    0x8011225c,%eax
+80102e15:	85 c0                	test   %eax,%eax
+80102e17:	0f 84 0b 01 00 00    	je     80102f28 <lapicinit+0x11b>
+    return;
+
+  // Enable local APIC; set spurious interrupt vector.
+  lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
+80102e1d:	68 3f 01 00 00       	push   $0x13f
+80102e22:	6a 3c                	push   $0x3c
+80102e24:	e8 c2 ff ff ff       	call   80102deb <lapicw>
+80102e29:	83 c4 08             	add    $0x8,%esp
+
+  // The timer repeatedly counts down at bus frequency
+  // from lapic[TICR] and then issues an interrupt.  
+  // If xv6 cared more about precise timekeeping,
+  // TICR would be calibrated using an external time source.
+  lapicw(TDCR, X1);
+80102e2c:	6a 0b                	push   $0xb
+80102e2e:	68 f8 00 00 00       	push   $0xf8
+80102e33:	e8 b3 ff ff ff       	call   80102deb <lapicw>
+80102e38:	83 c4 08             	add    $0x8,%esp
+  lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
+80102e3b:	68 20 00 02 00       	push   $0x20020
+80102e40:	68 c8 00 00 00       	push   $0xc8
+80102e45:	e8 a1 ff ff ff       	call   80102deb <lapicw>
+80102e4a:	83 c4 08             	add    $0x8,%esp
+  lapicw(TICR, 10000000); 
+80102e4d:	68 80 96 98 00       	push   $0x989680
+80102e52:	68 e0 00 00 00       	push   $0xe0
+80102e57:	e8 8f ff ff ff       	call   80102deb <lapicw>
+80102e5c:	83 c4 08             	add    $0x8,%esp
+
+  // Disable logical interrupt lines.
+  lapicw(LINT0, MASKED);
+80102e5f:	68 00 00 01 00       	push   $0x10000
+80102e64:	68 d4 00 00 00       	push   $0xd4
+80102e69:	e8 7d ff ff ff       	call   80102deb <lapicw>
+80102e6e:	83 c4 08             	add    $0x8,%esp
+  lapicw(LINT1, MASKED);
+80102e71:	68 00 00 01 00       	push   $0x10000
+80102e76:	68 d8 00 00 00       	push   $0xd8
+80102e7b:	e8 6b ff ff ff       	call   80102deb <lapicw>
+80102e80:	83 c4 08             	add    $0x8,%esp
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+80102e83:	a1 5c 22 11 80       	mov    0x8011225c,%eax
+80102e88:	83 c0 30             	add    $0x30,%eax
+80102e8b:	8b 00                	mov    (%eax),%eax
+80102e8d:	c1 e8 10             	shr    $0x10,%eax
+80102e90:	0f b6 c0             	movzbl %al,%eax
+80102e93:	83 f8 03             	cmp    $0x3,%eax
+80102e96:	76 12                	jbe    80102eaa <lapicinit+0x9d>
+    lapicw(PCINT, MASKED);
+80102e98:	68 00 00 01 00       	push   $0x10000
+80102e9d:	68 d0 00 00 00       	push   $0xd0
+80102ea2:	e8 44 ff ff ff       	call   80102deb <lapicw>
+80102ea7:	83 c4 08             	add    $0x8,%esp
+
+  // Map error interrupt to IRQ_ERROR.
+  lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
+80102eaa:	6a 33                	push   $0x33
+80102eac:	68 dc 00 00 00       	push   $0xdc
+80102eb1:	e8 35 ff ff ff       	call   80102deb <lapicw>
+80102eb6:	83 c4 08             	add    $0x8,%esp
+
+  // Clear error status register (requires back-to-back writes).
+  lapicw(ESR, 0);
+80102eb9:	6a 00                	push   $0x0
+80102ebb:	68 a0 00 00 00       	push   $0xa0
+80102ec0:	e8 26 ff ff ff       	call   80102deb <lapicw>
+80102ec5:	83 c4 08             	add    $0x8,%esp
+  lapicw(ESR, 0);
+80102ec8:	6a 00                	push   $0x0
+80102eca:	68 a0 00 00 00       	push   $0xa0
+80102ecf:	e8 17 ff ff ff       	call   80102deb <lapicw>
+80102ed4:	83 c4 08             	add    $0x8,%esp
+
+  // Ack any outstanding interrupts.
+  lapicw(EOI, 0);
+80102ed7:	6a 00                	push   $0x0
+80102ed9:	6a 2c                	push   $0x2c
+80102edb:	e8 0b ff ff ff       	call   80102deb <lapicw>
+80102ee0:	83 c4 08             	add    $0x8,%esp
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+80102ee3:	6a 00                	push   $0x0
+80102ee5:	68 c4 00 00 00       	push   $0xc4
+80102eea:	e8 fc fe ff ff       	call   80102deb <lapicw>
+80102eef:	83 c4 08             	add    $0x8,%esp
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+80102ef2:	68 00 85 08 00       	push   $0x88500
+80102ef7:	68 c0 00 00 00       	push   $0xc0
+80102efc:	e8 ea fe ff ff       	call   80102deb <lapicw>
+80102f01:	83 c4 08             	add    $0x8,%esp
+  while(lapic[ICRLO] & DELIVS)
+80102f04:	90                   	nop
+80102f05:	a1 5c 22 11 80       	mov    0x8011225c,%eax
+80102f0a:	05 00 03 00 00       	add    $0x300,%eax
+80102f0f:	8b 00                	mov    (%eax),%eax
+80102f11:	25 00 10 00 00       	and    $0x1000,%eax
+80102f16:	85 c0                	test   %eax,%eax
+80102f18:	75 eb                	jne    80102f05 <lapicinit+0xf8>
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+80102f1a:	6a 00                	push   $0x0
+80102f1c:	6a 20                	push   $0x20
+80102f1e:	e8 c8 fe ff ff       	call   80102deb <lapicw>
+80102f23:	83 c4 08             	add    $0x8,%esp
+80102f26:	eb 01                	jmp    80102f29 <lapicinit+0x11c>
+
+void
+lapicinit(void)
+{
+  if(!lapic) 
+    return;
+80102f28:	90                   	nop
+  while(lapic[ICRLO] & DELIVS)
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+80102f29:	c9                   	leave  
+80102f2a:	c3                   	ret    
+
+80102f2b <cpunum>:
+
+int
+cpunum(void)
+{
+80102f2b:	55                   	push   %ebp
+80102f2c:	89 e5                	mov    %esp,%ebp
+80102f2e:	83 ec 08             	sub    $0x8,%esp
+  // Cannot call cpu when interrupts are enabled:
+  // result not guaranteed to last long enough to be used!
+  // Would prefer to panic but even printing is chancy here:
+  // almost everything, including cprintf and panic, calls cpu,
+  // often indirectly through acquire and release.
+  if(readeflags()&FL_IF){
+80102f31:	e8 a5 fe ff ff       	call   80102ddb <readeflags>
+80102f36:	25 00 02 00 00       	and    $0x200,%eax
+80102f3b:	85 c0                	test   %eax,%eax
+80102f3d:	74 26                	je     80102f65 <cpunum+0x3a>
+    static int n;
+    if(n++ == 0)
+80102f3f:	a1 40 b6 10 80       	mov    0x8010b640,%eax
+80102f44:	8d 50 01             	lea    0x1(%eax),%edx
+80102f47:	89 15 40 b6 10 80    	mov    %edx,0x8010b640
+80102f4d:	85 c0                	test   %eax,%eax
+80102f4f:	75 14                	jne    80102f65 <cpunum+0x3a>
+      cprintf("cpu called from %x with interrupts enabled\n",
+80102f51:	8b 45 04             	mov    0x4(%ebp),%eax
+80102f54:	83 ec 08             	sub    $0x8,%esp
+80102f57:	50                   	push   %eax
+80102f58:	68 c0 86 10 80       	push   $0x801086c0
+80102f5d:	e8 64 d4 ff ff       	call   801003c6 <cprintf>
+80102f62:	83 c4 10             	add    $0x10,%esp
+        __builtin_return_address(0));
+  }
+
+  if(lapic)
+80102f65:	a1 5c 22 11 80       	mov    0x8011225c,%eax
+80102f6a:	85 c0                	test   %eax,%eax
+80102f6c:	74 0f                	je     80102f7d <cpunum+0x52>
+    return lapic[ID]>>24;
+80102f6e:	a1 5c 22 11 80       	mov    0x8011225c,%eax
+80102f73:	83 c0 20             	add    $0x20,%eax
+80102f76:	8b 00                	mov    (%eax),%eax
+80102f78:	c1 e8 18             	shr    $0x18,%eax
+80102f7b:	eb 05                	jmp    80102f82 <cpunum+0x57>
+  return 0;
+80102f7d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80102f82:	c9                   	leave  
+80102f83:	c3                   	ret    
+
+80102f84 <lapiceoi>:
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+80102f84:	55                   	push   %ebp
+80102f85:	89 e5                	mov    %esp,%ebp
+  if(lapic)
+80102f87:	a1 5c 22 11 80       	mov    0x8011225c,%eax
+80102f8c:	85 c0                	test   %eax,%eax
+80102f8e:	74 0c                	je     80102f9c <lapiceoi+0x18>
+    lapicw(EOI, 0);
+80102f90:	6a 00                	push   $0x0
+80102f92:	6a 2c                	push   $0x2c
+80102f94:	e8 52 fe ff ff       	call   80102deb <lapicw>
+80102f99:	83 c4 08             	add    $0x8,%esp
+}
+80102f9c:	90                   	nop
+80102f9d:	c9                   	leave  
+80102f9e:	c3                   	ret    
+
+80102f9f <microdelay>:
+
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+80102f9f:	55                   	push   %ebp
+80102fa0:	89 e5                	mov    %esp,%ebp
+}
+80102fa2:	90                   	nop
+80102fa3:	5d                   	pop    %ebp
+80102fa4:	c3                   	ret    
+
+80102fa5 <lapicstartap>:
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+80102fa5:	55                   	push   %ebp
+80102fa6:	89 e5                	mov    %esp,%ebp
+80102fa8:	83 ec 14             	sub    $0x14,%esp
+80102fab:	8b 45 08             	mov    0x8(%ebp),%eax
+80102fae:	88 45 ec             	mov    %al,-0x14(%ebp)
+  ushort *wrv;
+  
+  // "The BSP must initialize CMOS shutdown code to 0AH
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+80102fb1:	6a 0f                	push   $0xf
+80102fb3:	6a 70                	push   $0x70
+80102fb5:	e8 02 fe ff ff       	call   80102dbc <outb>
+80102fba:	83 c4 08             	add    $0x8,%esp
+  outb(CMOS_PORT+1, 0x0A);
+80102fbd:	6a 0a                	push   $0xa
+80102fbf:	6a 71                	push   $0x71
+80102fc1:	e8 f6 fd ff ff       	call   80102dbc <outb>
+80102fc6:	83 c4 08             	add    $0x8,%esp
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+80102fc9:	c7 45 f8 67 04 00 80 	movl   $0x80000467,-0x8(%ebp)
+  wrv[0] = 0;
+80102fd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+80102fd3:	66 c7 00 00 00       	movw   $0x0,(%eax)
+  wrv[1] = addr >> 4;
+80102fd8:	8b 45 f8             	mov    -0x8(%ebp),%eax
+80102fdb:	83 c0 02             	add    $0x2,%eax
+80102fde:	8b 55 0c             	mov    0xc(%ebp),%edx
+80102fe1:	c1 ea 04             	shr    $0x4,%edx
+80102fe4:	66 89 10             	mov    %dx,(%eax)
+
+  // "Universal startup algorithm."
+  // Send INIT (level-triggered) interrupt to reset other CPU.
+  lapicw(ICRHI, apicid<<24);
+80102fe7:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
+80102feb:	c1 e0 18             	shl    $0x18,%eax
+80102fee:	50                   	push   %eax
+80102fef:	68 c4 00 00 00       	push   $0xc4
+80102ff4:	e8 f2 fd ff ff       	call   80102deb <lapicw>
+80102ff9:	83 c4 08             	add    $0x8,%esp
+  lapicw(ICRLO, INIT | LEVEL | ASSERT);
+80102ffc:	68 00 c5 00 00       	push   $0xc500
+80103001:	68 c0 00 00 00       	push   $0xc0
+80103006:	e8 e0 fd ff ff       	call   80102deb <lapicw>
+8010300b:	83 c4 08             	add    $0x8,%esp
+  microdelay(200);
+8010300e:	68 c8 00 00 00       	push   $0xc8
+80103013:	e8 87 ff ff ff       	call   80102f9f <microdelay>
+80103018:	83 c4 04             	add    $0x4,%esp
+  lapicw(ICRLO, INIT | LEVEL);
+8010301b:	68 00 85 00 00       	push   $0x8500
+80103020:	68 c0 00 00 00       	push   $0xc0
+80103025:	e8 c1 fd ff ff       	call   80102deb <lapicw>
+8010302a:	83 c4 08             	add    $0x8,%esp
+  microdelay(100);    // should be 10ms, but too slow in Bochs!
+8010302d:	6a 64                	push   $0x64
+8010302f:	e8 6b ff ff ff       	call   80102f9f <microdelay>
+80103034:	83 c4 04             	add    $0x4,%esp
+  // Send startup IPI (twice!) to enter code.
+  // Regular hardware is supposed to only accept a STARTUP
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+80103037:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+8010303e:	eb 3d                	jmp    8010307d <lapicstartap+0xd8>
+    lapicw(ICRHI, apicid<<24);
+80103040:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
+80103044:	c1 e0 18             	shl    $0x18,%eax
+80103047:	50                   	push   %eax
+80103048:	68 c4 00 00 00       	push   $0xc4
+8010304d:	e8 99 fd ff ff       	call   80102deb <lapicw>
+80103052:	83 c4 08             	add    $0x8,%esp
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80103055:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103058:	c1 e8 0c             	shr    $0xc,%eax
+8010305b:	80 cc 06             	or     $0x6,%ah
+8010305e:	50                   	push   %eax
+8010305f:	68 c0 00 00 00       	push   $0xc0
+80103064:	e8 82 fd ff ff       	call   80102deb <lapicw>
+80103069:	83 c4 08             	add    $0x8,%esp
+    microdelay(200);
+8010306c:	68 c8 00 00 00       	push   $0xc8
+80103071:	e8 29 ff ff ff       	call   80102f9f <microdelay>
+80103076:	83 c4 04             	add    $0x4,%esp
+  // Send startup IPI (twice!) to enter code.
+  // Regular hardware is supposed to only accept a STARTUP
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+80103079:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+8010307d:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
+80103081:	7e bd                	jle    80103040 <lapicstartap+0x9b>
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+    microdelay(200);
+  }
+}
+80103083:	90                   	nop
+80103084:	c9                   	leave  
+80103085:	c3                   	ret    
+
+80103086 <cmos_read>:
+#define DAY     0x07
+#define MONTH   0x08
+#define YEAR    0x09
+
+static uint cmos_read(uint reg)
+{
+80103086:	55                   	push   %ebp
+80103087:	89 e5                	mov    %esp,%ebp
+  outb(CMOS_PORT,  reg);
+80103089:	8b 45 08             	mov    0x8(%ebp),%eax
+8010308c:	0f b6 c0             	movzbl %al,%eax
+8010308f:	50                   	push   %eax
+80103090:	6a 70                	push   $0x70
+80103092:	e8 25 fd ff ff       	call   80102dbc <outb>
+80103097:	83 c4 08             	add    $0x8,%esp
+  microdelay(200);
+8010309a:	68 c8 00 00 00       	push   $0xc8
+8010309f:	e8 fb fe ff ff       	call   80102f9f <microdelay>
+801030a4:	83 c4 04             	add    $0x4,%esp
+
+  return inb(CMOS_RETURN);
+801030a7:	6a 71                	push   $0x71
+801030a9:	e8 f1 fc ff ff       	call   80102d9f <inb>
+801030ae:	83 c4 04             	add    $0x4,%esp
+801030b1:	0f b6 c0             	movzbl %al,%eax
+}
+801030b4:	c9                   	leave  
+801030b5:	c3                   	ret    
+
+801030b6 <fill_rtcdate>:
+
+static void fill_rtcdate(struct rtcdate *r)
+{
+801030b6:	55                   	push   %ebp
+801030b7:	89 e5                	mov    %esp,%ebp
+  r->second = cmos_read(SECS);
+801030b9:	6a 00                	push   $0x0
+801030bb:	e8 c6 ff ff ff       	call   80103086 <cmos_read>
+801030c0:	83 c4 04             	add    $0x4,%esp
+801030c3:	89 c2                	mov    %eax,%edx
+801030c5:	8b 45 08             	mov    0x8(%ebp),%eax
+801030c8:	89 10                	mov    %edx,(%eax)
+  r->minute = cmos_read(MINS);
+801030ca:	6a 02                	push   $0x2
+801030cc:	e8 b5 ff ff ff       	call   80103086 <cmos_read>
+801030d1:	83 c4 04             	add    $0x4,%esp
+801030d4:	89 c2                	mov    %eax,%edx
+801030d6:	8b 45 08             	mov    0x8(%ebp),%eax
+801030d9:	89 50 04             	mov    %edx,0x4(%eax)
+  r->hour   = cmos_read(HOURS);
+801030dc:	6a 04                	push   $0x4
+801030de:	e8 a3 ff ff ff       	call   80103086 <cmos_read>
+801030e3:	83 c4 04             	add    $0x4,%esp
+801030e6:	89 c2                	mov    %eax,%edx
+801030e8:	8b 45 08             	mov    0x8(%ebp),%eax
+801030eb:	89 50 08             	mov    %edx,0x8(%eax)
+  r->day    = cmos_read(DAY);
+801030ee:	6a 07                	push   $0x7
+801030f0:	e8 91 ff ff ff       	call   80103086 <cmos_read>
+801030f5:	83 c4 04             	add    $0x4,%esp
+801030f8:	89 c2                	mov    %eax,%edx
+801030fa:	8b 45 08             	mov    0x8(%ebp),%eax
+801030fd:	89 50 0c             	mov    %edx,0xc(%eax)
+  r->month  = cmos_read(MONTH);
+80103100:	6a 08                	push   $0x8
+80103102:	e8 7f ff ff ff       	call   80103086 <cmos_read>
+80103107:	83 c4 04             	add    $0x4,%esp
+8010310a:	89 c2                	mov    %eax,%edx
+8010310c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010310f:	89 50 10             	mov    %edx,0x10(%eax)
+  r->year   = cmos_read(YEAR);
+80103112:	6a 09                	push   $0x9
+80103114:	e8 6d ff ff ff       	call   80103086 <cmos_read>
+80103119:	83 c4 04             	add    $0x4,%esp
+8010311c:	89 c2                	mov    %eax,%edx
+8010311e:	8b 45 08             	mov    0x8(%ebp),%eax
+80103121:	89 50 14             	mov    %edx,0x14(%eax)
+}
+80103124:	90                   	nop
+80103125:	c9                   	leave  
+80103126:	c3                   	ret    
+
+80103127 <cmostime>:
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void cmostime(struct rtcdate *r)
+{
+80103127:	55                   	push   %ebp
+80103128:	89 e5                	mov    %esp,%ebp
+8010312a:	83 ec 48             	sub    $0x48,%esp
+  struct rtcdate t1, t2;
+  int sb, bcd;
+
+  sb = cmos_read(CMOS_STATB);
+8010312d:	6a 0b                	push   $0xb
+8010312f:	e8 52 ff ff ff       	call   80103086 <cmos_read>
+80103134:	83 c4 04             	add    $0x4,%esp
+80103137:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+  bcd = (sb & (1 << 2)) == 0;
+8010313a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010313d:	83 e0 04             	and    $0x4,%eax
+80103140:	85 c0                	test   %eax,%eax
+80103142:	0f 94 c0             	sete   %al
+80103145:	0f b6 c0             	movzbl %al,%eax
+80103148:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+  // make sure CMOS doesn't modify time while we read it
+  for (;;) {
+    fill_rtcdate(&t1);
+8010314b:	8d 45 d8             	lea    -0x28(%ebp),%eax
+8010314e:	50                   	push   %eax
+8010314f:	e8 62 ff ff ff       	call   801030b6 <fill_rtcdate>
+80103154:	83 c4 04             	add    $0x4,%esp
+    if (cmos_read(CMOS_STATA) & CMOS_UIP)
+80103157:	6a 0a                	push   $0xa
+80103159:	e8 28 ff ff ff       	call   80103086 <cmos_read>
+8010315e:	83 c4 04             	add    $0x4,%esp
+80103161:	25 80 00 00 00       	and    $0x80,%eax
+80103166:	85 c0                	test   %eax,%eax
+80103168:	75 27                	jne    80103191 <cmostime+0x6a>
+        continue;
+    fill_rtcdate(&t2);
+8010316a:	8d 45 c0             	lea    -0x40(%ebp),%eax
+8010316d:	50                   	push   %eax
+8010316e:	e8 43 ff ff ff       	call   801030b6 <fill_rtcdate>
+80103173:	83 c4 04             	add    $0x4,%esp
+    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
+80103176:	83 ec 04             	sub    $0x4,%esp
+80103179:	6a 18                	push   $0x18
+8010317b:	8d 45 c0             	lea    -0x40(%ebp),%eax
+8010317e:	50                   	push   %eax
+8010317f:	8d 45 d8             	lea    -0x28(%ebp),%eax
+80103182:	50                   	push   %eax
+80103183:	e8 98 20 00 00       	call   80105220 <memcmp>
+80103188:	83 c4 10             	add    $0x10,%esp
+8010318b:	85 c0                	test   %eax,%eax
+8010318d:	74 05                	je     80103194 <cmostime+0x6d>
+8010318f:	eb ba                	jmp    8010314b <cmostime+0x24>
+
+  // make sure CMOS doesn't modify time while we read it
+  for (;;) {
+    fill_rtcdate(&t1);
+    if (cmos_read(CMOS_STATA) & CMOS_UIP)
+        continue;
+80103191:	90                   	nop
+    fill_rtcdate(&t2);
+    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
+      break;
+  }
+80103192:	eb b7                	jmp    8010314b <cmostime+0x24>
+    fill_rtcdate(&t1);
+    if (cmos_read(CMOS_STATA) & CMOS_UIP)
+        continue;
+    fill_rtcdate(&t2);
+    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
+      break;
+80103194:	90                   	nop
+  }
+
+  // convert
+  if (bcd) {
+80103195:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80103199:	0f 84 b4 00 00 00    	je     80103253 <cmostime+0x12c>
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+8010319f:	8b 45 d8             	mov    -0x28(%ebp),%eax
+801031a2:	c1 e8 04             	shr    $0x4,%eax
+801031a5:	89 c2                	mov    %eax,%edx
+801031a7:	89 d0                	mov    %edx,%eax
+801031a9:	c1 e0 02             	shl    $0x2,%eax
+801031ac:	01 d0                	add    %edx,%eax
+801031ae:	01 c0                	add    %eax,%eax
+801031b0:	89 c2                	mov    %eax,%edx
+801031b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
+801031b5:	83 e0 0f             	and    $0xf,%eax
+801031b8:	01 d0                	add    %edx,%eax
+801031ba:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    CONV(minute);
+801031bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801031c0:	c1 e8 04             	shr    $0x4,%eax
+801031c3:	89 c2                	mov    %eax,%edx
+801031c5:	89 d0                	mov    %edx,%eax
+801031c7:	c1 e0 02             	shl    $0x2,%eax
+801031ca:	01 d0                	add    %edx,%eax
+801031cc:	01 c0                	add    %eax,%eax
+801031ce:	89 c2                	mov    %eax,%edx
+801031d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801031d3:	83 e0 0f             	and    $0xf,%eax
+801031d6:	01 d0                	add    %edx,%eax
+801031d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    CONV(hour  );
+801031db:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801031de:	c1 e8 04             	shr    $0x4,%eax
+801031e1:	89 c2                	mov    %eax,%edx
+801031e3:	89 d0                	mov    %edx,%eax
+801031e5:	c1 e0 02             	shl    $0x2,%eax
+801031e8:	01 d0                	add    %edx,%eax
+801031ea:	01 c0                	add    %eax,%eax
+801031ec:	89 c2                	mov    %eax,%edx
+801031ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801031f1:	83 e0 0f             	and    $0xf,%eax
+801031f4:	01 d0                	add    %edx,%eax
+801031f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    CONV(day   );
+801031f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801031fc:	c1 e8 04             	shr    $0x4,%eax
+801031ff:	89 c2                	mov    %eax,%edx
+80103201:	89 d0                	mov    %edx,%eax
+80103203:	c1 e0 02             	shl    $0x2,%eax
+80103206:	01 d0                	add    %edx,%eax
+80103208:	01 c0                	add    %eax,%eax
+8010320a:	89 c2                	mov    %eax,%edx
+8010320c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010320f:	83 e0 0f             	and    $0xf,%eax
+80103212:	01 d0                	add    %edx,%eax
+80103214:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    CONV(month );
+80103217:	8b 45 e8             	mov    -0x18(%ebp),%eax
+8010321a:	c1 e8 04             	shr    $0x4,%eax
+8010321d:	89 c2                	mov    %eax,%edx
+8010321f:	89 d0                	mov    %edx,%eax
+80103221:	c1 e0 02             	shl    $0x2,%eax
+80103224:	01 d0                	add    %edx,%eax
+80103226:	01 c0                	add    %eax,%eax
+80103228:	89 c2                	mov    %eax,%edx
+8010322a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+8010322d:	83 e0 0f             	and    $0xf,%eax
+80103230:	01 d0                	add    %edx,%eax
+80103232:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    CONV(year  );
+80103235:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80103238:	c1 e8 04             	shr    $0x4,%eax
+8010323b:	89 c2                	mov    %eax,%edx
+8010323d:	89 d0                	mov    %edx,%eax
+8010323f:	c1 e0 02             	shl    $0x2,%eax
+80103242:	01 d0                	add    %edx,%eax
+80103244:	01 c0                	add    %eax,%eax
+80103246:	89 c2                	mov    %eax,%edx
+80103248:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010324b:	83 e0 0f             	and    $0xf,%eax
+8010324e:	01 d0                	add    %edx,%eax
+80103250:	89 45 ec             	mov    %eax,-0x14(%ebp)
+#undef     CONV
+  }
+
+  *r = t1;
+80103253:	8b 45 08             	mov    0x8(%ebp),%eax
+80103256:	8b 55 d8             	mov    -0x28(%ebp),%edx
+80103259:	89 10                	mov    %edx,(%eax)
+8010325b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+8010325e:	89 50 04             	mov    %edx,0x4(%eax)
+80103261:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80103264:	89 50 08             	mov    %edx,0x8(%eax)
+80103267:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010326a:	89 50 0c             	mov    %edx,0xc(%eax)
+8010326d:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80103270:	89 50 10             	mov    %edx,0x10(%eax)
+80103273:	8b 55 ec             	mov    -0x14(%ebp),%edx
+80103276:	89 50 14             	mov    %edx,0x14(%eax)
+  r->year += 2000;
+80103279:	8b 45 08             	mov    0x8(%ebp),%eax
+8010327c:	8b 40 14             	mov    0x14(%eax),%eax
+8010327f:	8d 90 d0 07 00 00    	lea    0x7d0(%eax),%edx
+80103285:	8b 45 08             	mov    0x8(%ebp),%eax
+80103288:	89 50 14             	mov    %edx,0x14(%eax)
+}
+8010328b:	90                   	nop
+8010328c:	c9                   	leave  
+8010328d:	c3                   	ret    
+
+8010328e <initlog>:
+static void recover_from_log(void);
+static void commit();
+
+void
+initlog(void)
+{
+8010328e:	55                   	push   %ebp
+8010328f:	89 e5                	mov    %esp,%ebp
+80103291:	83 ec 18             	sub    $0x18,%esp
+  if (sizeof(struct logheader) >= BSIZE)
+    panic("initlog: too big logheader");
+
+  struct superblock sb;
+  initlock(&log.lock, "log");
+80103294:	83 ec 08             	sub    $0x8,%esp
+80103297:	68 ec 86 10 80       	push   $0x801086ec
+8010329c:	68 60 22 11 80       	push   $0x80112260
+801032a1:	e8 8e 1c 00 00       	call   80104f34 <initlock>
+801032a6:	83 c4 10             	add    $0x10,%esp
+  readsb(ROOTDEV, &sb);
+801032a9:	83 ec 08             	sub    $0x8,%esp
+801032ac:	8d 45 e8             	lea    -0x18(%ebp),%eax
+801032af:	50                   	push   %eax
+801032b0:	6a 01                	push   $0x1
+801032b2:	e8 b2 e0 ff ff       	call   80101369 <readsb>
+801032b7:	83 c4 10             	add    $0x10,%esp
+  log.start = sb.size - sb.nlog;
+801032ba:	8b 55 e8             	mov    -0x18(%ebp),%edx
+801032bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801032c0:	29 c2                	sub    %eax,%edx
+801032c2:	89 d0                	mov    %edx,%eax
+801032c4:	a3 94 22 11 80       	mov    %eax,0x80112294
+  log.size = sb.nlog;
+801032c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801032cc:	a3 98 22 11 80       	mov    %eax,0x80112298
+  log.dev = ROOTDEV;
+801032d1:	c7 05 a4 22 11 80 01 	movl   $0x1,0x801122a4
+801032d8:	00 00 00 
+  recover_from_log();
+801032db:	e8 b2 01 00 00       	call   80103492 <recover_from_log>
+}
+801032e0:	90                   	nop
+801032e1:	c9                   	leave  
+801032e2:	c3                   	ret    
+
+801032e3 <install_trans>:
+
+// Copy committed blocks from log to their home location
+static void 
+install_trans(void)
+{
+801032e3:	55                   	push   %ebp
+801032e4:	89 e5                	mov    %esp,%ebp
+801032e6:	83 ec 18             	sub    $0x18,%esp
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+801032e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+801032f0:	e9 95 00 00 00       	jmp    8010338a <install_trans+0xa7>
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+801032f5:	8b 15 94 22 11 80    	mov    0x80112294,%edx
+801032fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801032fe:	01 d0                	add    %edx,%eax
+80103300:	83 c0 01             	add    $0x1,%eax
+80103303:	89 c2                	mov    %eax,%edx
+80103305:	a1 a4 22 11 80       	mov    0x801122a4,%eax
+8010330a:	83 ec 08             	sub    $0x8,%esp
+8010330d:	52                   	push   %edx
+8010330e:	50                   	push   %eax
+8010330f:	e8 a2 ce ff ff       	call   801001b6 <bread>
+80103314:	83 c4 10             	add    $0x10,%esp
+80103317:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    struct buf *dbuf = bread(log.dev, log.lh.sector[tail]); // read dst
+8010331a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010331d:	83 c0 10             	add    $0x10,%eax
+80103320:	8b 04 85 6c 22 11 80 	mov    -0x7feedd94(,%eax,4),%eax
+80103327:	89 c2                	mov    %eax,%edx
+80103329:	a1 a4 22 11 80       	mov    0x801122a4,%eax
+8010332e:	83 ec 08             	sub    $0x8,%esp
+80103331:	52                   	push   %edx
+80103332:	50                   	push   %eax
+80103333:	e8 7e ce ff ff       	call   801001b6 <bread>
+80103338:	83 c4 10             	add    $0x10,%esp
+8010333b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+8010333e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103341:	8d 50 18             	lea    0x18(%eax),%edx
+80103344:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80103347:	83 c0 18             	add    $0x18,%eax
+8010334a:	83 ec 04             	sub    $0x4,%esp
+8010334d:	68 00 02 00 00       	push   $0x200
+80103352:	52                   	push   %edx
+80103353:	50                   	push   %eax
+80103354:	e8 1f 1f 00 00       	call   80105278 <memmove>
+80103359:	83 c4 10             	add    $0x10,%esp
+    bwrite(dbuf);  // write dst to disk
+8010335c:	83 ec 0c             	sub    $0xc,%esp
+8010335f:	ff 75 ec             	pushl  -0x14(%ebp)
+80103362:	e8 88 ce ff ff       	call   801001ef <bwrite>
+80103367:	83 c4 10             	add    $0x10,%esp
+    brelse(lbuf); 
+8010336a:	83 ec 0c             	sub    $0xc,%esp
+8010336d:	ff 75 f0             	pushl  -0x10(%ebp)
+80103370:	e8 b9 ce ff ff       	call   8010022e <brelse>
+80103375:	83 c4 10             	add    $0x10,%esp
+    brelse(dbuf);
+80103378:	83 ec 0c             	sub    $0xc,%esp
+8010337b:	ff 75 ec             	pushl  -0x14(%ebp)
+8010337e:	e8 ab ce ff ff       	call   8010022e <brelse>
+80103383:	83 c4 10             	add    $0x10,%esp
+static void 
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103386:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+8010338a:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+8010338f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80103392:	0f 8f 5d ff ff ff    	jg     801032f5 <install_trans+0x12>
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+    bwrite(dbuf);  // write dst to disk
+    brelse(lbuf); 
+    brelse(dbuf);
+  }
+}
+80103398:	90                   	nop
+80103399:	c9                   	leave  
+8010339a:	c3                   	ret    
+
+8010339b <read_head>:
+
+// Read the log header from disk into the in-memory log header
+static void
+read_head(void)
+{
+8010339b:	55                   	push   %ebp
+8010339c:	89 e5                	mov    %esp,%ebp
+8010339e:	83 ec 18             	sub    $0x18,%esp
+  struct buf *buf = bread(log.dev, log.start);
+801033a1:	a1 94 22 11 80       	mov    0x80112294,%eax
+801033a6:	89 c2                	mov    %eax,%edx
+801033a8:	a1 a4 22 11 80       	mov    0x801122a4,%eax
+801033ad:	83 ec 08             	sub    $0x8,%esp
+801033b0:	52                   	push   %edx
+801033b1:	50                   	push   %eax
+801033b2:	e8 ff cd ff ff       	call   801001b6 <bread>
+801033b7:	83 c4 10             	add    $0x10,%esp
+801033ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  struct logheader *lh = (struct logheader *) (buf->data);
+801033bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801033c0:	83 c0 18             	add    $0x18,%eax
+801033c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  int i;
+  log.lh.n = lh->n;
+801033c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801033c9:	8b 00                	mov    (%eax),%eax
+801033cb:	a3 a8 22 11 80       	mov    %eax,0x801122a8
+  for (i = 0; i < log.lh.n; i++) {
+801033d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+801033d7:	eb 1b                	jmp    801033f4 <read_head+0x59>
+    log.lh.sector[i] = lh->sector[i];
+801033d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801033dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801033df:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
+801033e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801033e6:	83 c2 10             	add    $0x10,%edx
+801033e9:	89 04 95 6c 22 11 80 	mov    %eax,-0x7feedd94(,%edx,4)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *lh = (struct logheader *) (buf->data);
+  int i;
+  log.lh.n = lh->n;
+  for (i = 0; i < log.lh.n; i++) {
+801033f0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+801033f4:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+801033f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801033fc:	7f db                	jg     801033d9 <read_head+0x3e>
+    log.lh.sector[i] = lh->sector[i];
+  }
+  brelse(buf);
+801033fe:	83 ec 0c             	sub    $0xc,%esp
+80103401:	ff 75 f0             	pushl  -0x10(%ebp)
+80103404:	e8 25 ce ff ff       	call   8010022e <brelse>
+80103409:	83 c4 10             	add    $0x10,%esp
+}
+8010340c:	90                   	nop
+8010340d:	c9                   	leave  
+8010340e:	c3                   	ret    
+
+8010340f <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+8010340f:	55                   	push   %ebp
+80103410:	89 e5                	mov    %esp,%ebp
+80103412:	83 ec 18             	sub    $0x18,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80103415:	a1 94 22 11 80       	mov    0x80112294,%eax
+8010341a:	89 c2                	mov    %eax,%edx
+8010341c:	a1 a4 22 11 80       	mov    0x801122a4,%eax
+80103421:	83 ec 08             	sub    $0x8,%esp
+80103424:	52                   	push   %edx
+80103425:	50                   	push   %eax
+80103426:	e8 8b cd ff ff       	call   801001b6 <bread>
+8010342b:	83 c4 10             	add    $0x10,%esp
+8010342e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  struct logheader *hb = (struct logheader *) (buf->data);
+80103431:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103434:	83 c0 18             	add    $0x18,%eax
+80103437:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  int i;
+  hb->n = log.lh.n;
+8010343a:	8b 15 a8 22 11 80    	mov    0x801122a8,%edx
+80103440:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80103443:	89 10                	mov    %edx,(%eax)
+  for (i = 0; i < log.lh.n; i++) {
+80103445:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+8010344c:	eb 1b                	jmp    80103469 <write_head+0x5a>
+    hb->sector[i] = log.lh.sector[i];
+8010344e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103451:	83 c0 10             	add    $0x10,%eax
+80103454:	8b 0c 85 6c 22 11 80 	mov    -0x7feedd94(,%eax,4),%ecx
+8010345b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010345e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80103461:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+80103465:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80103469:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+8010346e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80103471:	7f db                	jg     8010344e <write_head+0x3f>
+    hb->sector[i] = log.lh.sector[i];
+  }
+  bwrite(buf);
+80103473:	83 ec 0c             	sub    $0xc,%esp
+80103476:	ff 75 f0             	pushl  -0x10(%ebp)
+80103479:	e8 71 cd ff ff       	call   801001ef <bwrite>
+8010347e:	83 c4 10             	add    $0x10,%esp
+  brelse(buf);
+80103481:	83 ec 0c             	sub    $0xc,%esp
+80103484:	ff 75 f0             	pushl  -0x10(%ebp)
+80103487:	e8 a2 cd ff ff       	call   8010022e <brelse>
+8010348c:	83 c4 10             	add    $0x10,%esp
+}
+8010348f:	90                   	nop
+80103490:	c9                   	leave  
+80103491:	c3                   	ret    
+
+80103492 <recover_from_log>:
+
+static void
+recover_from_log(void)
+{
+80103492:	55                   	push   %ebp
+80103493:	89 e5                	mov    %esp,%ebp
+80103495:	83 ec 08             	sub    $0x8,%esp
+  read_head();      
+80103498:	e8 fe fe ff ff       	call   8010339b <read_head>
+  install_trans(); // if committed, copy from log to disk
+8010349d:	e8 41 fe ff ff       	call   801032e3 <install_trans>
+  log.lh.n = 0;
+801034a2:	c7 05 a8 22 11 80 00 	movl   $0x0,0x801122a8
+801034a9:	00 00 00 
+  write_head(); // clear the log
+801034ac:	e8 5e ff ff ff       	call   8010340f <write_head>
+}
+801034b1:	90                   	nop
+801034b2:	c9                   	leave  
+801034b3:	c3                   	ret    
+
+801034b4 <begin_op>:
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+801034b4:	55                   	push   %ebp
+801034b5:	89 e5                	mov    %esp,%ebp
+801034b7:	83 ec 08             	sub    $0x8,%esp
+  acquire(&log.lock);
+801034ba:	83 ec 0c             	sub    $0xc,%esp
+801034bd:	68 60 22 11 80       	push   $0x80112260
+801034c2:	e8 8f 1a 00 00       	call   80104f56 <acquire>
+801034c7:	83 c4 10             	add    $0x10,%esp
+  while(1){
+    if(log.committing){
+801034ca:	a1 a0 22 11 80       	mov    0x801122a0,%eax
+801034cf:	85 c0                	test   %eax,%eax
+801034d1:	74 17                	je     801034ea <begin_op+0x36>
+      sleep(&log, &log.lock);
+801034d3:	83 ec 08             	sub    $0x8,%esp
+801034d6:	68 60 22 11 80       	push   $0x80112260
+801034db:	68 60 22 11 80       	push   $0x80112260
+801034e0:	e8 78 17 00 00       	call   80104c5d <sleep>
+801034e5:	83 c4 10             	add    $0x10,%esp
+801034e8:	eb e0                	jmp    801034ca <begin_op+0x16>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+801034ea:	8b 0d a8 22 11 80    	mov    0x801122a8,%ecx
+801034f0:	a1 9c 22 11 80       	mov    0x8011229c,%eax
+801034f5:	8d 50 01             	lea    0x1(%eax),%edx
+801034f8:	89 d0                	mov    %edx,%eax
+801034fa:	c1 e0 02             	shl    $0x2,%eax
+801034fd:	01 d0                	add    %edx,%eax
+801034ff:	01 c0                	add    %eax,%eax
+80103501:	01 c8                	add    %ecx,%eax
+80103503:	83 f8 1e             	cmp    $0x1e,%eax
+80103506:	7e 17                	jle    8010351f <begin_op+0x6b>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+80103508:	83 ec 08             	sub    $0x8,%esp
+8010350b:	68 60 22 11 80       	push   $0x80112260
+80103510:	68 60 22 11 80       	push   $0x80112260
+80103515:	e8 43 17 00 00       	call   80104c5d <sleep>
+8010351a:	83 c4 10             	add    $0x10,%esp
+8010351d:	eb ab                	jmp    801034ca <begin_op+0x16>
+    } else {
+      log.outstanding += 1;
+8010351f:	a1 9c 22 11 80       	mov    0x8011229c,%eax
+80103524:	83 c0 01             	add    $0x1,%eax
+80103527:	a3 9c 22 11 80       	mov    %eax,0x8011229c
+      release(&log.lock);
+8010352c:	83 ec 0c             	sub    $0xc,%esp
+8010352f:	68 60 22 11 80       	push   $0x80112260
+80103534:	e8 84 1a 00 00       	call   80104fbd <release>
+80103539:	83 c4 10             	add    $0x10,%esp
+      break;
+8010353c:	90                   	nop
+    }
+  }
+}
+8010353d:	90                   	nop
+8010353e:	c9                   	leave  
+8010353f:	c3                   	ret    
+
+80103540 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+80103540:	55                   	push   %ebp
+80103541:	89 e5                	mov    %esp,%ebp
+80103543:	83 ec 18             	sub    $0x18,%esp
+  int do_commit = 0;
+80103546:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+  acquire(&log.lock);
+8010354d:	83 ec 0c             	sub    $0xc,%esp
+80103550:	68 60 22 11 80       	push   $0x80112260
+80103555:	e8 fc 19 00 00       	call   80104f56 <acquire>
+8010355a:	83 c4 10             	add    $0x10,%esp
+  log.outstanding -= 1;
+8010355d:	a1 9c 22 11 80       	mov    0x8011229c,%eax
+80103562:	83 e8 01             	sub    $0x1,%eax
+80103565:	a3 9c 22 11 80       	mov    %eax,0x8011229c
+  if(log.committing)
+8010356a:	a1 a0 22 11 80       	mov    0x801122a0,%eax
+8010356f:	85 c0                	test   %eax,%eax
+80103571:	74 0d                	je     80103580 <end_op+0x40>
+    panic("log.committing");
+80103573:	83 ec 0c             	sub    $0xc,%esp
+80103576:	68 f0 86 10 80       	push   $0x801086f0
+8010357b:	e8 e6 cf ff ff       	call   80100566 <panic>
+  if(log.outstanding == 0){
+80103580:	a1 9c 22 11 80       	mov    0x8011229c,%eax
+80103585:	85 c0                	test   %eax,%eax
+80103587:	75 13                	jne    8010359c <end_op+0x5c>
+    do_commit = 1;
+80103589:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+    log.committing = 1;
+80103590:	c7 05 a0 22 11 80 01 	movl   $0x1,0x801122a0
+80103597:	00 00 00 
+8010359a:	eb 10                	jmp    801035ac <end_op+0x6c>
+  } else {
+    // begin_op() may be waiting for log space.
+    wakeup(&log);
+8010359c:	83 ec 0c             	sub    $0xc,%esp
+8010359f:	68 60 22 11 80       	push   $0x80112260
+801035a4:	e8 9f 17 00 00       	call   80104d48 <wakeup>
+801035a9:	83 c4 10             	add    $0x10,%esp
+  }
+  release(&log.lock);
+801035ac:	83 ec 0c             	sub    $0xc,%esp
+801035af:	68 60 22 11 80       	push   $0x80112260
+801035b4:	e8 04 1a 00 00       	call   80104fbd <release>
+801035b9:	83 c4 10             	add    $0x10,%esp
+
+  if(do_commit){
+801035bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801035c0:	74 3f                	je     80103601 <end_op+0xc1>
+    // call commit w/o holding locks, since not allowed
+    // to sleep with locks.
+    commit();
+801035c2:	e8 f5 00 00 00       	call   801036bc <commit>
+    acquire(&log.lock);
+801035c7:	83 ec 0c             	sub    $0xc,%esp
+801035ca:	68 60 22 11 80       	push   $0x80112260
+801035cf:	e8 82 19 00 00       	call   80104f56 <acquire>
+801035d4:	83 c4 10             	add    $0x10,%esp
+    log.committing = 0;
+801035d7:	c7 05 a0 22 11 80 00 	movl   $0x0,0x801122a0
+801035de:	00 00 00 
+    wakeup(&log);
+801035e1:	83 ec 0c             	sub    $0xc,%esp
+801035e4:	68 60 22 11 80       	push   $0x80112260
+801035e9:	e8 5a 17 00 00       	call   80104d48 <wakeup>
+801035ee:	83 c4 10             	add    $0x10,%esp
+    release(&log.lock);
+801035f1:	83 ec 0c             	sub    $0xc,%esp
+801035f4:	68 60 22 11 80       	push   $0x80112260
+801035f9:	e8 bf 19 00 00       	call   80104fbd <release>
+801035fe:	83 c4 10             	add    $0x10,%esp
+  }
+}
+80103601:	90                   	nop
+80103602:	c9                   	leave  
+80103603:	c3                   	ret    
+
+80103604 <write_log>:
+
+// Copy modified blocks from cache to log.
+static void 
+write_log(void)
+{
+80103604:	55                   	push   %ebp
+80103605:	89 e5                	mov    %esp,%ebp
+80103607:	83 ec 18             	sub    $0x18,%esp
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+8010360a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80103611:	e9 95 00 00 00       	jmp    801036ab <write_log+0xa7>
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+80103616:	8b 15 94 22 11 80    	mov    0x80112294,%edx
+8010361c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010361f:	01 d0                	add    %edx,%eax
+80103621:	83 c0 01             	add    $0x1,%eax
+80103624:	89 c2                	mov    %eax,%edx
+80103626:	a1 a4 22 11 80       	mov    0x801122a4,%eax
+8010362b:	83 ec 08             	sub    $0x8,%esp
+8010362e:	52                   	push   %edx
+8010362f:	50                   	push   %eax
+80103630:	e8 81 cb ff ff       	call   801001b6 <bread>
+80103635:	83 c4 10             	add    $0x10,%esp
+80103638:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    struct buf *from = bread(log.dev, log.lh.sector[tail]); // cache block
+8010363b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010363e:	83 c0 10             	add    $0x10,%eax
+80103641:	8b 04 85 6c 22 11 80 	mov    -0x7feedd94(,%eax,4),%eax
+80103648:	89 c2                	mov    %eax,%edx
+8010364a:	a1 a4 22 11 80       	mov    0x801122a4,%eax
+8010364f:	83 ec 08             	sub    $0x8,%esp
+80103652:	52                   	push   %edx
+80103653:	50                   	push   %eax
+80103654:	e8 5d cb ff ff       	call   801001b6 <bread>
+80103659:	83 c4 10             	add    $0x10,%esp
+8010365c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    memmove(to->data, from->data, BSIZE);
+8010365f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80103662:	8d 50 18             	lea    0x18(%eax),%edx
+80103665:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103668:	83 c0 18             	add    $0x18,%eax
+8010366b:	83 ec 04             	sub    $0x4,%esp
+8010366e:	68 00 02 00 00       	push   $0x200
+80103673:	52                   	push   %edx
+80103674:	50                   	push   %eax
+80103675:	e8 fe 1b 00 00       	call   80105278 <memmove>
+8010367a:	83 c4 10             	add    $0x10,%esp
+    bwrite(to);  // write the log
+8010367d:	83 ec 0c             	sub    $0xc,%esp
+80103680:	ff 75 f0             	pushl  -0x10(%ebp)
+80103683:	e8 67 cb ff ff       	call   801001ef <bwrite>
+80103688:	83 c4 10             	add    $0x10,%esp
+    brelse(from); 
+8010368b:	83 ec 0c             	sub    $0xc,%esp
+8010368e:	ff 75 ec             	pushl  -0x14(%ebp)
+80103691:	e8 98 cb ff ff       	call   8010022e <brelse>
+80103696:	83 c4 10             	add    $0x10,%esp
+    brelse(to);
+80103699:	83 ec 0c             	sub    $0xc,%esp
+8010369c:	ff 75 f0             	pushl  -0x10(%ebp)
+8010369f:	e8 8a cb ff ff       	call   8010022e <brelse>
+801036a4:	83 c4 10             	add    $0x10,%esp
+static void 
+write_log(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+801036a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+801036ab:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+801036b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801036b3:	0f 8f 5d ff ff ff    	jg     80103616 <write_log+0x12>
+    memmove(to->data, from->data, BSIZE);
+    bwrite(to);  // write the log
+    brelse(from); 
+    brelse(to);
+  }
+}
+801036b9:	90                   	nop
+801036ba:	c9                   	leave  
+801036bb:	c3                   	ret    
+
+801036bc <commit>:
+
+static void
+commit()
+{
+801036bc:	55                   	push   %ebp
+801036bd:	89 e5                	mov    %esp,%ebp
+801036bf:	83 ec 08             	sub    $0x8,%esp
+  if (log.lh.n > 0) {
+801036c2:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+801036c7:	85 c0                	test   %eax,%eax
+801036c9:	7e 1e                	jle    801036e9 <commit+0x2d>
+    write_log();     // Write modified blocks from cache to log
+801036cb:	e8 34 ff ff ff       	call   80103604 <write_log>
+    write_head();    // Write header to disk -- the real commit
+801036d0:	e8 3a fd ff ff       	call   8010340f <write_head>
+    install_trans(); // Now install writes to home locations
+801036d5:	e8 09 fc ff ff       	call   801032e3 <install_trans>
+    log.lh.n = 0; 
+801036da:	c7 05 a8 22 11 80 00 	movl   $0x0,0x801122a8
+801036e1:	00 00 00 
+    write_head();    // Erase the transaction from the log
+801036e4:	e8 26 fd ff ff       	call   8010340f <write_head>
+  }
+}
+801036e9:	90                   	nop
+801036ea:	c9                   	leave  
+801036eb:	c3                   	ret    
+
+801036ec <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+801036ec:	55                   	push   %ebp
+801036ed:	89 e5                	mov    %esp,%ebp
+801036ef:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+801036f2:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+801036f7:	83 f8 1d             	cmp    $0x1d,%eax
+801036fa:	7f 12                	jg     8010370e <log_write+0x22>
+801036fc:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+80103701:	8b 15 98 22 11 80    	mov    0x80112298,%edx
+80103707:	83 ea 01             	sub    $0x1,%edx
+8010370a:	39 d0                	cmp    %edx,%eax
+8010370c:	7c 0d                	jl     8010371b <log_write+0x2f>
+    panic("too big a transaction");
+8010370e:	83 ec 0c             	sub    $0xc,%esp
+80103711:	68 ff 86 10 80       	push   $0x801086ff
+80103716:	e8 4b ce ff ff       	call   80100566 <panic>
+  if (log.outstanding < 1)
+8010371b:	a1 9c 22 11 80       	mov    0x8011229c,%eax
+80103720:	85 c0                	test   %eax,%eax
+80103722:	7f 0d                	jg     80103731 <log_write+0x45>
+    panic("log_write outside of trans");
+80103724:	83 ec 0c             	sub    $0xc,%esp
+80103727:	68 15 87 10 80       	push   $0x80108715
+8010372c:	e8 35 ce ff ff       	call   80100566 <panic>
+
+  acquire(&log.lock);
+80103731:	83 ec 0c             	sub    $0xc,%esp
+80103734:	68 60 22 11 80       	push   $0x80112260
+80103739:	e8 18 18 00 00       	call   80104f56 <acquire>
+8010373e:	83 c4 10             	add    $0x10,%esp
+  for (i = 0; i < log.lh.n; i++) {
+80103741:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80103748:	eb 1d                	jmp    80103767 <log_write+0x7b>
+    if (log.lh.sector[i] == b->sector)   // log absorbtion
+8010374a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010374d:	83 c0 10             	add    $0x10,%eax
+80103750:	8b 04 85 6c 22 11 80 	mov    -0x7feedd94(,%eax,4),%eax
+80103757:	89 c2                	mov    %eax,%edx
+80103759:	8b 45 08             	mov    0x8(%ebp),%eax
+8010375c:	8b 40 08             	mov    0x8(%eax),%eax
+8010375f:	39 c2                	cmp    %eax,%edx
+80103761:	74 10                	je     80103773 <log_write+0x87>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+  for (i = 0; i < log.lh.n; i++) {
+80103763:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80103767:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+8010376c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010376f:	7f d9                	jg     8010374a <log_write+0x5e>
+80103771:	eb 01                	jmp    80103774 <log_write+0x88>
+    if (log.lh.sector[i] == b->sector)   // log absorbtion
+      break;
+80103773:	90                   	nop
+  }
+  log.lh.sector[i] = b->sector;
+80103774:	8b 45 08             	mov    0x8(%ebp),%eax
+80103777:	8b 40 08             	mov    0x8(%eax),%eax
+8010377a:	89 c2                	mov    %eax,%edx
+8010377c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010377f:	83 c0 10             	add    $0x10,%eax
+80103782:	89 14 85 6c 22 11 80 	mov    %edx,-0x7feedd94(,%eax,4)
+  if (i == log.lh.n)
+80103789:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+8010378e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80103791:	75 0d                	jne    801037a0 <log_write+0xb4>
+    log.lh.n++;
+80103793:	a1 a8 22 11 80       	mov    0x801122a8,%eax
+80103798:	83 c0 01             	add    $0x1,%eax
+8010379b:	a3 a8 22 11 80       	mov    %eax,0x801122a8
+  b->flags |= B_DIRTY; // prevent eviction
+801037a0:	8b 45 08             	mov    0x8(%ebp),%eax
+801037a3:	8b 00                	mov    (%eax),%eax
+801037a5:	83 c8 04             	or     $0x4,%eax
+801037a8:	89 c2                	mov    %eax,%edx
+801037aa:	8b 45 08             	mov    0x8(%ebp),%eax
+801037ad:	89 10                	mov    %edx,(%eax)
+  release(&log.lock);
+801037af:	83 ec 0c             	sub    $0xc,%esp
+801037b2:	68 60 22 11 80       	push   $0x80112260
+801037b7:	e8 01 18 00 00       	call   80104fbd <release>
+801037bc:	83 c4 10             	add    $0x10,%esp
+}
+801037bf:	90                   	nop
+801037c0:	c9                   	leave  
+801037c1:	c3                   	ret    
+
+801037c2 <v2p>:
+801037c2:	55                   	push   %ebp
+801037c3:	89 e5                	mov    %esp,%ebp
+801037c5:	8b 45 08             	mov    0x8(%ebp),%eax
+801037c8:	05 00 00 00 80       	add    $0x80000000,%eax
+801037cd:	5d                   	pop    %ebp
+801037ce:	c3                   	ret    
+
+801037cf <p2v>:
+static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
+801037cf:	55                   	push   %ebp
+801037d0:	89 e5                	mov    %esp,%ebp
+801037d2:	8b 45 08             	mov    0x8(%ebp),%eax
+801037d5:	05 00 00 00 80       	add    $0x80000000,%eax
+801037da:	5d                   	pop    %ebp
+801037db:	c3                   	ret    
+
+801037dc <xchg>:
+  asm volatile("sti");
+}
+
+static inline uint
+xchg(volatile uint *addr, uint newval)
+{
+801037dc:	55                   	push   %ebp
+801037dd:	89 e5                	mov    %esp,%ebp
+801037df:	83 ec 10             	sub    $0x10,%esp
+  uint result;
+  
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+801037e2:	8b 55 08             	mov    0x8(%ebp),%edx
+801037e5:	8b 45 0c             	mov    0xc(%ebp),%eax
+801037e8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801037eb:	f0 87 02             	lock xchg %eax,(%edx)
+801037ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
+               "+m" (*addr), "=a" (result) :
+               "1" (newval) :
+               "cc");
+  return result;
+801037f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+801037f4:	c9                   	leave  
+801037f5:	c3                   	ret    
+
+801037f6 <main>:
+// Bootstrap processor starts running C code here.
+// Allocate a real stack and switch to it, first
+// doing some setup required for memory allocator to work.
+int
+main(void)
+{
+801037f6:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+801037fa:	83 e4 f0             	and    $0xfffffff0,%esp
+801037fd:	ff 71 fc             	pushl  -0x4(%ecx)
+80103800:	55                   	push   %ebp
+80103801:	89 e5                	mov    %esp,%ebp
+80103803:	51                   	push   %ecx
+80103804:	83 ec 04             	sub    $0x4,%esp
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+80103807:	83 ec 08             	sub    $0x8,%esp
+8010380a:	68 00 00 40 80       	push   $0x80400000
+8010380f:	68 3c 52 11 80       	push   $0x8011523c
+80103814:	e8 75 f2 ff ff       	call   80102a8e <kinit1>
+80103819:	83 c4 10             	add    $0x10,%esp
+  kvmalloc();      // kernel page table
+8010381c:	e8 50 45 00 00       	call   80107d71 <kvmalloc>
+  mpinit();        // collect info about this machine
+80103821:	e8 48 04 00 00       	call   80103c6e <mpinit>
+  lapicinit();
+80103826:	e8 e2 f5 ff ff       	call   80102e0d <lapicinit>
+  seginit();       // set up segments
+8010382b:	e8 ea 3e 00 00       	call   8010771a <seginit>
+  cprintf("\ncpu%d: starting xv6\n\n", cpu->id);
+80103830:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80103836:	0f b6 00             	movzbl (%eax),%eax
+80103839:	0f b6 c0             	movzbl %al,%eax
+8010383c:	83 ec 08             	sub    $0x8,%esp
+8010383f:	50                   	push   %eax
+80103840:	68 30 87 10 80       	push   $0x80108730
+80103845:	e8 7c cb ff ff       	call   801003c6 <cprintf>
+8010384a:	83 c4 10             	add    $0x10,%esp
+  picinit();       // interrupt controller
+8010384d:	e8 72 06 00 00       	call   80103ec4 <picinit>
+  ioapicinit();    // another interrupt controller
+80103852:	e8 2c f1 ff ff       	call   80102983 <ioapicinit>
+  consoleinit();   // I/O devices & their interrupts
+80103857:	e8 8d d2 ff ff       	call   80100ae9 <consoleinit>
+  uartinit();      // serial port
+8010385c:	e8 15 32 00 00       	call   80106a76 <uartinit>
+  pinit();         // process table
+80103861:	e8 5b 0b 00 00       	call   801043c1 <pinit>
+  tvinit();        // trap vectors
+80103866:	e8 90 2d 00 00       	call   801065fb <tvinit>
+  binit();         // buffer cache
+8010386b:	e8 c4 c7 ff ff       	call   80100034 <binit>
+  fileinit();      // file table
+80103870:	e8 e5 d6 ff ff       	call   80100f5a <fileinit>
+  iinit();         // inode cache
+80103875:	e8 be dd ff ff       	call   80101638 <iinit>
+  ideinit();       // disk
+8010387a:	e8 48 ed ff ff       	call   801025c7 <ideinit>
+  if(!ismp)
+8010387f:	a1 44 23 11 80       	mov    0x80112344,%eax
+80103884:	85 c0                	test   %eax,%eax
+80103886:	75 05                	jne    8010388d <main+0x97>
+    timerinit();   // uniprocessor timer
+80103888:	e8 cb 2c 00 00       	call   80106558 <timerinit>
+  startothers();   // start other processors
+8010388d:	e8 7f 00 00 00       	call   80103911 <startothers>
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+80103892:	83 ec 08             	sub    $0x8,%esp
+80103895:	68 00 00 00 8e       	push   $0x8e000000
+8010389a:	68 00 00 40 80       	push   $0x80400000
+8010389f:	e8 23 f2 ff ff       	call   80102ac7 <kinit2>
+801038a4:	83 c4 10             	add    $0x10,%esp
+  userinit();      // first user process
+801038a7:	e8 39 0c 00 00       	call   801044e5 <userinit>
+  // Finish setting up this processor in mpmain.
+  mpmain();
+801038ac:	e8 1a 00 00 00       	call   801038cb <mpmain>
+
+801038b1 <mpenter>:
+}
+
+// Other CPUs jump here from entryother.S.
+static void
+mpenter(void)
+{
+801038b1:	55                   	push   %ebp
+801038b2:	89 e5                	mov    %esp,%ebp
+801038b4:	83 ec 08             	sub    $0x8,%esp
+  switchkvm(); 
+801038b7:	e8 cd 44 00 00       	call   80107d89 <switchkvm>
+  seginit();
+801038bc:	e8 59 3e 00 00       	call   8010771a <seginit>
+  lapicinit();
+801038c1:	e8 47 f5 ff ff       	call   80102e0d <lapicinit>
+  mpmain();
+801038c6:	e8 00 00 00 00       	call   801038cb <mpmain>
+
+801038cb <mpmain>:
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+801038cb:	55                   	push   %ebp
+801038cc:	89 e5                	mov    %esp,%ebp
+801038ce:	83 ec 08             	sub    $0x8,%esp
+  cprintf("cpu%d: starting\n", cpu->id);
+801038d1:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+801038d7:	0f b6 00             	movzbl (%eax),%eax
+801038da:	0f b6 c0             	movzbl %al,%eax
+801038dd:	83 ec 08             	sub    $0x8,%esp
+801038e0:	50                   	push   %eax
+801038e1:	68 47 87 10 80       	push   $0x80108747
+801038e6:	e8 db ca ff ff       	call   801003c6 <cprintf>
+801038eb:	83 c4 10             	add    $0x10,%esp
+  idtinit();       // load idt register
+801038ee:	e8 7e 2e 00 00       	call   80106771 <idtinit>
+  xchg(&cpu->started, 1); // tell startothers() we're up
+801038f3:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+801038f9:	05 a8 00 00 00       	add    $0xa8,%eax
+801038fe:	83 ec 08             	sub    $0x8,%esp
+80103901:	6a 01                	push   $0x1
+80103903:	50                   	push   %eax
+80103904:	e8 d3 fe ff ff       	call   801037dc <xchg>
+80103909:	83 c4 10             	add    $0x10,%esp
+  scheduler();     // start running processes
+8010390c:	e8 7f 11 00 00       	call   80104a90 <scheduler>
+
+80103911 <startothers>:
+pde_t entrypgdir[];  // For entry.S
+
+// Start the non-boot (AP) processors.
+static void
+startothers(void)
+{
+80103911:	55                   	push   %ebp
+80103912:	89 e5                	mov    %esp,%ebp
+80103914:	53                   	push   %ebx
+80103915:	83 ec 14             	sub    $0x14,%esp
+  char *stack;
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = p2v(0x7000);
+80103918:	68 00 70 00 00       	push   $0x7000
+8010391d:	e8 ad fe ff ff       	call   801037cf <p2v>
+80103922:	83 c4 04             	add    $0x4,%esp
+80103925:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+80103928:	b8 8a 00 00 00       	mov    $0x8a,%eax
+8010392d:	83 ec 04             	sub    $0x4,%esp
+80103930:	50                   	push   %eax
+80103931:	68 0c b5 10 80       	push   $0x8010b50c
+80103936:	ff 75 f0             	pushl  -0x10(%ebp)
+80103939:	e8 3a 19 00 00       	call   80105278 <memmove>
+8010393e:	83 c4 10             	add    $0x10,%esp
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80103941:	c7 45 f4 60 23 11 80 	movl   $0x80112360,-0xc(%ebp)
+80103948:	e9 90 00 00 00       	jmp    801039dd <startothers+0xcc>
+    if(c == cpus+cpunum())  // We've started already.
+8010394d:	e8 d9 f5 ff ff       	call   80102f2b <cpunum>
+80103952:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
+80103958:	05 60 23 11 80       	add    $0x80112360,%eax
+8010395d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80103960:	74 73                	je     801039d5 <startothers+0xc4>
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what 
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+80103962:	e8 5e f2 ff ff       	call   80102bc5 <kalloc>
+80103967:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    *(void**)(code-4) = stack + KSTACKSIZE;
+8010396a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010396d:	83 e8 04             	sub    $0x4,%eax
+80103970:	8b 55 ec             	mov    -0x14(%ebp),%edx
+80103973:	81 c2 00 10 00 00    	add    $0x1000,%edx
+80103979:	89 10                	mov    %edx,(%eax)
+    *(void**)(code-8) = mpenter;
+8010397b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010397e:	83 e8 08             	sub    $0x8,%eax
+80103981:	c7 00 b1 38 10 80    	movl   $0x801038b1,(%eax)
+    *(int**)(code-12) = (void *) v2p(entrypgdir);
+80103987:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010398a:	8d 58 f4             	lea    -0xc(%eax),%ebx
+8010398d:	83 ec 0c             	sub    $0xc,%esp
+80103990:	68 00 a0 10 80       	push   $0x8010a000
+80103995:	e8 28 fe ff ff       	call   801037c2 <v2p>
+8010399a:	83 c4 10             	add    $0x10,%esp
+8010399d:	89 03                	mov    %eax,(%ebx)
+
+    lapicstartap(c->id, v2p(code));
+8010399f:	83 ec 0c             	sub    $0xc,%esp
+801039a2:	ff 75 f0             	pushl  -0x10(%ebp)
+801039a5:	e8 18 fe ff ff       	call   801037c2 <v2p>
+801039aa:	83 c4 10             	add    $0x10,%esp
+801039ad:	89 c2                	mov    %eax,%edx
+801039af:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801039b2:	0f b6 00             	movzbl (%eax),%eax
+801039b5:	0f b6 c0             	movzbl %al,%eax
+801039b8:	83 ec 08             	sub    $0x8,%esp
+801039bb:	52                   	push   %edx
+801039bc:	50                   	push   %eax
+801039bd:	e8 e3 f5 ff ff       	call   80102fa5 <lapicstartap>
+801039c2:	83 c4 10             	add    $0x10,%esp
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+801039c5:	90                   	nop
+801039c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801039c9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+801039cf:	85 c0                	test   %eax,%eax
+801039d1:	74 f3                	je     801039c6 <startothers+0xb5>
+801039d3:	eb 01                	jmp    801039d6 <startothers+0xc5>
+  code = p2v(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+
+  for(c = cpus; c < cpus+ncpu; c++){
+    if(c == cpus+cpunum())  // We've started already.
+      continue;
+801039d5:	90                   	nop
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = p2v(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+
+  for(c = cpus; c < cpus+ncpu; c++){
+801039d6:	81 45 f4 bc 00 00 00 	addl   $0xbc,-0xc(%ebp)
+801039dd:	a1 40 29 11 80       	mov    0x80112940,%eax
+801039e2:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
+801039e8:	05 60 23 11 80       	add    $0x80112360,%eax
+801039ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801039f0:	0f 87 57 ff ff ff    	ja     8010394d <startothers+0x3c>
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+      ;
+  }
+}
+801039f6:	90                   	nop
+801039f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801039fa:	c9                   	leave  
+801039fb:	c3                   	ret    
+
+801039fc <p2v>:
+801039fc:	55                   	push   %ebp
+801039fd:	89 e5                	mov    %esp,%ebp
+801039ff:	8b 45 08             	mov    0x8(%ebp),%eax
+80103a02:	05 00 00 00 80       	add    $0x80000000,%eax
+80103a07:	5d                   	pop    %ebp
+80103a08:	c3                   	ret    
+
+80103a09 <inb>:
+// Routines to let C code use special x86 instructions.
+
+static inline uchar
+inb(ushort port)
+{
+80103a09:	55                   	push   %ebp
+80103a0a:	89 e5                	mov    %esp,%ebp
+80103a0c:	83 ec 14             	sub    $0x14,%esp
+80103a0f:	8b 45 08             	mov    0x8(%ebp),%eax
+80103a12:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103a16:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+80103a1a:	89 c2                	mov    %eax,%edx
+80103a1c:	ec                   	in     (%dx),%al
+80103a1d:	88 45 ff             	mov    %al,-0x1(%ebp)
+  return data;
+80103a20:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
+}
+80103a24:	c9                   	leave  
+80103a25:	c3                   	ret    
+
+80103a26 <outb>:
+               "memory", "cc");
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+80103a26:	55                   	push   %ebp
+80103a27:	89 e5                	mov    %esp,%ebp
+80103a29:	83 ec 08             	sub    $0x8,%esp
+80103a2c:	8b 55 08             	mov    0x8(%ebp),%edx
+80103a2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103a32:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
+80103a36:	88 45 f8             	mov    %al,-0x8(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103a39:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
+80103a3d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+80103a41:	ee                   	out    %al,(%dx)
+}
+80103a42:	90                   	nop
+80103a43:	c9                   	leave  
+80103a44:	c3                   	ret    
+
+80103a45 <mpbcpu>:
+int ncpu;
+uchar ioapicid;
+
+int
+mpbcpu(void)
+{
+80103a45:	55                   	push   %ebp
+80103a46:	89 e5                	mov    %esp,%ebp
+  return bcpu-cpus;
+80103a48:	a1 44 b6 10 80       	mov    0x8010b644,%eax
+80103a4d:	89 c2                	mov    %eax,%edx
+80103a4f:	b8 60 23 11 80       	mov    $0x80112360,%eax
+80103a54:	29 c2                	sub    %eax,%edx
+80103a56:	89 d0                	mov    %edx,%eax
+80103a58:	c1 f8 02             	sar    $0x2,%eax
+80103a5b:	69 c0 cf 46 7d 67    	imul   $0x677d46cf,%eax,%eax
+}
+80103a61:	5d                   	pop    %ebp
+80103a62:	c3                   	ret    
+
+80103a63 <sum>:
+
+static uchar
+sum(uchar *addr, int len)
+{
+80103a63:	55                   	push   %ebp
+80103a64:	89 e5                	mov    %esp,%ebp
+80103a66:	83 ec 10             	sub    $0x10,%esp
+  int i, sum;
+  
+  sum = 0;
+80103a69:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+  for(i=0; i<len; i++)
+80103a70:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+80103a77:	eb 15                	jmp    80103a8e <sum+0x2b>
+    sum += addr[i];
+80103a79:	8b 55 fc             	mov    -0x4(%ebp),%edx
+80103a7c:	8b 45 08             	mov    0x8(%ebp),%eax
+80103a7f:	01 d0                	add    %edx,%eax
+80103a81:	0f b6 00             	movzbl (%eax),%eax
+80103a84:	0f b6 c0             	movzbl %al,%eax
+80103a87:	01 45 f8             	add    %eax,-0x8(%ebp)
+sum(uchar *addr, int len)
+{
+  int i, sum;
+  
+  sum = 0;
+  for(i=0; i<len; i++)
+80103a8a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+80103a8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80103a91:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80103a94:	7c e3                	jl     80103a79 <sum+0x16>
+    sum += addr[i];
+  return sum;
+80103a96:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+80103a99:	c9                   	leave  
+80103a9a:	c3                   	ret    
+
+80103a9b <mpsearch1>:
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+80103a9b:	55                   	push   %ebp
+80103a9c:	89 e5                	mov    %esp,%ebp
+80103a9e:	83 ec 18             	sub    $0x18,%esp
+  uchar *e, *p, *addr;
+
+  addr = p2v(a);
+80103aa1:	ff 75 08             	pushl  0x8(%ebp)
+80103aa4:	e8 53 ff ff ff       	call   801039fc <p2v>
+80103aa9:	83 c4 04             	add    $0x4,%esp
+80103aac:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  e = addr+len;
+80103aaf:	8b 55 0c             	mov    0xc(%ebp),%edx
+80103ab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103ab5:	01 d0                	add    %edx,%eax
+80103ab7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  for(p = addr; p < e; p += sizeof(struct mp))
+80103aba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103abd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80103ac0:	eb 36                	jmp    80103af8 <mpsearch1+0x5d>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80103ac2:	83 ec 04             	sub    $0x4,%esp
+80103ac5:	6a 04                	push   $0x4
+80103ac7:	68 58 87 10 80       	push   $0x80108758
+80103acc:	ff 75 f4             	pushl  -0xc(%ebp)
+80103acf:	e8 4c 17 00 00       	call   80105220 <memcmp>
+80103ad4:	83 c4 10             	add    $0x10,%esp
+80103ad7:	85 c0                	test   %eax,%eax
+80103ad9:	75 19                	jne    80103af4 <mpsearch1+0x59>
+80103adb:	83 ec 08             	sub    $0x8,%esp
+80103ade:	6a 10                	push   $0x10
+80103ae0:	ff 75 f4             	pushl  -0xc(%ebp)
+80103ae3:	e8 7b ff ff ff       	call   80103a63 <sum>
+80103ae8:	83 c4 10             	add    $0x10,%esp
+80103aeb:	84 c0                	test   %al,%al
+80103aed:	75 05                	jne    80103af4 <mpsearch1+0x59>
+      return (struct mp*)p;
+80103aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103af2:	eb 11                	jmp    80103b05 <mpsearch1+0x6a>
+{
+  uchar *e, *p, *addr;
+
+  addr = p2v(a);
+  e = addr+len;
+  for(p = addr; p < e; p += sizeof(struct mp))
+80103af4:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
+80103af8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103afb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+80103afe:	72 c2                	jb     80103ac2 <mpsearch1+0x27>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+      return (struct mp*)p;
+  return 0;
+80103b00:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80103b05:	c9                   	leave  
+80103b06:	c3                   	ret    
+
+80103b07 <mpsearch>:
+// 1) in the first KB of the EBDA;
+// 2) in the last KB of system base memory;
+// 3) in the BIOS ROM between 0xE0000 and 0xFFFFF.
+static struct mp*
+mpsearch(void)
+{
+80103b07:	55                   	push   %ebp
+80103b08:	89 e5                	mov    %esp,%ebp
+80103b0a:	83 ec 18             	sub    $0x18,%esp
+  uchar *bda;
+  uint p;
+  struct mp *mp;
+
+  bda = (uchar *) P2V(0x400);
+80103b0d:	c7 45 f4 00 04 00 80 	movl   $0x80000400,-0xc(%ebp)
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+80103b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103b17:	83 c0 0f             	add    $0xf,%eax
+80103b1a:	0f b6 00             	movzbl (%eax),%eax
+80103b1d:	0f b6 c0             	movzbl %al,%eax
+80103b20:	c1 e0 08             	shl    $0x8,%eax
+80103b23:	89 c2                	mov    %eax,%edx
+80103b25:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103b28:	83 c0 0e             	add    $0xe,%eax
+80103b2b:	0f b6 00             	movzbl (%eax),%eax
+80103b2e:	0f b6 c0             	movzbl %al,%eax
+80103b31:	09 d0                	or     %edx,%eax
+80103b33:	c1 e0 04             	shl    $0x4,%eax
+80103b36:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80103b39:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80103b3d:	74 21                	je     80103b60 <mpsearch+0x59>
+    if((mp = mpsearch1(p, 1024)))
+80103b3f:	83 ec 08             	sub    $0x8,%esp
+80103b42:	68 00 04 00 00       	push   $0x400
+80103b47:	ff 75 f0             	pushl  -0x10(%ebp)
+80103b4a:	e8 4c ff ff ff       	call   80103a9b <mpsearch1>
+80103b4f:	83 c4 10             	add    $0x10,%esp
+80103b52:	89 45 ec             	mov    %eax,-0x14(%ebp)
+80103b55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+80103b59:	74 51                	je     80103bac <mpsearch+0xa5>
+      return mp;
+80103b5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80103b5e:	eb 61                	jmp    80103bc1 <mpsearch+0xba>
+  } else {
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+80103b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103b63:	83 c0 14             	add    $0x14,%eax
+80103b66:	0f b6 00             	movzbl (%eax),%eax
+80103b69:	0f b6 c0             	movzbl %al,%eax
+80103b6c:	c1 e0 08             	shl    $0x8,%eax
+80103b6f:	89 c2                	mov    %eax,%edx
+80103b71:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103b74:	83 c0 13             	add    $0x13,%eax
+80103b77:	0f b6 00             	movzbl (%eax),%eax
+80103b7a:	0f b6 c0             	movzbl %al,%eax
+80103b7d:	09 d0                	or     %edx,%eax
+80103b7f:	c1 e0 0a             	shl    $0xa,%eax
+80103b82:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if((mp = mpsearch1(p-1024, 1024)))
+80103b85:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103b88:	2d 00 04 00 00       	sub    $0x400,%eax
+80103b8d:	83 ec 08             	sub    $0x8,%esp
+80103b90:	68 00 04 00 00       	push   $0x400
+80103b95:	50                   	push   %eax
+80103b96:	e8 00 ff ff ff       	call   80103a9b <mpsearch1>
+80103b9b:	83 c4 10             	add    $0x10,%esp
+80103b9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+80103ba1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+80103ba5:	74 05                	je     80103bac <mpsearch+0xa5>
+      return mp;
+80103ba7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80103baa:	eb 15                	jmp    80103bc1 <mpsearch+0xba>
+  }
+  return mpsearch1(0xF0000, 0x10000);
+80103bac:	83 ec 08             	sub    $0x8,%esp
+80103baf:	68 00 00 01 00       	push   $0x10000
+80103bb4:	68 00 00 0f 00       	push   $0xf0000
+80103bb9:	e8 dd fe ff ff       	call   80103a9b <mpsearch1>
+80103bbe:	83 c4 10             	add    $0x10,%esp
+}
+80103bc1:	c9                   	leave  
+80103bc2:	c3                   	ret    
+
+80103bc3 <mpconfig>:
+// Check for correct signature, calculate the checksum and,
+// if correct, check the version.
+// To do: check extended table checksum.
+static struct mpconf*
+mpconfig(struct mp **pmp)
+{
+80103bc3:	55                   	push   %ebp
+80103bc4:	89 e5                	mov    %esp,%ebp
+80103bc6:	83 ec 18             	sub    $0x18,%esp
+  struct mpconf *conf;
+  struct mp *mp;
+
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103bc9:	e8 39 ff ff ff       	call   80103b07 <mpsearch>
+80103bce:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80103bd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80103bd5:	74 0a                	je     80103be1 <mpconfig+0x1e>
+80103bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103bda:	8b 40 04             	mov    0x4(%eax),%eax
+80103bdd:	85 c0                	test   %eax,%eax
+80103bdf:	75 0a                	jne    80103beb <mpconfig+0x28>
+    return 0;
+80103be1:	b8 00 00 00 00       	mov    $0x0,%eax
+80103be6:	e9 81 00 00 00       	jmp    80103c6c <mpconfig+0xa9>
+  conf = (struct mpconf*) p2v((uint) mp->physaddr);
+80103beb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103bee:	8b 40 04             	mov    0x4(%eax),%eax
+80103bf1:	83 ec 0c             	sub    $0xc,%esp
+80103bf4:	50                   	push   %eax
+80103bf5:	e8 02 fe ff ff       	call   801039fc <p2v>
+80103bfa:	83 c4 10             	add    $0x10,%esp
+80103bfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103c00:	83 ec 04             	sub    $0x4,%esp
+80103c03:	6a 04                	push   $0x4
+80103c05:	68 5d 87 10 80       	push   $0x8010875d
+80103c0a:	ff 75 f0             	pushl  -0x10(%ebp)
+80103c0d:	e8 0e 16 00 00       	call   80105220 <memcmp>
+80103c12:	83 c4 10             	add    $0x10,%esp
+80103c15:	85 c0                	test   %eax,%eax
+80103c17:	74 07                	je     80103c20 <mpconfig+0x5d>
+    return 0;
+80103c19:	b8 00 00 00 00       	mov    $0x0,%eax
+80103c1e:	eb 4c                	jmp    80103c6c <mpconfig+0xa9>
+  if(conf->version != 1 && conf->version != 4)
+80103c20:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103c23:	0f b6 40 06          	movzbl 0x6(%eax),%eax
+80103c27:	3c 01                	cmp    $0x1,%al
+80103c29:	74 12                	je     80103c3d <mpconfig+0x7a>
+80103c2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103c2e:	0f b6 40 06          	movzbl 0x6(%eax),%eax
+80103c32:	3c 04                	cmp    $0x4,%al
+80103c34:	74 07                	je     80103c3d <mpconfig+0x7a>
+    return 0;
+80103c36:	b8 00 00 00 00       	mov    $0x0,%eax
+80103c3b:	eb 2f                	jmp    80103c6c <mpconfig+0xa9>
+  if(sum((uchar*)conf, conf->length) != 0)
+80103c3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103c40:	0f b7 40 04          	movzwl 0x4(%eax),%eax
+80103c44:	0f b7 c0             	movzwl %ax,%eax
+80103c47:	83 ec 08             	sub    $0x8,%esp
+80103c4a:	50                   	push   %eax
+80103c4b:	ff 75 f0             	pushl  -0x10(%ebp)
+80103c4e:	e8 10 fe ff ff       	call   80103a63 <sum>
+80103c53:	83 c4 10             	add    $0x10,%esp
+80103c56:	84 c0                	test   %al,%al
+80103c58:	74 07                	je     80103c61 <mpconfig+0x9e>
+    return 0;
+80103c5a:	b8 00 00 00 00       	mov    $0x0,%eax
+80103c5f:	eb 0b                	jmp    80103c6c <mpconfig+0xa9>
+  *pmp = mp;
+80103c61:	8b 45 08             	mov    0x8(%ebp),%eax
+80103c64:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80103c67:	89 10                	mov    %edx,(%eax)
+  return conf;
+80103c69:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+80103c6c:	c9                   	leave  
+80103c6d:	c3                   	ret    
+
+80103c6e <mpinit>:
+
+void
+mpinit(void)
+{
+80103c6e:	55                   	push   %ebp
+80103c6f:	89 e5                	mov    %esp,%ebp
+80103c71:	83 ec 28             	sub    $0x28,%esp
+  struct mp *mp;
+  struct mpconf *conf;
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  bcpu = &cpus[0];
+80103c74:	c7 05 44 b6 10 80 60 	movl   $0x80112360,0x8010b644
+80103c7b:	23 11 80 
+  if((conf = mpconfig(&mp)) == 0)
+80103c7e:	83 ec 0c             	sub    $0xc,%esp
+80103c81:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80103c84:	50                   	push   %eax
+80103c85:	e8 39 ff ff ff       	call   80103bc3 <mpconfig>
+80103c8a:	83 c4 10             	add    $0x10,%esp
+80103c8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80103c90:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80103c94:	0f 84 96 01 00 00    	je     80103e30 <mpinit+0x1c2>
+    return;
+  ismp = 1;
+80103c9a:	c7 05 44 23 11 80 01 	movl   $0x1,0x80112344
+80103ca1:	00 00 00 
+  lapic = (uint*)conf->lapicaddr;
+80103ca4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103ca7:	8b 40 24             	mov    0x24(%eax),%eax
+80103caa:	a3 5c 22 11 80       	mov    %eax,0x8011225c
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103caf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103cb2:	83 c0 2c             	add    $0x2c,%eax
+80103cb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80103cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103cbb:	0f b7 40 04          	movzwl 0x4(%eax),%eax
+80103cbf:	0f b7 d0             	movzwl %ax,%edx
+80103cc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103cc5:	01 d0                	add    %edx,%eax
+80103cc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+80103cca:	e9 f2 00 00 00       	jmp    80103dc1 <mpinit+0x153>
+    switch(*p){
+80103ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103cd2:	0f b6 00             	movzbl (%eax),%eax
+80103cd5:	0f b6 c0             	movzbl %al,%eax
+80103cd8:	83 f8 04             	cmp    $0x4,%eax
+80103cdb:	0f 87 bc 00 00 00    	ja     80103d9d <mpinit+0x12f>
+80103ce1:	8b 04 85 a0 87 10 80 	mov    -0x7fef7860(,%eax,4),%eax
+80103ce8:	ff e0                	jmp    *%eax
+    case MPPROC:
+      proc = (struct mpproc*)p;
+80103cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103ced:	89 45 e8             	mov    %eax,-0x18(%ebp)
+      if(ncpu != proc->apicid){
+80103cf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80103cf3:	0f b6 40 01          	movzbl 0x1(%eax),%eax
+80103cf7:	0f b6 d0             	movzbl %al,%edx
+80103cfa:	a1 40 29 11 80       	mov    0x80112940,%eax
+80103cff:	39 c2                	cmp    %eax,%edx
+80103d01:	74 2b                	je     80103d2e <mpinit+0xc0>
+        cprintf("mpinit: ncpu=%d apicid=%d\n", ncpu, proc->apicid);
+80103d03:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80103d06:	0f b6 40 01          	movzbl 0x1(%eax),%eax
+80103d0a:	0f b6 d0             	movzbl %al,%edx
+80103d0d:	a1 40 29 11 80       	mov    0x80112940,%eax
+80103d12:	83 ec 04             	sub    $0x4,%esp
+80103d15:	52                   	push   %edx
+80103d16:	50                   	push   %eax
+80103d17:	68 62 87 10 80       	push   $0x80108762
+80103d1c:	e8 a5 c6 ff ff       	call   801003c6 <cprintf>
+80103d21:	83 c4 10             	add    $0x10,%esp
+        ismp = 0;
+80103d24:	c7 05 44 23 11 80 00 	movl   $0x0,0x80112344
+80103d2b:	00 00 00 
+      }
+      if(proc->flags & MPBOOT)
+80103d2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80103d31:	0f b6 40 03          	movzbl 0x3(%eax),%eax
+80103d35:	0f b6 c0             	movzbl %al,%eax
+80103d38:	83 e0 02             	and    $0x2,%eax
+80103d3b:	85 c0                	test   %eax,%eax
+80103d3d:	74 15                	je     80103d54 <mpinit+0xe6>
+        bcpu = &cpus[ncpu];
+80103d3f:	a1 40 29 11 80       	mov    0x80112940,%eax
+80103d44:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
+80103d4a:	05 60 23 11 80       	add    $0x80112360,%eax
+80103d4f:	a3 44 b6 10 80       	mov    %eax,0x8010b644
+      cpus[ncpu].id = ncpu;
+80103d54:	a1 40 29 11 80       	mov    0x80112940,%eax
+80103d59:	8b 15 40 29 11 80    	mov    0x80112940,%edx
+80103d5f:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
+80103d65:	05 60 23 11 80       	add    $0x80112360,%eax
+80103d6a:	88 10                	mov    %dl,(%eax)
+      ncpu++;
+80103d6c:	a1 40 29 11 80       	mov    0x80112940,%eax
+80103d71:	83 c0 01             	add    $0x1,%eax
+80103d74:	a3 40 29 11 80       	mov    %eax,0x80112940
+      p += sizeof(struct mpproc);
+80103d79:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
+      continue;
+80103d7d:	eb 42                	jmp    80103dc1 <mpinit+0x153>
+    case MPIOAPIC:
+      ioapic = (struct mpioapic*)p;
+80103d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103d82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+      ioapicid = ioapic->apicno;
+80103d85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103d88:	0f b6 40 01          	movzbl 0x1(%eax),%eax
+80103d8c:	a2 40 23 11 80       	mov    %al,0x80112340
+      p += sizeof(struct mpioapic);
+80103d91:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
+      continue;
+80103d95:	eb 2a                	jmp    80103dc1 <mpinit+0x153>
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+80103d97:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
+      continue;
+80103d9b:	eb 24                	jmp    80103dc1 <mpinit+0x153>
+    default:
+      cprintf("mpinit: unknown config type %x\n", *p);
+80103d9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103da0:	0f b6 00             	movzbl (%eax),%eax
+80103da3:	0f b6 c0             	movzbl %al,%eax
+80103da6:	83 ec 08             	sub    $0x8,%esp
+80103da9:	50                   	push   %eax
+80103daa:	68 80 87 10 80       	push   $0x80108780
+80103daf:	e8 12 c6 ff ff       	call   801003c6 <cprintf>
+80103db4:	83 c4 10             	add    $0x10,%esp
+      ismp = 0;
+80103db7:	c7 05 44 23 11 80 00 	movl   $0x0,0x80112344
+80103dbe:	00 00 00 
+  bcpu = &cpus[0];
+  if((conf = mpconfig(&mp)) == 0)
+    return;
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103dc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80103dc4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+80103dc7:	0f 82 02 ff ff ff    	jb     80103ccf <mpinit+0x61>
+    default:
+      cprintf("mpinit: unknown config type %x\n", *p);
+      ismp = 0;
+    }
+  }
+  if(!ismp){
+80103dcd:	a1 44 23 11 80       	mov    0x80112344,%eax
+80103dd2:	85 c0                	test   %eax,%eax
+80103dd4:	75 1d                	jne    80103df3 <mpinit+0x185>
+    // Didn't like what we found; fall back to no MP.
+    ncpu = 1;
+80103dd6:	c7 05 40 29 11 80 01 	movl   $0x1,0x80112940
+80103ddd:	00 00 00 
+    lapic = 0;
+80103de0:	c7 05 5c 22 11 80 00 	movl   $0x0,0x8011225c
+80103de7:	00 00 00 
+    ioapicid = 0;
+80103dea:	c6 05 40 23 11 80 00 	movb   $0x0,0x80112340
+    return;
+80103df1:	eb 3e                	jmp    80103e31 <mpinit+0x1c3>
+  }
+
+  if(mp->imcrp){
+80103df3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80103df6:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
+80103dfa:	84 c0                	test   %al,%al
+80103dfc:	74 33                	je     80103e31 <mpinit+0x1c3>
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+80103dfe:	83 ec 08             	sub    $0x8,%esp
+80103e01:	6a 70                	push   $0x70
+80103e03:	6a 22                	push   $0x22
+80103e05:	e8 1c fc ff ff       	call   80103a26 <outb>
+80103e0a:	83 c4 10             	add    $0x10,%esp
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+80103e0d:	83 ec 0c             	sub    $0xc,%esp
+80103e10:	6a 23                	push   $0x23
+80103e12:	e8 f2 fb ff ff       	call   80103a09 <inb>
+80103e17:	83 c4 10             	add    $0x10,%esp
+80103e1a:	83 c8 01             	or     $0x1,%eax
+80103e1d:	0f b6 c0             	movzbl %al,%eax
+80103e20:	83 ec 08             	sub    $0x8,%esp
+80103e23:	50                   	push   %eax
+80103e24:	6a 23                	push   $0x23
+80103e26:	e8 fb fb ff ff       	call   80103a26 <outb>
+80103e2b:	83 c4 10             	add    $0x10,%esp
+80103e2e:	eb 01                	jmp    80103e31 <mpinit+0x1c3>
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  bcpu = &cpus[0];
+  if((conf = mpconfig(&mp)) == 0)
+    return;
+80103e30:	90                   	nop
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+  }
+}
+80103e31:	c9                   	leave  
+80103e32:	c3                   	ret    
+
+80103e33 <outb>:
+               "memory", "cc");
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+80103e33:	55                   	push   %ebp
+80103e34:	89 e5                	mov    %esp,%ebp
+80103e36:	83 ec 08             	sub    $0x8,%esp
+80103e39:	8b 55 08             	mov    0x8(%ebp),%edx
+80103e3c:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103e3f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
+80103e43:	88 45 f8             	mov    %al,-0x8(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103e46:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
+80103e4a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+80103e4e:	ee                   	out    %al,(%dx)
+}
+80103e4f:	90                   	nop
+80103e50:	c9                   	leave  
+80103e51:	c3                   	ret    
+
+80103e52 <picsetmask>:
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);
+
+static void
+picsetmask(ushort mask)
+{
+80103e52:	55                   	push   %ebp
+80103e53:	89 e5                	mov    %esp,%ebp
+80103e55:	83 ec 04             	sub    $0x4,%esp
+80103e58:	8b 45 08             	mov    0x8(%ebp),%eax
+80103e5b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  irqmask = mask;
+80103e5f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+80103e63:	66 a3 00 b0 10 80    	mov    %ax,0x8010b000
+  outb(IO_PIC1+1, mask);
+80103e69:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+80103e6d:	0f b6 c0             	movzbl %al,%eax
+80103e70:	50                   	push   %eax
+80103e71:	6a 21                	push   $0x21
+80103e73:	e8 bb ff ff ff       	call   80103e33 <outb>
+80103e78:	83 c4 08             	add    $0x8,%esp
+  outb(IO_PIC2+1, mask >> 8);
+80103e7b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+80103e7f:	66 c1 e8 08          	shr    $0x8,%ax
+80103e83:	0f b6 c0             	movzbl %al,%eax
+80103e86:	50                   	push   %eax
+80103e87:	68 a1 00 00 00       	push   $0xa1
+80103e8c:	e8 a2 ff ff ff       	call   80103e33 <outb>
+80103e91:	83 c4 08             	add    $0x8,%esp
+}
+80103e94:	90                   	nop
+80103e95:	c9                   	leave  
+80103e96:	c3                   	ret    
+
+80103e97 <picenable>:
+
+void
+picenable(int irq)
+{
+80103e97:	55                   	push   %ebp
+80103e98:	89 e5                	mov    %esp,%ebp
+  picsetmask(irqmask & ~(1<<irq));
+80103e9a:	8b 45 08             	mov    0x8(%ebp),%eax
+80103e9d:	ba 01 00 00 00       	mov    $0x1,%edx
+80103ea2:	89 c1                	mov    %eax,%ecx
+80103ea4:	d3 e2                	shl    %cl,%edx
+80103ea6:	89 d0                	mov    %edx,%eax
+80103ea8:	f7 d0                	not    %eax
+80103eaa:	89 c2                	mov    %eax,%edx
+80103eac:	0f b7 05 00 b0 10 80 	movzwl 0x8010b000,%eax
+80103eb3:	21 d0                	and    %edx,%eax
+80103eb5:	0f b7 c0             	movzwl %ax,%eax
+80103eb8:	50                   	push   %eax
+80103eb9:	e8 94 ff ff ff       	call   80103e52 <picsetmask>
+80103ebe:	83 c4 04             	add    $0x4,%esp
+}
+80103ec1:	90                   	nop
+80103ec2:	c9                   	leave  
+80103ec3:	c3                   	ret    
+
+80103ec4 <picinit>:
+
+// Initialize the 8259A interrupt controllers.
+void
+picinit(void)
+{
+80103ec4:	55                   	push   %ebp
+80103ec5:	89 e5                	mov    %esp,%ebp
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+80103ec7:	68 ff 00 00 00       	push   $0xff
+80103ecc:	6a 21                	push   $0x21
+80103ece:	e8 60 ff ff ff       	call   80103e33 <outb>
+80103ed3:	83 c4 08             	add    $0x8,%esp
+  outb(IO_PIC2+1, 0xFF);
+80103ed6:	68 ff 00 00 00       	push   $0xff
+80103edb:	68 a1 00 00 00       	push   $0xa1
+80103ee0:	e8 4e ff ff ff       	call   80103e33 <outb>
+80103ee5:	83 c4 08             	add    $0x8,%esp
+
+  // ICW1:  0001g0hi
+  //    g:  0 = edge triggering, 1 = level triggering
+  //    h:  0 = cascaded PICs, 1 = master only
+  //    i:  0 = no ICW4, 1 = ICW4 required
+  outb(IO_PIC1, 0x11);
+80103ee8:	6a 11                	push   $0x11
+80103eea:	6a 20                	push   $0x20
+80103eec:	e8 42 ff ff ff       	call   80103e33 <outb>
+80103ef1:	83 c4 08             	add    $0x8,%esp
+
+  // ICW2:  Vector offset
+  outb(IO_PIC1+1, T_IRQ0);
+80103ef4:	6a 20                	push   $0x20
+80103ef6:	6a 21                	push   $0x21
+80103ef8:	e8 36 ff ff ff       	call   80103e33 <outb>
+80103efd:	83 c4 08             	add    $0x8,%esp
+
+  // ICW3:  (master PIC) bit mask of IR lines connected to slaves
+  //        (slave PIC) 3-bit # of slave's connection to master
+  outb(IO_PIC1+1, 1<<IRQ_SLAVE);
+80103f00:	6a 04                	push   $0x4
+80103f02:	6a 21                	push   $0x21
+80103f04:	e8 2a ff ff ff       	call   80103e33 <outb>
+80103f09:	83 c4 08             	add    $0x8,%esp
+  //    m:  0 = slave PIC, 1 = master PIC
+  //      (ignored when b is 0, as the master/slave role
+  //      can be hardwired).
+  //    a:  1 = Automatic EOI mode
+  //    p:  0 = MCS-80/85 mode, 1 = intel x86 mode
+  outb(IO_PIC1+1, 0x3);
+80103f0c:	6a 03                	push   $0x3
+80103f0e:	6a 21                	push   $0x21
+80103f10:	e8 1e ff ff ff       	call   80103e33 <outb>
+80103f15:	83 c4 08             	add    $0x8,%esp
+
+  // Set up slave (8259A-2)
+  outb(IO_PIC2, 0x11);                  // ICW1
+80103f18:	6a 11                	push   $0x11
+80103f1a:	68 a0 00 00 00       	push   $0xa0
+80103f1f:	e8 0f ff ff ff       	call   80103e33 <outb>
+80103f24:	83 c4 08             	add    $0x8,%esp
+  outb(IO_PIC2+1, T_IRQ0 + 8);      // ICW2
+80103f27:	6a 28                	push   $0x28
+80103f29:	68 a1 00 00 00       	push   $0xa1
+80103f2e:	e8 00 ff ff ff       	call   80103e33 <outb>
+80103f33:	83 c4 08             	add    $0x8,%esp
+  outb(IO_PIC2+1, IRQ_SLAVE);           // ICW3
+80103f36:	6a 02                	push   $0x2
+80103f38:	68 a1 00 00 00       	push   $0xa1
+80103f3d:	e8 f1 fe ff ff       	call   80103e33 <outb>
+80103f42:	83 c4 08             	add    $0x8,%esp
+  // NB Automatic EOI mode doesn't tend to work on the slave.
+  // Linux source code says it's "to be investigated".
+  outb(IO_PIC2+1, 0x3);                 // ICW4
+80103f45:	6a 03                	push   $0x3
+80103f47:	68 a1 00 00 00       	push   $0xa1
+80103f4c:	e8 e2 fe ff ff       	call   80103e33 <outb>
+80103f51:	83 c4 08             	add    $0x8,%esp
+
+  // OCW3:  0ef01prs
+  //   ef:  0x = NOP, 10 = clear specific mask, 11 = set specific mask
+  //    p:  0 = no polling, 1 = polling mode
+  //   rs:  0x = NOP, 10 = read IRR, 11 = read ISR
+  outb(IO_PIC1, 0x68);             // clear specific mask
+80103f54:	6a 68                	push   $0x68
+80103f56:	6a 20                	push   $0x20
+80103f58:	e8 d6 fe ff ff       	call   80103e33 <outb>
+80103f5d:	83 c4 08             	add    $0x8,%esp
+  outb(IO_PIC1, 0x0a);             // read IRR by default
+80103f60:	6a 0a                	push   $0xa
+80103f62:	6a 20                	push   $0x20
+80103f64:	e8 ca fe ff ff       	call   80103e33 <outb>
+80103f69:	83 c4 08             	add    $0x8,%esp
+
+  outb(IO_PIC2, 0x68);             // OCW3
+80103f6c:	6a 68                	push   $0x68
+80103f6e:	68 a0 00 00 00       	push   $0xa0
+80103f73:	e8 bb fe ff ff       	call   80103e33 <outb>
+80103f78:	83 c4 08             	add    $0x8,%esp
+  outb(IO_PIC2, 0x0a);             // OCW3
+80103f7b:	6a 0a                	push   $0xa
+80103f7d:	68 a0 00 00 00       	push   $0xa0
+80103f82:	e8 ac fe ff ff       	call   80103e33 <outb>
+80103f87:	83 c4 08             	add    $0x8,%esp
+
+  if(irqmask != 0xFFFF)
+80103f8a:	0f b7 05 00 b0 10 80 	movzwl 0x8010b000,%eax
+80103f91:	66 83 f8 ff          	cmp    $0xffff,%ax
+80103f95:	74 13                	je     80103faa <picinit+0xe6>
+    picsetmask(irqmask);
+80103f97:	0f b7 05 00 b0 10 80 	movzwl 0x8010b000,%eax
+80103f9e:	0f b7 c0             	movzwl %ax,%eax
+80103fa1:	50                   	push   %eax
+80103fa2:	e8 ab fe ff ff       	call   80103e52 <picsetmask>
+80103fa7:	83 c4 04             	add    $0x4,%esp
+}
+80103faa:	90                   	nop
+80103fab:	c9                   	leave  
+80103fac:	c3                   	ret    
+
+80103fad <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+80103fad:	55                   	push   %ebp
+80103fae:	89 e5                	mov    %esp,%ebp
+80103fb0:	83 ec 18             	sub    $0x18,%esp
+  struct pipe *p;
+
+  p = 0;
+80103fb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  *f0 = *f1 = 0;
+80103fba:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103fbd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80103fc3:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103fc6:	8b 10                	mov    (%eax),%edx
+80103fc8:	8b 45 08             	mov    0x8(%ebp),%eax
+80103fcb:	89 10                	mov    %edx,(%eax)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+80103fcd:	e8 a6 cf ff ff       	call   80100f78 <filealloc>
+80103fd2:	89 c2                	mov    %eax,%edx
+80103fd4:	8b 45 08             	mov    0x8(%ebp),%eax
+80103fd7:	89 10                	mov    %edx,(%eax)
+80103fd9:	8b 45 08             	mov    0x8(%ebp),%eax
+80103fdc:	8b 00                	mov    (%eax),%eax
+80103fde:	85 c0                	test   %eax,%eax
+80103fe0:	0f 84 cb 00 00 00    	je     801040b1 <pipealloc+0x104>
+80103fe6:	e8 8d cf ff ff       	call   80100f78 <filealloc>
+80103feb:	89 c2                	mov    %eax,%edx
+80103fed:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103ff0:	89 10                	mov    %edx,(%eax)
+80103ff2:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103ff5:	8b 00                	mov    (%eax),%eax
+80103ff7:	85 c0                	test   %eax,%eax
+80103ff9:	0f 84 b2 00 00 00    	je     801040b1 <pipealloc+0x104>
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+80103fff:	e8 c1 eb ff ff       	call   80102bc5 <kalloc>
+80104004:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80104007:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+8010400b:	0f 84 9f 00 00 00    	je     801040b0 <pipealloc+0x103>
+    goto bad;
+  p->readopen = 1;
+80104011:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104014:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+8010401b:	00 00 00 
+  p->writeopen = 1;
+8010401e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104021:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+80104028:	00 00 00 
+  p->nwrite = 0;
+8010402b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010402e:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+80104035:	00 00 00 
+  p->nread = 0;
+80104038:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010403b:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+80104042:	00 00 00 
+  initlock(&p->lock, "pipe");
+80104045:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104048:	83 ec 08             	sub    $0x8,%esp
+8010404b:	68 b4 87 10 80       	push   $0x801087b4
+80104050:	50                   	push   %eax
+80104051:	e8 de 0e 00 00       	call   80104f34 <initlock>
+80104056:	83 c4 10             	add    $0x10,%esp
+  (*f0)->type = FD_PIPE;
+80104059:	8b 45 08             	mov    0x8(%ebp),%eax
+8010405c:	8b 00                	mov    (%eax),%eax
+8010405e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f0)->readable = 1;
+80104064:	8b 45 08             	mov    0x8(%ebp),%eax
+80104067:	8b 00                	mov    (%eax),%eax
+80104069:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+  (*f0)->writable = 0;
+8010406d:	8b 45 08             	mov    0x8(%ebp),%eax
+80104070:	8b 00                	mov    (%eax),%eax
+80104072:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+  (*f0)->pipe = p;
+80104076:	8b 45 08             	mov    0x8(%ebp),%eax
+80104079:	8b 00                	mov    (%eax),%eax
+8010407b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010407e:	89 50 0c             	mov    %edx,0xc(%eax)
+  (*f1)->type = FD_PIPE;
+80104081:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104084:	8b 00                	mov    (%eax),%eax
+80104086:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f1)->readable = 0;
+8010408c:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010408f:	8b 00                	mov    (%eax),%eax
+80104091:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+  (*f1)->writable = 1;
+80104095:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104098:	8b 00                	mov    (%eax),%eax
+8010409a:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+  (*f1)->pipe = p;
+8010409e:	8b 45 0c             	mov    0xc(%ebp),%eax
+801040a1:	8b 00                	mov    (%eax),%eax
+801040a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801040a6:	89 50 0c             	mov    %edx,0xc(%eax)
+  return 0;
+801040a9:	b8 00 00 00 00       	mov    $0x0,%eax
+801040ae:	eb 4e                	jmp    801040fe <pipealloc+0x151>
+  p = 0;
+  *f0 = *f1 = 0;
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+    goto bad;
+801040b0:	90                   	nop
+  (*f1)->pipe = p;
+  return 0;
+
+//PAGEBREAK: 20
+ bad:
+  if(p)
+801040b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801040b5:	74 0e                	je     801040c5 <pipealloc+0x118>
+    kfree((char*)p);
+801040b7:	83 ec 0c             	sub    $0xc,%esp
+801040ba:	ff 75 f4             	pushl  -0xc(%ebp)
+801040bd:	e8 66 ea ff ff       	call   80102b28 <kfree>
+801040c2:	83 c4 10             	add    $0x10,%esp
+  if(*f0)
+801040c5:	8b 45 08             	mov    0x8(%ebp),%eax
+801040c8:	8b 00                	mov    (%eax),%eax
+801040ca:	85 c0                	test   %eax,%eax
+801040cc:	74 11                	je     801040df <pipealloc+0x132>
+    fileclose(*f0);
+801040ce:	8b 45 08             	mov    0x8(%ebp),%eax
+801040d1:	8b 00                	mov    (%eax),%eax
+801040d3:	83 ec 0c             	sub    $0xc,%esp
+801040d6:	50                   	push   %eax
+801040d7:	e8 5a cf ff ff       	call   80101036 <fileclose>
+801040dc:	83 c4 10             	add    $0x10,%esp
+  if(*f1)
+801040df:	8b 45 0c             	mov    0xc(%ebp),%eax
+801040e2:	8b 00                	mov    (%eax),%eax
+801040e4:	85 c0                	test   %eax,%eax
+801040e6:	74 11                	je     801040f9 <pipealloc+0x14c>
+    fileclose(*f1);
+801040e8:	8b 45 0c             	mov    0xc(%ebp),%eax
+801040eb:	8b 00                	mov    (%eax),%eax
+801040ed:	83 ec 0c             	sub    $0xc,%esp
+801040f0:	50                   	push   %eax
+801040f1:	e8 40 cf ff ff       	call   80101036 <fileclose>
+801040f6:	83 c4 10             	add    $0x10,%esp
+  return -1;
+801040f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801040fe:	c9                   	leave  
+801040ff:	c3                   	ret    
+
+80104100 <pipeclose>:
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+80104100:	55                   	push   %ebp
+80104101:	89 e5                	mov    %esp,%ebp
+80104103:	83 ec 08             	sub    $0x8,%esp
+  acquire(&p->lock);
+80104106:	8b 45 08             	mov    0x8(%ebp),%eax
+80104109:	83 ec 0c             	sub    $0xc,%esp
+8010410c:	50                   	push   %eax
+8010410d:	e8 44 0e 00 00       	call   80104f56 <acquire>
+80104112:	83 c4 10             	add    $0x10,%esp
+  if(writable){
+80104115:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+80104119:	74 23                	je     8010413e <pipeclose+0x3e>
+    p->writeopen = 0;
+8010411b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010411e:	c7 80 40 02 00 00 00 	movl   $0x0,0x240(%eax)
+80104125:	00 00 00 
+    wakeup(&p->nread);
+80104128:	8b 45 08             	mov    0x8(%ebp),%eax
+8010412b:	05 34 02 00 00       	add    $0x234,%eax
+80104130:	83 ec 0c             	sub    $0xc,%esp
+80104133:	50                   	push   %eax
+80104134:	e8 0f 0c 00 00       	call   80104d48 <wakeup>
+80104139:	83 c4 10             	add    $0x10,%esp
+8010413c:	eb 21                	jmp    8010415f <pipeclose+0x5f>
+  } else {
+    p->readopen = 0;
+8010413e:	8b 45 08             	mov    0x8(%ebp),%eax
+80104141:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%eax)
+80104148:	00 00 00 
+    wakeup(&p->nwrite);
+8010414b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010414e:	05 38 02 00 00       	add    $0x238,%eax
+80104153:	83 ec 0c             	sub    $0xc,%esp
+80104156:	50                   	push   %eax
+80104157:	e8 ec 0b 00 00       	call   80104d48 <wakeup>
+8010415c:	83 c4 10             	add    $0x10,%esp
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+8010415f:	8b 45 08             	mov    0x8(%ebp),%eax
+80104162:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
+80104168:	85 c0                	test   %eax,%eax
+8010416a:	75 2c                	jne    80104198 <pipeclose+0x98>
+8010416c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010416f:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
+80104175:	85 c0                	test   %eax,%eax
+80104177:	75 1f                	jne    80104198 <pipeclose+0x98>
+    release(&p->lock);
+80104179:	8b 45 08             	mov    0x8(%ebp),%eax
+8010417c:	83 ec 0c             	sub    $0xc,%esp
+8010417f:	50                   	push   %eax
+80104180:	e8 38 0e 00 00       	call   80104fbd <release>
+80104185:	83 c4 10             	add    $0x10,%esp
+    kfree((char*)p);
+80104188:	83 ec 0c             	sub    $0xc,%esp
+8010418b:	ff 75 08             	pushl  0x8(%ebp)
+8010418e:	e8 95 e9 ff ff       	call   80102b28 <kfree>
+80104193:	83 c4 10             	add    $0x10,%esp
+80104196:	eb 0f                	jmp    801041a7 <pipeclose+0xa7>
+  } else
+    release(&p->lock);
+80104198:	8b 45 08             	mov    0x8(%ebp),%eax
+8010419b:	83 ec 0c             	sub    $0xc,%esp
+8010419e:	50                   	push   %eax
+8010419f:	e8 19 0e 00 00       	call   80104fbd <release>
+801041a4:	83 c4 10             	add    $0x10,%esp
+}
+801041a7:	90                   	nop
+801041a8:	c9                   	leave  
+801041a9:	c3                   	ret    
+
+801041aa <pipewrite>:
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+801041aa:	55                   	push   %ebp
+801041ab:	89 e5                	mov    %esp,%ebp
+801041ad:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  acquire(&p->lock);
+801041b0:	8b 45 08             	mov    0x8(%ebp),%eax
+801041b3:	83 ec 0c             	sub    $0xc,%esp
+801041b6:	50                   	push   %eax
+801041b7:	e8 9a 0d 00 00       	call   80104f56 <acquire>
+801041bc:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < n; i++){
+801041bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+801041c6:	e9 ad 00 00 00       	jmp    80104278 <pipewrite+0xce>
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+      if(p->readopen == 0 || proc->killed){
+801041cb:	8b 45 08             	mov    0x8(%ebp),%eax
+801041ce:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
+801041d4:	85 c0                	test   %eax,%eax
+801041d6:	74 0d                	je     801041e5 <pipewrite+0x3b>
+801041d8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801041de:	8b 40 24             	mov    0x24(%eax),%eax
+801041e1:	85 c0                	test   %eax,%eax
+801041e3:	74 19                	je     801041fe <pipewrite+0x54>
+        release(&p->lock);
+801041e5:	8b 45 08             	mov    0x8(%ebp),%eax
+801041e8:	83 ec 0c             	sub    $0xc,%esp
+801041eb:	50                   	push   %eax
+801041ec:	e8 cc 0d 00 00       	call   80104fbd <release>
+801041f1:	83 c4 10             	add    $0x10,%esp
+        return -1;
+801041f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801041f9:	e9 a8 00 00 00       	jmp    801042a6 <pipewrite+0xfc>
+      }
+      wakeup(&p->nread);
+801041fe:	8b 45 08             	mov    0x8(%ebp),%eax
+80104201:	05 34 02 00 00       	add    $0x234,%eax
+80104206:	83 ec 0c             	sub    $0xc,%esp
+80104209:	50                   	push   %eax
+8010420a:	e8 39 0b 00 00       	call   80104d48 <wakeup>
+8010420f:	83 c4 10             	add    $0x10,%esp
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80104212:	8b 45 08             	mov    0x8(%ebp),%eax
+80104215:	8b 55 08             	mov    0x8(%ebp),%edx
+80104218:	81 c2 38 02 00 00    	add    $0x238,%edx
+8010421e:	83 ec 08             	sub    $0x8,%esp
+80104221:	50                   	push   %eax
+80104222:	52                   	push   %edx
+80104223:	e8 35 0a 00 00       	call   80104c5d <sleep>
+80104228:	83 c4 10             	add    $0x10,%esp
+{
+  int i;
+
+  acquire(&p->lock);
+  for(i = 0; i < n; i++){
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+8010422b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010422e:	8b 90 38 02 00 00    	mov    0x238(%eax),%edx
+80104234:	8b 45 08             	mov    0x8(%ebp),%eax
+80104237:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
+8010423d:	05 00 02 00 00       	add    $0x200,%eax
+80104242:	39 c2                	cmp    %eax,%edx
+80104244:	74 85                	je     801041cb <pipewrite+0x21>
+        return -1;
+      }
+      wakeup(&p->nread);
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+    }
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+80104246:	8b 45 08             	mov    0x8(%ebp),%eax
+80104249:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
+8010424f:	8d 48 01             	lea    0x1(%eax),%ecx
+80104252:	8b 55 08             	mov    0x8(%ebp),%edx
+80104255:	89 8a 38 02 00 00    	mov    %ecx,0x238(%edx)
+8010425b:	25 ff 01 00 00       	and    $0x1ff,%eax
+80104260:	89 c1                	mov    %eax,%ecx
+80104262:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104265:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104268:	01 d0                	add    %edx,%eax
+8010426a:	0f b6 10             	movzbl (%eax),%edx
+8010426d:	8b 45 08             	mov    0x8(%ebp),%eax
+80104270:	88 54 08 34          	mov    %dl,0x34(%eax,%ecx,1)
+pipewrite(struct pipe *p, char *addr, int n)
+{
+  int i;
+
+  acquire(&p->lock);
+  for(i = 0; i < n; i++){
+80104274:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80104278:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010427b:	3b 45 10             	cmp    0x10(%ebp),%eax
+8010427e:	7c ab                	jl     8010422b <pipewrite+0x81>
+      wakeup(&p->nread);
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+    }
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+80104280:	8b 45 08             	mov    0x8(%ebp),%eax
+80104283:	05 34 02 00 00       	add    $0x234,%eax
+80104288:	83 ec 0c             	sub    $0xc,%esp
+8010428b:	50                   	push   %eax
+8010428c:	e8 b7 0a 00 00       	call   80104d48 <wakeup>
+80104291:	83 c4 10             	add    $0x10,%esp
+  release(&p->lock);
+80104294:	8b 45 08             	mov    0x8(%ebp),%eax
+80104297:	83 ec 0c             	sub    $0xc,%esp
+8010429a:	50                   	push   %eax
+8010429b:	e8 1d 0d 00 00       	call   80104fbd <release>
+801042a0:	83 c4 10             	add    $0x10,%esp
+  return n;
+801042a3:	8b 45 10             	mov    0x10(%ebp),%eax
+}
+801042a6:	c9                   	leave  
+801042a7:	c3                   	ret    
+
+801042a8 <piperead>:
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+801042a8:	55                   	push   %ebp
+801042a9:	89 e5                	mov    %esp,%ebp
+801042ab:	53                   	push   %ebx
+801042ac:	83 ec 14             	sub    $0x14,%esp
+  int i;
+
+  acquire(&p->lock);
+801042af:	8b 45 08             	mov    0x8(%ebp),%eax
+801042b2:	83 ec 0c             	sub    $0xc,%esp
+801042b5:	50                   	push   %eax
+801042b6:	e8 9b 0c 00 00       	call   80104f56 <acquire>
+801042bb:	83 c4 10             	add    $0x10,%esp
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+801042be:	eb 3f                	jmp    801042ff <piperead+0x57>
+    if(proc->killed){
+801042c0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801042c6:	8b 40 24             	mov    0x24(%eax),%eax
+801042c9:	85 c0                	test   %eax,%eax
+801042cb:	74 19                	je     801042e6 <piperead+0x3e>
+      release(&p->lock);
+801042cd:	8b 45 08             	mov    0x8(%ebp),%eax
+801042d0:	83 ec 0c             	sub    $0xc,%esp
+801042d3:	50                   	push   %eax
+801042d4:	e8 e4 0c 00 00       	call   80104fbd <release>
+801042d9:	83 c4 10             	add    $0x10,%esp
+      return -1;
+801042dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801042e1:	e9 bf 00 00 00       	jmp    801043a5 <piperead+0xfd>
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+801042e6:	8b 45 08             	mov    0x8(%ebp),%eax
+801042e9:	8b 55 08             	mov    0x8(%ebp),%edx
+801042ec:	81 c2 34 02 00 00    	add    $0x234,%edx
+801042f2:	83 ec 08             	sub    $0x8,%esp
+801042f5:	50                   	push   %eax
+801042f6:	52                   	push   %edx
+801042f7:	e8 61 09 00 00       	call   80104c5d <sleep>
+801042fc:	83 c4 10             	add    $0x10,%esp
+piperead(struct pipe *p, char *addr, int n)
+{
+  int i;
+
+  acquire(&p->lock);
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+801042ff:	8b 45 08             	mov    0x8(%ebp),%eax
+80104302:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
+80104308:	8b 45 08             	mov    0x8(%ebp),%eax
+8010430b:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
+80104311:	39 c2                	cmp    %eax,%edx
+80104313:	75 0d                	jne    80104322 <piperead+0x7a>
+80104315:	8b 45 08             	mov    0x8(%ebp),%eax
+80104318:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
+8010431e:	85 c0                	test   %eax,%eax
+80104320:	75 9e                	jne    801042c0 <piperead+0x18>
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80104322:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80104329:	eb 49                	jmp    80104374 <piperead+0xcc>
+    if(p->nread == p->nwrite)
+8010432b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010432e:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
+80104334:	8b 45 08             	mov    0x8(%ebp),%eax
+80104337:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
+8010433d:	39 c2                	cmp    %eax,%edx
+8010433f:	74 3d                	je     8010437e <piperead+0xd6>
+      break;
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+80104341:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104344:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104347:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
+8010434a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010434d:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
+80104353:	8d 48 01             	lea    0x1(%eax),%ecx
+80104356:	8b 55 08             	mov    0x8(%ebp),%edx
+80104359:	89 8a 34 02 00 00    	mov    %ecx,0x234(%edx)
+8010435f:	25 ff 01 00 00       	and    $0x1ff,%eax
+80104364:	89 c2                	mov    %eax,%edx
+80104366:	8b 45 08             	mov    0x8(%ebp),%eax
+80104369:	0f b6 44 10 34       	movzbl 0x34(%eax,%edx,1),%eax
+8010436e:	88 03                	mov    %al,(%ebx)
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80104370:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80104374:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104377:	3b 45 10             	cmp    0x10(%ebp),%eax
+8010437a:	7c af                	jl     8010432b <piperead+0x83>
+8010437c:	eb 01                	jmp    8010437f <piperead+0xd7>
+    if(p->nread == p->nwrite)
+      break;
+8010437e:	90                   	nop
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+8010437f:	8b 45 08             	mov    0x8(%ebp),%eax
+80104382:	05 38 02 00 00       	add    $0x238,%eax
+80104387:	83 ec 0c             	sub    $0xc,%esp
+8010438a:	50                   	push   %eax
+8010438b:	e8 b8 09 00 00       	call   80104d48 <wakeup>
+80104390:	83 c4 10             	add    $0x10,%esp
+  release(&p->lock);
+80104393:	8b 45 08             	mov    0x8(%ebp),%eax
+80104396:	83 ec 0c             	sub    $0xc,%esp
+80104399:	50                   	push   %eax
+8010439a:	e8 1e 0c 00 00       	call   80104fbd <release>
+8010439f:	83 c4 10             	add    $0x10,%esp
+  return i;
+801043a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+801043a5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801043a8:	c9                   	leave  
+801043a9:	c3                   	ret    
+
+801043aa <readeflags>:
+  asm volatile("ltr %0" : : "r" (sel));
+}
+
+static inline uint
+readeflags(void)
+{
+801043aa:	55                   	push   %ebp
+801043ab:	89 e5                	mov    %esp,%ebp
+801043ad:	83 ec 10             	sub    $0x10,%esp
+  uint eflags;
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+801043b0:	9c                   	pushf  
+801043b1:	58                   	pop    %eax
+801043b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  return eflags;
+801043b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+801043b8:	c9                   	leave  
+801043b9:	c3                   	ret    
+
+801043ba <sti>:
+  asm volatile("cli");
+}
+
+static inline void
+sti(void)
+{
+801043ba:	55                   	push   %ebp
+801043bb:	89 e5                	mov    %esp,%ebp
+  asm volatile("sti");
+801043bd:	fb                   	sti    
+}
+801043be:	90                   	nop
+801043bf:	5d                   	pop    %ebp
+801043c0:	c3                   	ret    
+
+801043c1 <pinit>:
+
+static void wakeup1(void *chan);
+
+void
+pinit(void)
+{
+801043c1:	55                   	push   %ebp
+801043c2:	89 e5                	mov    %esp,%ebp
+801043c4:	83 ec 08             	sub    $0x8,%esp
+  initlock(&ptable.lock, "ptable");
+801043c7:	83 ec 08             	sub    $0x8,%esp
+801043ca:	68 b9 87 10 80       	push   $0x801087b9
+801043cf:	68 60 29 11 80       	push   $0x80112960
+801043d4:	e8 5b 0b 00 00       	call   80104f34 <initlock>
+801043d9:	83 c4 10             	add    $0x10,%esp
+}
+801043dc:	90                   	nop
+801043dd:	c9                   	leave  
+801043de:	c3                   	ret    
+
+801043df <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+801043df:	55                   	push   %ebp
+801043e0:	89 e5                	mov    %esp,%ebp
+801043e2:	83 ec 18             	sub    $0x18,%esp
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+801043e5:	83 ec 0c             	sub    $0xc,%esp
+801043e8:	68 60 29 11 80       	push   $0x80112960
+801043ed:	e8 64 0b 00 00       	call   80104f56 <acquire>
+801043f2:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801043f5:	c7 45 f4 94 29 11 80 	movl   $0x80112994,-0xc(%ebp)
+801043fc:	eb 0e                	jmp    8010440c <allocproc+0x2d>
+    if(p->state == UNUSED)
+801043fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104401:	8b 40 0c             	mov    0xc(%eax),%eax
+80104404:	85 c0                	test   %eax,%eax
+80104406:	74 27                	je     8010442f <allocproc+0x50>
+{
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104408:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
+8010440c:	81 7d f4 94 49 11 80 	cmpl   $0x80114994,-0xc(%ebp)
+80104413:	72 e9                	jb     801043fe <allocproc+0x1f>
+    if(p->state == UNUSED)
+      goto found;
+  release(&ptable.lock);
+80104415:	83 ec 0c             	sub    $0xc,%esp
+80104418:	68 60 29 11 80       	push   $0x80112960
+8010441d:	e8 9b 0b 00 00       	call   80104fbd <release>
+80104422:	83 c4 10             	add    $0x10,%esp
+  return 0;
+80104425:	b8 00 00 00 00       	mov    $0x0,%eax
+8010442a:	e9 b4 00 00 00       	jmp    801044e3 <allocproc+0x104>
+  char *sp;
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if(p->state == UNUSED)
+      goto found;
+8010442f:	90                   	nop
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+80104430:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104433:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
+  p->pid = nextpid++;
+8010443a:	a1 04 b0 10 80       	mov    0x8010b004,%eax
+8010443f:	8d 50 01             	lea    0x1(%eax),%edx
+80104442:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
+80104448:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010444b:	89 42 10             	mov    %eax,0x10(%edx)
+  release(&ptable.lock);
+8010444e:	83 ec 0c             	sub    $0xc,%esp
+80104451:	68 60 29 11 80       	push   $0x80112960
+80104456:	e8 62 0b 00 00       	call   80104fbd <release>
+8010445b:	83 c4 10             	add    $0x10,%esp
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+8010445e:	e8 62 e7 ff ff       	call   80102bc5 <kalloc>
+80104463:	89 c2                	mov    %eax,%edx
+80104465:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104468:	89 50 08             	mov    %edx,0x8(%eax)
+8010446b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010446e:	8b 40 08             	mov    0x8(%eax),%eax
+80104471:	85 c0                	test   %eax,%eax
+80104473:	75 11                	jne    80104486 <allocproc+0xa7>
+    p->state = UNUSED;
+80104475:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104478:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    return 0;
+8010447f:	b8 00 00 00 00       	mov    $0x0,%eax
+80104484:	eb 5d                	jmp    801044e3 <allocproc+0x104>
+  }
+  sp = p->kstack + KSTACKSIZE;
+80104486:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104489:	8b 40 08             	mov    0x8(%eax),%eax
+8010448c:	05 00 10 00 00       	add    $0x1000,%eax
+80104491:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+80104494:	83 6d f0 4c          	subl   $0x4c,-0x10(%ebp)
+  p->tf = (struct trapframe*)sp;
+80104498:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010449b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+8010449e:	89 50 18             	mov    %edx,0x18(%eax)
+  
+  // Set up new context to start executing at forkret,
+  // which returns to trapret.
+  sp -= 4;
+801044a1:	83 6d f0 04          	subl   $0x4,-0x10(%ebp)
+  *(uint*)sp = (uint)trapret;
+801044a5:	ba b5 65 10 80       	mov    $0x801065b5,%edx
+801044aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801044ad:	89 10                	mov    %edx,(%eax)
+
+  sp -= sizeof *p->context;
+801044af:	83 6d f0 14          	subl   $0x14,-0x10(%ebp)
+  p->context = (struct context*)sp;
+801044b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801044b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+801044b9:	89 50 1c             	mov    %edx,0x1c(%eax)
+  memset(p->context, 0, sizeof *p->context);
+801044bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801044bf:	8b 40 1c             	mov    0x1c(%eax),%eax
+801044c2:	83 ec 04             	sub    $0x4,%esp
+801044c5:	6a 14                	push   $0x14
+801044c7:	6a 00                	push   $0x0
+801044c9:	50                   	push   %eax
+801044ca:	e8 ea 0c 00 00       	call   801051b9 <memset>
+801044cf:	83 c4 10             	add    $0x10,%esp
+  p->context->eip = (uint)forkret;
+801044d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801044d5:	8b 40 1c             	mov    0x1c(%eax),%eax
+801044d8:	ba 2c 4c 10 80       	mov    $0x80104c2c,%edx
+801044dd:	89 50 10             	mov    %edx,0x10(%eax)
+
+  return p;
+801044e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+801044e3:	c9                   	leave  
+801044e4:	c3                   	ret    
+
+801044e5 <userinit>:
+
+//PAGEBREAK: 32
+// Set up first user process.
+void
+userinit(void)
+{
+801044e5:	55                   	push   %ebp
+801044e6:	89 e5                	mov    %esp,%ebp
+801044e8:	83 ec 18             	sub    $0x18,%esp
+  struct proc *p;
+  extern char _binary_initcode_start[], _binary_initcode_size[];
+  
+  p = allocproc();
+801044eb:	e8 ef fe ff ff       	call   801043df <allocproc>
+801044f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  initproc = p;
+801044f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801044f6:	a3 48 b6 10 80       	mov    %eax,0x8010b648
+  if((p->pgdir = setupkvm()) == 0)
+801044fb:	e8 bf 37 00 00       	call   80107cbf <setupkvm>
+80104500:	89 c2                	mov    %eax,%edx
+80104502:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104505:	89 50 04             	mov    %edx,0x4(%eax)
+80104508:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010450b:	8b 40 04             	mov    0x4(%eax),%eax
+8010450e:	85 c0                	test   %eax,%eax
+80104510:	75 0d                	jne    8010451f <userinit+0x3a>
+    panic("userinit: out of memory?");
+80104512:	83 ec 0c             	sub    $0xc,%esp
+80104515:	68 c0 87 10 80       	push   $0x801087c0
+8010451a:	e8 47 c0 ff ff       	call   80100566 <panic>
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+8010451f:	ba 2c 00 00 00       	mov    $0x2c,%edx
+80104524:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104527:	8b 40 04             	mov    0x4(%eax),%eax
+8010452a:	83 ec 04             	sub    $0x4,%esp
+8010452d:	52                   	push   %edx
+8010452e:	68 e0 b4 10 80       	push   $0x8010b4e0
+80104533:	50                   	push   %eax
+80104534:	e8 e0 39 00 00       	call   80107f19 <inituvm>
+80104539:	83 c4 10             	add    $0x10,%esp
+  p->sz = PGSIZE;
+8010453c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010453f:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
+  memset(p->tf, 0, sizeof(*p->tf));
+80104545:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104548:	8b 40 18             	mov    0x18(%eax),%eax
+8010454b:	83 ec 04             	sub    $0x4,%esp
+8010454e:	6a 4c                	push   $0x4c
+80104550:	6a 00                	push   $0x0
+80104552:	50                   	push   %eax
+80104553:	e8 61 0c 00 00       	call   801051b9 <memset>
+80104558:	83 c4 10             	add    $0x10,%esp
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+8010455b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010455e:	8b 40 18             	mov    0x18(%eax),%eax
+80104561:	66 c7 40 3c 23 00    	movw   $0x23,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+80104567:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010456a:	8b 40 18             	mov    0x18(%eax),%eax
+8010456d:	66 c7 40 2c 2b 00    	movw   $0x2b,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+80104573:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104576:	8b 40 18             	mov    0x18(%eax),%eax
+80104579:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010457c:	8b 52 18             	mov    0x18(%edx),%edx
+8010457f:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
+80104583:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+80104587:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010458a:	8b 40 18             	mov    0x18(%eax),%eax
+8010458d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104590:	8b 52 18             	mov    0x18(%edx),%edx
+80104593:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
+80104597:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+8010459b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010459e:	8b 40 18             	mov    0x18(%eax),%eax
+801045a1:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+801045a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801045ab:	8b 40 18             	mov    0x18(%eax),%eax
+801045ae:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0;  // beginning of initcode.S
+801045b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801045b8:	8b 40 18             	mov    0x18(%eax),%eax
+801045bb:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+801045c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801045c5:	83 c0 6c             	add    $0x6c,%eax
+801045c8:	83 ec 04             	sub    $0x4,%esp
+801045cb:	6a 10                	push   $0x10
+801045cd:	68 d9 87 10 80       	push   $0x801087d9
+801045d2:	50                   	push   %eax
+801045d3:	e8 e4 0d 00 00       	call   801053bc <safestrcpy>
+801045d8:	83 c4 10             	add    $0x10,%esp
+  p->cwd = namei("/");
+801045db:	83 ec 0c             	sub    $0xc,%esp
+801045de:	68 e2 87 10 80       	push   $0x801087e2
+801045e3:	e8 db de ff ff       	call   801024c3 <namei>
+801045e8:	83 c4 10             	add    $0x10,%esp
+801045eb:	89 c2                	mov    %eax,%edx
+801045ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801045f0:	89 50 68             	mov    %edx,0x68(%eax)
+
+  p->state = RUNNABLE;
+801045f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801045f6:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+}
+801045fd:	90                   	nop
+801045fe:	c9                   	leave  
+801045ff:	c3                   	ret    
+
+80104600 <growproc>:
+
+// Grow current process's memory by n bytes.
+// Return 0 on success, -1 on failure.
+int
+growproc(int n)
+{
+80104600:	55                   	push   %ebp
+80104601:	89 e5                	mov    %esp,%ebp
+80104603:	83 ec 18             	sub    $0x18,%esp
+  uint sz;
+  
+  sz = proc->sz;
+80104606:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010460c:	8b 00                	mov    (%eax),%eax
+8010460e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(n > 0){
+80104611:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+80104615:	7e 31                	jle    80104648 <growproc+0x48>
+    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
+80104617:	8b 55 08             	mov    0x8(%ebp),%edx
+8010461a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010461d:	01 c2                	add    %eax,%edx
+8010461f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104625:	8b 40 04             	mov    0x4(%eax),%eax
+80104628:	83 ec 04             	sub    $0x4,%esp
+8010462b:	52                   	push   %edx
+8010462c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010462f:	50                   	push   %eax
+80104630:	e8 31 3a 00 00       	call   80108066 <allocuvm>
+80104635:	83 c4 10             	add    $0x10,%esp
+80104638:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010463b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+8010463f:	75 3e                	jne    8010467f <growproc+0x7f>
+      return -1;
+80104641:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104646:	eb 59                	jmp    801046a1 <growproc+0xa1>
+  } else if(n < 0){
+80104648:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+8010464c:	79 31                	jns    8010467f <growproc+0x7f>
+    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
+8010464e:	8b 55 08             	mov    0x8(%ebp),%edx
+80104651:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104654:	01 c2                	add    %eax,%edx
+80104656:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010465c:	8b 40 04             	mov    0x4(%eax),%eax
+8010465f:	83 ec 04             	sub    $0x4,%esp
+80104662:	52                   	push   %edx
+80104663:	ff 75 f4             	pushl  -0xc(%ebp)
+80104666:	50                   	push   %eax
+80104667:	e8 c3 3a 00 00       	call   8010812f <deallocuvm>
+8010466c:	83 c4 10             	add    $0x10,%esp
+8010466f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80104672:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80104676:	75 07                	jne    8010467f <growproc+0x7f>
+      return -1;
+80104678:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010467d:	eb 22                	jmp    801046a1 <growproc+0xa1>
+  }
+  proc->sz = sz;
+8010467f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104685:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104688:	89 10                	mov    %edx,(%eax)
+  switchuvm(proc);
+8010468a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104690:	83 ec 0c             	sub    $0xc,%esp
+80104693:	50                   	push   %eax
+80104694:	e8 0d 37 00 00       	call   80107da6 <switchuvm>
+80104699:	83 c4 10             	add    $0x10,%esp
+  return 0;
+8010469c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801046a1:	c9                   	leave  
+801046a2:	c3                   	ret    
+
+801046a3 <fork>:
+// Create a new process copying p as the parent.
+// Sets up stack to return as if from system call.
+// Caller must set state of returned proc to RUNNABLE.
+int
+fork(void)
+{
+801046a3:	55                   	push   %ebp
+801046a4:	89 e5                	mov    %esp,%ebp
+801046a6:	57                   	push   %edi
+801046a7:	56                   	push   %esi
+801046a8:	53                   	push   %ebx
+801046a9:	83 ec 1c             	sub    $0x1c,%esp
+  int i, pid;
+  struct proc *np;
+
+  // Allocate process.
+  if((np = allocproc()) == 0)
+801046ac:	e8 2e fd ff ff       	call   801043df <allocproc>
+801046b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801046b4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+801046b8:	75 0a                	jne    801046c4 <fork+0x21>
+    return -1;
+801046ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801046bf:	e9 68 01 00 00       	jmp    8010482c <fork+0x189>
+
+  // Copy process state from p.
+  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
+801046c4:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801046ca:	8b 10                	mov    (%eax),%edx
+801046cc:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801046d2:	8b 40 04             	mov    0x4(%eax),%eax
+801046d5:	83 ec 08             	sub    $0x8,%esp
+801046d8:	52                   	push   %edx
+801046d9:	50                   	push   %eax
+801046da:	e8 ee 3b 00 00       	call   801082cd <copyuvm>
+801046df:	83 c4 10             	add    $0x10,%esp
+801046e2:	89 c2                	mov    %eax,%edx
+801046e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801046e7:	89 50 04             	mov    %edx,0x4(%eax)
+801046ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801046ed:	8b 40 04             	mov    0x4(%eax),%eax
+801046f0:	85 c0                	test   %eax,%eax
+801046f2:	75 30                	jne    80104724 <fork+0x81>
+    kfree(np->kstack);
+801046f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801046f7:	8b 40 08             	mov    0x8(%eax),%eax
+801046fa:	83 ec 0c             	sub    $0xc,%esp
+801046fd:	50                   	push   %eax
+801046fe:	e8 25 e4 ff ff       	call   80102b28 <kfree>
+80104703:	83 c4 10             	add    $0x10,%esp
+    np->kstack = 0;
+80104706:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80104709:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+    np->state = UNUSED;
+80104710:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80104713:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    return -1;
+8010471a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010471f:	e9 08 01 00 00       	jmp    8010482c <fork+0x189>
+  }
+  np->sz = proc->sz;
+80104724:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010472a:	8b 10                	mov    (%eax),%edx
+8010472c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010472f:	89 10                	mov    %edx,(%eax)
+  np->parent = proc;
+80104731:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
+80104738:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010473b:	89 50 14             	mov    %edx,0x14(%eax)
+  *np->tf = *proc->tf;
+8010473e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80104741:	8b 50 18             	mov    0x18(%eax),%edx
+80104744:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010474a:	8b 40 18             	mov    0x18(%eax),%eax
+8010474d:	89 c3                	mov    %eax,%ebx
+8010474f:	b8 13 00 00 00       	mov    $0x13,%eax
+80104754:	89 d7                	mov    %edx,%edi
+80104756:	89 de                	mov    %ebx,%esi
+80104758:	89 c1                	mov    %eax,%ecx
+8010475a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+
+  // Clear %eax so that fork returns 0 in the child.
+  np->tf->eax = 0;
+8010475c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010475f:	8b 40 18             	mov    0x18(%eax),%eax
+80104762:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+
+  for(i = 0; i < NOFILE; i++)
+80104769:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80104770:	eb 43                	jmp    801047b5 <fork+0x112>
+    if(proc->ofile[i])
+80104772:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104778:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010477b:	83 c2 08             	add    $0x8,%edx
+8010477e:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
+80104782:	85 c0                	test   %eax,%eax
+80104784:	74 2b                	je     801047b1 <fork+0x10e>
+      np->ofile[i] = filedup(proc->ofile[i]);
+80104786:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010478c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010478f:	83 c2 08             	add    $0x8,%edx
+80104792:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
+80104796:	83 ec 0c             	sub    $0xc,%esp
+80104799:	50                   	push   %eax
+8010479a:	e8 46 c8 ff ff       	call   80100fe5 <filedup>
+8010479f:	83 c4 10             	add    $0x10,%esp
+801047a2:	89 c1                	mov    %eax,%ecx
+801047a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801047a7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801047aa:	83 c2 08             	add    $0x8,%edx
+801047ad:	89 4c 90 08          	mov    %ecx,0x8(%eax,%edx,4)
+  *np->tf = *proc->tf;
+
+  // Clear %eax so that fork returns 0 in the child.
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+801047b1:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+801047b5:	83 7d e4 0f          	cmpl   $0xf,-0x1c(%ebp)
+801047b9:	7e b7                	jle    80104772 <fork+0xcf>
+    if(proc->ofile[i])
+      np->ofile[i] = filedup(proc->ofile[i]);
+  np->cwd = idup(proc->cwd);
+801047bb:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801047c1:	8b 40 68             	mov    0x68(%eax),%eax
+801047c4:	83 ec 0c             	sub    $0xc,%esp
+801047c7:	50                   	push   %eax
+801047c8:	e8 04 d1 ff ff       	call   801018d1 <idup>
+801047cd:	83 c4 10             	add    $0x10,%esp
+801047d0:	89 c2                	mov    %eax,%edx
+801047d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801047d5:	89 50 68             	mov    %edx,0x68(%eax)
+
+  safestrcpy(np->name, proc->name, sizeof(proc->name));
+801047d8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801047de:	8d 50 6c             	lea    0x6c(%eax),%edx
+801047e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801047e4:	83 c0 6c             	add    $0x6c,%eax
+801047e7:	83 ec 04             	sub    $0x4,%esp
+801047ea:	6a 10                	push   $0x10
+801047ec:	52                   	push   %edx
+801047ed:	50                   	push   %eax
+801047ee:	e8 c9 0b 00 00       	call   801053bc <safestrcpy>
+801047f3:	83 c4 10             	add    $0x10,%esp
+ 
+  pid = np->pid;
+801047f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801047f9:	8b 40 10             	mov    0x10(%eax),%eax
+801047fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
+
+  // lock to force the compiler to emit the np->state write last.
+  acquire(&ptable.lock);
+801047ff:	83 ec 0c             	sub    $0xc,%esp
+80104802:	68 60 29 11 80       	push   $0x80112960
+80104807:	e8 4a 07 00 00       	call   80104f56 <acquire>
+8010480c:	83 c4 10             	add    $0x10,%esp
+  np->state = RUNNABLE;
+8010480f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80104812:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  release(&ptable.lock);
+80104819:	83 ec 0c             	sub    $0xc,%esp
+8010481c:	68 60 29 11 80       	push   $0x80112960
+80104821:	e8 97 07 00 00       	call   80104fbd <release>
+80104826:	83 c4 10             	add    $0x10,%esp
+  
+  return pid;
+80104829:	8b 45 dc             	mov    -0x24(%ebp),%eax
+}
+8010482c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010482f:	5b                   	pop    %ebx
+80104830:	5e                   	pop    %esi
+80104831:	5f                   	pop    %edi
+80104832:	5d                   	pop    %ebp
+80104833:	c3                   	ret    
+
+80104834 <exit>:
+// Exit the current process.  Does not return.
+// An exited process remains in the zombie state
+// until its parent calls wait() to find out it exited.
+void
+exit(void)
+{
+80104834:	55                   	push   %ebp
+80104835:	89 e5                	mov    %esp,%ebp
+80104837:	83 ec 18             	sub    $0x18,%esp
+  struct proc *p;
+  int fd;
+
+  if(proc == initproc)
+8010483a:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
+80104841:	a1 48 b6 10 80       	mov    0x8010b648,%eax
+80104846:	39 c2                	cmp    %eax,%edx
+80104848:	75 0d                	jne    80104857 <exit+0x23>
+    panic("init exiting");
+8010484a:	83 ec 0c             	sub    $0xc,%esp
+8010484d:	68 e4 87 10 80       	push   $0x801087e4
+80104852:	e8 0f bd ff ff       	call   80100566 <panic>
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+80104857:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+8010485e:	eb 48                	jmp    801048a8 <exit+0x74>
+    if(proc->ofile[fd]){
+80104860:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104866:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80104869:	83 c2 08             	add    $0x8,%edx
+8010486c:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
+80104870:	85 c0                	test   %eax,%eax
+80104872:	74 30                	je     801048a4 <exit+0x70>
+      fileclose(proc->ofile[fd]);
+80104874:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010487a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+8010487d:	83 c2 08             	add    $0x8,%edx
+80104880:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
+80104884:	83 ec 0c             	sub    $0xc,%esp
+80104887:	50                   	push   %eax
+80104888:	e8 a9 c7 ff ff       	call   80101036 <fileclose>
+8010488d:	83 c4 10             	add    $0x10,%esp
+      proc->ofile[fd] = 0;
+80104890:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104896:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80104899:	83 c2 08             	add    $0x8,%edx
+8010489c:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
+801048a3:	00 
+
+  if(proc == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+801048a4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+801048a8:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
+801048ac:	7e b2                	jle    80104860 <exit+0x2c>
+      fileclose(proc->ofile[fd]);
+      proc->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+801048ae:	e8 01 ec ff ff       	call   801034b4 <begin_op>
+  iput(proc->cwd);
+801048b3:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801048b9:	8b 40 68             	mov    0x68(%eax),%eax
+801048bc:	83 ec 0c             	sub    $0xc,%esp
+801048bf:	50                   	push   %eax
+801048c0:	e8 10 d2 ff ff       	call   80101ad5 <iput>
+801048c5:	83 c4 10             	add    $0x10,%esp
+  end_op();
+801048c8:	e8 73 ec ff ff       	call   80103540 <end_op>
+  proc->cwd = 0;
+801048cd:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801048d3:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
+
+  acquire(&ptable.lock);
+801048da:	83 ec 0c             	sub    $0xc,%esp
+801048dd:	68 60 29 11 80       	push   $0x80112960
+801048e2:	e8 6f 06 00 00       	call   80104f56 <acquire>
+801048e7:	83 c4 10             	add    $0x10,%esp
+
+  // Parent might be sleeping in wait().
+  wakeup1(proc->parent);
+801048ea:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801048f0:	8b 40 14             	mov    0x14(%eax),%eax
+801048f3:	83 ec 0c             	sub    $0xc,%esp
+801048f6:	50                   	push   %eax
+801048f7:	e8 0d 04 00 00       	call   80104d09 <wakeup1>
+801048fc:	83 c4 10             	add    $0x10,%esp
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801048ff:	c7 45 f4 94 29 11 80 	movl   $0x80112994,-0xc(%ebp)
+80104906:	eb 3c                	jmp    80104944 <exit+0x110>
+    if(p->parent == proc){
+80104908:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010490b:	8b 50 14             	mov    0x14(%eax),%edx
+8010490e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104914:	39 c2                	cmp    %eax,%edx
+80104916:	75 28                	jne    80104940 <exit+0x10c>
+      p->parent = initproc;
+80104918:	8b 15 48 b6 10 80    	mov    0x8010b648,%edx
+8010491e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104921:	89 50 14             	mov    %edx,0x14(%eax)
+      if(p->state == ZOMBIE)
+80104924:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104927:	8b 40 0c             	mov    0xc(%eax),%eax
+8010492a:	83 f8 05             	cmp    $0x5,%eax
+8010492d:	75 11                	jne    80104940 <exit+0x10c>
+        wakeup1(initproc);
+8010492f:	a1 48 b6 10 80       	mov    0x8010b648,%eax
+80104934:	83 ec 0c             	sub    $0xc,%esp
+80104937:	50                   	push   %eax
+80104938:	e8 cc 03 00 00       	call   80104d09 <wakeup1>
+8010493d:	83 c4 10             	add    $0x10,%esp
+
+  // Parent might be sleeping in wait().
+  wakeup1(proc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104940:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
+80104944:	81 7d f4 94 49 11 80 	cmpl   $0x80114994,-0xc(%ebp)
+8010494b:	72 bb                	jb     80104908 <exit+0xd4>
+        wakeup1(initproc);
+    }
+  }
+
+  // Jump into the scheduler, never to return.
+  proc->state = ZOMBIE;
+8010494d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104953:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
+  sched();
+8010495a:	e8 d6 01 00 00       	call   80104b35 <sched>
+  panic("zombie exit");
+8010495f:	83 ec 0c             	sub    $0xc,%esp
+80104962:	68 f1 87 10 80       	push   $0x801087f1
+80104967:	e8 fa bb ff ff       	call   80100566 <panic>
+
+8010496c <wait>:
+
+// Wait for a child process to exit and return its pid.
+// Return -1 if this process has no children.
+int
+wait(void)
+{
+8010496c:	55                   	push   %ebp
+8010496d:	89 e5                	mov    %esp,%ebp
+8010496f:	83 ec 18             	sub    $0x18,%esp
+  struct proc *p;
+  int havekids, pid;
+
+  acquire(&ptable.lock);
+80104972:	83 ec 0c             	sub    $0xc,%esp
+80104975:	68 60 29 11 80       	push   $0x80112960
+8010497a:	e8 d7 05 00 00       	call   80104f56 <acquire>
+8010497f:	83 c4 10             	add    $0x10,%esp
+  for(;;){
+    // Scan through table looking for zombie children.
+    havekids = 0;
+80104982:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104989:	c7 45 f4 94 29 11 80 	movl   $0x80112994,-0xc(%ebp)
+80104990:	e9 a6 00 00 00       	jmp    80104a3b <wait+0xcf>
+      if(p->parent != proc)
+80104995:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104998:	8b 50 14             	mov    0x14(%eax),%edx
+8010499b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801049a1:	39 c2                	cmp    %eax,%edx
+801049a3:	0f 85 8d 00 00 00    	jne    80104a36 <wait+0xca>
+        continue;
+      havekids = 1;
+801049a9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+      if(p->state == ZOMBIE){
+801049b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801049b3:	8b 40 0c             	mov    0xc(%eax),%eax
+801049b6:	83 f8 05             	cmp    $0x5,%eax
+801049b9:	75 7c                	jne    80104a37 <wait+0xcb>
+        // Found one.
+        pid = p->pid;
+801049bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801049be:	8b 40 10             	mov    0x10(%eax),%eax
+801049c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        kfree(p->kstack);
+801049c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801049c7:	8b 40 08             	mov    0x8(%eax),%eax
+801049ca:	83 ec 0c             	sub    $0xc,%esp
+801049cd:	50                   	push   %eax
+801049ce:	e8 55 e1 ff ff       	call   80102b28 <kfree>
+801049d3:	83 c4 10             	add    $0x10,%esp
+        p->kstack = 0;
+801049d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801049d9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        freevm(p->pgdir);
+801049e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801049e3:	8b 40 04             	mov    0x4(%eax),%eax
+801049e6:	83 ec 0c             	sub    $0xc,%esp
+801049e9:	50                   	push   %eax
+801049ea:	e8 fd 37 00 00       	call   801081ec <freevm>
+801049ef:	83 c4 10             	add    $0x10,%esp
+        p->state = UNUSED;
+801049f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801049f5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        p->pid = 0;
+801049fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801049ff:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        p->parent = 0;
+80104a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104a09:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        p->name[0] = 0;
+80104a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104a13:	c6 40 6c 00          	movb   $0x0,0x6c(%eax)
+        p->killed = 0;
+80104a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104a1a:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
+        release(&ptable.lock);
+80104a21:	83 ec 0c             	sub    $0xc,%esp
+80104a24:	68 60 29 11 80       	push   $0x80112960
+80104a29:	e8 8f 05 00 00       	call   80104fbd <release>
+80104a2e:	83 c4 10             	add    $0x10,%esp
+        return pid;
+80104a31:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80104a34:	eb 58                	jmp    80104a8e <wait+0x122>
+  for(;;){
+    // Scan through table looking for zombie children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != proc)
+        continue;
+80104a36:	90                   	nop
+
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for zombie children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104a37:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
+80104a3b:	81 7d f4 94 49 11 80 	cmpl   $0x80114994,-0xc(%ebp)
+80104a42:	0f 82 4d ff ff ff    	jb     80104995 <wait+0x29>
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || proc->killed){
+80104a48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80104a4c:	74 0d                	je     80104a5b <wait+0xef>
+80104a4e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104a54:	8b 40 24             	mov    0x24(%eax),%eax
+80104a57:	85 c0                	test   %eax,%eax
+80104a59:	74 17                	je     80104a72 <wait+0x106>
+      release(&ptable.lock);
+80104a5b:	83 ec 0c             	sub    $0xc,%esp
+80104a5e:	68 60 29 11 80       	push   $0x80112960
+80104a63:	e8 55 05 00 00       	call   80104fbd <release>
+80104a68:	83 c4 10             	add    $0x10,%esp
+      return -1;
+80104a6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104a70:	eb 1c                	jmp    80104a8e <wait+0x122>
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(proc, &ptable.lock);  //DOC: wait-sleep
+80104a72:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104a78:	83 ec 08             	sub    $0x8,%esp
+80104a7b:	68 60 29 11 80       	push   $0x80112960
+80104a80:	50                   	push   %eax
+80104a81:	e8 d7 01 00 00       	call   80104c5d <sleep>
+80104a86:	83 c4 10             	add    $0x10,%esp
+  }
+80104a89:	e9 f4 fe ff ff       	jmp    80104982 <wait+0x16>
+}
+80104a8e:	c9                   	leave  
+80104a8f:	c3                   	ret    
+
+80104a90 <scheduler>:
+//  - swtch to start running that process
+//  - eventually that process transfers control
+//      via swtch back to the scheduler.
+void
+scheduler(void)
+{
+80104a90:	55                   	push   %ebp
+80104a91:	89 e5                	mov    %esp,%ebp
+80104a93:	83 ec 18             	sub    $0x18,%esp
+  struct proc *p;
+
+  for(;;){
+    // Enable interrupts on this processor.
+    sti();
+80104a96:	e8 1f f9 ff ff       	call   801043ba <sti>
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+80104a9b:	83 ec 0c             	sub    $0xc,%esp
+80104a9e:	68 60 29 11 80       	push   $0x80112960
+80104aa3:	e8 ae 04 00 00       	call   80104f56 <acquire>
+80104aa8:	83 c4 10             	add    $0x10,%esp
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104aab:	c7 45 f4 94 29 11 80 	movl   $0x80112994,-0xc(%ebp)
+80104ab2:	eb 63                	jmp    80104b17 <scheduler+0x87>
+      if(p->state != RUNNABLE)
+80104ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104ab7:	8b 40 0c             	mov    0xc(%eax),%eax
+80104aba:	83 f8 03             	cmp    $0x3,%eax
+80104abd:	75 53                	jne    80104b12 <scheduler+0x82>
+        continue;
+
+      // Switch to chosen process.  It is the process's job
+      // to release ptable.lock and then reacquire it
+      // before jumping back to us.
+      proc = p;
+80104abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104ac2:	65 a3 04 00 00 00    	mov    %eax,%gs:0x4
+      switchuvm(p);
+80104ac8:	83 ec 0c             	sub    $0xc,%esp
+80104acb:	ff 75 f4             	pushl  -0xc(%ebp)
+80104ace:	e8 d3 32 00 00       	call   80107da6 <switchuvm>
+80104ad3:	83 c4 10             	add    $0x10,%esp
+      p->state = RUNNING;
+80104ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104ad9:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
+      swtch(&cpu->scheduler, proc->context);
+80104ae0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104ae6:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104ae9:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
+80104af0:	83 c2 04             	add    $0x4,%edx
+80104af3:	83 ec 08             	sub    $0x8,%esp
+80104af6:	50                   	push   %eax
+80104af7:	52                   	push   %edx
+80104af8:	e8 30 09 00 00       	call   8010542d <swtch>
+80104afd:	83 c4 10             	add    $0x10,%esp
+      switchkvm();
+80104b00:	e8 84 32 00 00       	call   80107d89 <switchkvm>
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      proc = 0;
+80104b05:	65 c7 05 04 00 00 00 	movl   $0x0,%gs:0x4
+80104b0c:	00 00 00 00 
+80104b10:	eb 01                	jmp    80104b13 <scheduler+0x83>
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE)
+        continue;
+80104b12:	90                   	nop
+    // Enable interrupts on this processor.
+    sti();
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104b13:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
+80104b17:	81 7d f4 94 49 11 80 	cmpl   $0x80114994,-0xc(%ebp)
+80104b1e:	72 94                	jb     80104ab4 <scheduler+0x24>
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      proc = 0;
+    }
+    release(&ptable.lock);
+80104b20:	83 ec 0c             	sub    $0xc,%esp
+80104b23:	68 60 29 11 80       	push   $0x80112960
+80104b28:	e8 90 04 00 00       	call   80104fbd <release>
+80104b2d:	83 c4 10             	add    $0x10,%esp
+
+  }
+80104b30:	e9 61 ff ff ff       	jmp    80104a96 <scheduler+0x6>
+
+80104b35 <sched>:
+
+// Enter scheduler.  Must hold only ptable.lock
+// and have changed proc->state.
+void
+sched(void)
+{
+80104b35:	55                   	push   %ebp
+80104b36:	89 e5                	mov    %esp,%ebp
+80104b38:	83 ec 18             	sub    $0x18,%esp
+  int intena;
+
+  if(!holding(&ptable.lock))
+80104b3b:	83 ec 0c             	sub    $0xc,%esp
+80104b3e:	68 60 29 11 80       	push   $0x80112960
+80104b43:	e8 41 05 00 00       	call   80105089 <holding>
+80104b48:	83 c4 10             	add    $0x10,%esp
+80104b4b:	85 c0                	test   %eax,%eax
+80104b4d:	75 0d                	jne    80104b5c <sched+0x27>
+    panic("sched ptable.lock");
+80104b4f:	83 ec 0c             	sub    $0xc,%esp
+80104b52:	68 fd 87 10 80       	push   $0x801087fd
+80104b57:	e8 0a ba ff ff       	call   80100566 <panic>
+  if(cpu->ncli != 1)
+80104b5c:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80104b62:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80104b68:	83 f8 01             	cmp    $0x1,%eax
+80104b6b:	74 0d                	je     80104b7a <sched+0x45>
+    panic("sched locks");
+80104b6d:	83 ec 0c             	sub    $0xc,%esp
+80104b70:	68 0f 88 10 80       	push   $0x8010880f
+80104b75:	e8 ec b9 ff ff       	call   80100566 <panic>
+  if(proc->state == RUNNING)
+80104b7a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104b80:	8b 40 0c             	mov    0xc(%eax),%eax
+80104b83:	83 f8 04             	cmp    $0x4,%eax
+80104b86:	75 0d                	jne    80104b95 <sched+0x60>
+    panic("sched running");
+80104b88:	83 ec 0c             	sub    $0xc,%esp
+80104b8b:	68 1b 88 10 80       	push   $0x8010881b
+80104b90:	e8 d1 b9 ff ff       	call   80100566 <panic>
+  if(readeflags()&FL_IF)
+80104b95:	e8 10 f8 ff ff       	call   801043aa <readeflags>
+80104b9a:	25 00 02 00 00       	and    $0x200,%eax
+80104b9f:	85 c0                	test   %eax,%eax
+80104ba1:	74 0d                	je     80104bb0 <sched+0x7b>
+    panic("sched interruptible");
+80104ba3:	83 ec 0c             	sub    $0xc,%esp
+80104ba6:	68 29 88 10 80       	push   $0x80108829
+80104bab:	e8 b6 b9 ff ff       	call   80100566 <panic>
+  intena = cpu->intena;
+80104bb0:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80104bb6:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
+80104bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  swtch(&proc->context, cpu->scheduler);
+80104bbf:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80104bc5:	8b 40 04             	mov    0x4(%eax),%eax
+80104bc8:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
+80104bcf:	83 c2 1c             	add    $0x1c,%edx
+80104bd2:	83 ec 08             	sub    $0x8,%esp
+80104bd5:	50                   	push   %eax
+80104bd6:	52                   	push   %edx
+80104bd7:	e8 51 08 00 00       	call   8010542d <swtch>
+80104bdc:	83 c4 10             	add    $0x10,%esp
+  cpu->intena = intena;
+80104bdf:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80104be5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104be8:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
+}
+80104bee:	90                   	nop
+80104bef:	c9                   	leave  
+80104bf0:	c3                   	ret    
+
+80104bf1 <yield>:
+
+// Give up the CPU for one scheduling round.
+void
+yield(void)
+{
+80104bf1:	55                   	push   %ebp
+80104bf2:	89 e5                	mov    %esp,%ebp
+80104bf4:	83 ec 08             	sub    $0x8,%esp
+  acquire(&ptable.lock);  //DOC: yieldlock
+80104bf7:	83 ec 0c             	sub    $0xc,%esp
+80104bfa:	68 60 29 11 80       	push   $0x80112960
+80104bff:	e8 52 03 00 00       	call   80104f56 <acquire>
+80104c04:	83 c4 10             	add    $0x10,%esp
+  proc->state = RUNNABLE;
+80104c07:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104c0d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  sched();
+80104c14:	e8 1c ff ff ff       	call   80104b35 <sched>
+  release(&ptable.lock);
+80104c19:	83 ec 0c             	sub    $0xc,%esp
+80104c1c:	68 60 29 11 80       	push   $0x80112960
+80104c21:	e8 97 03 00 00       	call   80104fbd <release>
+80104c26:	83 c4 10             	add    $0x10,%esp
+}
+80104c29:	90                   	nop
+80104c2a:	c9                   	leave  
+80104c2b:	c3                   	ret    
+
+80104c2c <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+80104c2c:	55                   	push   %ebp
+80104c2d:	89 e5                	mov    %esp,%ebp
+80104c2f:	83 ec 08             	sub    $0x8,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+80104c32:	83 ec 0c             	sub    $0xc,%esp
+80104c35:	68 60 29 11 80       	push   $0x80112960
+80104c3a:	e8 7e 03 00 00       	call   80104fbd <release>
+80104c3f:	83 c4 10             	add    $0x10,%esp
+
+  if (first) {
+80104c42:	a1 08 b0 10 80       	mov    0x8010b008,%eax
+80104c47:	85 c0                	test   %eax,%eax
+80104c49:	74 0f                	je     80104c5a <forkret+0x2e>
+    // Some initialization functions must be run in the context
+    // of a regular process (e.g., they call sleep), and thus cannot 
+    // be run from main().
+    first = 0;
+80104c4b:	c7 05 08 b0 10 80 00 	movl   $0x0,0x8010b008
+80104c52:	00 00 00 
+    initlog();
+80104c55:	e8 34 e6 ff ff       	call   8010328e <initlog>
+  }
+  
+  // Return to "caller", actually trapret (see allocproc).
+}
+80104c5a:	90                   	nop
+80104c5b:	c9                   	leave  
+80104c5c:	c3                   	ret    
+
+80104c5d <sleep>:
+
+// Atomically release lock and sleep on chan.
+// Reacquires lock when awakened.
+void
+sleep(void *chan, struct spinlock *lk)
+{
+80104c5d:	55                   	push   %ebp
+80104c5e:	89 e5                	mov    %esp,%ebp
+80104c60:	83 ec 08             	sub    $0x8,%esp
+  if(proc == 0)
+80104c63:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104c69:	85 c0                	test   %eax,%eax
+80104c6b:	75 0d                	jne    80104c7a <sleep+0x1d>
+    panic("sleep");
+80104c6d:	83 ec 0c             	sub    $0xc,%esp
+80104c70:	68 3d 88 10 80       	push   $0x8010883d
+80104c75:	e8 ec b8 ff ff       	call   80100566 <panic>
+
+  if(lk == 0)
+80104c7a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+80104c7e:	75 0d                	jne    80104c8d <sleep+0x30>
+    panic("sleep without lk");
+80104c80:	83 ec 0c             	sub    $0xc,%esp
+80104c83:	68 43 88 10 80       	push   $0x80108843
+80104c88:	e8 d9 b8 ff ff       	call   80100566 <panic>
+  // change p->state and then call sched.
+  // Once we hold ptable.lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup runs with ptable.lock locked),
+  // so it's okay to release lk.
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+80104c8d:	81 7d 0c 60 29 11 80 	cmpl   $0x80112960,0xc(%ebp)
+80104c94:	74 1e                	je     80104cb4 <sleep+0x57>
+    acquire(&ptable.lock);  //DOC: sleeplock1
+80104c96:	83 ec 0c             	sub    $0xc,%esp
+80104c99:	68 60 29 11 80       	push   $0x80112960
+80104c9e:	e8 b3 02 00 00       	call   80104f56 <acquire>
+80104ca3:	83 c4 10             	add    $0x10,%esp
+    release(lk);
+80104ca6:	83 ec 0c             	sub    $0xc,%esp
+80104ca9:	ff 75 0c             	pushl  0xc(%ebp)
+80104cac:	e8 0c 03 00 00       	call   80104fbd <release>
+80104cb1:	83 c4 10             	add    $0x10,%esp
+  }
+
+  // Go to sleep.
+  proc->chan = chan;
+80104cb4:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104cba:	8b 55 08             	mov    0x8(%ebp),%edx
+80104cbd:	89 50 20             	mov    %edx,0x20(%eax)
+  proc->state = SLEEPING;
+80104cc0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104cc6:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
+  sched();
+80104ccd:	e8 63 fe ff ff       	call   80104b35 <sched>
+
+  // Tidy up.
+  proc->chan = 0;
+80104cd2:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80104cd8:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
+
+  // Reacquire original lock.
+  if(lk != &ptable.lock){  //DOC: sleeplock2
+80104cdf:	81 7d 0c 60 29 11 80 	cmpl   $0x80112960,0xc(%ebp)
+80104ce6:	74 1e                	je     80104d06 <sleep+0xa9>
+    release(&ptable.lock);
+80104ce8:	83 ec 0c             	sub    $0xc,%esp
+80104ceb:	68 60 29 11 80       	push   $0x80112960
+80104cf0:	e8 c8 02 00 00       	call   80104fbd <release>
+80104cf5:	83 c4 10             	add    $0x10,%esp
+    acquire(lk);
+80104cf8:	83 ec 0c             	sub    $0xc,%esp
+80104cfb:	ff 75 0c             	pushl  0xc(%ebp)
+80104cfe:	e8 53 02 00 00       	call   80104f56 <acquire>
+80104d03:	83 c4 10             	add    $0x10,%esp
+  }
+}
+80104d06:	90                   	nop
+80104d07:	c9                   	leave  
+80104d08:	c3                   	ret    
+
+80104d09 <wakeup1>:
+//PAGEBREAK!
+// Wake up all processes sleeping on chan.
+// The ptable lock must be held.
+static void
+wakeup1(void *chan)
+{
+80104d09:	55                   	push   %ebp
+80104d0a:	89 e5                	mov    %esp,%ebp
+80104d0c:	83 ec 10             	sub    $0x10,%esp
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104d0f:	c7 45 fc 94 29 11 80 	movl   $0x80112994,-0x4(%ebp)
+80104d16:	eb 24                	jmp    80104d3c <wakeup1+0x33>
+    if(p->state == SLEEPING && p->chan == chan)
+80104d18:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80104d1b:	8b 40 0c             	mov    0xc(%eax),%eax
+80104d1e:	83 f8 02             	cmp    $0x2,%eax
+80104d21:	75 15                	jne    80104d38 <wakeup1+0x2f>
+80104d23:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80104d26:	8b 40 20             	mov    0x20(%eax),%eax
+80104d29:	3b 45 08             	cmp    0x8(%ebp),%eax
+80104d2c:	75 0a                	jne    80104d38 <wakeup1+0x2f>
+      p->state = RUNNABLE;
+80104d2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80104d31:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104d38:	83 6d fc 80          	subl   $0xffffff80,-0x4(%ebp)
+80104d3c:	81 7d fc 94 49 11 80 	cmpl   $0x80114994,-0x4(%ebp)
+80104d43:	72 d3                	jb     80104d18 <wakeup1+0xf>
+    if(p->state == SLEEPING && p->chan == chan)
+      p->state = RUNNABLE;
+}
+80104d45:	90                   	nop
+80104d46:	c9                   	leave  
+80104d47:	c3                   	ret    
+
+80104d48 <wakeup>:
+
+// Wake up all processes sleeping on chan.
+void
+wakeup(void *chan)
+{
+80104d48:	55                   	push   %ebp
+80104d49:	89 e5                	mov    %esp,%ebp
+80104d4b:	83 ec 08             	sub    $0x8,%esp
+  acquire(&ptable.lock);
+80104d4e:	83 ec 0c             	sub    $0xc,%esp
+80104d51:	68 60 29 11 80       	push   $0x80112960
+80104d56:	e8 fb 01 00 00       	call   80104f56 <acquire>
+80104d5b:	83 c4 10             	add    $0x10,%esp
+  wakeup1(chan);
+80104d5e:	83 ec 0c             	sub    $0xc,%esp
+80104d61:	ff 75 08             	pushl  0x8(%ebp)
+80104d64:	e8 a0 ff ff ff       	call   80104d09 <wakeup1>
+80104d69:	83 c4 10             	add    $0x10,%esp
+  release(&ptable.lock);
+80104d6c:	83 ec 0c             	sub    $0xc,%esp
+80104d6f:	68 60 29 11 80       	push   $0x80112960
+80104d74:	e8 44 02 00 00       	call   80104fbd <release>
+80104d79:	83 c4 10             	add    $0x10,%esp
+}
+80104d7c:	90                   	nop
+80104d7d:	c9                   	leave  
+80104d7e:	c3                   	ret    
+
+80104d7f <kill>:
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int
+kill(int pid)
+{
+80104d7f:	55                   	push   %ebp
+80104d80:	89 e5                	mov    %esp,%ebp
+80104d82:	83 ec 18             	sub    $0x18,%esp
+  struct proc *p;
+
+  acquire(&ptable.lock);
+80104d85:	83 ec 0c             	sub    $0xc,%esp
+80104d88:	68 60 29 11 80       	push   $0x80112960
+80104d8d:	e8 c4 01 00 00       	call   80104f56 <acquire>
+80104d92:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104d95:	c7 45 f4 94 29 11 80 	movl   $0x80112994,-0xc(%ebp)
+80104d9c:	eb 45                	jmp    80104de3 <kill+0x64>
+    if(p->pid == pid){
+80104d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104da1:	8b 40 10             	mov    0x10(%eax),%eax
+80104da4:	3b 45 08             	cmp    0x8(%ebp),%eax
+80104da7:	75 36                	jne    80104ddf <kill+0x60>
+      p->killed = 1;
+80104da9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104dac:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING)
+80104db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104db6:	8b 40 0c             	mov    0xc(%eax),%eax
+80104db9:	83 f8 02             	cmp    $0x2,%eax
+80104dbc:	75 0a                	jne    80104dc8 <kill+0x49>
+        p->state = RUNNABLE;
+80104dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104dc1:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+      release(&ptable.lock);
+80104dc8:	83 ec 0c             	sub    $0xc,%esp
+80104dcb:	68 60 29 11 80       	push   $0x80112960
+80104dd0:	e8 e8 01 00 00       	call   80104fbd <release>
+80104dd5:	83 c4 10             	add    $0x10,%esp
+      return 0;
+80104dd8:	b8 00 00 00 00       	mov    $0x0,%eax
+80104ddd:	eb 22                	jmp    80104e01 <kill+0x82>
+kill(int pid)
+{
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104ddf:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
+80104de3:	81 7d f4 94 49 11 80 	cmpl   $0x80114994,-0xc(%ebp)
+80104dea:	72 b2                	jb     80104d9e <kill+0x1f>
+        p->state = RUNNABLE;
+      release(&ptable.lock);
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+80104dec:	83 ec 0c             	sub    $0xc,%esp
+80104def:	68 60 29 11 80       	push   $0x80112960
+80104df4:	e8 c4 01 00 00       	call   80104fbd <release>
+80104df9:	83 c4 10             	add    $0x10,%esp
+  return -1;
+80104dfc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104e01:	c9                   	leave  
+80104e02:	c3                   	ret    
+
+80104e03 <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+80104e03:	55                   	push   %ebp
+80104e04:	89 e5                	mov    %esp,%ebp
+80104e06:	83 ec 48             	sub    $0x48,%esp
+  int i;
+  struct proc *p;
+  char *state;
+  uint pc[10];
+  
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104e09:	c7 45 f0 94 29 11 80 	movl   $0x80112994,-0x10(%ebp)
+80104e10:	e9 d7 00 00 00       	jmp    80104eec <procdump+0xe9>
+    if(p->state == UNUSED)
+80104e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104e18:	8b 40 0c             	mov    0xc(%eax),%eax
+80104e1b:	85 c0                	test   %eax,%eax
+80104e1d:	0f 84 c4 00 00 00    	je     80104ee7 <procdump+0xe4>
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+80104e23:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104e26:	8b 40 0c             	mov    0xc(%eax),%eax
+80104e29:	83 f8 05             	cmp    $0x5,%eax
+80104e2c:	77 23                	ja     80104e51 <procdump+0x4e>
+80104e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104e31:	8b 40 0c             	mov    0xc(%eax),%eax
+80104e34:	8b 04 85 0c b0 10 80 	mov    -0x7fef4ff4(,%eax,4),%eax
+80104e3b:	85 c0                	test   %eax,%eax
+80104e3d:	74 12                	je     80104e51 <procdump+0x4e>
+      state = states[p->state];
+80104e3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104e42:	8b 40 0c             	mov    0xc(%eax),%eax
+80104e45:	8b 04 85 0c b0 10 80 	mov    -0x7fef4ff4(,%eax,4),%eax
+80104e4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+80104e4f:	eb 07                	jmp    80104e58 <procdump+0x55>
+    else
+      state = "???";
+80104e51:	c7 45 ec 54 88 10 80 	movl   $0x80108854,-0x14(%ebp)
+    cprintf("%d %s %s", p->pid, state, p->name);
+80104e58:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104e5b:	8d 50 6c             	lea    0x6c(%eax),%edx
+80104e5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104e61:	8b 40 10             	mov    0x10(%eax),%eax
+80104e64:	52                   	push   %edx
+80104e65:	ff 75 ec             	pushl  -0x14(%ebp)
+80104e68:	50                   	push   %eax
+80104e69:	68 58 88 10 80       	push   $0x80108858
+80104e6e:	e8 53 b5 ff ff       	call   801003c6 <cprintf>
+80104e73:	83 c4 10             	add    $0x10,%esp
+    if(p->state == SLEEPING){
+80104e76:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104e79:	8b 40 0c             	mov    0xc(%eax),%eax
+80104e7c:	83 f8 02             	cmp    $0x2,%eax
+80104e7f:	75 54                	jne    80104ed5 <procdump+0xd2>
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+80104e81:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104e84:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104e87:	8b 40 0c             	mov    0xc(%eax),%eax
+80104e8a:	83 c0 08             	add    $0x8,%eax
+80104e8d:	89 c2                	mov    %eax,%edx
+80104e8f:	83 ec 08             	sub    $0x8,%esp
+80104e92:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80104e95:	50                   	push   %eax
+80104e96:	52                   	push   %edx
+80104e97:	e8 73 01 00 00       	call   8010500f <getcallerpcs>
+80104e9c:	83 c4 10             	add    $0x10,%esp
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104e9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80104ea6:	eb 1c                	jmp    80104ec4 <procdump+0xc1>
+        cprintf(" %p", pc[i]);
+80104ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104eab:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
+80104eaf:	83 ec 08             	sub    $0x8,%esp
+80104eb2:	50                   	push   %eax
+80104eb3:	68 61 88 10 80       	push   $0x80108861
+80104eb8:	e8 09 b5 ff ff       	call   801003c6 <cprintf>
+80104ebd:	83 c4 10             	add    $0x10,%esp
+    else
+      state = "???";
+    cprintf("%d %s %s", p->pid, state, p->name);
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104ec0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80104ec4:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+80104ec8:	7f 0b                	jg     80104ed5 <procdump+0xd2>
+80104eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104ecd:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
+80104ed1:	85 c0                	test   %eax,%eax
+80104ed3:	75 d3                	jne    80104ea8 <procdump+0xa5>
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+80104ed5:	83 ec 0c             	sub    $0xc,%esp
+80104ed8:	68 65 88 10 80       	push   $0x80108865
+80104edd:	e8 e4 b4 ff ff       	call   801003c6 <cprintf>
+80104ee2:	83 c4 10             	add    $0x10,%esp
+80104ee5:	eb 01                	jmp    80104ee8 <procdump+0xe5>
+  char *state;
+  uint pc[10];
+  
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED)
+      continue;
+80104ee7:	90                   	nop
+  int i;
+  struct proc *p;
+  char *state;
+  uint pc[10];
+  
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104ee8:	83 6d f0 80          	subl   $0xffffff80,-0x10(%ebp)
+80104eec:	81 7d f0 94 49 11 80 	cmpl   $0x80114994,-0x10(%ebp)
+80104ef3:	0f 82 1c ff ff ff    	jb     80104e15 <procdump+0x12>
+      for(i=0; i<10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+  }
+}
+80104ef9:	90                   	nop
+80104efa:	c9                   	leave  
+80104efb:	c3                   	ret    
+
+80104efc <readeflags>:
+  asm volatile("ltr %0" : : "r" (sel));
+}
+
+static inline uint
+readeflags(void)
+{
+80104efc:	55                   	push   %ebp
+80104efd:	89 e5                	mov    %esp,%ebp
+80104eff:	83 ec 10             	sub    $0x10,%esp
+  uint eflags;
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80104f02:	9c                   	pushf  
+80104f03:	58                   	pop    %eax
+80104f04:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  return eflags;
+80104f07:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+80104f0a:	c9                   	leave  
+80104f0b:	c3                   	ret    
+
+80104f0c <cli>:
+  asm volatile("movw %0, %%gs" : : "r" (v));
+}
+
+static inline void
+cli(void)
+{
+80104f0c:	55                   	push   %ebp
+80104f0d:	89 e5                	mov    %esp,%ebp
+  asm volatile("cli");
+80104f0f:	fa                   	cli    
+}
+80104f10:	90                   	nop
+80104f11:	5d                   	pop    %ebp
+80104f12:	c3                   	ret    
+
+80104f13 <sti>:
+
+static inline void
+sti(void)
+{
+80104f13:	55                   	push   %ebp
+80104f14:	89 e5                	mov    %esp,%ebp
+  asm volatile("sti");
+80104f16:	fb                   	sti    
+}
+80104f17:	90                   	nop
+80104f18:	5d                   	pop    %ebp
+80104f19:	c3                   	ret    
+
+80104f1a <xchg>:
+
+static inline uint
+xchg(volatile uint *addr, uint newval)
+{
+80104f1a:	55                   	push   %ebp
+80104f1b:	89 e5                	mov    %esp,%ebp
+80104f1d:	83 ec 10             	sub    $0x10,%esp
+  uint result;
+  
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+80104f20:	8b 55 08             	mov    0x8(%ebp),%edx
+80104f23:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104f26:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104f29:	f0 87 02             	lock xchg %eax,(%edx)
+80104f2c:	89 45 fc             	mov    %eax,-0x4(%ebp)
+               "+m" (*addr), "=a" (result) :
+               "1" (newval) :
+               "cc");
+  return result;
+80104f2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+80104f32:	c9                   	leave  
+80104f33:	c3                   	ret    
+
+80104f34 <initlock>:
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+80104f34:	55                   	push   %ebp
+80104f35:	89 e5                	mov    %esp,%ebp
+  lk->name = name;
+80104f37:	8b 45 08             	mov    0x8(%ebp),%eax
+80104f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104f3d:	89 50 04             	mov    %edx,0x4(%eax)
+  lk->locked = 0;
+80104f40:	8b 45 08             	mov    0x8(%ebp),%eax
+80104f43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  lk->cpu = 0;
+80104f49:	8b 45 08             	mov    0x8(%ebp),%eax
+80104f4c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+80104f53:	90                   	nop
+80104f54:	5d                   	pop    %ebp
+80104f55:	c3                   	ret    
+
+80104f56 <acquire>:
+// Loops (spins) until the lock is acquired.
+// Holding a lock for a long time may cause
+// other CPUs to waste time spinning to acquire it.
+void
+acquire(struct spinlock *lk)
+{
+80104f56:	55                   	push   %ebp
+80104f57:	89 e5                	mov    %esp,%ebp
+80104f59:	83 ec 08             	sub    $0x8,%esp
+  pushcli(); // disable interrupts to avoid deadlock.
+80104f5c:	e8 52 01 00 00       	call   801050b3 <pushcli>
+  if(holding(lk))
+80104f61:	8b 45 08             	mov    0x8(%ebp),%eax
+80104f64:	83 ec 0c             	sub    $0xc,%esp
+80104f67:	50                   	push   %eax
+80104f68:	e8 1c 01 00 00       	call   80105089 <holding>
+80104f6d:	83 c4 10             	add    $0x10,%esp
+80104f70:	85 c0                	test   %eax,%eax
+80104f72:	74 0d                	je     80104f81 <acquire+0x2b>
+    panic("acquire");
+80104f74:	83 ec 0c             	sub    $0xc,%esp
+80104f77:	68 91 88 10 80       	push   $0x80108891
+80104f7c:	e8 e5 b5 ff ff       	call   80100566 <panic>
+
+  // The xchg is atomic.
+  // It also serializes, so that reads after acquire are not
+  // reordered before it. 
+  while(xchg(&lk->locked, 1) != 0)
+80104f81:	90                   	nop
+80104f82:	8b 45 08             	mov    0x8(%ebp),%eax
+80104f85:	83 ec 08             	sub    $0x8,%esp
+80104f88:	6a 01                	push   $0x1
+80104f8a:	50                   	push   %eax
+80104f8b:	e8 8a ff ff ff       	call   80104f1a <xchg>
+80104f90:	83 c4 10             	add    $0x10,%esp
+80104f93:	85 c0                	test   %eax,%eax
+80104f95:	75 eb                	jne    80104f82 <acquire+0x2c>
+    ;
+
+  // Record info about lock acquisition for debugging.
+  lk->cpu = cpu;
+80104f97:	8b 45 08             	mov    0x8(%ebp),%eax
+80104f9a:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
+80104fa1:	89 50 08             	mov    %edx,0x8(%eax)
+  getcallerpcs(&lk, lk->pcs);
+80104fa4:	8b 45 08             	mov    0x8(%ebp),%eax
+80104fa7:	83 c0 0c             	add    $0xc,%eax
+80104faa:	83 ec 08             	sub    $0x8,%esp
+80104fad:	50                   	push   %eax
+80104fae:	8d 45 08             	lea    0x8(%ebp),%eax
+80104fb1:	50                   	push   %eax
+80104fb2:	e8 58 00 00 00       	call   8010500f <getcallerpcs>
+80104fb7:	83 c4 10             	add    $0x10,%esp
+}
+80104fba:	90                   	nop
+80104fbb:	c9                   	leave  
+80104fbc:	c3                   	ret    
+
+80104fbd <release>:
+
+// Release the lock.
+void
+release(struct spinlock *lk)
+{
+80104fbd:	55                   	push   %ebp
+80104fbe:	89 e5                	mov    %esp,%ebp
+80104fc0:	83 ec 08             	sub    $0x8,%esp
+  if(!holding(lk))
+80104fc3:	83 ec 0c             	sub    $0xc,%esp
+80104fc6:	ff 75 08             	pushl  0x8(%ebp)
+80104fc9:	e8 bb 00 00 00       	call   80105089 <holding>
+80104fce:	83 c4 10             	add    $0x10,%esp
+80104fd1:	85 c0                	test   %eax,%eax
+80104fd3:	75 0d                	jne    80104fe2 <release+0x25>
+    panic("release");
+80104fd5:	83 ec 0c             	sub    $0xc,%esp
+80104fd8:	68 99 88 10 80       	push   $0x80108899
+80104fdd:	e8 84 b5 ff ff       	call   80100566 <panic>
+
+  lk->pcs[0] = 0;
+80104fe2:	8b 45 08             	mov    0x8(%ebp),%eax
+80104fe5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+  lk->cpu = 0;
+80104fec:	8b 45 08             	mov    0x8(%ebp),%eax
+80104fef:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+  // But the 2007 Intel 64 Architecture Memory Ordering White
+  // Paper says that Intel 64 and IA-32 will not move a load
+  // after a store. So lock->locked = 0 would work here.
+  // The xchg being asm volatile ensures gcc emits it after
+  // the above assignments (and after the critical section).
+  xchg(&lk->locked, 0);
+80104ff6:	8b 45 08             	mov    0x8(%ebp),%eax
+80104ff9:	83 ec 08             	sub    $0x8,%esp
+80104ffc:	6a 00                	push   $0x0
+80104ffe:	50                   	push   %eax
+80104fff:	e8 16 ff ff ff       	call   80104f1a <xchg>
+80105004:	83 c4 10             	add    $0x10,%esp
+
+  popcli();
+80105007:	e8 ec 00 00 00       	call   801050f8 <popcli>
+}
+8010500c:	90                   	nop
+8010500d:	c9                   	leave  
+8010500e:	c3                   	ret    
+
+8010500f <getcallerpcs>:
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+8010500f:	55                   	push   %ebp
+80105010:	89 e5                	mov    %esp,%ebp
+80105012:	83 ec 10             	sub    $0x10,%esp
+  uint *ebp;
+  int i;
+  
+  ebp = (uint*)v - 2;
+80105015:	8b 45 08             	mov    0x8(%ebp),%eax
+80105018:	83 e8 08             	sub    $0x8,%eax
+8010501b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  for(i = 0; i < 10; i++){
+8010501e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+80105025:	eb 38                	jmp    8010505f <getcallerpcs+0x50>
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80105027:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+8010502b:	74 53                	je     80105080 <getcallerpcs+0x71>
+8010502d:	81 7d fc ff ff ff 7f 	cmpl   $0x7fffffff,-0x4(%ebp)
+80105034:	76 4a                	jbe    80105080 <getcallerpcs+0x71>
+80105036:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
+8010503a:	74 44                	je     80105080 <getcallerpcs+0x71>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+8010503c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+8010503f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80105046:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105049:	01 c2                	add    %eax,%edx
+8010504b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+8010504e:	8b 40 04             	mov    0x4(%eax),%eax
+80105051:	89 02                	mov    %eax,(%edx)
+    ebp = (uint*)ebp[0]; // saved %ebp
+80105053:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80105056:	8b 00                	mov    (%eax),%eax
+80105058:	89 45 fc             	mov    %eax,-0x4(%ebp)
+{
+  uint *ebp;
+  int i;
+  
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+8010505b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+8010505f:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
+80105063:	7e c2                	jle    80105027 <getcallerpcs+0x18>
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+80105065:	eb 19                	jmp    80105080 <getcallerpcs+0x71>
+    pcs[i] = 0;
+80105067:	8b 45 f8             	mov    -0x8(%ebp),%eax
+8010506a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80105071:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105074:	01 d0                	add    %edx,%eax
+80105076:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+8010507c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+80105080:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
+80105084:	7e e1                	jle    80105067 <getcallerpcs+0x58>
+    pcs[i] = 0;
+}
+80105086:	90                   	nop
+80105087:	c9                   	leave  
+80105088:	c3                   	ret    
+
+80105089 <holding>:
+
+// Check whether this cpu is holding the lock.
+int
+holding(struct spinlock *lock)
+{
+80105089:	55                   	push   %ebp
+8010508a:	89 e5                	mov    %esp,%ebp
+  return lock->locked && lock->cpu == cpu;
+8010508c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010508f:	8b 00                	mov    (%eax),%eax
+80105091:	85 c0                	test   %eax,%eax
+80105093:	74 17                	je     801050ac <holding+0x23>
+80105095:	8b 45 08             	mov    0x8(%ebp),%eax
+80105098:	8b 50 08             	mov    0x8(%eax),%edx
+8010509b:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+801050a1:	39 c2                	cmp    %eax,%edx
+801050a3:	75 07                	jne    801050ac <holding+0x23>
+801050a5:	b8 01 00 00 00       	mov    $0x1,%eax
+801050aa:	eb 05                	jmp    801050b1 <holding+0x28>
+801050ac:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801050b1:	5d                   	pop    %ebp
+801050b2:	c3                   	ret    
+
+801050b3 <pushcli>:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+801050b3:	55                   	push   %ebp
+801050b4:	89 e5                	mov    %esp,%ebp
+801050b6:	83 ec 10             	sub    $0x10,%esp
+  int eflags;
+  
+  eflags = readeflags();
+801050b9:	e8 3e fe ff ff       	call   80104efc <readeflags>
+801050be:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  cli();
+801050c1:	e8 46 fe ff ff       	call   80104f0c <cli>
+  if(cpu->ncli++ == 0)
+801050c6:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
+801050cd:	8b 82 ac 00 00 00    	mov    0xac(%edx),%eax
+801050d3:	8d 48 01             	lea    0x1(%eax),%ecx
+801050d6:	89 8a ac 00 00 00    	mov    %ecx,0xac(%edx)
+801050dc:	85 c0                	test   %eax,%eax
+801050de:	75 15                	jne    801050f5 <pushcli+0x42>
+    cpu->intena = eflags & FL_IF;
+801050e0:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+801050e6:	8b 55 fc             	mov    -0x4(%ebp),%edx
+801050e9:	81 e2 00 02 00 00    	and    $0x200,%edx
+801050ef:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
+}
+801050f5:	90                   	nop
+801050f6:	c9                   	leave  
+801050f7:	c3                   	ret    
+
+801050f8 <popcli>:
+
+void
+popcli(void)
+{
+801050f8:	55                   	push   %ebp
+801050f9:	89 e5                	mov    %esp,%ebp
+801050fb:	83 ec 08             	sub    $0x8,%esp
+  if(readeflags()&FL_IF)
+801050fe:	e8 f9 fd ff ff       	call   80104efc <readeflags>
+80105103:	25 00 02 00 00       	and    $0x200,%eax
+80105108:	85 c0                	test   %eax,%eax
+8010510a:	74 0d                	je     80105119 <popcli+0x21>
+    panic("popcli - interruptible");
+8010510c:	83 ec 0c             	sub    $0xc,%esp
+8010510f:	68 a1 88 10 80       	push   $0x801088a1
+80105114:	e8 4d b4 ff ff       	call   80100566 <panic>
+  if(--cpu->ncli < 0)
+80105119:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+8010511f:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
+80105125:	83 ea 01             	sub    $0x1,%edx
+80105128:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
+8010512e:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80105134:	85 c0                	test   %eax,%eax
+80105136:	79 0d                	jns    80105145 <popcli+0x4d>
+    panic("popcli");
+80105138:	83 ec 0c             	sub    $0xc,%esp
+8010513b:	68 b8 88 10 80       	push   $0x801088b8
+80105140:	e8 21 b4 ff ff       	call   80100566 <panic>
+  if(cpu->ncli == 0 && cpu->intena)
+80105145:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+8010514b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80105151:	85 c0                	test   %eax,%eax
+80105153:	75 15                	jne    8010516a <popcli+0x72>
+80105155:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+8010515b:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
+80105161:	85 c0                	test   %eax,%eax
+80105163:	74 05                	je     8010516a <popcli+0x72>
+    sti();
+80105165:	e8 a9 fd ff ff       	call   80104f13 <sti>
+}
+8010516a:	90                   	nop
+8010516b:	c9                   	leave  
+8010516c:	c3                   	ret    
+
+8010516d <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+8010516d:	55                   	push   %ebp
+8010516e:	89 e5                	mov    %esp,%ebp
+80105170:	57                   	push   %edi
+80105171:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+80105172:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80105175:	8b 55 10             	mov    0x10(%ebp),%edx
+80105178:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010517b:	89 cb                	mov    %ecx,%ebx
+8010517d:	89 df                	mov    %ebx,%edi
+8010517f:	89 d1                	mov    %edx,%ecx
+80105181:	fc                   	cld    
+80105182:	f3 aa                	rep stos %al,%es:(%edi)
+80105184:	89 ca                	mov    %ecx,%edx
+80105186:	89 fb                	mov    %edi,%ebx
+80105188:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010518b:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+8010518e:	90                   	nop
+8010518f:	5b                   	pop    %ebx
+80105190:	5f                   	pop    %edi
+80105191:	5d                   	pop    %ebp
+80105192:	c3                   	ret    
+
+80105193 <stosl>:
+
+static inline void
+stosl(void *addr, int data, int cnt)
+{
+80105193:	55                   	push   %ebp
+80105194:	89 e5                	mov    %esp,%ebp
+80105196:	57                   	push   %edi
+80105197:	53                   	push   %ebx
+  asm volatile("cld; rep stosl" :
+80105198:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010519b:	8b 55 10             	mov    0x10(%ebp),%edx
+8010519e:	8b 45 0c             	mov    0xc(%ebp),%eax
+801051a1:	89 cb                	mov    %ecx,%ebx
+801051a3:	89 df                	mov    %ebx,%edi
+801051a5:	89 d1                	mov    %edx,%ecx
+801051a7:	fc                   	cld    
+801051a8:	f3 ab                	rep stos %eax,%es:(%edi)
+801051aa:	89 ca                	mov    %ecx,%edx
+801051ac:	89 fb                	mov    %edi,%ebx
+801051ae:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801051b1:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+801051b4:	90                   	nop
+801051b5:	5b                   	pop    %ebx
+801051b6:	5f                   	pop    %edi
+801051b7:	5d                   	pop    %ebp
+801051b8:	c3                   	ret    
+
+801051b9 <memset>:
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+801051b9:	55                   	push   %ebp
+801051ba:	89 e5                	mov    %esp,%ebp
+  if ((int)dst%4 == 0 && n%4 == 0){
+801051bc:	8b 45 08             	mov    0x8(%ebp),%eax
+801051bf:	83 e0 03             	and    $0x3,%eax
+801051c2:	85 c0                	test   %eax,%eax
+801051c4:	75 43                	jne    80105209 <memset+0x50>
+801051c6:	8b 45 10             	mov    0x10(%ebp),%eax
+801051c9:	83 e0 03             	and    $0x3,%eax
+801051cc:	85 c0                	test   %eax,%eax
+801051ce:	75 39                	jne    80105209 <memset+0x50>
+    c &= 0xFF;
+801051d0:	81 65 0c ff 00 00 00 	andl   $0xff,0xc(%ebp)
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+801051d7:	8b 45 10             	mov    0x10(%ebp),%eax
+801051da:	c1 e8 02             	shr    $0x2,%eax
+801051dd:	89 c1                	mov    %eax,%ecx
+801051df:	8b 45 0c             	mov    0xc(%ebp),%eax
+801051e2:	c1 e0 18             	shl    $0x18,%eax
+801051e5:	89 c2                	mov    %eax,%edx
+801051e7:	8b 45 0c             	mov    0xc(%ebp),%eax
+801051ea:	c1 e0 10             	shl    $0x10,%eax
+801051ed:	09 c2                	or     %eax,%edx
+801051ef:	8b 45 0c             	mov    0xc(%ebp),%eax
+801051f2:	c1 e0 08             	shl    $0x8,%eax
+801051f5:	09 d0                	or     %edx,%eax
+801051f7:	0b 45 0c             	or     0xc(%ebp),%eax
+801051fa:	51                   	push   %ecx
+801051fb:	50                   	push   %eax
+801051fc:	ff 75 08             	pushl  0x8(%ebp)
+801051ff:	e8 8f ff ff ff       	call   80105193 <stosl>
+80105204:	83 c4 0c             	add    $0xc,%esp
+80105207:	eb 12                	jmp    8010521b <memset+0x62>
+  } else
+    stosb(dst, c, n);
+80105209:	8b 45 10             	mov    0x10(%ebp),%eax
+8010520c:	50                   	push   %eax
+8010520d:	ff 75 0c             	pushl  0xc(%ebp)
+80105210:	ff 75 08             	pushl  0x8(%ebp)
+80105213:	e8 55 ff ff ff       	call   8010516d <stosb>
+80105218:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+8010521b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+8010521e:	c9                   	leave  
+8010521f:	c3                   	ret    
+
+80105220 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+80105220:	55                   	push   %ebp
+80105221:	89 e5                	mov    %esp,%ebp
+80105223:	83 ec 10             	sub    $0x10,%esp
+  const uchar *s1, *s2;
+  
+  s1 = v1;
+80105226:	8b 45 08             	mov    0x8(%ebp),%eax
+80105229:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  s2 = v2;
+8010522c:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010522f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0){
+80105232:	eb 30                	jmp    80105264 <memcmp+0x44>
+    if(*s1 != *s2)
+80105234:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80105237:	0f b6 10             	movzbl (%eax),%edx
+8010523a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+8010523d:	0f b6 00             	movzbl (%eax),%eax
+80105240:	38 c2                	cmp    %al,%dl
+80105242:	74 18                	je     8010525c <memcmp+0x3c>
+      return *s1 - *s2;
+80105244:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80105247:	0f b6 00             	movzbl (%eax),%eax
+8010524a:	0f b6 d0             	movzbl %al,%edx
+8010524d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+80105250:	0f b6 00             	movzbl (%eax),%eax
+80105253:	0f b6 c0             	movzbl %al,%eax
+80105256:	29 c2                	sub    %eax,%edx
+80105258:	89 d0                	mov    %edx,%eax
+8010525a:	eb 1a                	jmp    80105276 <memcmp+0x56>
+    s1++, s2++;
+8010525c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+80105260:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+{
+  const uchar *s1, *s2;
+  
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+80105264:	8b 45 10             	mov    0x10(%ebp),%eax
+80105267:	8d 50 ff             	lea    -0x1(%eax),%edx
+8010526a:	89 55 10             	mov    %edx,0x10(%ebp)
+8010526d:	85 c0                	test   %eax,%eax
+8010526f:	75 c3                	jne    80105234 <memcmp+0x14>
+    if(*s1 != *s2)
+      return *s1 - *s2;
+    s1++, s2++;
+  }
+
+  return 0;
+80105271:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80105276:	c9                   	leave  
+80105277:	c3                   	ret    
+
+80105278 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+80105278:	55                   	push   %ebp
+80105279:	89 e5                	mov    %esp,%ebp
+8010527b:	83 ec 10             	sub    $0x10,%esp
+  const char *s;
+  char *d;
+
+  s = src;
+8010527e:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105281:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  d = dst;
+80105284:	8b 45 08             	mov    0x8(%ebp),%eax
+80105287:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  if(s < d && s + n > d){
+8010528a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+8010528d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+80105290:	73 54                	jae    801052e6 <memmove+0x6e>
+80105292:	8b 55 fc             	mov    -0x4(%ebp),%edx
+80105295:	8b 45 10             	mov    0x10(%ebp),%eax
+80105298:	01 d0                	add    %edx,%eax
+8010529a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+8010529d:	76 47                	jbe    801052e6 <memmove+0x6e>
+    s += n;
+8010529f:	8b 45 10             	mov    0x10(%ebp),%eax
+801052a2:	01 45 fc             	add    %eax,-0x4(%ebp)
+    d += n;
+801052a5:	8b 45 10             	mov    0x10(%ebp),%eax
+801052a8:	01 45 f8             	add    %eax,-0x8(%ebp)
+    while(n-- > 0)
+801052ab:	eb 13                	jmp    801052c0 <memmove+0x48>
+      *--d = *--s;
+801052ad:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)
+801052b1:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
+801052b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+801052b8:	0f b6 10             	movzbl (%eax),%edx
+801052bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+801052be:	88 10                	mov    %dl,(%eax)
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+    s += n;
+    d += n;
+    while(n-- > 0)
+801052c0:	8b 45 10             	mov    0x10(%ebp),%eax
+801052c3:	8d 50 ff             	lea    -0x1(%eax),%edx
+801052c6:	89 55 10             	mov    %edx,0x10(%ebp)
+801052c9:	85 c0                	test   %eax,%eax
+801052cb:	75 e0                	jne    801052ad <memmove+0x35>
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+801052cd:	eb 24                	jmp    801052f3 <memmove+0x7b>
+    d += n;
+    while(n-- > 0)
+      *--d = *--s;
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+801052cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
+801052d2:	8d 50 01             	lea    0x1(%eax),%edx
+801052d5:	89 55 f8             	mov    %edx,-0x8(%ebp)
+801052d8:	8b 55 fc             	mov    -0x4(%ebp),%edx
+801052db:	8d 4a 01             	lea    0x1(%edx),%ecx
+801052de:	89 4d fc             	mov    %ecx,-0x4(%ebp)
+801052e1:	0f b6 12             	movzbl (%edx),%edx
+801052e4:	88 10                	mov    %dl,(%eax)
+    s += n;
+    d += n;
+    while(n-- > 0)
+      *--d = *--s;
+  } else
+    while(n-- > 0)
+801052e6:	8b 45 10             	mov    0x10(%ebp),%eax
+801052e9:	8d 50 ff             	lea    -0x1(%eax),%edx
+801052ec:	89 55 10             	mov    %edx,0x10(%ebp)
+801052ef:	85 c0                	test   %eax,%eax
+801052f1:	75 dc                	jne    801052cf <memmove+0x57>
+      *d++ = *s++;
+
+  return dst;
+801052f3:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+801052f6:	c9                   	leave  
+801052f7:	c3                   	ret    
+
+801052f8 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+801052f8:	55                   	push   %ebp
+801052f9:	89 e5                	mov    %esp,%ebp
+  return memmove(dst, src, n);
+801052fb:	ff 75 10             	pushl  0x10(%ebp)
+801052fe:	ff 75 0c             	pushl  0xc(%ebp)
+80105301:	ff 75 08             	pushl  0x8(%ebp)
+80105304:	e8 6f ff ff ff       	call   80105278 <memmove>
+80105309:	83 c4 0c             	add    $0xc,%esp
+}
+8010530c:	c9                   	leave  
+8010530d:	c3                   	ret    
+
+8010530e <strncmp>:
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+8010530e:	55                   	push   %ebp
+8010530f:	89 e5                	mov    %esp,%ebp
+  while(n > 0 && *p && *p == *q)
+80105311:	eb 0c                	jmp    8010531f <strncmp+0x11>
+    n--, p++, q++;
+80105313:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+80105317:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+8010531b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+  while(n > 0 && *p && *p == *q)
+8010531f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+80105323:	74 1a                	je     8010533f <strncmp+0x31>
+80105325:	8b 45 08             	mov    0x8(%ebp),%eax
+80105328:	0f b6 00             	movzbl (%eax),%eax
+8010532b:	84 c0                	test   %al,%al
+8010532d:	74 10                	je     8010533f <strncmp+0x31>
+8010532f:	8b 45 08             	mov    0x8(%ebp),%eax
+80105332:	0f b6 10             	movzbl (%eax),%edx
+80105335:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105338:	0f b6 00             	movzbl (%eax),%eax
+8010533b:	38 c2                	cmp    %al,%dl
+8010533d:	74 d4                	je     80105313 <strncmp+0x5>
+    n--, p++, q++;
+  if(n == 0)
+8010533f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+80105343:	75 07                	jne    8010534c <strncmp+0x3e>
+    return 0;
+80105345:	b8 00 00 00 00       	mov    $0x0,%eax
+8010534a:	eb 16                	jmp    80105362 <strncmp+0x54>
+  return (uchar)*p - (uchar)*q;
+8010534c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010534f:	0f b6 00             	movzbl (%eax),%eax
+80105352:	0f b6 d0             	movzbl %al,%edx
+80105355:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105358:	0f b6 00             	movzbl (%eax),%eax
+8010535b:	0f b6 c0             	movzbl %al,%eax
+8010535e:	29 c2                	sub    %eax,%edx
+80105360:	89 d0                	mov    %edx,%eax
+}
+80105362:	5d                   	pop    %ebp
+80105363:	c3                   	ret    
+
+80105364 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+80105364:	55                   	push   %ebp
+80105365:	89 e5                	mov    %esp,%ebp
+80105367:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+  
+  os = s;
+8010536a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010536d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while(n-- > 0 && (*s++ = *t++) != 0)
+80105370:	90                   	nop
+80105371:	8b 45 10             	mov    0x10(%ebp),%eax
+80105374:	8d 50 ff             	lea    -0x1(%eax),%edx
+80105377:	89 55 10             	mov    %edx,0x10(%ebp)
+8010537a:	85 c0                	test   %eax,%eax
+8010537c:	7e 2c                	jle    801053aa <strncpy+0x46>
+8010537e:	8b 45 08             	mov    0x8(%ebp),%eax
+80105381:	8d 50 01             	lea    0x1(%eax),%edx
+80105384:	89 55 08             	mov    %edx,0x8(%ebp)
+80105387:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010538a:	8d 4a 01             	lea    0x1(%edx),%ecx
+8010538d:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+80105390:	0f b6 12             	movzbl (%edx),%edx
+80105393:	88 10                	mov    %dl,(%eax)
+80105395:	0f b6 00             	movzbl (%eax),%eax
+80105398:	84 c0                	test   %al,%al
+8010539a:	75 d5                	jne    80105371 <strncpy+0xd>
+    ;
+  while(n-- > 0)
+8010539c:	eb 0c                	jmp    801053aa <strncpy+0x46>
+    *s++ = 0;
+8010539e:	8b 45 08             	mov    0x8(%ebp),%eax
+801053a1:	8d 50 01             	lea    0x1(%eax),%edx
+801053a4:	89 55 08             	mov    %edx,0x8(%ebp)
+801053a7:	c6 00 00             	movb   $0x0,(%eax)
+  char *os;
+  
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+    ;
+  while(n-- > 0)
+801053aa:	8b 45 10             	mov    0x10(%ebp),%eax
+801053ad:	8d 50 ff             	lea    -0x1(%eax),%edx
+801053b0:	89 55 10             	mov    %edx,0x10(%ebp)
+801053b3:	85 c0                	test   %eax,%eax
+801053b5:	7f e7                	jg     8010539e <strncpy+0x3a>
+    *s++ = 0;
+  return os;
+801053b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+801053ba:	c9                   	leave  
+801053bb:	c3                   	ret    
+
+801053bc <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+801053bc:	55                   	push   %ebp
+801053bd:	89 e5                	mov    %esp,%ebp
+801053bf:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+  
+  os = s;
+801053c2:	8b 45 08             	mov    0x8(%ebp),%eax
+801053c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  if(n <= 0)
+801053c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+801053cc:	7f 05                	jg     801053d3 <safestrcpy+0x17>
+    return os;
+801053ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
+801053d1:	eb 31                	jmp    80105404 <safestrcpy+0x48>
+  while(--n > 0 && (*s++ = *t++) != 0)
+801053d3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+801053d7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+801053db:	7e 1e                	jle    801053fb <safestrcpy+0x3f>
+801053dd:	8b 45 08             	mov    0x8(%ebp),%eax
+801053e0:	8d 50 01             	lea    0x1(%eax),%edx
+801053e3:	89 55 08             	mov    %edx,0x8(%ebp)
+801053e6:	8b 55 0c             	mov    0xc(%ebp),%edx
+801053e9:	8d 4a 01             	lea    0x1(%edx),%ecx
+801053ec:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+801053ef:	0f b6 12             	movzbl (%edx),%edx
+801053f2:	88 10                	mov    %dl,(%eax)
+801053f4:	0f b6 00             	movzbl (%eax),%eax
+801053f7:	84 c0                	test   %al,%al
+801053f9:	75 d8                	jne    801053d3 <safestrcpy+0x17>
+    ;
+  *s = 0;
+801053fb:	8b 45 08             	mov    0x8(%ebp),%eax
+801053fe:	c6 00 00             	movb   $0x0,(%eax)
+  return os;
+80105401:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+80105404:	c9                   	leave  
+80105405:	c3                   	ret    
+
+80105406 <strlen>:
+
+int
+strlen(const char *s)
+{
+80105406:	55                   	push   %ebp
+80105407:	89 e5                	mov    %esp,%ebp
+80105409:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+8010540c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+80105413:	eb 04                	jmp    80105419 <strlen+0x13>
+80105415:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+80105419:	8b 55 fc             	mov    -0x4(%ebp),%edx
+8010541c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010541f:	01 d0                	add    %edx,%eax
+80105421:	0f b6 00             	movzbl (%eax),%eax
+80105424:	84 c0                	test   %al,%al
+80105426:	75 ed                	jne    80105415 <strlen+0xf>
+    ;
+  return n;
+80105428:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+8010542b:	c9                   	leave  
+8010542c:	c3                   	ret    
+
+8010542d <swtch>:
+# Save current register context in old
+# and then load register context from new.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+8010542d:	8b 44 24 04          	mov    0x4(%esp),%eax
+  movl 8(%esp), %edx
+80105431:	8b 54 24 08          	mov    0x8(%esp),%edx
+
+  # Save old callee-save registers
+  pushl %ebp
+80105435:	55                   	push   %ebp
+  pushl %ebx
+80105436:	53                   	push   %ebx
+  pushl %esi
+80105437:	56                   	push   %esi
+  pushl %edi
+80105438:	57                   	push   %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+80105439:	89 20                	mov    %esp,(%eax)
+  movl %edx, %esp
+8010543b:	89 d4                	mov    %edx,%esp
+
+  # Load new callee-save registers
+  popl %edi
+8010543d:	5f                   	pop    %edi
+  popl %esi
+8010543e:	5e                   	pop    %esi
+  popl %ebx
+8010543f:	5b                   	pop    %ebx
+  popl %ebp
+80105440:	5d                   	pop    %ebp
+  ret
+80105441:	c3                   	ret    
+
+80105442 <fetchint>:
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+80105442:	55                   	push   %ebp
+80105443:	89 e5                	mov    %esp,%ebp
+  if(addr >= proc->sz || addr+4 > proc->sz)
+80105445:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010544b:	8b 00                	mov    (%eax),%eax
+8010544d:	3b 45 08             	cmp    0x8(%ebp),%eax
+80105450:	76 12                	jbe    80105464 <fetchint+0x22>
+80105452:	8b 45 08             	mov    0x8(%ebp),%eax
+80105455:	8d 50 04             	lea    0x4(%eax),%edx
+80105458:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010545e:	8b 00                	mov    (%eax),%eax
+80105460:	39 c2                	cmp    %eax,%edx
+80105462:	76 07                	jbe    8010546b <fetchint+0x29>
+    return -1;
+80105464:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105469:	eb 0f                	jmp    8010547a <fetchint+0x38>
+  *ip = *(int*)(addr);
+8010546b:	8b 45 08             	mov    0x8(%ebp),%eax
+8010546e:	8b 10                	mov    (%eax),%edx
+80105470:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105473:	89 10                	mov    %edx,(%eax)
+  return 0;
+80105475:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+8010547a:	5d                   	pop    %ebp
+8010547b:	c3                   	ret    
+
+8010547c <fetchstr>:
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+8010547c:	55                   	push   %ebp
+8010547d:	89 e5                	mov    %esp,%ebp
+8010547f:	83 ec 10             	sub    $0x10,%esp
+  char *s, *ep;
+
+  if(addr >= proc->sz)
+80105482:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80105488:	8b 00                	mov    (%eax),%eax
+8010548a:	3b 45 08             	cmp    0x8(%ebp),%eax
+8010548d:	77 07                	ja     80105496 <fetchstr+0x1a>
+    return -1;
+8010548f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105494:	eb 46                	jmp    801054dc <fetchstr+0x60>
+  *pp = (char*)addr;
+80105496:	8b 55 08             	mov    0x8(%ebp),%edx
+80105499:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010549c:	89 10                	mov    %edx,(%eax)
+  ep = (char*)proc->sz;
+8010549e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801054a4:	8b 00                	mov    (%eax),%eax
+801054a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(s = *pp; s < ep; s++)
+801054a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+801054ac:	8b 00                	mov    (%eax),%eax
+801054ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
+801054b1:	eb 1c                	jmp    801054cf <fetchstr+0x53>
+    if(*s == 0)
+801054b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+801054b6:	0f b6 00             	movzbl (%eax),%eax
+801054b9:	84 c0                	test   %al,%al
+801054bb:	75 0e                	jne    801054cb <fetchstr+0x4f>
+      return s - *pp;
+801054bd:	8b 55 fc             	mov    -0x4(%ebp),%edx
+801054c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+801054c3:	8b 00                	mov    (%eax),%eax
+801054c5:	29 c2                	sub    %eax,%edx
+801054c7:	89 d0                	mov    %edx,%eax
+801054c9:	eb 11                	jmp    801054dc <fetchstr+0x60>
+
+  if(addr >= proc->sz)
+    return -1;
+  *pp = (char*)addr;
+  ep = (char*)proc->sz;
+  for(s = *pp; s < ep; s++)
+801054cb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+801054cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
+801054d2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+801054d5:	72 dc                	jb     801054b3 <fetchstr+0x37>
+    if(*s == 0)
+      return s - *pp;
+  return -1;
+801054d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801054dc:	c9                   	leave  
+801054dd:	c3                   	ret    
+
+801054de <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+801054de:	55                   	push   %ebp
+801054df:	89 e5                	mov    %esp,%ebp
+  return fetchint(proc->tf->esp + 4 + 4*n, ip);
+801054e1:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801054e7:	8b 40 18             	mov    0x18(%eax),%eax
+801054ea:	8b 40 44             	mov    0x44(%eax),%eax
+801054ed:	8b 55 08             	mov    0x8(%ebp),%edx
+801054f0:	c1 e2 02             	shl    $0x2,%edx
+801054f3:	01 d0                	add    %edx,%eax
+801054f5:	83 c0 04             	add    $0x4,%eax
+801054f8:	ff 75 0c             	pushl  0xc(%ebp)
+801054fb:	50                   	push   %eax
+801054fc:	e8 41 ff ff ff       	call   80105442 <fetchint>
+80105501:	83 c4 08             	add    $0x8,%esp
+}
+80105504:	c9                   	leave  
+80105505:	c3                   	ret    
+
+80105506 <argptr>:
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size n bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+80105506:	55                   	push   %ebp
+80105507:	89 e5                	mov    %esp,%ebp
+80105509:	83 ec 10             	sub    $0x10,%esp
+  int i;
+  
+  if(argint(n, &i) < 0)
+8010550c:	8d 45 fc             	lea    -0x4(%ebp),%eax
+8010550f:	50                   	push   %eax
+80105510:	ff 75 08             	pushl  0x8(%ebp)
+80105513:	e8 c6 ff ff ff       	call   801054de <argint>
+80105518:	83 c4 08             	add    $0x8,%esp
+8010551b:	85 c0                	test   %eax,%eax
+8010551d:	79 07                	jns    80105526 <argptr+0x20>
+    return -1;
+8010551f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105524:	eb 3b                	jmp    80105561 <argptr+0x5b>
+  if((uint)i >= proc->sz || (uint)i+size > proc->sz)
+80105526:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010552c:	8b 00                	mov    (%eax),%eax
+8010552e:	8b 55 fc             	mov    -0x4(%ebp),%edx
+80105531:	39 d0                	cmp    %edx,%eax
+80105533:	76 16                	jbe    8010554b <argptr+0x45>
+80105535:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80105538:	89 c2                	mov    %eax,%edx
+8010553a:	8b 45 10             	mov    0x10(%ebp),%eax
+8010553d:	01 c2                	add    %eax,%edx
+8010553f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80105545:	8b 00                	mov    (%eax),%eax
+80105547:	39 c2                	cmp    %eax,%edx
+80105549:	76 07                	jbe    80105552 <argptr+0x4c>
+    return -1;
+8010554b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105550:	eb 0f                	jmp    80105561 <argptr+0x5b>
+  *pp = (char*)i;
+80105552:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80105555:	89 c2                	mov    %eax,%edx
+80105557:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010555a:	89 10                	mov    %edx,(%eax)
+  return 0;
+8010555c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80105561:	c9                   	leave  
+80105562:	c3                   	ret    
+
+80105563 <argstr>:
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+80105563:	55                   	push   %ebp
+80105564:	89 e5                	mov    %esp,%ebp
+80105566:	83 ec 10             	sub    $0x10,%esp
+  int addr;
+  if(argint(n, &addr) < 0)
+80105569:	8d 45 fc             	lea    -0x4(%ebp),%eax
+8010556c:	50                   	push   %eax
+8010556d:	ff 75 08             	pushl  0x8(%ebp)
+80105570:	e8 69 ff ff ff       	call   801054de <argint>
+80105575:	83 c4 08             	add    $0x8,%esp
+80105578:	85 c0                	test   %eax,%eax
+8010557a:	79 07                	jns    80105583 <argstr+0x20>
+    return -1;
+8010557c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105581:	eb 0f                	jmp    80105592 <argstr+0x2f>
+  return fetchstr(addr, pp);
+80105583:	8b 45 fc             	mov    -0x4(%ebp),%eax
+80105586:	ff 75 0c             	pushl  0xc(%ebp)
+80105589:	50                   	push   %eax
+8010558a:	e8 ed fe ff ff       	call   8010547c <fetchstr>
+8010558f:	83 c4 08             	add    $0x8,%esp
+}
+80105592:	c9                   	leave  
+80105593:	c3                   	ret    
+
+80105594 <syscall>:
+[SYS_procstat] sys_procstat,
+};
+
+void
+syscall(void)
+{
+80105594:	55                   	push   %ebp
+80105595:	89 e5                	mov    %esp,%ebp
+80105597:	53                   	push   %ebx
+80105598:	83 ec 14             	sub    $0x14,%esp
+  int num;
+
+  num = proc->tf->eax;
+8010559b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801055a1:	8b 40 18             	mov    0x18(%eax),%eax
+801055a4:	8b 40 1c             	mov    0x1c(%eax),%eax
+801055a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+801055aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801055ae:	7e 30                	jle    801055e0 <syscall+0x4c>
+801055b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801055b3:	83 f8 16             	cmp    $0x16,%eax
+801055b6:	77 28                	ja     801055e0 <syscall+0x4c>
+801055b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801055bb:	8b 04 85 40 b0 10 80 	mov    -0x7fef4fc0(,%eax,4),%eax
+801055c2:	85 c0                	test   %eax,%eax
+801055c4:	74 1a                	je     801055e0 <syscall+0x4c>
+    proc->tf->eax = syscalls[num]();
+801055c6:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801055cc:	8b 58 18             	mov    0x18(%eax),%ebx
+801055cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801055d2:	8b 04 85 40 b0 10 80 	mov    -0x7fef4fc0(,%eax,4),%eax
+801055d9:	ff d0                	call   *%eax
+801055db:	89 43 1c             	mov    %eax,0x1c(%ebx)
+801055de:	eb 34                	jmp    80105614 <syscall+0x80>
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            proc->pid, proc->name, num);
+801055e0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801055e6:	8d 50 6c             	lea    0x6c(%eax),%edx
+801055e9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+
+  num = proc->tf->eax;
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    proc->tf->eax = syscalls[num]();
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+801055ef:	8b 40 10             	mov    0x10(%eax),%eax
+801055f2:	ff 75 f4             	pushl  -0xc(%ebp)
+801055f5:	52                   	push   %edx
+801055f6:	50                   	push   %eax
+801055f7:	68 bf 88 10 80       	push   $0x801088bf
+801055fc:	e8 c5 ad ff ff       	call   801003c6 <cprintf>
+80105601:	83 c4 10             	add    $0x10,%esp
+            proc->pid, proc->name, num);
+    proc->tf->eax = -1;
+80105604:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010560a:	8b 40 18             	mov    0x18(%eax),%eax
+8010560d:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+  }
+}
+80105614:	90                   	nop
+80105615:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105618:	c9                   	leave  
+80105619:	c3                   	ret    
+
+8010561a <argfd>:
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+{
+8010561a:	55                   	push   %ebp
+8010561b:	89 e5                	mov    %esp,%ebp
+8010561d:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+80105620:	83 ec 08             	sub    $0x8,%esp
+80105623:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105626:	50                   	push   %eax
+80105627:	ff 75 08             	pushl  0x8(%ebp)
+8010562a:	e8 af fe ff ff       	call   801054de <argint>
+8010562f:	83 c4 10             	add    $0x10,%esp
+80105632:	85 c0                	test   %eax,%eax
+80105634:	79 07                	jns    8010563d <argfd+0x23>
+    return -1;
+80105636:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010563b:	eb 50                	jmp    8010568d <argfd+0x73>
+  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
+8010563d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105640:	85 c0                	test   %eax,%eax
+80105642:	78 21                	js     80105665 <argfd+0x4b>
+80105644:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105647:	83 f8 0f             	cmp    $0xf,%eax
+8010564a:	7f 19                	jg     80105665 <argfd+0x4b>
+8010564c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80105652:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80105655:	83 c2 08             	add    $0x8,%edx
+80105658:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
+8010565c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010565f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80105663:	75 07                	jne    8010566c <argfd+0x52>
+    return -1;
+80105665:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010566a:	eb 21                	jmp    8010568d <argfd+0x73>
+  if(pfd)
+8010566c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+80105670:	74 08                	je     8010567a <argfd+0x60>
+    *pfd = fd;
+80105672:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80105675:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105678:	89 10                	mov    %edx,(%eax)
+  if(pf)
+8010567a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+8010567e:	74 08                	je     80105688 <argfd+0x6e>
+    *pf = f;
+80105680:	8b 45 10             	mov    0x10(%ebp),%eax
+80105683:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105686:	89 10                	mov    %edx,(%eax)
+  return 0;
+80105688:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+8010568d:	c9                   	leave  
+8010568e:	c3                   	ret    
+
+8010568f <fdalloc>:
+
+// Allocate a file descriptor for the given file.
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+8010568f:	55                   	push   %ebp
+80105690:	89 e5                	mov    %esp,%ebp
+80105692:	83 ec 10             	sub    $0x10,%esp
+  int fd;
+
+  for(fd = 0; fd < NOFILE; fd++){
+80105695:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+8010569c:	eb 30                	jmp    801056ce <fdalloc+0x3f>
+    if(proc->ofile[fd] == 0){
+8010569e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801056a4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+801056a7:	83 c2 08             	add    $0x8,%edx
+801056aa:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
+801056ae:	85 c0                	test   %eax,%eax
+801056b0:	75 18                	jne    801056ca <fdalloc+0x3b>
+      proc->ofile[fd] = f;
+801056b2:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801056b8:	8b 55 fc             	mov    -0x4(%ebp),%edx
+801056bb:	8d 4a 08             	lea    0x8(%edx),%ecx
+801056be:	8b 55 08             	mov    0x8(%ebp),%edx
+801056c1:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
+      return fd;
+801056c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+801056c8:	eb 0f                	jmp    801056d9 <fdalloc+0x4a>
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+
+  for(fd = 0; fd < NOFILE; fd++){
+801056ca:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+801056ce:	83 7d fc 0f          	cmpl   $0xf,-0x4(%ebp)
+801056d2:	7e ca                	jle    8010569e <fdalloc+0xf>
+    if(proc->ofile[fd] == 0){
+      proc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+801056d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801056d9:	c9                   	leave  
+801056da:	c3                   	ret    
+
+801056db <sys_dup>:
+
+int
+sys_dup(void)
+{
+801056db:	55                   	push   %ebp
+801056dc:	89 e5                	mov    %esp,%ebp
+801056de:	83 ec 18             	sub    $0x18,%esp
+  struct file *f;
+  int fd;
+  
+  if(argfd(0, 0, &f) < 0)
+801056e1:	83 ec 04             	sub    $0x4,%esp
+801056e4:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801056e7:	50                   	push   %eax
+801056e8:	6a 00                	push   $0x0
+801056ea:	6a 00                	push   $0x0
+801056ec:	e8 29 ff ff ff       	call   8010561a <argfd>
+801056f1:	83 c4 10             	add    $0x10,%esp
+801056f4:	85 c0                	test   %eax,%eax
+801056f6:	79 07                	jns    801056ff <sys_dup+0x24>
+    return -1;
+801056f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056fd:	eb 31                	jmp    80105730 <sys_dup+0x55>
+  if((fd=fdalloc(f)) < 0)
+801056ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105702:	83 ec 0c             	sub    $0xc,%esp
+80105705:	50                   	push   %eax
+80105706:	e8 84 ff ff ff       	call   8010568f <fdalloc>
+8010570b:	83 c4 10             	add    $0x10,%esp
+8010570e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80105711:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80105715:	79 07                	jns    8010571e <sys_dup+0x43>
+    return -1;
+80105717:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010571c:	eb 12                	jmp    80105730 <sys_dup+0x55>
+  filedup(f);
+8010571e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105721:	83 ec 0c             	sub    $0xc,%esp
+80105724:	50                   	push   %eax
+80105725:	e8 bb b8 ff ff       	call   80100fe5 <filedup>
+8010572a:	83 c4 10             	add    $0x10,%esp
+  return fd;
+8010572d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+80105730:	c9                   	leave  
+80105731:	c3                   	ret    
+
+80105732 <sys_read>:
+
+int
+sys_read(void)
+{
+80105732:	55                   	push   %ebp
+80105733:	89 e5                	mov    %esp,%ebp
+80105735:	83 ec 18             	sub    $0x18,%esp
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80105738:	83 ec 04             	sub    $0x4,%esp
+8010573b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010573e:	50                   	push   %eax
+8010573f:	6a 00                	push   $0x0
+80105741:	6a 00                	push   $0x0
+80105743:	e8 d2 fe ff ff       	call   8010561a <argfd>
+80105748:	83 c4 10             	add    $0x10,%esp
+8010574b:	85 c0                	test   %eax,%eax
+8010574d:	78 2e                	js     8010577d <sys_read+0x4b>
+8010574f:	83 ec 08             	sub    $0x8,%esp
+80105752:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105755:	50                   	push   %eax
+80105756:	6a 02                	push   $0x2
+80105758:	e8 81 fd ff ff       	call   801054de <argint>
+8010575d:	83 c4 10             	add    $0x10,%esp
+80105760:	85 c0                	test   %eax,%eax
+80105762:	78 19                	js     8010577d <sys_read+0x4b>
+80105764:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105767:	83 ec 04             	sub    $0x4,%esp
+8010576a:	50                   	push   %eax
+8010576b:	8d 45 ec             	lea    -0x14(%ebp),%eax
+8010576e:	50                   	push   %eax
+8010576f:	6a 01                	push   $0x1
+80105771:	e8 90 fd ff ff       	call   80105506 <argptr>
+80105776:	83 c4 10             	add    $0x10,%esp
+80105779:	85 c0                	test   %eax,%eax
+8010577b:	79 07                	jns    80105784 <sys_read+0x52>
+    return -1;
+8010577d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105782:	eb 17                	jmp    8010579b <sys_read+0x69>
+  return fileread(f, p, n);
+80105784:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+80105787:	8b 55 ec             	mov    -0x14(%ebp),%edx
+8010578a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010578d:	83 ec 04             	sub    $0x4,%esp
+80105790:	51                   	push   %ecx
+80105791:	52                   	push   %edx
+80105792:	50                   	push   %eax
+80105793:	e8 dd b9 ff ff       	call   80101175 <fileread>
+80105798:	83 c4 10             	add    $0x10,%esp
+}
+8010579b:	c9                   	leave  
+8010579c:	c3                   	ret    
+
+8010579d <sys_write>:
+
+int
+sys_write(void)
+{
+8010579d:	55                   	push   %ebp
+8010579e:	89 e5                	mov    %esp,%ebp
+801057a0:	83 ec 18             	sub    $0x18,%esp
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+801057a3:	83 ec 04             	sub    $0x4,%esp
+801057a6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801057a9:	50                   	push   %eax
+801057aa:	6a 00                	push   $0x0
+801057ac:	6a 00                	push   $0x0
+801057ae:	e8 67 fe ff ff       	call   8010561a <argfd>
+801057b3:	83 c4 10             	add    $0x10,%esp
+801057b6:	85 c0                	test   %eax,%eax
+801057b8:	78 2e                	js     801057e8 <sys_write+0x4b>
+801057ba:	83 ec 08             	sub    $0x8,%esp
+801057bd:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801057c0:	50                   	push   %eax
+801057c1:	6a 02                	push   $0x2
+801057c3:	e8 16 fd ff ff       	call   801054de <argint>
+801057c8:	83 c4 10             	add    $0x10,%esp
+801057cb:	85 c0                	test   %eax,%eax
+801057cd:	78 19                	js     801057e8 <sys_write+0x4b>
+801057cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801057d2:	83 ec 04             	sub    $0x4,%esp
+801057d5:	50                   	push   %eax
+801057d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
+801057d9:	50                   	push   %eax
+801057da:	6a 01                	push   $0x1
+801057dc:	e8 25 fd ff ff       	call   80105506 <argptr>
+801057e1:	83 c4 10             	add    $0x10,%esp
+801057e4:	85 c0                	test   %eax,%eax
+801057e6:	79 07                	jns    801057ef <sys_write+0x52>
+    return -1;
+801057e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801057ed:	eb 17                	jmp    80105806 <sys_write+0x69>
+  return filewrite(f, p, n);
+801057ef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+801057f2:	8b 55 ec             	mov    -0x14(%ebp),%edx
+801057f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801057f8:	83 ec 04             	sub    $0x4,%esp
+801057fb:	51                   	push   %ecx
+801057fc:	52                   	push   %edx
+801057fd:	50                   	push   %eax
+801057fe:	e8 2a ba ff ff       	call   8010122d <filewrite>
+80105803:	83 c4 10             	add    $0x10,%esp
+}
+80105806:	c9                   	leave  
+80105807:	c3                   	ret    
+
+80105808 <sys_close>:
+
+int
+sys_close(void)
+{
+80105808:	55                   	push   %ebp
+80105809:	89 e5                	mov    %esp,%ebp
+8010580b:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  struct file *f;
+  
+  if(argfd(0, &fd, &f) < 0)
+8010580e:	83 ec 04             	sub    $0x4,%esp
+80105811:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105814:	50                   	push   %eax
+80105815:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105818:	50                   	push   %eax
+80105819:	6a 00                	push   $0x0
+8010581b:	e8 fa fd ff ff       	call   8010561a <argfd>
+80105820:	83 c4 10             	add    $0x10,%esp
+80105823:	85 c0                	test   %eax,%eax
+80105825:	79 07                	jns    8010582e <sys_close+0x26>
+    return -1;
+80105827:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010582c:	eb 28                	jmp    80105856 <sys_close+0x4e>
+  proc->ofile[fd] = 0;
+8010582e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80105834:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105837:	83 c2 08             	add    $0x8,%edx
+8010583a:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
+80105841:	00 
+  fileclose(f);
+80105842:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105845:	83 ec 0c             	sub    $0xc,%esp
+80105848:	50                   	push   %eax
+80105849:	e8 e8 b7 ff ff       	call   80101036 <fileclose>
+8010584e:	83 c4 10             	add    $0x10,%esp
+  return 0;
+80105851:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80105856:	c9                   	leave  
+80105857:	c3                   	ret    
+
+80105858 <sys_fstat>:
+
+int
+sys_fstat(void)
+{
+80105858:	55                   	push   %ebp
+80105859:	89 e5                	mov    %esp,%ebp
+8010585b:	83 ec 18             	sub    $0x18,%esp
+  struct file *f;
+  struct stat *st;
+  
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+8010585e:	83 ec 04             	sub    $0x4,%esp
+80105861:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105864:	50                   	push   %eax
+80105865:	6a 00                	push   $0x0
+80105867:	6a 00                	push   $0x0
+80105869:	e8 ac fd ff ff       	call   8010561a <argfd>
+8010586e:	83 c4 10             	add    $0x10,%esp
+80105871:	85 c0                	test   %eax,%eax
+80105873:	78 17                	js     8010588c <sys_fstat+0x34>
+80105875:	83 ec 04             	sub    $0x4,%esp
+80105878:	6a 14                	push   $0x14
+8010587a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010587d:	50                   	push   %eax
+8010587e:	6a 01                	push   $0x1
+80105880:	e8 81 fc ff ff       	call   80105506 <argptr>
+80105885:	83 c4 10             	add    $0x10,%esp
+80105888:	85 c0                	test   %eax,%eax
+8010588a:	79 07                	jns    80105893 <sys_fstat+0x3b>
+    return -1;
+8010588c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105891:	eb 13                	jmp    801058a6 <sys_fstat+0x4e>
+  return filestat(f, st);
+80105893:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80105896:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105899:	83 ec 08             	sub    $0x8,%esp
+8010589c:	52                   	push   %edx
+8010589d:	50                   	push   %eax
+8010589e:	e8 7b b8 ff ff       	call   8010111e <filestat>
+801058a3:	83 c4 10             	add    $0x10,%esp
+}
+801058a6:	c9                   	leave  
+801058a7:	c3                   	ret    
+
+801058a8 <sys_link>:
+
+// Create the path new as a link to the same inode as old.
+int
+sys_link(void)
+{
+801058a8:	55                   	push   %ebp
+801058a9:	89 e5                	mov    %esp,%ebp
+801058ab:	83 ec 28             	sub    $0x28,%esp
+  char name[DIRSIZ], *new, *old;
+  struct inode *dp, *ip;
+
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+801058ae:	83 ec 08             	sub    $0x8,%esp
+801058b1:	8d 45 d8             	lea    -0x28(%ebp),%eax
+801058b4:	50                   	push   %eax
+801058b5:	6a 00                	push   $0x0
+801058b7:	e8 a7 fc ff ff       	call   80105563 <argstr>
+801058bc:	83 c4 10             	add    $0x10,%esp
+801058bf:	85 c0                	test   %eax,%eax
+801058c1:	78 15                	js     801058d8 <sys_link+0x30>
+801058c3:	83 ec 08             	sub    $0x8,%esp
+801058c6:	8d 45 dc             	lea    -0x24(%ebp),%eax
+801058c9:	50                   	push   %eax
+801058ca:	6a 01                	push   $0x1
+801058cc:	e8 92 fc ff ff       	call   80105563 <argstr>
+801058d1:	83 c4 10             	add    $0x10,%esp
+801058d4:	85 c0                	test   %eax,%eax
+801058d6:	79 0a                	jns    801058e2 <sys_link+0x3a>
+    return -1;
+801058d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801058dd:	e9 68 01 00 00       	jmp    80105a4a <sys_link+0x1a2>
+
+  begin_op();
+801058e2:	e8 cd db ff ff       	call   801034b4 <begin_op>
+  if((ip = namei(old)) == 0){
+801058e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
+801058ea:	83 ec 0c             	sub    $0xc,%esp
+801058ed:	50                   	push   %eax
+801058ee:	e8 d0 cb ff ff       	call   801024c3 <namei>
+801058f3:	83 c4 10             	add    $0x10,%esp
+801058f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801058f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801058fd:	75 0f                	jne    8010590e <sys_link+0x66>
+    end_op();
+801058ff:	e8 3c dc ff ff       	call   80103540 <end_op>
+    return -1;
+80105904:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105909:	e9 3c 01 00 00       	jmp    80105a4a <sys_link+0x1a2>
+  }
+
+  ilock(ip);
+8010590e:	83 ec 0c             	sub    $0xc,%esp
+80105911:	ff 75 f4             	pushl  -0xc(%ebp)
+80105914:	e8 f2 bf ff ff       	call   8010190b <ilock>
+80105919:	83 c4 10             	add    $0x10,%esp
+  if(ip->type == T_DIR){
+8010591c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010591f:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80105923:	66 83 f8 01          	cmp    $0x1,%ax
+80105927:	75 1d                	jne    80105946 <sys_link+0x9e>
+    iunlockput(ip);
+80105929:	83 ec 0c             	sub    $0xc,%esp
+8010592c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010592f:	e8 91 c2 ff ff       	call   80101bc5 <iunlockput>
+80105934:	83 c4 10             	add    $0x10,%esp
+    end_op();
+80105937:	e8 04 dc ff ff       	call   80103540 <end_op>
+    return -1;
+8010593c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105941:	e9 04 01 00 00       	jmp    80105a4a <sys_link+0x1a2>
+  }
+
+  ip->nlink++;
+80105946:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105949:	0f b7 40 16          	movzwl 0x16(%eax),%eax
+8010594d:	83 c0 01             	add    $0x1,%eax
+80105950:	89 c2                	mov    %eax,%edx
+80105952:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105955:	66 89 50 16          	mov    %dx,0x16(%eax)
+  iupdate(ip);
+80105959:	83 ec 0c             	sub    $0xc,%esp
+8010595c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010595f:	e8 d3 bd ff ff       	call   80101737 <iupdate>
+80105964:	83 c4 10             	add    $0x10,%esp
+  iunlock(ip);
+80105967:	83 ec 0c             	sub    $0xc,%esp
+8010596a:	ff 75 f4             	pushl  -0xc(%ebp)
+8010596d:	e8 f1 c0 ff ff       	call   80101a63 <iunlock>
+80105972:	83 c4 10             	add    $0x10,%esp
+
+  if((dp = nameiparent(new, name)) == 0)
+80105975:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105978:	83 ec 08             	sub    $0x8,%esp
+8010597b:	8d 55 e2             	lea    -0x1e(%ebp),%edx
+8010597e:	52                   	push   %edx
+8010597f:	50                   	push   %eax
+80105980:	e8 5a cb ff ff       	call   801024df <nameiparent>
+80105985:	83 c4 10             	add    $0x10,%esp
+80105988:	89 45 f0             	mov    %eax,-0x10(%ebp)
+8010598b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+8010598f:	74 71                	je     80105a02 <sys_link+0x15a>
+    goto bad;
+  ilock(dp);
+80105991:	83 ec 0c             	sub    $0xc,%esp
+80105994:	ff 75 f0             	pushl  -0x10(%ebp)
+80105997:	e8 6f bf ff ff       	call   8010190b <ilock>
+8010599c:	83 c4 10             	add    $0x10,%esp
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+8010599f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801059a2:	8b 10                	mov    (%eax),%edx
+801059a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801059a7:	8b 00                	mov    (%eax),%eax
+801059a9:	39 c2                	cmp    %eax,%edx
+801059ab:	75 1d                	jne    801059ca <sys_link+0x122>
+801059ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801059b0:	8b 40 04             	mov    0x4(%eax),%eax
+801059b3:	83 ec 04             	sub    $0x4,%esp
+801059b6:	50                   	push   %eax
+801059b7:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+801059ba:	50                   	push   %eax
+801059bb:	ff 75 f0             	pushl  -0x10(%ebp)
+801059be:	e8 64 c8 ff ff       	call   80102227 <dirlink>
+801059c3:	83 c4 10             	add    $0x10,%esp
+801059c6:	85 c0                	test   %eax,%eax
+801059c8:	79 10                	jns    801059da <sys_link+0x132>
+    iunlockput(dp);
+801059ca:	83 ec 0c             	sub    $0xc,%esp
+801059cd:	ff 75 f0             	pushl  -0x10(%ebp)
+801059d0:	e8 f0 c1 ff ff       	call   80101bc5 <iunlockput>
+801059d5:	83 c4 10             	add    $0x10,%esp
+    goto bad;
+801059d8:	eb 29                	jmp    80105a03 <sys_link+0x15b>
+  }
+  iunlockput(dp);
+801059da:	83 ec 0c             	sub    $0xc,%esp
+801059dd:	ff 75 f0             	pushl  -0x10(%ebp)
+801059e0:	e8 e0 c1 ff ff       	call   80101bc5 <iunlockput>
+801059e5:	83 c4 10             	add    $0x10,%esp
+  iput(ip);
+801059e8:	83 ec 0c             	sub    $0xc,%esp
+801059eb:	ff 75 f4             	pushl  -0xc(%ebp)
+801059ee:	e8 e2 c0 ff ff       	call   80101ad5 <iput>
+801059f3:	83 c4 10             	add    $0x10,%esp
+
+  end_op();
+801059f6:	e8 45 db ff ff       	call   80103540 <end_op>
+
+  return 0;
+801059fb:	b8 00 00 00 00       	mov    $0x0,%eax
+80105a00:	eb 48                	jmp    80105a4a <sys_link+0x1a2>
+  ip->nlink++;
+  iupdate(ip);
+  iunlock(ip);
+
+  if((dp = nameiparent(new, name)) == 0)
+    goto bad;
+80105a02:	90                   	nop
+  end_op();
+
+  return 0;
+
+bad:
+  ilock(ip);
+80105a03:	83 ec 0c             	sub    $0xc,%esp
+80105a06:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a09:	e8 fd be ff ff       	call   8010190b <ilock>
+80105a0e:	83 c4 10             	add    $0x10,%esp
+  ip->nlink--;
+80105a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105a14:	0f b7 40 16          	movzwl 0x16(%eax),%eax
+80105a18:	83 e8 01             	sub    $0x1,%eax
+80105a1b:	89 c2                	mov    %eax,%edx
+80105a1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105a20:	66 89 50 16          	mov    %dx,0x16(%eax)
+  iupdate(ip);
+80105a24:	83 ec 0c             	sub    $0xc,%esp
+80105a27:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a2a:	e8 08 bd ff ff       	call   80101737 <iupdate>
+80105a2f:	83 c4 10             	add    $0x10,%esp
+  iunlockput(ip);
+80105a32:	83 ec 0c             	sub    $0xc,%esp
+80105a35:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a38:	e8 88 c1 ff ff       	call   80101bc5 <iunlockput>
+80105a3d:	83 c4 10             	add    $0x10,%esp
+  end_op();
+80105a40:	e8 fb da ff ff       	call   80103540 <end_op>
+  return -1;
+80105a45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105a4a:	c9                   	leave  
+80105a4b:	c3                   	ret    
+
+80105a4c <isdirempty>:
+
+// Is the directory dp empty except for "." and ".." ?
+static int
+isdirempty(struct inode *dp)
+{
+80105a4c:	55                   	push   %ebp
+80105a4d:	89 e5                	mov    %esp,%ebp
+80105a4f:	83 ec 28             	sub    $0x28,%esp
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+80105a52:	c7 45 f4 20 00 00 00 	movl   $0x20,-0xc(%ebp)
+80105a59:	eb 40                	jmp    80105a9b <isdirempty+0x4f>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80105a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105a5e:	6a 10                	push   $0x10
+80105a60:	50                   	push   %eax
+80105a61:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105a64:	50                   	push   %eax
+80105a65:	ff 75 08             	pushl  0x8(%ebp)
+80105a68:	e8 06 c4 ff ff       	call   80101e73 <readi>
+80105a6d:	83 c4 10             	add    $0x10,%esp
+80105a70:	83 f8 10             	cmp    $0x10,%eax
+80105a73:	74 0d                	je     80105a82 <isdirempty+0x36>
+      panic("isdirempty: readi");
+80105a75:	83 ec 0c             	sub    $0xc,%esp
+80105a78:	68 db 88 10 80       	push   $0x801088db
+80105a7d:	e8 e4 aa ff ff       	call   80100566 <panic>
+    if(de.inum != 0)
+80105a82:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80105a86:	66 85 c0             	test   %ax,%ax
+80105a89:	74 07                	je     80105a92 <isdirempty+0x46>
+      return 0;
+80105a8b:	b8 00 00 00 00       	mov    $0x0,%eax
+80105a90:	eb 1b                	jmp    80105aad <isdirempty+0x61>
+isdirempty(struct inode *dp)
+{
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+80105a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105a95:	83 c0 10             	add    $0x10,%eax
+80105a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80105a9b:	8b 45 08             	mov    0x8(%ebp),%eax
+80105a9e:	8b 50 18             	mov    0x18(%eax),%edx
+80105aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105aa4:	39 c2                	cmp    %eax,%edx
+80105aa6:	77 b3                	ja     80105a5b <isdirempty+0xf>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("isdirempty: readi");
+    if(de.inum != 0)
+      return 0;
+  }
+  return 1;
+80105aa8:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80105aad:	c9                   	leave  
+80105aae:	c3                   	ret    
+
+80105aaf <sys_unlink>:
+
+//PAGEBREAK!
+int
+sys_unlink(void)
+{
+80105aaf:	55                   	push   %ebp
+80105ab0:	89 e5                	mov    %esp,%ebp
+80105ab2:	83 ec 38             	sub    $0x38,%esp
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ], *path;
+  uint off;
+
+  if(argstr(0, &path) < 0)
+80105ab5:	83 ec 08             	sub    $0x8,%esp
+80105ab8:	8d 45 cc             	lea    -0x34(%ebp),%eax
+80105abb:	50                   	push   %eax
+80105abc:	6a 00                	push   $0x0
+80105abe:	e8 a0 fa ff ff       	call   80105563 <argstr>
+80105ac3:	83 c4 10             	add    $0x10,%esp
+80105ac6:	85 c0                	test   %eax,%eax
+80105ac8:	79 0a                	jns    80105ad4 <sys_unlink+0x25>
+    return -1;
+80105aca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105acf:	e9 bc 01 00 00       	jmp    80105c90 <sys_unlink+0x1e1>
+
+  begin_op();
+80105ad4:	e8 db d9 ff ff       	call   801034b4 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+80105ad9:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80105adc:	83 ec 08             	sub    $0x8,%esp
+80105adf:	8d 55 d2             	lea    -0x2e(%ebp),%edx
+80105ae2:	52                   	push   %edx
+80105ae3:	50                   	push   %eax
+80105ae4:	e8 f6 c9 ff ff       	call   801024df <nameiparent>
+80105ae9:	83 c4 10             	add    $0x10,%esp
+80105aec:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80105aef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80105af3:	75 0f                	jne    80105b04 <sys_unlink+0x55>
+    end_op();
+80105af5:	e8 46 da ff ff       	call   80103540 <end_op>
+    return -1;
+80105afa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105aff:	e9 8c 01 00 00       	jmp    80105c90 <sys_unlink+0x1e1>
+  }
+
+  ilock(dp);
+80105b04:	83 ec 0c             	sub    $0xc,%esp
+80105b07:	ff 75 f4             	pushl  -0xc(%ebp)
+80105b0a:	e8 fc bd ff ff       	call   8010190b <ilock>
+80105b0f:	83 c4 10             	add    $0x10,%esp
+
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+80105b12:	83 ec 08             	sub    $0x8,%esp
+80105b15:	68 ed 88 10 80       	push   $0x801088ed
+80105b1a:	8d 45 d2             	lea    -0x2e(%ebp),%eax
+80105b1d:	50                   	push   %eax
+80105b1e:	e8 2f c6 ff ff       	call   80102152 <namecmp>
+80105b23:	83 c4 10             	add    $0x10,%esp
+80105b26:	85 c0                	test   %eax,%eax
+80105b28:	0f 84 4a 01 00 00    	je     80105c78 <sys_unlink+0x1c9>
+80105b2e:	83 ec 08             	sub    $0x8,%esp
+80105b31:	68 ef 88 10 80       	push   $0x801088ef
+80105b36:	8d 45 d2             	lea    -0x2e(%ebp),%eax
+80105b39:	50                   	push   %eax
+80105b3a:	e8 13 c6 ff ff       	call   80102152 <namecmp>
+80105b3f:	83 c4 10             	add    $0x10,%esp
+80105b42:	85 c0                	test   %eax,%eax
+80105b44:	0f 84 2e 01 00 00    	je     80105c78 <sys_unlink+0x1c9>
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+80105b4a:	83 ec 04             	sub    $0x4,%esp
+80105b4d:	8d 45 c8             	lea    -0x38(%ebp),%eax
+80105b50:	50                   	push   %eax
+80105b51:	8d 45 d2             	lea    -0x2e(%ebp),%eax
+80105b54:	50                   	push   %eax
+80105b55:	ff 75 f4             	pushl  -0xc(%ebp)
+80105b58:	e8 10 c6 ff ff       	call   8010216d <dirlookup>
+80105b5d:	83 c4 10             	add    $0x10,%esp
+80105b60:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80105b63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80105b67:	0f 84 0a 01 00 00    	je     80105c77 <sys_unlink+0x1c8>
+    goto bad;
+  ilock(ip);
+80105b6d:	83 ec 0c             	sub    $0xc,%esp
+80105b70:	ff 75 f0             	pushl  -0x10(%ebp)
+80105b73:	e8 93 bd ff ff       	call   8010190b <ilock>
+80105b78:	83 c4 10             	add    $0x10,%esp
+
+  if(ip->nlink < 1)
+80105b7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105b7e:	0f b7 40 16          	movzwl 0x16(%eax),%eax
+80105b82:	66 85 c0             	test   %ax,%ax
+80105b85:	7f 0d                	jg     80105b94 <sys_unlink+0xe5>
+    panic("unlink: nlink < 1");
+80105b87:	83 ec 0c             	sub    $0xc,%esp
+80105b8a:	68 f2 88 10 80       	push   $0x801088f2
+80105b8f:	e8 d2 a9 ff ff       	call   80100566 <panic>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+80105b94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105b97:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80105b9b:	66 83 f8 01          	cmp    $0x1,%ax
+80105b9f:	75 25                	jne    80105bc6 <sys_unlink+0x117>
+80105ba1:	83 ec 0c             	sub    $0xc,%esp
+80105ba4:	ff 75 f0             	pushl  -0x10(%ebp)
+80105ba7:	e8 a0 fe ff ff       	call   80105a4c <isdirempty>
+80105bac:	83 c4 10             	add    $0x10,%esp
+80105baf:	85 c0                	test   %eax,%eax
+80105bb1:	75 13                	jne    80105bc6 <sys_unlink+0x117>
+    iunlockput(ip);
+80105bb3:	83 ec 0c             	sub    $0xc,%esp
+80105bb6:	ff 75 f0             	pushl  -0x10(%ebp)
+80105bb9:	e8 07 c0 ff ff       	call   80101bc5 <iunlockput>
+80105bbe:	83 c4 10             	add    $0x10,%esp
+    goto bad;
+80105bc1:	e9 b2 00 00 00       	jmp    80105c78 <sys_unlink+0x1c9>
+  }
+
+  memset(&de, 0, sizeof(de));
+80105bc6:	83 ec 04             	sub    $0x4,%esp
+80105bc9:	6a 10                	push   $0x10
+80105bcb:	6a 00                	push   $0x0
+80105bcd:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105bd0:	50                   	push   %eax
+80105bd1:	e8 e3 f5 ff ff       	call   801051b9 <memset>
+80105bd6:	83 c4 10             	add    $0x10,%esp
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80105bd9:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80105bdc:	6a 10                	push   $0x10
+80105bde:	50                   	push   %eax
+80105bdf:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105be2:	50                   	push   %eax
+80105be3:	ff 75 f4             	pushl  -0xc(%ebp)
+80105be6:	e8 df c3 ff ff       	call   80101fca <writei>
+80105beb:	83 c4 10             	add    $0x10,%esp
+80105bee:	83 f8 10             	cmp    $0x10,%eax
+80105bf1:	74 0d                	je     80105c00 <sys_unlink+0x151>
+    panic("unlink: writei");
+80105bf3:	83 ec 0c             	sub    $0xc,%esp
+80105bf6:	68 04 89 10 80       	push   $0x80108904
+80105bfb:	e8 66 a9 ff ff       	call   80100566 <panic>
+  if(ip->type == T_DIR){
+80105c00:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105c03:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80105c07:	66 83 f8 01          	cmp    $0x1,%ax
+80105c0b:	75 21                	jne    80105c2e <sys_unlink+0x17f>
+    dp->nlink--;
+80105c0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105c10:	0f b7 40 16          	movzwl 0x16(%eax),%eax
+80105c14:	83 e8 01             	sub    $0x1,%eax
+80105c17:	89 c2                	mov    %eax,%edx
+80105c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105c1c:	66 89 50 16          	mov    %dx,0x16(%eax)
+    iupdate(dp);
+80105c20:	83 ec 0c             	sub    $0xc,%esp
+80105c23:	ff 75 f4             	pushl  -0xc(%ebp)
+80105c26:	e8 0c bb ff ff       	call   80101737 <iupdate>
+80105c2b:	83 c4 10             	add    $0x10,%esp
+  }
+  iunlockput(dp);
+80105c2e:	83 ec 0c             	sub    $0xc,%esp
+80105c31:	ff 75 f4             	pushl  -0xc(%ebp)
+80105c34:	e8 8c bf ff ff       	call   80101bc5 <iunlockput>
+80105c39:	83 c4 10             	add    $0x10,%esp
+
+  ip->nlink--;
+80105c3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105c3f:	0f b7 40 16          	movzwl 0x16(%eax),%eax
+80105c43:	83 e8 01             	sub    $0x1,%eax
+80105c46:	89 c2                	mov    %eax,%edx
+80105c48:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105c4b:	66 89 50 16          	mov    %dx,0x16(%eax)
+  iupdate(ip);
+80105c4f:	83 ec 0c             	sub    $0xc,%esp
+80105c52:	ff 75 f0             	pushl  -0x10(%ebp)
+80105c55:	e8 dd ba ff ff       	call   80101737 <iupdate>
+80105c5a:	83 c4 10             	add    $0x10,%esp
+  iunlockput(ip);
+80105c5d:	83 ec 0c             	sub    $0xc,%esp
+80105c60:	ff 75 f0             	pushl  -0x10(%ebp)
+80105c63:	e8 5d bf ff ff       	call   80101bc5 <iunlockput>
+80105c68:	83 c4 10             	add    $0x10,%esp
+
+  end_op();
+80105c6b:	e8 d0 d8 ff ff       	call   80103540 <end_op>
+
+  return 0;
+80105c70:	b8 00 00 00 00       	mov    $0x0,%eax
+80105c75:	eb 19                	jmp    80105c90 <sys_unlink+0x1e1>
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+80105c77:	90                   	nop
+  end_op();
+
+  return 0;
+
+bad:
+  iunlockput(dp);
+80105c78:	83 ec 0c             	sub    $0xc,%esp
+80105c7b:	ff 75 f4             	pushl  -0xc(%ebp)
+80105c7e:	e8 42 bf ff ff       	call   80101bc5 <iunlockput>
+80105c83:	83 c4 10             	add    $0x10,%esp
+  end_op();
+80105c86:	e8 b5 d8 ff ff       	call   80103540 <end_op>
+  return -1;
+80105c8b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105c90:	c9                   	leave  
+80105c91:	c3                   	ret    
+
+80105c92 <create>:
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80105c92:	55                   	push   %ebp
+80105c93:	89 e5                	mov    %esp,%ebp
+80105c95:	83 ec 38             	sub    $0x38,%esp
+80105c98:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80105c9b:	8b 55 10             	mov    0x10(%ebp),%edx
+80105c9e:	8b 45 14             	mov    0x14(%ebp),%eax
+80105ca1:	66 89 4d d4          	mov    %cx,-0x2c(%ebp)
+80105ca5:	66 89 55 d0          	mov    %dx,-0x30(%ebp)
+80105ca9:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
+  uint off;
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+80105cad:	83 ec 08             	sub    $0x8,%esp
+80105cb0:	8d 45 de             	lea    -0x22(%ebp),%eax
+80105cb3:	50                   	push   %eax
+80105cb4:	ff 75 08             	pushl  0x8(%ebp)
+80105cb7:	e8 23 c8 ff ff       	call   801024df <nameiparent>
+80105cbc:	83 c4 10             	add    $0x10,%esp
+80105cbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80105cc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80105cc6:	75 0a                	jne    80105cd2 <create+0x40>
+    return 0;
+80105cc8:	b8 00 00 00 00       	mov    $0x0,%eax
+80105ccd:	e9 90 01 00 00       	jmp    80105e62 <create+0x1d0>
+  ilock(dp);
+80105cd2:	83 ec 0c             	sub    $0xc,%esp
+80105cd5:	ff 75 f4             	pushl  -0xc(%ebp)
+80105cd8:	e8 2e bc ff ff       	call   8010190b <ilock>
+80105cdd:	83 c4 10             	add    $0x10,%esp
+
+  if((ip = dirlookup(dp, name, &off)) != 0){
+80105ce0:	83 ec 04             	sub    $0x4,%esp
+80105ce3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105ce6:	50                   	push   %eax
+80105ce7:	8d 45 de             	lea    -0x22(%ebp),%eax
+80105cea:	50                   	push   %eax
+80105ceb:	ff 75 f4             	pushl  -0xc(%ebp)
+80105cee:	e8 7a c4 ff ff       	call   8010216d <dirlookup>
+80105cf3:	83 c4 10             	add    $0x10,%esp
+80105cf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80105cf9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80105cfd:	74 50                	je     80105d4f <create+0xbd>
+    iunlockput(dp);
+80105cff:	83 ec 0c             	sub    $0xc,%esp
+80105d02:	ff 75 f4             	pushl  -0xc(%ebp)
+80105d05:	e8 bb be ff ff       	call   80101bc5 <iunlockput>
+80105d0a:	83 c4 10             	add    $0x10,%esp
+    ilock(ip);
+80105d0d:	83 ec 0c             	sub    $0xc,%esp
+80105d10:	ff 75 f0             	pushl  -0x10(%ebp)
+80105d13:	e8 f3 bb ff ff       	call   8010190b <ilock>
+80105d18:	83 c4 10             	add    $0x10,%esp
+    if(type == T_FILE && ip->type == T_FILE)
+80105d1b:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80105d20:	75 15                	jne    80105d37 <create+0xa5>
+80105d22:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105d25:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80105d29:	66 83 f8 02          	cmp    $0x2,%ax
+80105d2d:	75 08                	jne    80105d37 <create+0xa5>
+      return ip;
+80105d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105d32:	e9 2b 01 00 00       	jmp    80105e62 <create+0x1d0>
+    iunlockput(ip);
+80105d37:	83 ec 0c             	sub    $0xc,%esp
+80105d3a:	ff 75 f0             	pushl  -0x10(%ebp)
+80105d3d:	e8 83 be ff ff       	call   80101bc5 <iunlockput>
+80105d42:	83 c4 10             	add    $0x10,%esp
+    return 0;
+80105d45:	b8 00 00 00 00       	mov    $0x0,%eax
+80105d4a:	e9 13 01 00 00       	jmp    80105e62 <create+0x1d0>
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+80105d4f:	0f bf 55 d4          	movswl -0x2c(%ebp),%edx
+80105d53:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105d56:	8b 00                	mov    (%eax),%eax
+80105d58:	83 ec 08             	sub    $0x8,%esp
+80105d5b:	52                   	push   %edx
+80105d5c:	50                   	push   %eax
+80105d5d:	e8 f4 b8 ff ff       	call   80101656 <ialloc>
+80105d62:	83 c4 10             	add    $0x10,%esp
+80105d65:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80105d68:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80105d6c:	75 0d                	jne    80105d7b <create+0xe9>
+    panic("create: ialloc");
+80105d6e:	83 ec 0c             	sub    $0xc,%esp
+80105d71:	68 13 89 10 80       	push   $0x80108913
+80105d76:	e8 eb a7 ff ff       	call   80100566 <panic>
+
+  ilock(ip);
+80105d7b:	83 ec 0c             	sub    $0xc,%esp
+80105d7e:	ff 75 f0             	pushl  -0x10(%ebp)
+80105d81:	e8 85 bb ff ff       	call   8010190b <ilock>
+80105d86:	83 c4 10             	add    $0x10,%esp
+  ip->major = major;
+80105d89:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105d8c:	0f b7 55 d0          	movzwl -0x30(%ebp),%edx
+80105d90:	66 89 50 12          	mov    %dx,0x12(%eax)
+  ip->minor = minor;
+80105d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105d97:	0f b7 55 cc          	movzwl -0x34(%ebp),%edx
+80105d9b:	66 89 50 14          	mov    %dx,0x14(%eax)
+  ip->nlink = 1;
+80105d9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105da2:	66 c7 40 16 01 00    	movw   $0x1,0x16(%eax)
+  iupdate(ip);
+80105da8:	83 ec 0c             	sub    $0xc,%esp
+80105dab:	ff 75 f0             	pushl  -0x10(%ebp)
+80105dae:	e8 84 b9 ff ff       	call   80101737 <iupdate>
+80105db3:	83 c4 10             	add    $0x10,%esp
+
+  if(type == T_DIR){  // Create . and .. entries.
+80105db6:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80105dbb:	75 6a                	jne    80105e27 <create+0x195>
+    dp->nlink++;  // for ".."
+80105dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105dc0:	0f b7 40 16          	movzwl 0x16(%eax),%eax
+80105dc4:	83 c0 01             	add    $0x1,%eax
+80105dc7:	89 c2                	mov    %eax,%edx
+80105dc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105dcc:	66 89 50 16          	mov    %dx,0x16(%eax)
+    iupdate(dp);
+80105dd0:	83 ec 0c             	sub    $0xc,%esp
+80105dd3:	ff 75 f4             	pushl  -0xc(%ebp)
+80105dd6:	e8 5c b9 ff ff       	call   80101737 <iupdate>
+80105ddb:	83 c4 10             	add    $0x10,%esp
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+80105dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105de1:	8b 40 04             	mov    0x4(%eax),%eax
+80105de4:	83 ec 04             	sub    $0x4,%esp
+80105de7:	50                   	push   %eax
+80105de8:	68 ed 88 10 80       	push   $0x801088ed
+80105ded:	ff 75 f0             	pushl  -0x10(%ebp)
+80105df0:	e8 32 c4 ff ff       	call   80102227 <dirlink>
+80105df5:	83 c4 10             	add    $0x10,%esp
+80105df8:	85 c0                	test   %eax,%eax
+80105dfa:	78 1e                	js     80105e1a <create+0x188>
+80105dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105dff:	8b 40 04             	mov    0x4(%eax),%eax
+80105e02:	83 ec 04             	sub    $0x4,%esp
+80105e05:	50                   	push   %eax
+80105e06:	68 ef 88 10 80       	push   $0x801088ef
+80105e0b:	ff 75 f0             	pushl  -0x10(%ebp)
+80105e0e:	e8 14 c4 ff ff       	call   80102227 <dirlink>
+80105e13:	83 c4 10             	add    $0x10,%esp
+80105e16:	85 c0                	test   %eax,%eax
+80105e18:	79 0d                	jns    80105e27 <create+0x195>
+      panic("create dots");
+80105e1a:	83 ec 0c             	sub    $0xc,%esp
+80105e1d:	68 22 89 10 80       	push   $0x80108922
+80105e22:	e8 3f a7 ff ff       	call   80100566 <panic>
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+80105e27:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105e2a:	8b 40 04             	mov    0x4(%eax),%eax
+80105e2d:	83 ec 04             	sub    $0x4,%esp
+80105e30:	50                   	push   %eax
+80105e31:	8d 45 de             	lea    -0x22(%ebp),%eax
+80105e34:	50                   	push   %eax
+80105e35:	ff 75 f4             	pushl  -0xc(%ebp)
+80105e38:	e8 ea c3 ff ff       	call   80102227 <dirlink>
+80105e3d:	83 c4 10             	add    $0x10,%esp
+80105e40:	85 c0                	test   %eax,%eax
+80105e42:	79 0d                	jns    80105e51 <create+0x1bf>
+    panic("create: dirlink");
+80105e44:	83 ec 0c             	sub    $0xc,%esp
+80105e47:	68 2e 89 10 80       	push   $0x8010892e
+80105e4c:	e8 15 a7 ff ff       	call   80100566 <panic>
+
+  iunlockput(dp);
+80105e51:	83 ec 0c             	sub    $0xc,%esp
+80105e54:	ff 75 f4             	pushl  -0xc(%ebp)
+80105e57:	e8 69 bd ff ff       	call   80101bc5 <iunlockput>
+80105e5c:	83 c4 10             	add    $0x10,%esp
+
+  return ip;
+80105e5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+80105e62:	c9                   	leave  
+80105e63:	c3                   	ret    
+
+80105e64 <sys_open>:
+
+int
+sys_open(void)
+{
+80105e64:	55                   	push   %ebp
+80105e65:	89 e5                	mov    %esp,%ebp
+80105e67:	83 ec 28             	sub    $0x28,%esp
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+80105e6a:	83 ec 08             	sub    $0x8,%esp
+80105e6d:	8d 45 e8             	lea    -0x18(%ebp),%eax
+80105e70:	50                   	push   %eax
+80105e71:	6a 00                	push   $0x0
+80105e73:	e8 eb f6 ff ff       	call   80105563 <argstr>
+80105e78:	83 c4 10             	add    $0x10,%esp
+80105e7b:	85 c0                	test   %eax,%eax
+80105e7d:	78 15                	js     80105e94 <sys_open+0x30>
+80105e7f:	83 ec 08             	sub    $0x8,%esp
+80105e82:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105e85:	50                   	push   %eax
+80105e86:	6a 01                	push   $0x1
+80105e88:	e8 51 f6 ff ff       	call   801054de <argint>
+80105e8d:	83 c4 10             	add    $0x10,%esp
+80105e90:	85 c0                	test   %eax,%eax
+80105e92:	79 0a                	jns    80105e9e <sys_open+0x3a>
+    return -1;
+80105e94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105e99:	e9 61 01 00 00       	jmp    80105fff <sys_open+0x19b>
+
+  begin_op();
+80105e9e:	e8 11 d6 ff ff       	call   801034b4 <begin_op>
+
+  if(omode & O_CREATE){
+80105ea3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80105ea6:	25 00 02 00 00       	and    $0x200,%eax
+80105eab:	85 c0                	test   %eax,%eax
+80105ead:	74 2a                	je     80105ed9 <sys_open+0x75>
+    ip = create(path, T_FILE, 0, 0);
+80105eaf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80105eb2:	6a 00                	push   $0x0
+80105eb4:	6a 00                	push   $0x0
+80105eb6:	6a 02                	push   $0x2
+80105eb8:	50                   	push   %eax
+80105eb9:	e8 d4 fd ff ff       	call   80105c92 <create>
+80105ebe:	83 c4 10             	add    $0x10,%esp
+80105ec1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(ip == 0){
+80105ec4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80105ec8:	75 75                	jne    80105f3f <sys_open+0xdb>
+      end_op();
+80105eca:	e8 71 d6 ff ff       	call   80103540 <end_op>
+      return -1;
+80105ecf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105ed4:	e9 26 01 00 00       	jmp    80105fff <sys_open+0x19b>
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+80105ed9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80105edc:	83 ec 0c             	sub    $0xc,%esp
+80105edf:	50                   	push   %eax
+80105ee0:	e8 de c5 ff ff       	call   801024c3 <namei>
+80105ee5:	83 c4 10             	add    $0x10,%esp
+80105ee8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80105eeb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80105eef:	75 0f                	jne    80105f00 <sys_open+0x9c>
+      end_op();
+80105ef1:	e8 4a d6 ff ff       	call   80103540 <end_op>
+      return -1;
+80105ef6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105efb:	e9 ff 00 00 00       	jmp    80105fff <sys_open+0x19b>
+    }
+    ilock(ip);
+80105f00:	83 ec 0c             	sub    $0xc,%esp
+80105f03:	ff 75 f4             	pushl  -0xc(%ebp)
+80105f06:	e8 00 ba ff ff       	call   8010190b <ilock>
+80105f0b:	83 c4 10             	add    $0x10,%esp
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105f11:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80105f15:	66 83 f8 01          	cmp    $0x1,%ax
+80105f19:	75 24                	jne    80105f3f <sys_open+0xdb>
+80105f1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80105f1e:	85 c0                	test   %eax,%eax
+80105f20:	74 1d                	je     80105f3f <sys_open+0xdb>
+      iunlockput(ip);
+80105f22:	83 ec 0c             	sub    $0xc,%esp
+80105f25:	ff 75 f4             	pushl  -0xc(%ebp)
+80105f28:	e8 98 bc ff ff       	call   80101bc5 <iunlockput>
+80105f2d:	83 c4 10             	add    $0x10,%esp
+      end_op();
+80105f30:	e8 0b d6 ff ff       	call   80103540 <end_op>
+      return -1;
+80105f35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105f3a:	e9 c0 00 00 00       	jmp    80105fff <sys_open+0x19b>
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+80105f3f:	e8 34 b0 ff ff       	call   80100f78 <filealloc>
+80105f44:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80105f47:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80105f4b:	74 17                	je     80105f64 <sys_open+0x100>
+80105f4d:	83 ec 0c             	sub    $0xc,%esp
+80105f50:	ff 75 f0             	pushl  -0x10(%ebp)
+80105f53:	e8 37 f7 ff ff       	call   8010568f <fdalloc>
+80105f58:	83 c4 10             	add    $0x10,%esp
+80105f5b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+80105f5e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+80105f62:	79 2e                	jns    80105f92 <sys_open+0x12e>
+    if(f)
+80105f64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80105f68:	74 0e                	je     80105f78 <sys_open+0x114>
+      fileclose(f);
+80105f6a:	83 ec 0c             	sub    $0xc,%esp
+80105f6d:	ff 75 f0             	pushl  -0x10(%ebp)
+80105f70:	e8 c1 b0 ff ff       	call   80101036 <fileclose>
+80105f75:	83 c4 10             	add    $0x10,%esp
+    iunlockput(ip);
+80105f78:	83 ec 0c             	sub    $0xc,%esp
+80105f7b:	ff 75 f4             	pushl  -0xc(%ebp)
+80105f7e:	e8 42 bc ff ff       	call   80101bc5 <iunlockput>
+80105f83:	83 c4 10             	add    $0x10,%esp
+    end_op();
+80105f86:	e8 b5 d5 ff ff       	call   80103540 <end_op>
+    return -1;
+80105f8b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105f90:	eb 6d                	jmp    80105fff <sys_open+0x19b>
+  }
+  iunlock(ip);
+80105f92:	83 ec 0c             	sub    $0xc,%esp
+80105f95:	ff 75 f4             	pushl  -0xc(%ebp)
+80105f98:	e8 c6 ba ff ff       	call   80101a63 <iunlock>
+80105f9d:	83 c4 10             	add    $0x10,%esp
+  end_op();
+80105fa0:	e8 9b d5 ff ff       	call   80103540 <end_op>
+
+  f->type = FD_INODE;
+80105fa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105fa8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+  f->ip = ip;
+80105fae:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105fb1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105fb4:	89 50 10             	mov    %edx,0x10(%eax)
+  f->off = 0;
+80105fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105fba:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+  f->readable = !(omode & O_WRONLY);
+80105fc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80105fc4:	83 e0 01             	and    $0x1,%eax
+80105fc7:	85 c0                	test   %eax,%eax
+80105fc9:	0f 94 c0             	sete   %al
+80105fcc:	89 c2                	mov    %eax,%edx
+80105fce:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105fd1:	88 50 08             	mov    %dl,0x8(%eax)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80105fd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80105fd7:	83 e0 01             	and    $0x1,%eax
+80105fda:	85 c0                	test   %eax,%eax
+80105fdc:	75 0a                	jne    80105fe8 <sys_open+0x184>
+80105fde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80105fe1:	83 e0 02             	and    $0x2,%eax
+80105fe4:	85 c0                	test   %eax,%eax
+80105fe6:	74 07                	je     80105fef <sys_open+0x18b>
+80105fe8:	b8 01 00 00 00       	mov    $0x1,%eax
+80105fed:	eb 05                	jmp    80105ff4 <sys_open+0x190>
+80105fef:	b8 00 00 00 00       	mov    $0x0,%eax
+80105ff4:	89 c2                	mov    %eax,%edx
+80105ff6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80105ff9:	88 50 09             	mov    %dl,0x9(%eax)
+  return fd;
+80105ffc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+80105fff:	c9                   	leave  
+80106000:	c3                   	ret    
+
+80106001 <sys_mkdir>:
+
+int
+sys_mkdir(void)
+{
+80106001:	55                   	push   %ebp
+80106002:	89 e5                	mov    %esp,%ebp
+80106004:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+80106007:	e8 a8 d4 ff ff       	call   801034b4 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+8010600c:	83 ec 08             	sub    $0x8,%esp
+8010600f:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106012:	50                   	push   %eax
+80106013:	6a 00                	push   $0x0
+80106015:	e8 49 f5 ff ff       	call   80105563 <argstr>
+8010601a:	83 c4 10             	add    $0x10,%esp
+8010601d:	85 c0                	test   %eax,%eax
+8010601f:	78 1b                	js     8010603c <sys_mkdir+0x3b>
+80106021:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80106024:	6a 00                	push   $0x0
+80106026:	6a 00                	push   $0x0
+80106028:	6a 01                	push   $0x1
+8010602a:	50                   	push   %eax
+8010602b:	e8 62 fc ff ff       	call   80105c92 <create>
+80106030:	83 c4 10             	add    $0x10,%esp
+80106033:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80106036:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+8010603a:	75 0c                	jne    80106048 <sys_mkdir+0x47>
+    end_op();
+8010603c:	e8 ff d4 ff ff       	call   80103540 <end_op>
+    return -1;
+80106041:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106046:	eb 18                	jmp    80106060 <sys_mkdir+0x5f>
+  }
+  iunlockput(ip);
+80106048:	83 ec 0c             	sub    $0xc,%esp
+8010604b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010604e:	e8 72 bb ff ff       	call   80101bc5 <iunlockput>
+80106053:	83 c4 10             	add    $0x10,%esp
+  end_op();
+80106056:	e8 e5 d4 ff ff       	call   80103540 <end_op>
+  return 0;
+8010605b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80106060:	c9                   	leave  
+80106061:	c3                   	ret    
+
+80106062 <sys_mknod>:
+
+int
+sys_mknod(void)
+{
+80106062:	55                   	push   %ebp
+80106063:	89 e5                	mov    %esp,%ebp
+80106065:	83 ec 28             	sub    $0x28,%esp
+  struct inode *ip;
+  char *path;
+  int len;
+  int major, minor;
+  
+  begin_op();
+80106068:	e8 47 d4 ff ff       	call   801034b4 <begin_op>
+  if((len=argstr(0, &path)) < 0 ||
+8010606d:	83 ec 08             	sub    $0x8,%esp
+80106070:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80106073:	50                   	push   %eax
+80106074:	6a 00                	push   $0x0
+80106076:	e8 e8 f4 ff ff       	call   80105563 <argstr>
+8010607b:	83 c4 10             	add    $0x10,%esp
+8010607e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80106081:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80106085:	78 4f                	js     801060d6 <sys_mknod+0x74>
+     argint(1, &major) < 0 ||
+80106087:	83 ec 08             	sub    $0x8,%esp
+8010608a:	8d 45 e8             	lea    -0x18(%ebp),%eax
+8010608d:	50                   	push   %eax
+8010608e:	6a 01                	push   $0x1
+80106090:	e8 49 f4 ff ff       	call   801054de <argint>
+80106095:	83 c4 10             	add    $0x10,%esp
+  char *path;
+  int len;
+  int major, minor;
+  
+  begin_op();
+  if((len=argstr(0, &path)) < 0 ||
+80106098:	85 c0                	test   %eax,%eax
+8010609a:	78 3a                	js     801060d6 <sys_mknod+0x74>
+     argint(1, &major) < 0 ||
+     argint(2, &minor) < 0 ||
+8010609c:	83 ec 08             	sub    $0x8,%esp
+8010609f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801060a2:	50                   	push   %eax
+801060a3:	6a 02                	push   $0x2
+801060a5:	e8 34 f4 ff ff       	call   801054de <argint>
+801060aa:	83 c4 10             	add    $0x10,%esp
+  int len;
+  int major, minor;
+  
+  begin_op();
+  if((len=argstr(0, &path)) < 0 ||
+     argint(1, &major) < 0 ||
+801060ad:	85 c0                	test   %eax,%eax
+801060af:	78 25                	js     801060d6 <sys_mknod+0x74>
+     argint(2, &minor) < 0 ||
+     (ip = create(path, T_DEV, major, minor)) == 0){
+801060b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801060b4:	0f bf c8             	movswl %ax,%ecx
+801060b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+801060ba:	0f bf d0             	movswl %ax,%edx
+801060bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  int major, minor;
+  
+  begin_op();
+  if((len=argstr(0, &path)) < 0 ||
+     argint(1, &major) < 0 ||
+     argint(2, &minor) < 0 ||
+801060c0:	51                   	push   %ecx
+801060c1:	52                   	push   %edx
+801060c2:	6a 03                	push   $0x3
+801060c4:	50                   	push   %eax
+801060c5:	e8 c8 fb ff ff       	call   80105c92 <create>
+801060ca:	83 c4 10             	add    $0x10,%esp
+801060cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+801060d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+801060d4:	75 0c                	jne    801060e2 <sys_mknod+0x80>
+     (ip = create(path, T_DEV, major, minor)) == 0){
+    end_op();
+801060d6:	e8 65 d4 ff ff       	call   80103540 <end_op>
+    return -1;
+801060db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801060e0:	eb 18                	jmp    801060fa <sys_mknod+0x98>
+  }
+  iunlockput(ip);
+801060e2:	83 ec 0c             	sub    $0xc,%esp
+801060e5:	ff 75 f0             	pushl  -0x10(%ebp)
+801060e8:	e8 d8 ba ff ff       	call   80101bc5 <iunlockput>
+801060ed:	83 c4 10             	add    $0x10,%esp
+  end_op();
+801060f0:	e8 4b d4 ff ff       	call   80103540 <end_op>
+  return 0;
+801060f5:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801060fa:	c9                   	leave  
+801060fb:	c3                   	ret    
+
+801060fc <sys_chdir>:
+
+int
+sys_chdir(void)
+{
+801060fc:	55                   	push   %ebp
+801060fd:	89 e5                	mov    %esp,%ebp
+801060ff:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+80106102:	e8 ad d3 ff ff       	call   801034b4 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+80106107:	83 ec 08             	sub    $0x8,%esp
+8010610a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010610d:	50                   	push   %eax
+8010610e:	6a 00                	push   $0x0
+80106110:	e8 4e f4 ff ff       	call   80105563 <argstr>
+80106115:	83 c4 10             	add    $0x10,%esp
+80106118:	85 c0                	test   %eax,%eax
+8010611a:	78 18                	js     80106134 <sys_chdir+0x38>
+8010611c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010611f:	83 ec 0c             	sub    $0xc,%esp
+80106122:	50                   	push   %eax
+80106123:	e8 9b c3 ff ff       	call   801024c3 <namei>
+80106128:	83 c4 10             	add    $0x10,%esp
+8010612b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010612e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80106132:	75 0c                	jne    80106140 <sys_chdir+0x44>
+    end_op();
+80106134:	e8 07 d4 ff ff       	call   80103540 <end_op>
+    return -1;
+80106139:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010613e:	eb 6e                	jmp    801061ae <sys_chdir+0xb2>
+  }
+  ilock(ip);
+80106140:	83 ec 0c             	sub    $0xc,%esp
+80106143:	ff 75 f4             	pushl  -0xc(%ebp)
+80106146:	e8 c0 b7 ff ff       	call   8010190b <ilock>
+8010614b:	83 c4 10             	add    $0x10,%esp
+  if(ip->type != T_DIR){
+8010614e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106151:	0f b7 40 10          	movzwl 0x10(%eax),%eax
+80106155:	66 83 f8 01          	cmp    $0x1,%ax
+80106159:	74 1a                	je     80106175 <sys_chdir+0x79>
+    iunlockput(ip);
+8010615b:	83 ec 0c             	sub    $0xc,%esp
+8010615e:	ff 75 f4             	pushl  -0xc(%ebp)
+80106161:	e8 5f ba ff ff       	call   80101bc5 <iunlockput>
+80106166:	83 c4 10             	add    $0x10,%esp
+    end_op();
+80106169:	e8 d2 d3 ff ff       	call   80103540 <end_op>
+    return -1;
+8010616e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106173:	eb 39                	jmp    801061ae <sys_chdir+0xb2>
+  }
+  iunlock(ip);
+80106175:	83 ec 0c             	sub    $0xc,%esp
+80106178:	ff 75 f4             	pushl  -0xc(%ebp)
+8010617b:	e8 e3 b8 ff ff       	call   80101a63 <iunlock>
+80106180:	83 c4 10             	add    $0x10,%esp
+  iput(proc->cwd);
+80106183:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80106189:	8b 40 68             	mov    0x68(%eax),%eax
+8010618c:	83 ec 0c             	sub    $0xc,%esp
+8010618f:	50                   	push   %eax
+80106190:	e8 40 b9 ff ff       	call   80101ad5 <iput>
+80106195:	83 c4 10             	add    $0x10,%esp
+  end_op();
+80106198:	e8 a3 d3 ff ff       	call   80103540 <end_op>
+  proc->cwd = ip;
+8010619d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801061a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801061a6:	89 50 68             	mov    %edx,0x68(%eax)
+  return 0;
+801061a9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801061ae:	c9                   	leave  
+801061af:	c3                   	ret    
+
+801061b0 <sys_exec>:
+
+int
+sys_exec(void)
+{
+801061b0:	55                   	push   %ebp
+801061b1:	89 e5                	mov    %esp,%ebp
+801061b3:	81 ec 98 00 00 00    	sub    $0x98,%esp
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+801061b9:	83 ec 08             	sub    $0x8,%esp
+801061bc:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801061bf:	50                   	push   %eax
+801061c0:	6a 00                	push   $0x0
+801061c2:	e8 9c f3 ff ff       	call   80105563 <argstr>
+801061c7:	83 c4 10             	add    $0x10,%esp
+801061ca:	85 c0                	test   %eax,%eax
+801061cc:	78 18                	js     801061e6 <sys_exec+0x36>
+801061ce:	83 ec 08             	sub    $0x8,%esp
+801061d1:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
+801061d7:	50                   	push   %eax
+801061d8:	6a 01                	push   $0x1
+801061da:	e8 ff f2 ff ff       	call   801054de <argint>
+801061df:	83 c4 10             	add    $0x10,%esp
+801061e2:	85 c0                	test   %eax,%eax
+801061e4:	79 0a                	jns    801061f0 <sys_exec+0x40>
+    return -1;
+801061e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801061eb:	e9 c6 00 00 00       	jmp    801062b6 <sys_exec+0x106>
+  }
+  memset(argv, 0, sizeof(argv));
+801061f0:	83 ec 04             	sub    $0x4,%esp
+801061f3:	68 80 00 00 00       	push   $0x80
+801061f8:	6a 00                	push   $0x0
+801061fa:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
+80106200:	50                   	push   %eax
+80106201:	e8 b3 ef ff ff       	call   801051b9 <memset>
+80106206:	83 c4 10             	add    $0x10,%esp
+  for(i=0;; i++){
+80106209:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if(i >= NELEM(argv))
+80106210:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106213:	83 f8 1f             	cmp    $0x1f,%eax
+80106216:	76 0a                	jbe    80106222 <sys_exec+0x72>
+      return -1;
+80106218:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010621d:	e9 94 00 00 00       	jmp    801062b6 <sys_exec+0x106>
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+80106222:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106225:	c1 e0 02             	shl    $0x2,%eax
+80106228:	89 c2                	mov    %eax,%edx
+8010622a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
+80106230:	01 c2                	add    %eax,%edx
+80106232:	83 ec 08             	sub    $0x8,%esp
+80106235:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+8010623b:	50                   	push   %eax
+8010623c:	52                   	push   %edx
+8010623d:	e8 00 f2 ff ff       	call   80105442 <fetchint>
+80106242:	83 c4 10             	add    $0x10,%esp
+80106245:	85 c0                	test   %eax,%eax
+80106247:	79 07                	jns    80106250 <sys_exec+0xa0>
+      return -1;
+80106249:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010624e:	eb 66                	jmp    801062b6 <sys_exec+0x106>
+    if(uarg == 0){
+80106250:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
+80106256:	85 c0                	test   %eax,%eax
+80106258:	75 27                	jne    80106281 <sys_exec+0xd1>
+      argv[i] = 0;
+8010625a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010625d:	c7 84 85 70 ff ff ff 	movl   $0x0,-0x90(%ebp,%eax,4)
+80106264:	00 00 00 00 
+      break;
+80106268:	90                   	nop
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+80106269:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010626c:	83 ec 08             	sub    $0x8,%esp
+8010626f:	8d 95 70 ff ff ff    	lea    -0x90(%ebp),%edx
+80106275:	52                   	push   %edx
+80106276:	50                   	push   %eax
+80106277:	e8 da a8 ff ff       	call   80100b56 <exec>
+8010627c:	83 c4 10             	add    $0x10,%esp
+8010627f:	eb 35                	jmp    801062b6 <sys_exec+0x106>
+      return -1;
+    if(uarg == 0){
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+80106281:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
+80106287:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010628a:	c1 e2 02             	shl    $0x2,%edx
+8010628d:	01 c2                	add    %eax,%edx
+8010628f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
+80106295:	83 ec 08             	sub    $0x8,%esp
+80106298:	52                   	push   %edx
+80106299:	50                   	push   %eax
+8010629a:	e8 dd f1 ff ff       	call   8010547c <fetchstr>
+8010629f:	83 c4 10             	add    $0x10,%esp
+801062a2:	85 c0                	test   %eax,%eax
+801062a4:	79 07                	jns    801062ad <sys_exec+0xfd>
+      return -1;
+801062a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801062ab:	eb 09                	jmp    801062b6 <sys_exec+0x106>
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+  for(i=0;; i++){
+801062ad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+801062b1:	e9 5a ff ff ff       	jmp    80106210 <sys_exec+0x60>
+  return exec(path, argv);
+}
+801062b6:	c9                   	leave  
+801062b7:	c3                   	ret    
+
+801062b8 <sys_pipe>:
+
+int
+sys_pipe(void)
+{
+801062b8:	55                   	push   %ebp
+801062b9:	89 e5                	mov    %esp,%ebp
+801062bb:	83 ec 28             	sub    $0x28,%esp
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+801062be:	83 ec 04             	sub    $0x4,%esp
+801062c1:	6a 08                	push   $0x8
+801062c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
+801062c6:	50                   	push   %eax
+801062c7:	6a 00                	push   $0x0
+801062c9:	e8 38 f2 ff ff       	call   80105506 <argptr>
+801062ce:	83 c4 10             	add    $0x10,%esp
+801062d1:	85 c0                	test   %eax,%eax
+801062d3:	79 0a                	jns    801062df <sys_pipe+0x27>
+    return -1;
+801062d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801062da:	e9 af 00 00 00       	jmp    8010638e <sys_pipe+0xd6>
+  if(pipealloc(&rf, &wf) < 0)
+801062df:	83 ec 08             	sub    $0x8,%esp
+801062e2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801062e5:	50                   	push   %eax
+801062e6:	8d 45 e8             	lea    -0x18(%ebp),%eax
+801062e9:	50                   	push   %eax
+801062ea:	e8 be dc ff ff       	call   80103fad <pipealloc>
+801062ef:	83 c4 10             	add    $0x10,%esp
+801062f2:	85 c0                	test   %eax,%eax
+801062f4:	79 0a                	jns    80106300 <sys_pipe+0x48>
+    return -1;
+801062f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801062fb:	e9 8e 00 00 00       	jmp    8010638e <sys_pipe+0xd6>
+  fd0 = -1;
+80106300:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+80106307:	8b 45 e8             	mov    -0x18(%ebp),%eax
+8010630a:	83 ec 0c             	sub    $0xc,%esp
+8010630d:	50                   	push   %eax
+8010630e:	e8 7c f3 ff ff       	call   8010568f <fdalloc>
+80106313:	83 c4 10             	add    $0x10,%esp
+80106316:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80106319:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+8010631d:	78 18                	js     80106337 <sys_pipe+0x7f>
+8010631f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106322:	83 ec 0c             	sub    $0xc,%esp
+80106325:	50                   	push   %eax
+80106326:	e8 64 f3 ff ff       	call   8010568f <fdalloc>
+8010632b:	83 c4 10             	add    $0x10,%esp
+8010632e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80106331:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80106335:	79 3f                	jns    80106376 <sys_pipe+0xbe>
+    if(fd0 >= 0)
+80106337:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+8010633b:	78 14                	js     80106351 <sys_pipe+0x99>
+      proc->ofile[fd0] = 0;
+8010633d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80106343:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80106346:	83 c2 08             	add    $0x8,%edx
+80106349:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
+80106350:	00 
+    fileclose(rf);
+80106351:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80106354:	83 ec 0c             	sub    $0xc,%esp
+80106357:	50                   	push   %eax
+80106358:	e8 d9 ac ff ff       	call   80101036 <fileclose>
+8010635d:	83 c4 10             	add    $0x10,%esp
+    fileclose(wf);
+80106360:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106363:	83 ec 0c             	sub    $0xc,%esp
+80106366:	50                   	push   %eax
+80106367:	e8 ca ac ff ff       	call   80101036 <fileclose>
+8010636c:	83 c4 10             	add    $0x10,%esp
+    return -1;
+8010636f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106374:	eb 18                	jmp    8010638e <sys_pipe+0xd6>
+  }
+  fd[0] = fd0;
+80106376:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80106379:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010637c:	89 10                	mov    %edx,(%eax)
+  fd[1] = fd1;
+8010637e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80106381:	8d 50 04             	lea    0x4(%eax),%edx
+80106384:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80106387:	89 02                	mov    %eax,(%edx)
+  return 0;
+80106389:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+8010638e:	c9                   	leave  
+8010638f:	c3                   	ret    
+
+80106390 <sys_fork>:
+#include "mmu.h"
+#include "proc.h"
+
+int
+sys_fork(void)
+{
+80106390:	55                   	push   %ebp
+80106391:	89 e5                	mov    %esp,%ebp
+80106393:	83 ec 08             	sub    $0x8,%esp
+  return fork();
+80106396:	e8 08 e3 ff ff       	call   801046a3 <fork>
+}
+8010639b:	c9                   	leave  
+8010639c:	c3                   	ret    
+
+8010639d <sys_exit>:
+
+int
+sys_exit(void)
+{
+8010639d:	55                   	push   %ebp
+8010639e:	89 e5                	mov    %esp,%ebp
+801063a0:	83 ec 08             	sub    $0x8,%esp
+  exit();
+801063a3:	e8 8c e4 ff ff       	call   80104834 <exit>
+  return 0;  // not reached
+801063a8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801063ad:	c9                   	leave  
+801063ae:	c3                   	ret    
+
+801063af <sys_wait>:
+
+int
+sys_wait(void)
+{
+801063af:	55                   	push   %ebp
+801063b0:	89 e5                	mov    %esp,%ebp
+801063b2:	83 ec 08             	sub    $0x8,%esp
+  return wait();
+801063b5:	e8 b2 e5 ff ff       	call   8010496c <wait>
+}
+801063ba:	c9                   	leave  
+801063bb:	c3                   	ret    
+
+801063bc <sys_kill>:
+
+int
+sys_kill(void)
+{
+801063bc:	55                   	push   %ebp
+801063bd:	89 e5                	mov    %esp,%ebp
+801063bf:	83 ec 18             	sub    $0x18,%esp
+  int pid;
+
+  if(argint(0, &pid) < 0)
+801063c2:	83 ec 08             	sub    $0x8,%esp
+801063c5:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801063c8:	50                   	push   %eax
+801063c9:	6a 00                	push   $0x0
+801063cb:	e8 0e f1 ff ff       	call   801054de <argint>
+801063d0:	83 c4 10             	add    $0x10,%esp
+801063d3:	85 c0                	test   %eax,%eax
+801063d5:	79 07                	jns    801063de <sys_kill+0x22>
+    return -1;
+801063d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801063dc:	eb 0f                	jmp    801063ed <sys_kill+0x31>
+  return kill(pid);
+801063de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801063e1:	83 ec 0c             	sub    $0xc,%esp
+801063e4:	50                   	push   %eax
+801063e5:	e8 95 e9 ff ff       	call   80104d7f <kill>
+801063ea:	83 c4 10             	add    $0x10,%esp
+}
+801063ed:	c9                   	leave  
+801063ee:	c3                   	ret    
+
+801063ef <sys_getpid>:
+
+int
+sys_getpid(void)
+{
+801063ef:	55                   	push   %ebp
+801063f0:	89 e5                	mov    %esp,%ebp
+  return proc->pid;
+801063f2:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801063f8:	8b 40 10             	mov    0x10(%eax),%eax
+}
+801063fb:	5d                   	pop    %ebp
+801063fc:	c3                   	ret    
+
+801063fd <sys_sbrk>:
+
+int
+sys_sbrk(void)
+{
+801063fd:	55                   	push   %ebp
+801063fe:	89 e5                	mov    %esp,%ebp
+80106400:	83 ec 18             	sub    $0x18,%esp
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+80106403:	83 ec 08             	sub    $0x8,%esp
+80106406:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106409:	50                   	push   %eax
+8010640a:	6a 00                	push   $0x0
+8010640c:	e8 cd f0 ff ff       	call   801054de <argint>
+80106411:	83 c4 10             	add    $0x10,%esp
+80106414:	85 c0                	test   %eax,%eax
+80106416:	79 07                	jns    8010641f <sys_sbrk+0x22>
+    return -1;
+80106418:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010641d:	eb 28                	jmp    80106447 <sys_sbrk+0x4a>
+  addr = proc->sz;
+8010641f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80106425:	8b 00                	mov    (%eax),%eax
+80106427:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(growproc(n) < 0)
+8010642a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010642d:	83 ec 0c             	sub    $0xc,%esp
+80106430:	50                   	push   %eax
+80106431:	e8 ca e1 ff ff       	call   80104600 <growproc>
+80106436:	83 c4 10             	add    $0x10,%esp
+80106439:	85 c0                	test   %eax,%eax
+8010643b:	79 07                	jns    80106444 <sys_sbrk+0x47>
+    return -1;
+8010643d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106442:	eb 03                	jmp    80106447 <sys_sbrk+0x4a>
+  return addr;
+80106444:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+80106447:	c9                   	leave  
+80106448:	c3                   	ret    
+
+80106449 <sys_sleep>:
+
+int
+sys_sleep(void)
+{
+80106449:	55                   	push   %ebp
+8010644a:	89 e5                	mov    %esp,%ebp
+8010644c:	83 ec 18             	sub    $0x18,%esp
+  int n;
+  uint ticks0;
+  
+  if(argint(0, &n) < 0)
+8010644f:	83 ec 08             	sub    $0x8,%esp
+80106452:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106455:	50                   	push   %eax
+80106456:	6a 00                	push   $0x0
+80106458:	e8 81 f0 ff ff       	call   801054de <argint>
+8010645d:	83 c4 10             	add    $0x10,%esp
+80106460:	85 c0                	test   %eax,%eax
+80106462:	79 07                	jns    8010646b <sys_sleep+0x22>
+    return -1;
+80106464:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106469:	eb 77                	jmp    801064e2 <sys_sleep+0x99>
+  acquire(&tickslock);
+8010646b:	83 ec 0c             	sub    $0xc,%esp
+8010646e:	68 a0 49 11 80       	push   $0x801149a0
+80106473:	e8 de ea ff ff       	call   80104f56 <acquire>
+80106478:	83 c4 10             	add    $0x10,%esp
+  ticks0 = ticks;
+8010647b:	a1 e0 51 11 80       	mov    0x801151e0,%eax
+80106480:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  while(ticks - ticks0 < n){
+80106483:	eb 39                	jmp    801064be <sys_sleep+0x75>
+    if(proc->killed){
+80106485:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010648b:	8b 40 24             	mov    0x24(%eax),%eax
+8010648e:	85 c0                	test   %eax,%eax
+80106490:	74 17                	je     801064a9 <sys_sleep+0x60>
+      release(&tickslock);
+80106492:	83 ec 0c             	sub    $0xc,%esp
+80106495:	68 a0 49 11 80       	push   $0x801149a0
+8010649a:	e8 1e eb ff ff       	call   80104fbd <release>
+8010649f:	83 c4 10             	add    $0x10,%esp
+      return -1;
+801064a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801064a7:	eb 39                	jmp    801064e2 <sys_sleep+0x99>
+    }
+    sleep(&ticks, &tickslock);
+801064a9:	83 ec 08             	sub    $0x8,%esp
+801064ac:	68 a0 49 11 80       	push   $0x801149a0
+801064b1:	68 e0 51 11 80       	push   $0x801151e0
+801064b6:	e8 a2 e7 ff ff       	call   80104c5d <sleep>
+801064bb:	83 c4 10             	add    $0x10,%esp
+  
+  if(argint(0, &n) < 0)
+    return -1;
+  acquire(&tickslock);
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+801064be:	a1 e0 51 11 80       	mov    0x801151e0,%eax
+801064c3:	2b 45 f4             	sub    -0xc(%ebp),%eax
+801064c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+801064c9:	39 d0                	cmp    %edx,%eax
+801064cb:	72 b8                	jb     80106485 <sys_sleep+0x3c>
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+  }
+  release(&tickslock);
+801064cd:	83 ec 0c             	sub    $0xc,%esp
+801064d0:	68 a0 49 11 80       	push   $0x801149a0
+801064d5:	e8 e3 ea ff ff       	call   80104fbd <release>
+801064da:	83 c4 10             	add    $0x10,%esp
+  return 0;
+801064dd:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801064e2:	c9                   	leave  
+801064e3:	c3                   	ret    
+
+801064e4 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+801064e4:	55                   	push   %ebp
+801064e5:	89 e5                	mov    %esp,%ebp
+801064e7:	83 ec 18             	sub    $0x18,%esp
+  uint xticks;
+  
+  acquire(&tickslock);
+801064ea:	83 ec 0c             	sub    $0xc,%esp
+801064ed:	68 a0 49 11 80       	push   $0x801149a0
+801064f2:	e8 5f ea ff ff       	call   80104f56 <acquire>
+801064f7:	83 c4 10             	add    $0x10,%esp
+  xticks = ticks;
+801064fa:	a1 e0 51 11 80       	mov    0x801151e0,%eax
+801064ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  release(&tickslock);
+80106502:	83 ec 0c             	sub    $0xc,%esp
+80106505:	68 a0 49 11 80       	push   $0x801149a0
+8010650a:	e8 ae ea ff ff       	call   80104fbd <release>
+8010650f:	83 c4 10             	add    $0x10,%esp
+  return xticks;
+80106512:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+80106515:	c9                   	leave  
+80106516:	c3                   	ret    
+
+80106517 <sys_procstat>:
+
+//
+int
+sys_procstat(void)
+{
+80106517:	55                   	push   %ebp
+80106518:	89 e5                	mov    %esp,%ebp
+8010651a:	83 ec 08             	sub    $0x8,%esp
+  cprintf("SE EJECUTA EL SYS_PROCSTAT\n");
+8010651d:	83 ec 0c             	sub    $0xc,%esp
+80106520:	68 3e 89 10 80       	push   $0x8010893e
+80106525:	e8 9c 9e ff ff       	call   801003c6 <cprintf>
+8010652a:	83 c4 10             	add    $0x10,%esp
+  procdump();// ejecutamos la funcion procdump definida en proc.c
+8010652d:	e8 d1 e8 ff ff       	call   80104e03 <procdump>
+  return 0;
+80106532:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80106537:	c9                   	leave  
+80106538:	c3                   	ret    
+
+80106539 <outb>:
+               "memory", "cc");
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+80106539:	55                   	push   %ebp
+8010653a:	89 e5                	mov    %esp,%ebp
+8010653c:	83 ec 08             	sub    $0x8,%esp
+8010653f:	8b 55 08             	mov    0x8(%ebp),%edx
+80106542:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106545:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
+80106549:	88 45 f8             	mov    %al,-0x8(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010654c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
+80106550:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+80106554:	ee                   	out    %al,(%dx)
+}
+80106555:	90                   	nop
+80106556:	c9                   	leave  
+80106557:	c3                   	ret    
+
+80106558 <timerinit>:
+#define TIMER_RATEGEN   0x04    // mode 2, rate generator
+#define TIMER_16BIT     0x30    // r/w counter 16 bits, LSB first
+
+void
+timerinit(void)
+{
+80106558:	55                   	push   %ebp
+80106559:	89 e5                	mov    %esp,%ebp
+8010655b:	83 ec 08             	sub    $0x8,%esp
+  // Interrupt 100 times/sec.
+  outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+8010655e:	6a 34                	push   $0x34
+80106560:	6a 43                	push   $0x43
+80106562:	e8 d2 ff ff ff       	call   80106539 <outb>
+80106567:	83 c4 08             	add    $0x8,%esp
+  outb(IO_TIMER1, TIMER_DIV(100) % 256);
+8010656a:	68 9c 00 00 00       	push   $0x9c
+8010656f:	6a 40                	push   $0x40
+80106571:	e8 c3 ff ff ff       	call   80106539 <outb>
+80106576:	83 c4 08             	add    $0x8,%esp
+  outb(IO_TIMER1, TIMER_DIV(100) / 256);
+80106579:	6a 2e                	push   $0x2e
+8010657b:	6a 40                	push   $0x40
+8010657d:	e8 b7 ff ff ff       	call   80106539 <outb>
+80106582:	83 c4 08             	add    $0x8,%esp
+  picenable(IRQ_TIMER);
+80106585:	83 ec 0c             	sub    $0xc,%esp
+80106588:	6a 00                	push   $0x0
+8010658a:	e8 08 d9 ff ff       	call   80103e97 <picenable>
+8010658f:	83 c4 10             	add    $0x10,%esp
+}
+80106592:	90                   	nop
+80106593:	c9                   	leave  
+80106594:	c3                   	ret    
+
+80106595 <alltraps>:
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+80106595:	1e                   	push   %ds
+  pushl %es
+80106596:	06                   	push   %es
+  pushl %fs
+80106597:	0f a0                	push   %fs
+  pushl %gs
+80106599:	0f a8                	push   %gs
+  pushal
+8010659b:	60                   	pusha  
+  
+  # Set up data and per-cpu segments.
+  movw $(SEG_KDATA<<3), %ax
+8010659c:	66 b8 10 00          	mov    $0x10,%ax
+  movw %ax, %ds
+801065a0:	8e d8                	mov    %eax,%ds
+  movw %ax, %es
+801065a2:	8e c0                	mov    %eax,%es
+  movw $(SEG_KCPU<<3), %ax
+801065a4:	66 b8 18 00          	mov    $0x18,%ax
+  movw %ax, %fs
+801065a8:	8e e0                	mov    %eax,%fs
+  movw %ax, %gs
+801065aa:	8e e8                	mov    %eax,%gs
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+801065ac:	54                   	push   %esp
+  call trap
+801065ad:	e8 d7 01 00 00       	call   80106789 <trap>
+  addl $4, %esp
+801065b2:	83 c4 04             	add    $0x4,%esp
+
+801065b5 <trapret>:
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+801065b5:	61                   	popa   
+  popl %gs
+801065b6:	0f a9                	pop    %gs
+  popl %fs
+801065b8:	0f a1                	pop    %fs
+  popl %es
+801065ba:	07                   	pop    %es
+  popl %ds
+801065bb:	1f                   	pop    %ds
+  addl $0x8, %esp  # trapno and errcode
+801065bc:	83 c4 08             	add    $0x8,%esp
+  iret
+801065bf:	cf                   	iret   
+
+801065c0 <lidt>:
+
+struct gatedesc;
+
+static inline void
+lidt(struct gatedesc *p, int size)
+{
+801065c0:	55                   	push   %ebp
+801065c1:	89 e5                	mov    %esp,%ebp
+801065c3:	83 ec 10             	sub    $0x10,%esp
+  volatile ushort pd[3];
+
+  pd[0] = size-1;
+801065c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+801065c9:	83 e8 01             	sub    $0x1,%eax
+801065cc:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+801065d0:	8b 45 08             	mov    0x8(%ebp),%eax
+801065d3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+801065d7:	8b 45 08             	mov    0x8(%ebp),%eax
+801065da:	c1 e8 10             	shr    $0x10,%eax
+801065dd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+
+  asm volatile("lidt (%0)" : : "r" (pd));
+801065e1:	8d 45 fa             	lea    -0x6(%ebp),%eax
+801065e4:	0f 01 18             	lidtl  (%eax)
+}
+801065e7:	90                   	nop
+801065e8:	c9                   	leave  
+801065e9:	c3                   	ret    
+
+801065ea <rcr2>:
+  return result;
+}
+
+static inline uint
+rcr2(void)
+{
+801065ea:	55                   	push   %ebp
+801065eb:	89 e5                	mov    %esp,%ebp
+801065ed:	83 ec 10             	sub    $0x10,%esp
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+801065f0:	0f 20 d0             	mov    %cr2,%eax
+801065f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  return val;
+801065f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+801065f9:	c9                   	leave  
+801065fa:	c3                   	ret    
+
+801065fb <tvinit>:
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+801065fb:	55                   	push   %ebp
+801065fc:	89 e5                	mov    %esp,%ebp
+801065fe:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  for(i = 0; i < 256; i++)
+80106601:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80106608:	e9 c3 00 00 00       	jmp    801066d0 <tvinit+0xd5>
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+8010660d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106610:	8b 04 85 9c b0 10 80 	mov    -0x7fef4f64(,%eax,4),%eax
+80106617:	89 c2                	mov    %eax,%edx
+80106619:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010661c:	66 89 14 c5 e0 49 11 	mov    %dx,-0x7feeb620(,%eax,8)
+80106623:	80 
+80106624:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106627:	66 c7 04 c5 e2 49 11 	movw   $0x8,-0x7feeb61e(,%eax,8)
+8010662e:	80 08 00 
+80106631:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106634:	0f b6 14 c5 e4 49 11 	movzbl -0x7feeb61c(,%eax,8),%edx
+8010663b:	80 
+8010663c:	83 e2 e0             	and    $0xffffffe0,%edx
+8010663f:	88 14 c5 e4 49 11 80 	mov    %dl,-0x7feeb61c(,%eax,8)
+80106646:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106649:	0f b6 14 c5 e4 49 11 	movzbl -0x7feeb61c(,%eax,8),%edx
+80106650:	80 
+80106651:	83 e2 1f             	and    $0x1f,%edx
+80106654:	88 14 c5 e4 49 11 80 	mov    %dl,-0x7feeb61c(,%eax,8)
+8010665b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010665e:	0f b6 14 c5 e5 49 11 	movzbl -0x7feeb61b(,%eax,8),%edx
+80106665:	80 
+80106666:	83 e2 f0             	and    $0xfffffff0,%edx
+80106669:	83 ca 0e             	or     $0xe,%edx
+8010666c:	88 14 c5 e5 49 11 80 	mov    %dl,-0x7feeb61b(,%eax,8)
+80106673:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106676:	0f b6 14 c5 e5 49 11 	movzbl -0x7feeb61b(,%eax,8),%edx
+8010667d:	80 
+8010667e:	83 e2 ef             	and    $0xffffffef,%edx
+80106681:	88 14 c5 e5 49 11 80 	mov    %dl,-0x7feeb61b(,%eax,8)
+80106688:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010668b:	0f b6 14 c5 e5 49 11 	movzbl -0x7feeb61b(,%eax,8),%edx
+80106692:	80 
+80106693:	83 e2 9f             	and    $0xffffff9f,%edx
+80106696:	88 14 c5 e5 49 11 80 	mov    %dl,-0x7feeb61b(,%eax,8)
+8010669d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801066a0:	0f b6 14 c5 e5 49 11 	movzbl -0x7feeb61b(,%eax,8),%edx
+801066a7:	80 
+801066a8:	83 ca 80             	or     $0xffffff80,%edx
+801066ab:	88 14 c5 e5 49 11 80 	mov    %dl,-0x7feeb61b(,%eax,8)
+801066b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801066b5:	8b 04 85 9c b0 10 80 	mov    -0x7fef4f64(,%eax,4),%eax
+801066bc:	c1 e8 10             	shr    $0x10,%eax
+801066bf:	89 c2                	mov    %eax,%edx
+801066c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801066c4:	66 89 14 c5 e6 49 11 	mov    %dx,-0x7feeb61a(,%eax,8)
+801066cb:	80 
+void
+tvinit(void)
+{
+  int i;
+
+  for(i = 0; i < 256; i++)
+801066cc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+801066d0:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
+801066d7:	0f 8e 30 ff ff ff    	jle    8010660d <tvinit+0x12>
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+801066dd:	a1 9c b1 10 80       	mov    0x8010b19c,%eax
+801066e2:	66 a3 e0 4b 11 80    	mov    %ax,0x80114be0
+801066e8:	66 c7 05 e2 4b 11 80 	movw   $0x8,0x80114be2
+801066ef:	08 00 
+801066f1:	0f b6 05 e4 4b 11 80 	movzbl 0x80114be4,%eax
+801066f8:	83 e0 e0             	and    $0xffffffe0,%eax
+801066fb:	a2 e4 4b 11 80       	mov    %al,0x80114be4
+80106700:	0f b6 05 e4 4b 11 80 	movzbl 0x80114be4,%eax
+80106707:	83 e0 1f             	and    $0x1f,%eax
+8010670a:	a2 e4 4b 11 80       	mov    %al,0x80114be4
+8010670f:	0f b6 05 e5 4b 11 80 	movzbl 0x80114be5,%eax
+80106716:	83 c8 0f             	or     $0xf,%eax
+80106719:	a2 e5 4b 11 80       	mov    %al,0x80114be5
+8010671e:	0f b6 05 e5 4b 11 80 	movzbl 0x80114be5,%eax
+80106725:	83 e0 ef             	and    $0xffffffef,%eax
+80106728:	a2 e5 4b 11 80       	mov    %al,0x80114be5
+8010672d:	0f b6 05 e5 4b 11 80 	movzbl 0x80114be5,%eax
+80106734:	83 c8 60             	or     $0x60,%eax
+80106737:	a2 e5 4b 11 80       	mov    %al,0x80114be5
+8010673c:	0f b6 05 e5 4b 11 80 	movzbl 0x80114be5,%eax
+80106743:	83 c8 80             	or     $0xffffff80,%eax
+80106746:	a2 e5 4b 11 80       	mov    %al,0x80114be5
+8010674b:	a1 9c b1 10 80       	mov    0x8010b19c,%eax
+80106750:	c1 e8 10             	shr    $0x10,%eax
+80106753:	66 a3 e6 4b 11 80    	mov    %ax,0x80114be6
+  
+  initlock(&tickslock, "time");
+80106759:	83 ec 08             	sub    $0x8,%esp
+8010675c:	68 5c 89 10 80       	push   $0x8010895c
+80106761:	68 a0 49 11 80       	push   $0x801149a0
+80106766:	e8 c9 e7 ff ff       	call   80104f34 <initlock>
+8010676b:	83 c4 10             	add    $0x10,%esp
+}
+8010676e:	90                   	nop
+8010676f:	c9                   	leave  
+80106770:	c3                   	ret    
+
+80106771 <idtinit>:
+
+void
+idtinit(void)
+{
+80106771:	55                   	push   %ebp
+80106772:	89 e5                	mov    %esp,%ebp
+  lidt(idt, sizeof(idt));
+80106774:	68 00 08 00 00       	push   $0x800
+80106779:	68 e0 49 11 80       	push   $0x801149e0
+8010677e:	e8 3d fe ff ff       	call   801065c0 <lidt>
+80106783:	83 c4 08             	add    $0x8,%esp
+}
+80106786:	90                   	nop
+80106787:	c9                   	leave  
+80106788:	c3                   	ret    
+
+80106789 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+80106789:	55                   	push   %ebp
+8010678a:	89 e5                	mov    %esp,%ebp
+8010678c:	57                   	push   %edi
+8010678d:	56                   	push   %esi
+8010678e:	53                   	push   %ebx
+8010678f:	83 ec 1c             	sub    $0x1c,%esp
+  if(tf->trapno == T_SYSCALL){
+80106792:	8b 45 08             	mov    0x8(%ebp),%eax
+80106795:	8b 40 30             	mov    0x30(%eax),%eax
+80106798:	83 f8 40             	cmp    $0x40,%eax
+8010679b:	75 3e                	jne    801067db <trap+0x52>
+    if(proc->killed)
+8010679d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801067a3:	8b 40 24             	mov    0x24(%eax),%eax
+801067a6:	85 c0                	test   %eax,%eax
+801067a8:	74 05                	je     801067af <trap+0x26>
+      exit();
+801067aa:	e8 85 e0 ff ff       	call   80104834 <exit>
+    proc->tf = tf;
+801067af:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801067b5:	8b 55 08             	mov    0x8(%ebp),%edx
+801067b8:	89 50 18             	mov    %edx,0x18(%eax)
+    syscall();
+801067bb:	e8 d4 ed ff ff       	call   80105594 <syscall>
+    if(proc->killed)
+801067c0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801067c6:	8b 40 24             	mov    0x24(%eax),%eax
+801067c9:	85 c0                	test   %eax,%eax
+801067cb:	0f 84 60 02 00 00    	je     80106a31 <trap+0x2a8>
+      exit();
+801067d1:	e8 5e e0 ff ff       	call   80104834 <exit>
+    return;
+801067d6:	e9 56 02 00 00       	jmp    80106a31 <trap+0x2a8>
+  }
+
+  switch(tf->trapno){
+801067db:	8b 45 08             	mov    0x8(%ebp),%eax
+801067de:	8b 40 30             	mov    0x30(%eax),%eax
+801067e1:	83 e8 20             	sub    $0x20,%eax
+801067e4:	83 f8 1f             	cmp    $0x1f,%eax
+801067e7:	0f 87 c0 00 00 00    	ja     801068ad <trap+0x124>
+801067ed:	8b 04 85 04 8a 10 80 	mov    -0x7fef75fc(,%eax,4),%eax
+801067f4:	ff e0                	jmp    *%eax
+  case T_IRQ0 + IRQ_TIMER:
+    if(cpu->id == 0){
+801067f6:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+801067fc:	0f b6 00             	movzbl (%eax),%eax
+801067ff:	84 c0                	test   %al,%al
+80106801:	75 3d                	jne    80106840 <trap+0xb7>
+      acquire(&tickslock);
+80106803:	83 ec 0c             	sub    $0xc,%esp
+80106806:	68 a0 49 11 80       	push   $0x801149a0
+8010680b:	e8 46 e7 ff ff       	call   80104f56 <acquire>
+80106810:	83 c4 10             	add    $0x10,%esp
+      ticks++;
+80106813:	a1 e0 51 11 80       	mov    0x801151e0,%eax
+80106818:	83 c0 01             	add    $0x1,%eax
+8010681b:	a3 e0 51 11 80       	mov    %eax,0x801151e0
+      wakeup(&ticks);
+80106820:	83 ec 0c             	sub    $0xc,%esp
+80106823:	68 e0 51 11 80       	push   $0x801151e0
+80106828:	e8 1b e5 ff ff       	call   80104d48 <wakeup>
+8010682d:	83 c4 10             	add    $0x10,%esp
+      release(&tickslock);
+80106830:	83 ec 0c             	sub    $0xc,%esp
+80106833:	68 a0 49 11 80       	push   $0x801149a0
+80106838:	e8 80 e7 ff ff       	call   80104fbd <release>
+8010683d:	83 c4 10             	add    $0x10,%esp
+    }
+    lapiceoi();
+80106840:	e8 3f c7 ff ff       	call   80102f84 <lapiceoi>
+    break;
+80106845:	e9 1c 01 00 00       	jmp    80106966 <trap+0x1dd>
+  case T_IRQ0 + IRQ_IDE:
+    ideintr();
+8010684a:	e8 48 bf ff ff       	call   80102797 <ideintr>
+    lapiceoi();
+8010684f:	e8 30 c7 ff ff       	call   80102f84 <lapiceoi>
+    break;
+80106854:	e9 0d 01 00 00       	jmp    80106966 <trap+0x1dd>
+  case T_IRQ0 + IRQ_IDE+1:
+    // Bochs generates spurious IDE1 interrupts.
+    break;
+  case T_IRQ0 + IRQ_KBD:
+    kbdintr();
+80106859:	e8 28 c5 ff ff       	call   80102d86 <kbdintr>
+    lapiceoi();
+8010685e:	e8 21 c7 ff ff       	call   80102f84 <lapiceoi>
+    break;
+80106863:	e9 fe 00 00 00       	jmp    80106966 <trap+0x1dd>
+  case T_IRQ0 + IRQ_COM1:
+    uartintr();
+80106868:	e8 a5 03 00 00       	call   80106c12 <uartintr>
+    lapiceoi();
+8010686d:	e8 12 c7 ff ff       	call   80102f84 <lapiceoi>
+    break;
+80106872:	e9 ef 00 00 00       	jmp    80106966 <trap+0x1dd>
+  case T_IRQ0 + 7:
+  case T_IRQ0 + IRQ_SPURIOUS:
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80106877:	8b 45 08             	mov    0x8(%ebp),%eax
+8010687a:	8b 48 38             	mov    0x38(%eax),%ecx
+            cpu->id, tf->cs, tf->eip);
+8010687d:	8b 45 08             	mov    0x8(%ebp),%eax
+80106880:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+    uartintr();
+    lapiceoi();
+    break;
+  case T_IRQ0 + 7:
+  case T_IRQ0 + IRQ_SPURIOUS:
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80106884:	0f b7 d0             	movzwl %ax,%edx
+            cpu->id, tf->cs, tf->eip);
+80106887:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+8010688d:	0f b6 00             	movzbl (%eax),%eax
+    uartintr();
+    lapiceoi();
+    break;
+  case T_IRQ0 + 7:
+  case T_IRQ0 + IRQ_SPURIOUS:
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80106890:	0f b6 c0             	movzbl %al,%eax
+80106893:	51                   	push   %ecx
+80106894:	52                   	push   %edx
+80106895:	50                   	push   %eax
+80106896:	68 64 89 10 80       	push   $0x80108964
+8010689b:	e8 26 9b ff ff       	call   801003c6 <cprintf>
+801068a0:	83 c4 10             	add    $0x10,%esp
+            cpu->id, tf->cs, tf->eip);
+    lapiceoi();
+801068a3:	e8 dc c6 ff ff       	call   80102f84 <lapiceoi>
+    break;
+801068a8:	e9 b9 00 00 00       	jmp    80106966 <trap+0x1dd>
+   
+  //PAGEBREAK: 13
+  default:
+    if(proc == 0 || (tf->cs&3) == 0){
+801068ad:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801068b3:	85 c0                	test   %eax,%eax
+801068b5:	74 11                	je     801068c8 <trap+0x13f>
+801068b7:	8b 45 08             	mov    0x8(%ebp),%eax
+801068ba:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+801068be:	0f b7 c0             	movzwl %ax,%eax
+801068c1:	83 e0 03             	and    $0x3,%eax
+801068c4:	85 c0                	test   %eax,%eax
+801068c6:	75 40                	jne    80106908 <trap+0x17f>
+      // In kernel, it must be our mistake.
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+801068c8:	e8 1d fd ff ff       	call   801065ea <rcr2>
+801068cd:	89 c3                	mov    %eax,%ebx
+801068cf:	8b 45 08             	mov    0x8(%ebp),%eax
+801068d2:	8b 48 38             	mov    0x38(%eax),%ecx
+              tf->trapno, cpu->id, tf->eip, rcr2());
+801068d5:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+801068db:	0f b6 00             	movzbl (%eax),%eax
+   
+  //PAGEBREAK: 13
+  default:
+    if(proc == 0 || (tf->cs&3) == 0){
+      // In kernel, it must be our mistake.
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+801068de:	0f b6 d0             	movzbl %al,%edx
+801068e1:	8b 45 08             	mov    0x8(%ebp),%eax
+801068e4:	8b 40 30             	mov    0x30(%eax),%eax
+801068e7:	83 ec 0c             	sub    $0xc,%esp
+801068ea:	53                   	push   %ebx
+801068eb:	51                   	push   %ecx
+801068ec:	52                   	push   %edx
+801068ed:	50                   	push   %eax
+801068ee:	68 88 89 10 80       	push   $0x80108988
+801068f3:	e8 ce 9a ff ff       	call   801003c6 <cprintf>
+801068f8:	83 c4 20             	add    $0x20,%esp
+              tf->trapno, cpu->id, tf->eip, rcr2());
+      panic("trap");
+801068fb:	83 ec 0c             	sub    $0xc,%esp
+801068fe:	68 ba 89 10 80       	push   $0x801089ba
+80106903:	e8 5e 9c ff ff       	call   80100566 <panic>
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80106908:	e8 dd fc ff ff       	call   801065ea <rcr2>
+8010690d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106910:	8b 45 08             	mov    0x8(%ebp),%eax
+80106913:	8b 70 38             	mov    0x38(%eax),%esi
+            "eip 0x%x addr 0x%x--kill proc\n",
+            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
+80106916:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+8010691c:	0f b6 00             	movzbl (%eax),%eax
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpu->id, tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010691f:	0f b6 d8             	movzbl %al,%ebx
+80106922:	8b 45 08             	mov    0x8(%ebp),%eax
+80106925:	8b 48 34             	mov    0x34(%eax),%ecx
+80106928:	8b 45 08             	mov    0x8(%ebp),%eax
+8010692b:	8b 50 30             	mov    0x30(%eax),%edx
+            "eip 0x%x addr 0x%x--kill proc\n",
+            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
+8010692e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80106934:	8d 78 6c             	lea    0x6c(%eax),%edi
+80106937:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpu->id, tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010693d:	8b 40 10             	mov    0x10(%eax),%eax
+80106940:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106943:	56                   	push   %esi
+80106944:	53                   	push   %ebx
+80106945:	51                   	push   %ecx
+80106946:	52                   	push   %edx
+80106947:	57                   	push   %edi
+80106948:	50                   	push   %eax
+80106949:	68 c0 89 10 80       	push   $0x801089c0
+8010694e:	e8 73 9a ff ff       	call   801003c6 <cprintf>
+80106953:	83 c4 20             	add    $0x20,%esp
+            "eip 0x%x addr 0x%x--kill proc\n",
+            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
+            rcr2());
+    proc->killed = 1;
+80106956:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010695c:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80106963:	eb 01                	jmp    80106966 <trap+0x1dd>
+    ideintr();
+    lapiceoi();
+    break;
+  case T_IRQ0 + IRQ_IDE+1:
+    // Bochs generates spurious IDE1 interrupts.
+    break;
+80106965:	90                   	nop
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running 
+  // until it gets to the regular system call return.)
+  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
+80106966:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010696c:	85 c0                	test   %eax,%eax
+8010696e:	74 24                	je     80106994 <trap+0x20b>
+80106970:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80106976:	8b 40 24             	mov    0x24(%eax),%eax
+80106979:	85 c0                	test   %eax,%eax
+8010697b:	74 17                	je     80106994 <trap+0x20b>
+8010697d:	8b 45 08             	mov    0x8(%ebp),%eax
+80106980:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+80106984:	0f b7 c0             	movzwl %ax,%eax
+80106987:	83 e0 03             	and    $0x3,%eax
+8010698a:	83 f8 03             	cmp    $0x3,%eax
+8010698d:	75 05                	jne    80106994 <trap+0x20b>
+    exit();
+8010698f:	e8 a0 de ff ff       	call   80104834 <exit>
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
+80106994:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+8010699a:	85 c0                	test   %eax,%eax
+8010699c:	74 63                	je     80106a01 <trap+0x278>
+8010699e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801069a4:	8b 40 0c             	mov    0xc(%eax),%eax
+801069a7:	83 f8 04             	cmp    $0x4,%eax
+801069aa:	75 55                	jne    80106a01 <trap+0x278>
+801069ac:	8b 45 08             	mov    0x8(%ebp),%eax
+801069af:	8b 40 30             	mov    0x30(%eax),%eax
+801069b2:	83 f8 20             	cmp    $0x20,%eax
+801069b5:	75 4a                	jne    80106a01 <trap+0x278>
+    proc->ticks++;
+801069b7:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801069bd:	0f b7 50 7c          	movzwl 0x7c(%eax),%edx
+801069c1:	83 c2 01             	add    $0x1,%edx
+801069c4:	66 89 50 7c          	mov    %dx,0x7c(%eax)
+    if(proc->ticks % TIMESLICE==0){
+801069c8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801069ce:	0f b7 48 7c          	movzwl 0x7c(%eax),%ecx
+801069d2:	0f b7 c1             	movzwl %cx,%eax
+801069d5:	69 c0 ab aa 00 00    	imul   $0xaaab,%eax,%eax
+801069db:	c1 e8 10             	shr    $0x10,%eax
+801069de:	66 d1 e8             	shr    %ax
+801069e1:	89 c2                	mov    %eax,%edx
+801069e3:	01 d2                	add    %edx,%edx
+801069e5:	01 c2                	add    %eax,%edx
+801069e7:	89 c8                	mov    %ecx,%eax
+801069e9:	29 d0                	sub    %edx,%eax
+801069eb:	66 85 c0             	test   %ax,%ax
+801069ee:	75 11                	jne    80106a01 <trap+0x278>
+      //cprintf("proceso pid=%d ejecuta el yield en el tick %d \n",proc->pid,proc->ticks);
+      proc->ticks=0;
+801069f0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+801069f6:	66 c7 40 7c 00 00    	movw   $0x0,0x7c(%eax)
+      yield();
+801069fc:	e8 f0 e1 ff ff       	call   80104bf1 <yield>
+    }
+  }
+  // Check if the process has been killed since we yielded
+  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
+80106a01:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80106a07:	85 c0                	test   %eax,%eax
+80106a09:	74 27                	je     80106a32 <trap+0x2a9>
+80106a0b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
+80106a11:	8b 40 24             	mov    0x24(%eax),%eax
+80106a14:	85 c0                	test   %eax,%eax
+80106a16:	74 1a                	je     80106a32 <trap+0x2a9>
+80106a18:	8b 45 08             	mov    0x8(%ebp),%eax
+80106a1b:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+80106a1f:	0f b7 c0             	movzwl %ax,%eax
+80106a22:	83 e0 03             	and    $0x3,%eax
+80106a25:	83 f8 03             	cmp    $0x3,%eax
+80106a28:	75 08                	jne    80106a32 <trap+0x2a9>
+    exit();
+80106a2a:	e8 05 de ff ff       	call   80104834 <exit>
+80106a2f:	eb 01                	jmp    80106a32 <trap+0x2a9>
+      exit();
+    proc->tf = tf;
+    syscall();
+    if(proc->killed)
+      exit();
+    return;
+80106a31:	90                   	nop
+    }
+  }
+  // Check if the process has been killed since we yielded
+  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
+    exit();
+}
+80106a32:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106a35:	5b                   	pop    %ebx
+80106a36:	5e                   	pop    %esi
+80106a37:	5f                   	pop    %edi
+80106a38:	5d                   	pop    %ebp
+80106a39:	c3                   	ret    
+
+80106a3a <inb>:
+// Routines to let C code use special x86 instructions.
+
+static inline uchar
+inb(ushort port)
+{
+80106a3a:	55                   	push   %ebp
+80106a3b:	89 e5                	mov    %esp,%ebp
+80106a3d:	83 ec 14             	sub    $0x14,%esp
+80106a40:	8b 45 08             	mov    0x8(%ebp),%eax
+80106a43:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80106a47:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+80106a4b:	89 c2                	mov    %eax,%edx
+80106a4d:	ec                   	in     (%dx),%al
+80106a4e:	88 45 ff             	mov    %al,-0x1(%ebp)
+  return data;
+80106a51:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
+}
+80106a55:	c9                   	leave  
+80106a56:	c3                   	ret    
+
+80106a57 <outb>:
+               "memory", "cc");
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+80106a57:	55                   	push   %ebp
+80106a58:	89 e5                	mov    %esp,%ebp
+80106a5a:	83 ec 08             	sub    $0x8,%esp
+80106a5d:	8b 55 08             	mov    0x8(%ebp),%edx
+80106a60:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106a63:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
+80106a67:	88 45 f8             	mov    %al,-0x8(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80106a6a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
+80106a6e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+80106a72:	ee                   	out    %al,(%dx)
+}
+80106a73:	90                   	nop
+80106a74:	c9                   	leave  
+80106a75:	c3                   	ret    
+
+80106a76 <uartinit>:
+
+static int uart;    // is there a uart?
+
+void
+uartinit(void)
+{
+80106a76:	55                   	push   %ebp
+80106a77:	89 e5                	mov    %esp,%ebp
+80106a79:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+
+  // Turn off the FIFO
+  outb(COM1+2, 0);
+80106a7c:	6a 00                	push   $0x0
+80106a7e:	68 fa 03 00 00       	push   $0x3fa
+80106a83:	e8 cf ff ff ff       	call   80106a57 <outb>
+80106a88:	83 c4 08             	add    $0x8,%esp
+  
+  // 9600 baud, 8 data bits, 1 stop bit, parity off.
+  outb(COM1+3, 0x80);    // Unlock divisor
+80106a8b:	68 80 00 00 00       	push   $0x80
+80106a90:	68 fb 03 00 00       	push   $0x3fb
+80106a95:	e8 bd ff ff ff       	call   80106a57 <outb>
+80106a9a:	83 c4 08             	add    $0x8,%esp
+  outb(COM1+0, 115200/9600);
+80106a9d:	6a 0c                	push   $0xc
+80106a9f:	68 f8 03 00 00       	push   $0x3f8
+80106aa4:	e8 ae ff ff ff       	call   80106a57 <outb>
+80106aa9:	83 c4 08             	add    $0x8,%esp
+  outb(COM1+1, 0);
+80106aac:	6a 00                	push   $0x0
+80106aae:	68 f9 03 00 00       	push   $0x3f9
+80106ab3:	e8 9f ff ff ff       	call   80106a57 <outb>
+80106ab8:	83 c4 08             	add    $0x8,%esp
+  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
+80106abb:	6a 03                	push   $0x3
+80106abd:	68 fb 03 00 00       	push   $0x3fb
+80106ac2:	e8 90 ff ff ff       	call   80106a57 <outb>
+80106ac7:	83 c4 08             	add    $0x8,%esp
+  outb(COM1+4, 0);
+80106aca:	6a 00                	push   $0x0
+80106acc:	68 fc 03 00 00       	push   $0x3fc
+80106ad1:	e8 81 ff ff ff       	call   80106a57 <outb>
+80106ad6:	83 c4 08             	add    $0x8,%esp
+  outb(COM1+1, 0x01);    // Enable receive interrupts.
+80106ad9:	6a 01                	push   $0x1
+80106adb:	68 f9 03 00 00       	push   $0x3f9
+80106ae0:	e8 72 ff ff ff       	call   80106a57 <outb>
+80106ae5:	83 c4 08             	add    $0x8,%esp
+
+  // If status is 0xFF, no serial port.
+  if(inb(COM1+5) == 0xFF)
+80106ae8:	68 fd 03 00 00       	push   $0x3fd
+80106aed:	e8 48 ff ff ff       	call   80106a3a <inb>
+80106af2:	83 c4 04             	add    $0x4,%esp
+80106af5:	3c ff                	cmp    $0xff,%al
+80106af7:	74 6e                	je     80106b67 <uartinit+0xf1>
+    return;
+  uart = 1;
+80106af9:	c7 05 4c b6 10 80 01 	movl   $0x1,0x8010b64c
+80106b00:	00 00 00 
+
+  // Acknowledge pre-existing interrupt conditions;
+  // enable interrupts.
+  inb(COM1+2);
+80106b03:	68 fa 03 00 00       	push   $0x3fa
+80106b08:	e8 2d ff ff ff       	call   80106a3a <inb>
+80106b0d:	83 c4 04             	add    $0x4,%esp
+  inb(COM1+0);
+80106b10:	68 f8 03 00 00       	push   $0x3f8
+80106b15:	e8 20 ff ff ff       	call   80106a3a <inb>
+80106b1a:	83 c4 04             	add    $0x4,%esp
+  picenable(IRQ_COM1);
+80106b1d:	83 ec 0c             	sub    $0xc,%esp
+80106b20:	6a 04                	push   $0x4
+80106b22:	e8 70 d3 ff ff       	call   80103e97 <picenable>
+80106b27:	83 c4 10             	add    $0x10,%esp
+  ioapicenable(IRQ_COM1, 0);
+80106b2a:	83 ec 08             	sub    $0x8,%esp
+80106b2d:	6a 00                	push   $0x0
+80106b2f:	6a 04                	push   $0x4
+80106b31:	e8 03 bf ff ff       	call   80102a39 <ioapicenable>
+80106b36:	83 c4 10             	add    $0x10,%esp
+  
+  // Announce that we're here.
+  for(p="xv6...\n"; *p; p++)
+80106b39:	c7 45 f4 84 8a 10 80 	movl   $0x80108a84,-0xc(%ebp)
+80106b40:	eb 19                	jmp    80106b5b <uartinit+0xe5>
+    uartputc(*p);
+80106b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106b45:	0f b6 00             	movzbl (%eax),%eax
+80106b48:	0f be c0             	movsbl %al,%eax
+80106b4b:	83 ec 0c             	sub    $0xc,%esp
+80106b4e:	50                   	push   %eax
+80106b4f:	e8 16 00 00 00       	call   80106b6a <uartputc>
+80106b54:	83 c4 10             	add    $0x10,%esp
+  inb(COM1+0);
+  picenable(IRQ_COM1);
+  ioapicenable(IRQ_COM1, 0);
+  
+  // Announce that we're here.
+  for(p="xv6...\n"; *p; p++)
+80106b57:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80106b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80106b5e:	0f b6 00             	movzbl (%eax),%eax
+80106b61:	84 c0                	test   %al,%al
+80106b63:	75 dd                	jne    80106b42 <uartinit+0xcc>
+80106b65:	eb 01                	jmp    80106b68 <uartinit+0xf2>
+  outb(COM1+4, 0);
+  outb(COM1+1, 0x01);    // Enable receive interrupts.
+
+  // If status is 0xFF, no serial port.
+  if(inb(COM1+5) == 0xFF)
+    return;
+80106b67:	90                   	nop
+  ioapicenable(IRQ_COM1, 0);
+  
+  // Announce that we're here.
+  for(p="xv6...\n"; *p; p++)
+    uartputc(*p);
+}
+80106b68:	c9                   	leave  
+80106b69:	c3                   	ret    
+
+80106b6a <uartputc>:
+
+void
+uartputc(int c)
+{
+80106b6a:	55                   	push   %ebp
+80106b6b:	89 e5                	mov    %esp,%ebp
+80106b6d:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  if(!uart)
+80106b70:	a1 4c b6 10 80       	mov    0x8010b64c,%eax
+80106b75:	85 c0                	test   %eax,%eax
+80106b77:	74 53                	je     80106bcc <uartputc+0x62>
+    return;
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80106b79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80106b80:	eb 11                	jmp    80106b93 <uartputc+0x29>
+    microdelay(10);
+80106b82:	83 ec 0c             	sub    $0xc,%esp
+80106b85:	6a 0a                	push   $0xa
+80106b87:	e8 13 c4 ff ff       	call   80102f9f <microdelay>
+80106b8c:	83 c4 10             	add    $0x10,%esp
+{
+  int i;
+
+  if(!uart)
+    return;
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80106b8f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80106b93:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
+80106b97:	7f 1a                	jg     80106bb3 <uartputc+0x49>
+80106b99:	83 ec 0c             	sub    $0xc,%esp
+80106b9c:	68 fd 03 00 00       	push   $0x3fd
+80106ba1:	e8 94 fe ff ff       	call   80106a3a <inb>
+80106ba6:	83 c4 10             	add    $0x10,%esp
+80106ba9:	0f b6 c0             	movzbl %al,%eax
+80106bac:	83 e0 20             	and    $0x20,%eax
+80106baf:	85 c0                	test   %eax,%eax
+80106bb1:	74 cf                	je     80106b82 <uartputc+0x18>
+    microdelay(10);
+  outb(COM1+0, c);
+80106bb3:	8b 45 08             	mov    0x8(%ebp),%eax
+80106bb6:	0f b6 c0             	movzbl %al,%eax
+80106bb9:	83 ec 08             	sub    $0x8,%esp
+80106bbc:	50                   	push   %eax
+80106bbd:	68 f8 03 00 00       	push   $0x3f8
+80106bc2:	e8 90 fe ff ff       	call   80106a57 <outb>
+80106bc7:	83 c4 10             	add    $0x10,%esp
+80106bca:	eb 01                	jmp    80106bcd <uartputc+0x63>
+uartputc(int c)
+{
+  int i;
+
+  if(!uart)
+    return;
+80106bcc:	90                   	nop
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+    microdelay(10);
+  outb(COM1+0, c);
+}
+80106bcd:	c9                   	leave  
+80106bce:	c3                   	ret    
+
+80106bcf <uartgetc>:
+
+static int
+uartgetc(void)
+{
+80106bcf:	55                   	push   %ebp
+80106bd0:	89 e5                	mov    %esp,%ebp
+  if(!uart)
+80106bd2:	a1 4c b6 10 80       	mov    0x8010b64c,%eax
+80106bd7:	85 c0                	test   %eax,%eax
+80106bd9:	75 07                	jne    80106be2 <uartgetc+0x13>
+    return -1;
+80106bdb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106be0:	eb 2e                	jmp    80106c10 <uartgetc+0x41>
+  if(!(inb(COM1+5) & 0x01))
+80106be2:	68 fd 03 00 00       	push   $0x3fd
+80106be7:	e8 4e fe ff ff       	call   80106a3a <inb>
+80106bec:	83 c4 04             	add    $0x4,%esp
+80106bef:	0f b6 c0             	movzbl %al,%eax
+80106bf2:	83 e0 01             	and    $0x1,%eax
+80106bf5:	85 c0                	test   %eax,%eax
+80106bf7:	75 07                	jne    80106c00 <uartgetc+0x31>
+    return -1;
+80106bf9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106bfe:	eb 10                	jmp    80106c10 <uartgetc+0x41>
+  return inb(COM1+0);
+80106c00:	68 f8 03 00 00       	push   $0x3f8
+80106c05:	e8 30 fe ff ff       	call   80106a3a <inb>
+80106c0a:	83 c4 04             	add    $0x4,%esp
+80106c0d:	0f b6 c0             	movzbl %al,%eax
+}
+80106c10:	c9                   	leave  
+80106c11:	c3                   	ret    
+
+80106c12 <uartintr>:
+
+void
+uartintr(void)
+{
+80106c12:	55                   	push   %ebp
+80106c13:	89 e5                	mov    %esp,%ebp
+80106c15:	83 ec 08             	sub    $0x8,%esp
+  consoleintr(uartgetc);
+80106c18:	83 ec 0c             	sub    $0xc,%esp
+80106c1b:	68 cf 6b 10 80       	push   $0x80106bcf
+80106c20:	e8 b8 9b ff ff       	call   801007dd <consoleintr>
+80106c25:	83 c4 10             	add    $0x10,%esp
+}
+80106c28:	90                   	nop
+80106c29:	c9                   	leave  
+80106c2a:	c3                   	ret    
+
+80106c2b <vector0>:
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+80106c2b:	6a 00                	push   $0x0
+  pushl $0
+80106c2d:	6a 00                	push   $0x0
+  jmp alltraps
+80106c2f:	e9 61 f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c34 <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+80106c34:	6a 00                	push   $0x0
+  pushl $1
+80106c36:	6a 01                	push   $0x1
+  jmp alltraps
+80106c38:	e9 58 f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c3d <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+80106c3d:	6a 00                	push   $0x0
+  pushl $2
+80106c3f:	6a 02                	push   $0x2
+  jmp alltraps
+80106c41:	e9 4f f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c46 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+80106c46:	6a 00                	push   $0x0
+  pushl $3
+80106c48:	6a 03                	push   $0x3
+  jmp alltraps
+80106c4a:	e9 46 f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c4f <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+80106c4f:	6a 00                	push   $0x0
+  pushl $4
+80106c51:	6a 04                	push   $0x4
+  jmp alltraps
+80106c53:	e9 3d f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c58 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+80106c58:	6a 00                	push   $0x0
+  pushl $5
+80106c5a:	6a 05                	push   $0x5
+  jmp alltraps
+80106c5c:	e9 34 f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c61 <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+80106c61:	6a 00                	push   $0x0
+  pushl $6
+80106c63:	6a 06                	push   $0x6
+  jmp alltraps
+80106c65:	e9 2b f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c6a <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+80106c6a:	6a 00                	push   $0x0
+  pushl $7
+80106c6c:	6a 07                	push   $0x7
+  jmp alltraps
+80106c6e:	e9 22 f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c73 <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+80106c73:	6a 08                	push   $0x8
+  jmp alltraps
+80106c75:	e9 1b f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c7a <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+80106c7a:	6a 00                	push   $0x0
+  pushl $9
+80106c7c:	6a 09                	push   $0x9
+  jmp alltraps
+80106c7e:	e9 12 f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c83 <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+80106c83:	6a 0a                	push   $0xa
+  jmp alltraps
+80106c85:	e9 0b f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c8a <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+80106c8a:	6a 0b                	push   $0xb
+  jmp alltraps
+80106c8c:	e9 04 f9 ff ff       	jmp    80106595 <alltraps>
+
+80106c91 <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+80106c91:	6a 0c                	push   $0xc
+  jmp alltraps
+80106c93:	e9 fd f8 ff ff       	jmp    80106595 <alltraps>
+
+80106c98 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+80106c98:	6a 0d                	push   $0xd
+  jmp alltraps
+80106c9a:	e9 f6 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106c9f <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+80106c9f:	6a 0e                	push   $0xe
+  jmp alltraps
+80106ca1:	e9 ef f8 ff ff       	jmp    80106595 <alltraps>
+
+80106ca6 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+80106ca6:	6a 00                	push   $0x0
+  pushl $15
+80106ca8:	6a 0f                	push   $0xf
+  jmp alltraps
+80106caa:	e9 e6 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106caf <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+80106caf:	6a 00                	push   $0x0
+  pushl $16
+80106cb1:	6a 10                	push   $0x10
+  jmp alltraps
+80106cb3:	e9 dd f8 ff ff       	jmp    80106595 <alltraps>
+
+80106cb8 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+80106cb8:	6a 11                	push   $0x11
+  jmp alltraps
+80106cba:	e9 d6 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106cbf <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+80106cbf:	6a 00                	push   $0x0
+  pushl $18
+80106cc1:	6a 12                	push   $0x12
+  jmp alltraps
+80106cc3:	e9 cd f8 ff ff       	jmp    80106595 <alltraps>
+
+80106cc8 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+80106cc8:	6a 00                	push   $0x0
+  pushl $19
+80106cca:	6a 13                	push   $0x13
+  jmp alltraps
+80106ccc:	e9 c4 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106cd1 <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+80106cd1:	6a 00                	push   $0x0
+  pushl $20
+80106cd3:	6a 14                	push   $0x14
+  jmp alltraps
+80106cd5:	e9 bb f8 ff ff       	jmp    80106595 <alltraps>
+
+80106cda <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+80106cda:	6a 00                	push   $0x0
+  pushl $21
+80106cdc:	6a 15                	push   $0x15
+  jmp alltraps
+80106cde:	e9 b2 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106ce3 <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+80106ce3:	6a 00                	push   $0x0
+  pushl $22
+80106ce5:	6a 16                	push   $0x16
+  jmp alltraps
+80106ce7:	e9 a9 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106cec <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+80106cec:	6a 00                	push   $0x0
+  pushl $23
+80106cee:	6a 17                	push   $0x17
+  jmp alltraps
+80106cf0:	e9 a0 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106cf5 <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+80106cf5:	6a 00                	push   $0x0
+  pushl $24
+80106cf7:	6a 18                	push   $0x18
+  jmp alltraps
+80106cf9:	e9 97 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106cfe <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+80106cfe:	6a 00                	push   $0x0
+  pushl $25
+80106d00:	6a 19                	push   $0x19
+  jmp alltraps
+80106d02:	e9 8e f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d07 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+80106d07:	6a 00                	push   $0x0
+  pushl $26
+80106d09:	6a 1a                	push   $0x1a
+  jmp alltraps
+80106d0b:	e9 85 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d10 <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+80106d10:	6a 00                	push   $0x0
+  pushl $27
+80106d12:	6a 1b                	push   $0x1b
+  jmp alltraps
+80106d14:	e9 7c f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d19 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+80106d19:	6a 00                	push   $0x0
+  pushl $28
+80106d1b:	6a 1c                	push   $0x1c
+  jmp alltraps
+80106d1d:	e9 73 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d22 <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+80106d22:	6a 00                	push   $0x0
+  pushl $29
+80106d24:	6a 1d                	push   $0x1d
+  jmp alltraps
+80106d26:	e9 6a f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d2b <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+80106d2b:	6a 00                	push   $0x0
+  pushl $30
+80106d2d:	6a 1e                	push   $0x1e
+  jmp alltraps
+80106d2f:	e9 61 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d34 <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+80106d34:	6a 00                	push   $0x0
+  pushl $31
+80106d36:	6a 1f                	push   $0x1f
+  jmp alltraps
+80106d38:	e9 58 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d3d <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+80106d3d:	6a 00                	push   $0x0
+  pushl $32
+80106d3f:	6a 20                	push   $0x20
+  jmp alltraps
+80106d41:	e9 4f f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d46 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+80106d46:	6a 00                	push   $0x0
+  pushl $33
+80106d48:	6a 21                	push   $0x21
+  jmp alltraps
+80106d4a:	e9 46 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d4f <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+80106d4f:	6a 00                	push   $0x0
+  pushl $34
+80106d51:	6a 22                	push   $0x22
+  jmp alltraps
+80106d53:	e9 3d f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d58 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+80106d58:	6a 00                	push   $0x0
+  pushl $35
+80106d5a:	6a 23                	push   $0x23
+  jmp alltraps
+80106d5c:	e9 34 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d61 <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+80106d61:	6a 00                	push   $0x0
+  pushl $36
+80106d63:	6a 24                	push   $0x24
+  jmp alltraps
+80106d65:	e9 2b f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d6a <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+80106d6a:	6a 00                	push   $0x0
+  pushl $37
+80106d6c:	6a 25                	push   $0x25
+  jmp alltraps
+80106d6e:	e9 22 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d73 <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+80106d73:	6a 00                	push   $0x0
+  pushl $38
+80106d75:	6a 26                	push   $0x26
+  jmp alltraps
+80106d77:	e9 19 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d7c <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+80106d7c:	6a 00                	push   $0x0
+  pushl $39
+80106d7e:	6a 27                	push   $0x27
+  jmp alltraps
+80106d80:	e9 10 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d85 <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+80106d85:	6a 00                	push   $0x0
+  pushl $40
+80106d87:	6a 28                	push   $0x28
+  jmp alltraps
+80106d89:	e9 07 f8 ff ff       	jmp    80106595 <alltraps>
+
+80106d8e <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+80106d8e:	6a 00                	push   $0x0
+  pushl $41
+80106d90:	6a 29                	push   $0x29
+  jmp alltraps
+80106d92:	e9 fe f7 ff ff       	jmp    80106595 <alltraps>
+
+80106d97 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+80106d97:	6a 00                	push   $0x0
+  pushl $42
+80106d99:	6a 2a                	push   $0x2a
+  jmp alltraps
+80106d9b:	e9 f5 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106da0 <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+80106da0:	6a 00                	push   $0x0
+  pushl $43
+80106da2:	6a 2b                	push   $0x2b
+  jmp alltraps
+80106da4:	e9 ec f7 ff ff       	jmp    80106595 <alltraps>
+
+80106da9 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+80106da9:	6a 00                	push   $0x0
+  pushl $44
+80106dab:	6a 2c                	push   $0x2c
+  jmp alltraps
+80106dad:	e9 e3 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106db2 <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+80106db2:	6a 00                	push   $0x0
+  pushl $45
+80106db4:	6a 2d                	push   $0x2d
+  jmp alltraps
+80106db6:	e9 da f7 ff ff       	jmp    80106595 <alltraps>
+
+80106dbb <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+80106dbb:	6a 00                	push   $0x0
+  pushl $46
+80106dbd:	6a 2e                	push   $0x2e
+  jmp alltraps
+80106dbf:	e9 d1 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106dc4 <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+80106dc4:	6a 00                	push   $0x0
+  pushl $47
+80106dc6:	6a 2f                	push   $0x2f
+  jmp alltraps
+80106dc8:	e9 c8 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106dcd <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+80106dcd:	6a 00                	push   $0x0
+  pushl $48
+80106dcf:	6a 30                	push   $0x30
+  jmp alltraps
+80106dd1:	e9 bf f7 ff ff       	jmp    80106595 <alltraps>
+
+80106dd6 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+80106dd6:	6a 00                	push   $0x0
+  pushl $49
+80106dd8:	6a 31                	push   $0x31
+  jmp alltraps
+80106dda:	e9 b6 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106ddf <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+80106ddf:	6a 00                	push   $0x0
+  pushl $50
+80106de1:	6a 32                	push   $0x32
+  jmp alltraps
+80106de3:	e9 ad f7 ff ff       	jmp    80106595 <alltraps>
+
+80106de8 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+80106de8:	6a 00                	push   $0x0
+  pushl $51
+80106dea:	6a 33                	push   $0x33
+  jmp alltraps
+80106dec:	e9 a4 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106df1 <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+80106df1:	6a 00                	push   $0x0
+  pushl $52
+80106df3:	6a 34                	push   $0x34
+  jmp alltraps
+80106df5:	e9 9b f7 ff ff       	jmp    80106595 <alltraps>
+
+80106dfa <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+80106dfa:	6a 00                	push   $0x0
+  pushl $53
+80106dfc:	6a 35                	push   $0x35
+  jmp alltraps
+80106dfe:	e9 92 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e03 <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+80106e03:	6a 00                	push   $0x0
+  pushl $54
+80106e05:	6a 36                	push   $0x36
+  jmp alltraps
+80106e07:	e9 89 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e0c <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+80106e0c:	6a 00                	push   $0x0
+  pushl $55
+80106e0e:	6a 37                	push   $0x37
+  jmp alltraps
+80106e10:	e9 80 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e15 <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+80106e15:	6a 00                	push   $0x0
+  pushl $56
+80106e17:	6a 38                	push   $0x38
+  jmp alltraps
+80106e19:	e9 77 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e1e <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+80106e1e:	6a 00                	push   $0x0
+  pushl $57
+80106e20:	6a 39                	push   $0x39
+  jmp alltraps
+80106e22:	e9 6e f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e27 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+80106e27:	6a 00                	push   $0x0
+  pushl $58
+80106e29:	6a 3a                	push   $0x3a
+  jmp alltraps
+80106e2b:	e9 65 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e30 <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+80106e30:	6a 00                	push   $0x0
+  pushl $59
+80106e32:	6a 3b                	push   $0x3b
+  jmp alltraps
+80106e34:	e9 5c f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e39 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+80106e39:	6a 00                	push   $0x0
+  pushl $60
+80106e3b:	6a 3c                	push   $0x3c
+  jmp alltraps
+80106e3d:	e9 53 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e42 <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+80106e42:	6a 00                	push   $0x0
+  pushl $61
+80106e44:	6a 3d                	push   $0x3d
+  jmp alltraps
+80106e46:	e9 4a f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e4b <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+80106e4b:	6a 00                	push   $0x0
+  pushl $62
+80106e4d:	6a 3e                	push   $0x3e
+  jmp alltraps
+80106e4f:	e9 41 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e54 <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+80106e54:	6a 00                	push   $0x0
+  pushl $63
+80106e56:	6a 3f                	push   $0x3f
+  jmp alltraps
+80106e58:	e9 38 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e5d <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+80106e5d:	6a 00                	push   $0x0
+  pushl $64
+80106e5f:	6a 40                	push   $0x40
+  jmp alltraps
+80106e61:	e9 2f f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e66 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+80106e66:	6a 00                	push   $0x0
+  pushl $65
+80106e68:	6a 41                	push   $0x41
+  jmp alltraps
+80106e6a:	e9 26 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e6f <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+80106e6f:	6a 00                	push   $0x0
+  pushl $66
+80106e71:	6a 42                	push   $0x42
+  jmp alltraps
+80106e73:	e9 1d f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e78 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+80106e78:	6a 00                	push   $0x0
+  pushl $67
+80106e7a:	6a 43                	push   $0x43
+  jmp alltraps
+80106e7c:	e9 14 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e81 <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+80106e81:	6a 00                	push   $0x0
+  pushl $68
+80106e83:	6a 44                	push   $0x44
+  jmp alltraps
+80106e85:	e9 0b f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e8a <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+80106e8a:	6a 00                	push   $0x0
+  pushl $69
+80106e8c:	6a 45                	push   $0x45
+  jmp alltraps
+80106e8e:	e9 02 f7 ff ff       	jmp    80106595 <alltraps>
+
+80106e93 <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+80106e93:	6a 00                	push   $0x0
+  pushl $70
+80106e95:	6a 46                	push   $0x46
+  jmp alltraps
+80106e97:	e9 f9 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106e9c <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+80106e9c:	6a 00                	push   $0x0
+  pushl $71
+80106e9e:	6a 47                	push   $0x47
+  jmp alltraps
+80106ea0:	e9 f0 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106ea5 <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+80106ea5:	6a 00                	push   $0x0
+  pushl $72
+80106ea7:	6a 48                	push   $0x48
+  jmp alltraps
+80106ea9:	e9 e7 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106eae <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+80106eae:	6a 00                	push   $0x0
+  pushl $73
+80106eb0:	6a 49                	push   $0x49
+  jmp alltraps
+80106eb2:	e9 de f6 ff ff       	jmp    80106595 <alltraps>
+
+80106eb7 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+80106eb7:	6a 00                	push   $0x0
+  pushl $74
+80106eb9:	6a 4a                	push   $0x4a
+  jmp alltraps
+80106ebb:	e9 d5 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106ec0 <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+80106ec0:	6a 00                	push   $0x0
+  pushl $75
+80106ec2:	6a 4b                	push   $0x4b
+  jmp alltraps
+80106ec4:	e9 cc f6 ff ff       	jmp    80106595 <alltraps>
+
+80106ec9 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+80106ec9:	6a 00                	push   $0x0
+  pushl $76
+80106ecb:	6a 4c                	push   $0x4c
+  jmp alltraps
+80106ecd:	e9 c3 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106ed2 <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+80106ed2:	6a 00                	push   $0x0
+  pushl $77
+80106ed4:	6a 4d                	push   $0x4d
+  jmp alltraps
+80106ed6:	e9 ba f6 ff ff       	jmp    80106595 <alltraps>
+
+80106edb <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+80106edb:	6a 00                	push   $0x0
+  pushl $78
+80106edd:	6a 4e                	push   $0x4e
+  jmp alltraps
+80106edf:	e9 b1 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106ee4 <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+80106ee4:	6a 00                	push   $0x0
+  pushl $79
+80106ee6:	6a 4f                	push   $0x4f
+  jmp alltraps
+80106ee8:	e9 a8 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106eed <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+80106eed:	6a 00                	push   $0x0
+  pushl $80
+80106eef:	6a 50                	push   $0x50
+  jmp alltraps
+80106ef1:	e9 9f f6 ff ff       	jmp    80106595 <alltraps>
+
+80106ef6 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+80106ef6:	6a 00                	push   $0x0
+  pushl $81
+80106ef8:	6a 51                	push   $0x51
+  jmp alltraps
+80106efa:	e9 96 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106eff <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+80106eff:	6a 00                	push   $0x0
+  pushl $82
+80106f01:	6a 52                	push   $0x52
+  jmp alltraps
+80106f03:	e9 8d f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f08 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+80106f08:	6a 00                	push   $0x0
+  pushl $83
+80106f0a:	6a 53                	push   $0x53
+  jmp alltraps
+80106f0c:	e9 84 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f11 <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+80106f11:	6a 00                	push   $0x0
+  pushl $84
+80106f13:	6a 54                	push   $0x54
+  jmp alltraps
+80106f15:	e9 7b f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f1a <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+80106f1a:	6a 00                	push   $0x0
+  pushl $85
+80106f1c:	6a 55                	push   $0x55
+  jmp alltraps
+80106f1e:	e9 72 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f23 <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+80106f23:	6a 00                	push   $0x0
+  pushl $86
+80106f25:	6a 56                	push   $0x56
+  jmp alltraps
+80106f27:	e9 69 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f2c <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+80106f2c:	6a 00                	push   $0x0
+  pushl $87
+80106f2e:	6a 57                	push   $0x57
+  jmp alltraps
+80106f30:	e9 60 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f35 <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+80106f35:	6a 00                	push   $0x0
+  pushl $88
+80106f37:	6a 58                	push   $0x58
+  jmp alltraps
+80106f39:	e9 57 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f3e <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+80106f3e:	6a 00                	push   $0x0
+  pushl $89
+80106f40:	6a 59                	push   $0x59
+  jmp alltraps
+80106f42:	e9 4e f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f47 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+80106f47:	6a 00                	push   $0x0
+  pushl $90
+80106f49:	6a 5a                	push   $0x5a
+  jmp alltraps
+80106f4b:	e9 45 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f50 <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+80106f50:	6a 00                	push   $0x0
+  pushl $91
+80106f52:	6a 5b                	push   $0x5b
+  jmp alltraps
+80106f54:	e9 3c f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f59 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+80106f59:	6a 00                	push   $0x0
+  pushl $92
+80106f5b:	6a 5c                	push   $0x5c
+  jmp alltraps
+80106f5d:	e9 33 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f62 <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+80106f62:	6a 00                	push   $0x0
+  pushl $93
+80106f64:	6a 5d                	push   $0x5d
+  jmp alltraps
+80106f66:	e9 2a f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f6b <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+80106f6b:	6a 00                	push   $0x0
+  pushl $94
+80106f6d:	6a 5e                	push   $0x5e
+  jmp alltraps
+80106f6f:	e9 21 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f74 <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+80106f74:	6a 00                	push   $0x0
+  pushl $95
+80106f76:	6a 5f                	push   $0x5f
+  jmp alltraps
+80106f78:	e9 18 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f7d <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+80106f7d:	6a 00                	push   $0x0
+  pushl $96
+80106f7f:	6a 60                	push   $0x60
+  jmp alltraps
+80106f81:	e9 0f f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f86 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+80106f86:	6a 00                	push   $0x0
+  pushl $97
+80106f88:	6a 61                	push   $0x61
+  jmp alltraps
+80106f8a:	e9 06 f6 ff ff       	jmp    80106595 <alltraps>
+
+80106f8f <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+80106f8f:	6a 00                	push   $0x0
+  pushl $98
+80106f91:	6a 62                	push   $0x62
+  jmp alltraps
+80106f93:	e9 fd f5 ff ff       	jmp    80106595 <alltraps>
+
+80106f98 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+80106f98:	6a 00                	push   $0x0
+  pushl $99
+80106f9a:	6a 63                	push   $0x63
+  jmp alltraps
+80106f9c:	e9 f4 f5 ff ff       	jmp    80106595 <alltraps>
+
+80106fa1 <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+80106fa1:	6a 00                	push   $0x0
+  pushl $100
+80106fa3:	6a 64                	push   $0x64
+  jmp alltraps
+80106fa5:	e9 eb f5 ff ff       	jmp    80106595 <alltraps>
+
+80106faa <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+80106faa:	6a 00                	push   $0x0
+  pushl $101
+80106fac:	6a 65                	push   $0x65
+  jmp alltraps
+80106fae:	e9 e2 f5 ff ff       	jmp    80106595 <alltraps>
+
+80106fb3 <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+80106fb3:	6a 00                	push   $0x0
+  pushl $102
+80106fb5:	6a 66                	push   $0x66
+  jmp alltraps
+80106fb7:	e9 d9 f5 ff ff       	jmp    80106595 <alltraps>
+
+80106fbc <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+80106fbc:	6a 00                	push   $0x0
+  pushl $103
+80106fbe:	6a 67                	push   $0x67
+  jmp alltraps
+80106fc0:	e9 d0 f5 ff ff       	jmp    80106595 <alltraps>
+
+80106fc5 <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+80106fc5:	6a 00                	push   $0x0
+  pushl $104
+80106fc7:	6a 68                	push   $0x68
+  jmp alltraps
+80106fc9:	e9 c7 f5 ff ff       	jmp    80106595 <alltraps>
+
+80106fce <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+80106fce:	6a 00                	push   $0x0
+  pushl $105
+80106fd0:	6a 69                	push   $0x69
+  jmp alltraps
+80106fd2:	e9 be f5 ff ff       	jmp    80106595 <alltraps>
+
+80106fd7 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+80106fd7:	6a 00                	push   $0x0
+  pushl $106
+80106fd9:	6a 6a                	push   $0x6a
+  jmp alltraps
+80106fdb:	e9 b5 f5 ff ff       	jmp    80106595 <alltraps>
+
+80106fe0 <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+80106fe0:	6a 00                	push   $0x0
+  pushl $107
+80106fe2:	6a 6b                	push   $0x6b
+  jmp alltraps
+80106fe4:	e9 ac f5 ff ff       	jmp    80106595 <alltraps>
+
+80106fe9 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+80106fe9:	6a 00                	push   $0x0
+  pushl $108
+80106feb:	6a 6c                	push   $0x6c
+  jmp alltraps
+80106fed:	e9 a3 f5 ff ff       	jmp    80106595 <alltraps>
+
+80106ff2 <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+80106ff2:	6a 00                	push   $0x0
+  pushl $109
+80106ff4:	6a 6d                	push   $0x6d
+  jmp alltraps
+80106ff6:	e9 9a f5 ff ff       	jmp    80106595 <alltraps>
+
+80106ffb <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+80106ffb:	6a 00                	push   $0x0
+  pushl $110
+80106ffd:	6a 6e                	push   $0x6e
+  jmp alltraps
+80106fff:	e9 91 f5 ff ff       	jmp    80106595 <alltraps>
+
+80107004 <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+80107004:	6a 00                	push   $0x0
+  pushl $111
+80107006:	6a 6f                	push   $0x6f
+  jmp alltraps
+80107008:	e9 88 f5 ff ff       	jmp    80106595 <alltraps>
+
+8010700d <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+8010700d:	6a 00                	push   $0x0
+  pushl $112
+8010700f:	6a 70                	push   $0x70
+  jmp alltraps
+80107011:	e9 7f f5 ff ff       	jmp    80106595 <alltraps>
+
+80107016 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+80107016:	6a 00                	push   $0x0
+  pushl $113
+80107018:	6a 71                	push   $0x71
+  jmp alltraps
+8010701a:	e9 76 f5 ff ff       	jmp    80106595 <alltraps>
+
+8010701f <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+8010701f:	6a 00                	push   $0x0
+  pushl $114
+80107021:	6a 72                	push   $0x72
+  jmp alltraps
+80107023:	e9 6d f5 ff ff       	jmp    80106595 <alltraps>
+
+80107028 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+80107028:	6a 00                	push   $0x0
+  pushl $115
+8010702a:	6a 73                	push   $0x73
+  jmp alltraps
+8010702c:	e9 64 f5 ff ff       	jmp    80106595 <alltraps>
+
+80107031 <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+80107031:	6a 00                	push   $0x0
+  pushl $116
+80107033:	6a 74                	push   $0x74
+  jmp alltraps
+80107035:	e9 5b f5 ff ff       	jmp    80106595 <alltraps>
+
+8010703a <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+8010703a:	6a 00                	push   $0x0
+  pushl $117
+8010703c:	6a 75                	push   $0x75
+  jmp alltraps
+8010703e:	e9 52 f5 ff ff       	jmp    80106595 <alltraps>
+
+80107043 <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+80107043:	6a 00                	push   $0x0
+  pushl $118
+80107045:	6a 76                	push   $0x76
+  jmp alltraps
+80107047:	e9 49 f5 ff ff       	jmp    80106595 <alltraps>
+
+8010704c <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+8010704c:	6a 00                	push   $0x0
+  pushl $119
+8010704e:	6a 77                	push   $0x77
+  jmp alltraps
+80107050:	e9 40 f5 ff ff       	jmp    80106595 <alltraps>
+
+80107055 <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+80107055:	6a 00                	push   $0x0
+  pushl $120
+80107057:	6a 78                	push   $0x78
+  jmp alltraps
+80107059:	e9 37 f5 ff ff       	jmp    80106595 <alltraps>
+
+8010705e <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+8010705e:	6a 00                	push   $0x0
+  pushl $121
+80107060:	6a 79                	push   $0x79
+  jmp alltraps
+80107062:	e9 2e f5 ff ff       	jmp    80106595 <alltraps>
+
+80107067 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+80107067:	6a 00                	push   $0x0
+  pushl $122
+80107069:	6a 7a                	push   $0x7a
+  jmp alltraps
+8010706b:	e9 25 f5 ff ff       	jmp    80106595 <alltraps>
+
+80107070 <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+80107070:	6a 00                	push   $0x0
+  pushl $123
+80107072:	6a 7b                	push   $0x7b
+  jmp alltraps
+80107074:	e9 1c f5 ff ff       	jmp    80106595 <alltraps>
+
+80107079 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+80107079:	6a 00                	push   $0x0
+  pushl $124
+8010707b:	6a 7c                	push   $0x7c
+  jmp alltraps
+8010707d:	e9 13 f5 ff ff       	jmp    80106595 <alltraps>
+
+80107082 <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+80107082:	6a 00                	push   $0x0
+  pushl $125
+80107084:	6a 7d                	push   $0x7d
+  jmp alltraps
+80107086:	e9 0a f5 ff ff       	jmp    80106595 <alltraps>
+
+8010708b <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+8010708b:	6a 00                	push   $0x0
+  pushl $126
+8010708d:	6a 7e                	push   $0x7e
+  jmp alltraps
+8010708f:	e9 01 f5 ff ff       	jmp    80106595 <alltraps>
+
+80107094 <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+80107094:	6a 00                	push   $0x0
+  pushl $127
+80107096:	6a 7f                	push   $0x7f
+  jmp alltraps
+80107098:	e9 f8 f4 ff ff       	jmp    80106595 <alltraps>
+
+8010709d <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+8010709d:	6a 00                	push   $0x0
+  pushl $128
+8010709f:	68 80 00 00 00       	push   $0x80
+  jmp alltraps
+801070a4:	e9 ec f4 ff ff       	jmp    80106595 <alltraps>
+
+801070a9 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+801070a9:	6a 00                	push   $0x0
+  pushl $129
+801070ab:	68 81 00 00 00       	push   $0x81
+  jmp alltraps
+801070b0:	e9 e0 f4 ff ff       	jmp    80106595 <alltraps>
+
+801070b5 <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+801070b5:	6a 00                	push   $0x0
+  pushl $130
+801070b7:	68 82 00 00 00       	push   $0x82
+  jmp alltraps
+801070bc:	e9 d4 f4 ff ff       	jmp    80106595 <alltraps>
+
+801070c1 <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+801070c1:	6a 00                	push   $0x0
+  pushl $131
+801070c3:	68 83 00 00 00       	push   $0x83
+  jmp alltraps
+801070c8:	e9 c8 f4 ff ff       	jmp    80106595 <alltraps>
+
+801070cd <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+801070cd:	6a 00                	push   $0x0
+  pushl $132
+801070cf:	68 84 00 00 00       	push   $0x84
+  jmp alltraps
+801070d4:	e9 bc f4 ff ff       	jmp    80106595 <alltraps>
+
+801070d9 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+801070d9:	6a 00                	push   $0x0
+  pushl $133
+801070db:	68 85 00 00 00       	push   $0x85
+  jmp alltraps
+801070e0:	e9 b0 f4 ff ff       	jmp    80106595 <alltraps>
+
+801070e5 <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+801070e5:	6a 00                	push   $0x0
+  pushl $134
+801070e7:	68 86 00 00 00       	push   $0x86
+  jmp alltraps
+801070ec:	e9 a4 f4 ff ff       	jmp    80106595 <alltraps>
+
+801070f1 <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+801070f1:	6a 00                	push   $0x0
+  pushl $135
+801070f3:	68 87 00 00 00       	push   $0x87
+  jmp alltraps
+801070f8:	e9 98 f4 ff ff       	jmp    80106595 <alltraps>
+
+801070fd <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+801070fd:	6a 00                	push   $0x0
+  pushl $136
+801070ff:	68 88 00 00 00       	push   $0x88
+  jmp alltraps
+80107104:	e9 8c f4 ff ff       	jmp    80106595 <alltraps>
+
+80107109 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+80107109:	6a 00                	push   $0x0
+  pushl $137
+8010710b:	68 89 00 00 00       	push   $0x89
+  jmp alltraps
+80107110:	e9 80 f4 ff ff       	jmp    80106595 <alltraps>
+
+80107115 <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+80107115:	6a 00                	push   $0x0
+  pushl $138
+80107117:	68 8a 00 00 00       	push   $0x8a
+  jmp alltraps
+8010711c:	e9 74 f4 ff ff       	jmp    80106595 <alltraps>
+
+80107121 <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+80107121:	6a 00                	push   $0x0
+  pushl $139
+80107123:	68 8b 00 00 00       	push   $0x8b
+  jmp alltraps
+80107128:	e9 68 f4 ff ff       	jmp    80106595 <alltraps>
+
+8010712d <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+8010712d:	6a 00                	push   $0x0
+  pushl $140
+8010712f:	68 8c 00 00 00       	push   $0x8c
+  jmp alltraps
+80107134:	e9 5c f4 ff ff       	jmp    80106595 <alltraps>
+
+80107139 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+80107139:	6a 00                	push   $0x0
+  pushl $141
+8010713b:	68 8d 00 00 00       	push   $0x8d
+  jmp alltraps
+80107140:	e9 50 f4 ff ff       	jmp    80106595 <alltraps>
+
+80107145 <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+80107145:	6a 00                	push   $0x0
+  pushl $142
+80107147:	68 8e 00 00 00       	push   $0x8e
+  jmp alltraps
+8010714c:	e9 44 f4 ff ff       	jmp    80106595 <alltraps>
+
+80107151 <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+80107151:	6a 00                	push   $0x0
+  pushl $143
+80107153:	68 8f 00 00 00       	push   $0x8f
+  jmp alltraps
+80107158:	e9 38 f4 ff ff       	jmp    80106595 <alltraps>
+
+8010715d <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+8010715d:	6a 00                	push   $0x0
+  pushl $144
+8010715f:	68 90 00 00 00       	push   $0x90
+  jmp alltraps
+80107164:	e9 2c f4 ff ff       	jmp    80106595 <alltraps>
+
+80107169 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+80107169:	6a 00                	push   $0x0
+  pushl $145
+8010716b:	68 91 00 00 00       	push   $0x91
+  jmp alltraps
+80107170:	e9 20 f4 ff ff       	jmp    80106595 <alltraps>
+
+80107175 <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+80107175:	6a 00                	push   $0x0
+  pushl $146
+80107177:	68 92 00 00 00       	push   $0x92
+  jmp alltraps
+8010717c:	e9 14 f4 ff ff       	jmp    80106595 <alltraps>
+
+80107181 <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+80107181:	6a 00                	push   $0x0
+  pushl $147
+80107183:	68 93 00 00 00       	push   $0x93
+  jmp alltraps
+80107188:	e9 08 f4 ff ff       	jmp    80106595 <alltraps>
+
+8010718d <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+8010718d:	6a 00                	push   $0x0
+  pushl $148
+8010718f:	68 94 00 00 00       	push   $0x94
+  jmp alltraps
+80107194:	e9 fc f3 ff ff       	jmp    80106595 <alltraps>
+
+80107199 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+80107199:	6a 00                	push   $0x0
+  pushl $149
+8010719b:	68 95 00 00 00       	push   $0x95
+  jmp alltraps
+801071a0:	e9 f0 f3 ff ff       	jmp    80106595 <alltraps>
+
+801071a5 <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+801071a5:	6a 00                	push   $0x0
+  pushl $150
+801071a7:	68 96 00 00 00       	push   $0x96
+  jmp alltraps
+801071ac:	e9 e4 f3 ff ff       	jmp    80106595 <alltraps>
+
+801071b1 <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+801071b1:	6a 00                	push   $0x0
+  pushl $151
+801071b3:	68 97 00 00 00       	push   $0x97
+  jmp alltraps
+801071b8:	e9 d8 f3 ff ff       	jmp    80106595 <alltraps>
+
+801071bd <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+801071bd:	6a 00                	push   $0x0
+  pushl $152
+801071bf:	68 98 00 00 00       	push   $0x98
+  jmp alltraps
+801071c4:	e9 cc f3 ff ff       	jmp    80106595 <alltraps>
+
+801071c9 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+801071c9:	6a 00                	push   $0x0
+  pushl $153
+801071cb:	68 99 00 00 00       	push   $0x99
+  jmp alltraps
+801071d0:	e9 c0 f3 ff ff       	jmp    80106595 <alltraps>
+
+801071d5 <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+801071d5:	6a 00                	push   $0x0
+  pushl $154
+801071d7:	68 9a 00 00 00       	push   $0x9a
+  jmp alltraps
+801071dc:	e9 b4 f3 ff ff       	jmp    80106595 <alltraps>
+
+801071e1 <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+801071e1:	6a 00                	push   $0x0
+  pushl $155
+801071e3:	68 9b 00 00 00       	push   $0x9b
+  jmp alltraps
+801071e8:	e9 a8 f3 ff ff       	jmp    80106595 <alltraps>
+
+801071ed <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+801071ed:	6a 00                	push   $0x0
+  pushl $156
+801071ef:	68 9c 00 00 00       	push   $0x9c
+  jmp alltraps
+801071f4:	e9 9c f3 ff ff       	jmp    80106595 <alltraps>
+
+801071f9 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+801071f9:	6a 00                	push   $0x0
+  pushl $157
+801071fb:	68 9d 00 00 00       	push   $0x9d
+  jmp alltraps
+80107200:	e9 90 f3 ff ff       	jmp    80106595 <alltraps>
+
+80107205 <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+80107205:	6a 00                	push   $0x0
+  pushl $158
+80107207:	68 9e 00 00 00       	push   $0x9e
+  jmp alltraps
+8010720c:	e9 84 f3 ff ff       	jmp    80106595 <alltraps>
+
+80107211 <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+80107211:	6a 00                	push   $0x0
+  pushl $159
+80107213:	68 9f 00 00 00       	push   $0x9f
+  jmp alltraps
+80107218:	e9 78 f3 ff ff       	jmp    80106595 <alltraps>
+
+8010721d <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+8010721d:	6a 00                	push   $0x0
+  pushl $160
+8010721f:	68 a0 00 00 00       	push   $0xa0
+  jmp alltraps
+80107224:	e9 6c f3 ff ff       	jmp    80106595 <alltraps>
+
+80107229 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+80107229:	6a 00                	push   $0x0
+  pushl $161
+8010722b:	68 a1 00 00 00       	push   $0xa1
+  jmp alltraps
+80107230:	e9 60 f3 ff ff       	jmp    80106595 <alltraps>
+
+80107235 <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+80107235:	6a 00                	push   $0x0
+  pushl $162
+80107237:	68 a2 00 00 00       	push   $0xa2
+  jmp alltraps
+8010723c:	e9 54 f3 ff ff       	jmp    80106595 <alltraps>
+
+80107241 <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+80107241:	6a 00                	push   $0x0
+  pushl $163
+80107243:	68 a3 00 00 00       	push   $0xa3
+  jmp alltraps
+80107248:	e9 48 f3 ff ff       	jmp    80106595 <alltraps>
+
+8010724d <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+8010724d:	6a 00                	push   $0x0
+  pushl $164
+8010724f:	68 a4 00 00 00       	push   $0xa4
+  jmp alltraps
+80107254:	e9 3c f3 ff ff       	jmp    80106595 <alltraps>
+
+80107259 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+80107259:	6a 00                	push   $0x0
+  pushl $165
+8010725b:	68 a5 00 00 00       	push   $0xa5
+  jmp alltraps
+80107260:	e9 30 f3 ff ff       	jmp    80106595 <alltraps>
+
+80107265 <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+80107265:	6a 00                	push   $0x0
+  pushl $166
+80107267:	68 a6 00 00 00       	push   $0xa6
+  jmp alltraps
+8010726c:	e9 24 f3 ff ff       	jmp    80106595 <alltraps>
+
+80107271 <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+80107271:	6a 00                	push   $0x0
+  pushl $167
+80107273:	68 a7 00 00 00       	push   $0xa7
+  jmp alltraps
+80107278:	e9 18 f3 ff ff       	jmp    80106595 <alltraps>
+
+8010727d <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+8010727d:	6a 00                	push   $0x0
+  pushl $168
+8010727f:	68 a8 00 00 00       	push   $0xa8
+  jmp alltraps
+80107284:	e9 0c f3 ff ff       	jmp    80106595 <alltraps>
+
+80107289 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+80107289:	6a 00                	push   $0x0
+  pushl $169
+8010728b:	68 a9 00 00 00       	push   $0xa9
+  jmp alltraps
+80107290:	e9 00 f3 ff ff       	jmp    80106595 <alltraps>
+
+80107295 <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+80107295:	6a 00                	push   $0x0
+  pushl $170
+80107297:	68 aa 00 00 00       	push   $0xaa
+  jmp alltraps
+8010729c:	e9 f4 f2 ff ff       	jmp    80106595 <alltraps>
+
+801072a1 <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+801072a1:	6a 00                	push   $0x0
+  pushl $171
+801072a3:	68 ab 00 00 00       	push   $0xab
+  jmp alltraps
+801072a8:	e9 e8 f2 ff ff       	jmp    80106595 <alltraps>
+
+801072ad <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+801072ad:	6a 00                	push   $0x0
+  pushl $172
+801072af:	68 ac 00 00 00       	push   $0xac
+  jmp alltraps
+801072b4:	e9 dc f2 ff ff       	jmp    80106595 <alltraps>
+
+801072b9 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+801072b9:	6a 00                	push   $0x0
+  pushl $173
+801072bb:	68 ad 00 00 00       	push   $0xad
+  jmp alltraps
+801072c0:	e9 d0 f2 ff ff       	jmp    80106595 <alltraps>
+
+801072c5 <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+801072c5:	6a 00                	push   $0x0
+  pushl $174
+801072c7:	68 ae 00 00 00       	push   $0xae
+  jmp alltraps
+801072cc:	e9 c4 f2 ff ff       	jmp    80106595 <alltraps>
+
+801072d1 <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+801072d1:	6a 00                	push   $0x0
+  pushl $175
+801072d3:	68 af 00 00 00       	push   $0xaf
+  jmp alltraps
+801072d8:	e9 b8 f2 ff ff       	jmp    80106595 <alltraps>
+
+801072dd <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+801072dd:	6a 00                	push   $0x0
+  pushl $176
+801072df:	68 b0 00 00 00       	push   $0xb0
+  jmp alltraps
+801072e4:	e9 ac f2 ff ff       	jmp    80106595 <alltraps>
+
+801072e9 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+801072e9:	6a 00                	push   $0x0
+  pushl $177
+801072eb:	68 b1 00 00 00       	push   $0xb1
+  jmp alltraps
+801072f0:	e9 a0 f2 ff ff       	jmp    80106595 <alltraps>
+
+801072f5 <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+801072f5:	6a 00                	push   $0x0
+  pushl $178
+801072f7:	68 b2 00 00 00       	push   $0xb2
+  jmp alltraps
+801072fc:	e9 94 f2 ff ff       	jmp    80106595 <alltraps>
+
+80107301 <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+80107301:	6a 00                	push   $0x0
+  pushl $179
+80107303:	68 b3 00 00 00       	push   $0xb3
+  jmp alltraps
+80107308:	e9 88 f2 ff ff       	jmp    80106595 <alltraps>
+
+8010730d <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+8010730d:	6a 00                	push   $0x0
+  pushl $180
+8010730f:	68 b4 00 00 00       	push   $0xb4
+  jmp alltraps
+80107314:	e9 7c f2 ff ff       	jmp    80106595 <alltraps>
+
+80107319 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+80107319:	6a 00                	push   $0x0
+  pushl $181
+8010731b:	68 b5 00 00 00       	push   $0xb5
+  jmp alltraps
+80107320:	e9 70 f2 ff ff       	jmp    80106595 <alltraps>
+
+80107325 <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+80107325:	6a 00                	push   $0x0
+  pushl $182
+80107327:	68 b6 00 00 00       	push   $0xb6
+  jmp alltraps
+8010732c:	e9 64 f2 ff ff       	jmp    80106595 <alltraps>
+
+80107331 <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+80107331:	6a 00                	push   $0x0
+  pushl $183
+80107333:	68 b7 00 00 00       	push   $0xb7
+  jmp alltraps
+80107338:	e9 58 f2 ff ff       	jmp    80106595 <alltraps>
+
+8010733d <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+8010733d:	6a 00                	push   $0x0
+  pushl $184
+8010733f:	68 b8 00 00 00       	push   $0xb8
+  jmp alltraps
+80107344:	e9 4c f2 ff ff       	jmp    80106595 <alltraps>
+
+80107349 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+80107349:	6a 00                	push   $0x0
+  pushl $185
+8010734b:	68 b9 00 00 00       	push   $0xb9
+  jmp alltraps
+80107350:	e9 40 f2 ff ff       	jmp    80106595 <alltraps>
+
+80107355 <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+80107355:	6a 00                	push   $0x0
+  pushl $186
+80107357:	68 ba 00 00 00       	push   $0xba
+  jmp alltraps
+8010735c:	e9 34 f2 ff ff       	jmp    80106595 <alltraps>
+
+80107361 <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+80107361:	6a 00                	push   $0x0
+  pushl $187
+80107363:	68 bb 00 00 00       	push   $0xbb
+  jmp alltraps
+80107368:	e9 28 f2 ff ff       	jmp    80106595 <alltraps>
+
+8010736d <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+8010736d:	6a 00                	push   $0x0
+  pushl $188
+8010736f:	68 bc 00 00 00       	push   $0xbc
+  jmp alltraps
+80107374:	e9 1c f2 ff ff       	jmp    80106595 <alltraps>
+
+80107379 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+80107379:	6a 00                	push   $0x0
+  pushl $189
+8010737b:	68 bd 00 00 00       	push   $0xbd
+  jmp alltraps
+80107380:	e9 10 f2 ff ff       	jmp    80106595 <alltraps>
+
+80107385 <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+80107385:	6a 00                	push   $0x0
+  pushl $190
+80107387:	68 be 00 00 00       	push   $0xbe
+  jmp alltraps
+8010738c:	e9 04 f2 ff ff       	jmp    80106595 <alltraps>
+
+80107391 <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+80107391:	6a 00                	push   $0x0
+  pushl $191
+80107393:	68 bf 00 00 00       	push   $0xbf
+  jmp alltraps
+80107398:	e9 f8 f1 ff ff       	jmp    80106595 <alltraps>
+
+8010739d <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+8010739d:	6a 00                	push   $0x0
+  pushl $192
+8010739f:	68 c0 00 00 00       	push   $0xc0
+  jmp alltraps
+801073a4:	e9 ec f1 ff ff       	jmp    80106595 <alltraps>
+
+801073a9 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+801073a9:	6a 00                	push   $0x0
+  pushl $193
+801073ab:	68 c1 00 00 00       	push   $0xc1
+  jmp alltraps
+801073b0:	e9 e0 f1 ff ff       	jmp    80106595 <alltraps>
+
+801073b5 <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+801073b5:	6a 00                	push   $0x0
+  pushl $194
+801073b7:	68 c2 00 00 00       	push   $0xc2
+  jmp alltraps
+801073bc:	e9 d4 f1 ff ff       	jmp    80106595 <alltraps>
+
+801073c1 <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+801073c1:	6a 00                	push   $0x0
+  pushl $195
+801073c3:	68 c3 00 00 00       	push   $0xc3
+  jmp alltraps
+801073c8:	e9 c8 f1 ff ff       	jmp    80106595 <alltraps>
+
+801073cd <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+801073cd:	6a 00                	push   $0x0
+  pushl $196
+801073cf:	68 c4 00 00 00       	push   $0xc4
+  jmp alltraps
+801073d4:	e9 bc f1 ff ff       	jmp    80106595 <alltraps>
+
+801073d9 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+801073d9:	6a 00                	push   $0x0
+  pushl $197
+801073db:	68 c5 00 00 00       	push   $0xc5
+  jmp alltraps
+801073e0:	e9 b0 f1 ff ff       	jmp    80106595 <alltraps>
+
+801073e5 <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+801073e5:	6a 00                	push   $0x0
+  pushl $198
+801073e7:	68 c6 00 00 00       	push   $0xc6
+  jmp alltraps
+801073ec:	e9 a4 f1 ff ff       	jmp    80106595 <alltraps>
+
+801073f1 <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+801073f1:	6a 00                	push   $0x0
+  pushl $199
+801073f3:	68 c7 00 00 00       	push   $0xc7
+  jmp alltraps
+801073f8:	e9 98 f1 ff ff       	jmp    80106595 <alltraps>
+
+801073fd <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+801073fd:	6a 00                	push   $0x0
+  pushl $200
+801073ff:	68 c8 00 00 00       	push   $0xc8
+  jmp alltraps
+80107404:	e9 8c f1 ff ff       	jmp    80106595 <alltraps>
+
+80107409 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+80107409:	6a 00                	push   $0x0
+  pushl $201
+8010740b:	68 c9 00 00 00       	push   $0xc9
+  jmp alltraps
+80107410:	e9 80 f1 ff ff       	jmp    80106595 <alltraps>
+
+80107415 <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+80107415:	6a 00                	push   $0x0
+  pushl $202
+80107417:	68 ca 00 00 00       	push   $0xca
+  jmp alltraps
+8010741c:	e9 74 f1 ff ff       	jmp    80106595 <alltraps>
+
+80107421 <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+80107421:	6a 00                	push   $0x0
+  pushl $203
+80107423:	68 cb 00 00 00       	push   $0xcb
+  jmp alltraps
+80107428:	e9 68 f1 ff ff       	jmp    80106595 <alltraps>
+
+8010742d <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+8010742d:	6a 00                	push   $0x0
+  pushl $204
+8010742f:	68 cc 00 00 00       	push   $0xcc
+  jmp alltraps
+80107434:	e9 5c f1 ff ff       	jmp    80106595 <alltraps>
+
+80107439 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+80107439:	6a 00                	push   $0x0
+  pushl $205
+8010743b:	68 cd 00 00 00       	push   $0xcd
+  jmp alltraps
+80107440:	e9 50 f1 ff ff       	jmp    80106595 <alltraps>
+
+80107445 <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+80107445:	6a 00                	push   $0x0
+  pushl $206
+80107447:	68 ce 00 00 00       	push   $0xce
+  jmp alltraps
+8010744c:	e9 44 f1 ff ff       	jmp    80106595 <alltraps>
+
+80107451 <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+80107451:	6a 00                	push   $0x0
+  pushl $207
+80107453:	68 cf 00 00 00       	push   $0xcf
+  jmp alltraps
+80107458:	e9 38 f1 ff ff       	jmp    80106595 <alltraps>
+
+8010745d <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+8010745d:	6a 00                	push   $0x0
+  pushl $208
+8010745f:	68 d0 00 00 00       	push   $0xd0
+  jmp alltraps
+80107464:	e9 2c f1 ff ff       	jmp    80106595 <alltraps>
+
+80107469 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+80107469:	6a 00                	push   $0x0
+  pushl $209
+8010746b:	68 d1 00 00 00       	push   $0xd1
+  jmp alltraps
+80107470:	e9 20 f1 ff ff       	jmp    80106595 <alltraps>
+
+80107475 <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+80107475:	6a 00                	push   $0x0
+  pushl $210
+80107477:	68 d2 00 00 00       	push   $0xd2
+  jmp alltraps
+8010747c:	e9 14 f1 ff ff       	jmp    80106595 <alltraps>
+
+80107481 <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+80107481:	6a 00                	push   $0x0
+  pushl $211
+80107483:	68 d3 00 00 00       	push   $0xd3
+  jmp alltraps
+80107488:	e9 08 f1 ff ff       	jmp    80106595 <alltraps>
+
+8010748d <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+8010748d:	6a 00                	push   $0x0
+  pushl $212
+8010748f:	68 d4 00 00 00       	push   $0xd4
+  jmp alltraps
+80107494:	e9 fc f0 ff ff       	jmp    80106595 <alltraps>
+
+80107499 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+80107499:	6a 00                	push   $0x0
+  pushl $213
+8010749b:	68 d5 00 00 00       	push   $0xd5
+  jmp alltraps
+801074a0:	e9 f0 f0 ff ff       	jmp    80106595 <alltraps>
+
+801074a5 <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+801074a5:	6a 00                	push   $0x0
+  pushl $214
+801074a7:	68 d6 00 00 00       	push   $0xd6
+  jmp alltraps
+801074ac:	e9 e4 f0 ff ff       	jmp    80106595 <alltraps>
+
+801074b1 <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+801074b1:	6a 00                	push   $0x0
+  pushl $215
+801074b3:	68 d7 00 00 00       	push   $0xd7
+  jmp alltraps
+801074b8:	e9 d8 f0 ff ff       	jmp    80106595 <alltraps>
+
+801074bd <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+801074bd:	6a 00                	push   $0x0
+  pushl $216
+801074bf:	68 d8 00 00 00       	push   $0xd8
+  jmp alltraps
+801074c4:	e9 cc f0 ff ff       	jmp    80106595 <alltraps>
+
+801074c9 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+801074c9:	6a 00                	push   $0x0
+  pushl $217
+801074cb:	68 d9 00 00 00       	push   $0xd9
+  jmp alltraps
+801074d0:	e9 c0 f0 ff ff       	jmp    80106595 <alltraps>
+
+801074d5 <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+801074d5:	6a 00                	push   $0x0
+  pushl $218
+801074d7:	68 da 00 00 00       	push   $0xda
+  jmp alltraps
+801074dc:	e9 b4 f0 ff ff       	jmp    80106595 <alltraps>
+
+801074e1 <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+801074e1:	6a 00                	push   $0x0
+  pushl $219
+801074e3:	68 db 00 00 00       	push   $0xdb
+  jmp alltraps
+801074e8:	e9 a8 f0 ff ff       	jmp    80106595 <alltraps>
+
+801074ed <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+801074ed:	6a 00                	push   $0x0
+  pushl $220
+801074ef:	68 dc 00 00 00       	push   $0xdc
+  jmp alltraps
+801074f4:	e9 9c f0 ff ff       	jmp    80106595 <alltraps>
+
+801074f9 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+801074f9:	6a 00                	push   $0x0
+  pushl $221
+801074fb:	68 dd 00 00 00       	push   $0xdd
+  jmp alltraps
+80107500:	e9 90 f0 ff ff       	jmp    80106595 <alltraps>
+
+80107505 <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+80107505:	6a 00                	push   $0x0
+  pushl $222
+80107507:	68 de 00 00 00       	push   $0xde
+  jmp alltraps
+8010750c:	e9 84 f0 ff ff       	jmp    80106595 <alltraps>
+
+80107511 <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+80107511:	6a 00                	push   $0x0
+  pushl $223
+80107513:	68 df 00 00 00       	push   $0xdf
+  jmp alltraps
+80107518:	e9 78 f0 ff ff       	jmp    80106595 <alltraps>
+
+8010751d <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+8010751d:	6a 00                	push   $0x0
+  pushl $224
+8010751f:	68 e0 00 00 00       	push   $0xe0
+  jmp alltraps
+80107524:	e9 6c f0 ff ff       	jmp    80106595 <alltraps>
+
+80107529 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+80107529:	6a 00                	push   $0x0
+  pushl $225
+8010752b:	68 e1 00 00 00       	push   $0xe1
+  jmp alltraps
+80107530:	e9 60 f0 ff ff       	jmp    80106595 <alltraps>
+
+80107535 <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+80107535:	6a 00                	push   $0x0
+  pushl $226
+80107537:	68 e2 00 00 00       	push   $0xe2
+  jmp alltraps
+8010753c:	e9 54 f0 ff ff       	jmp    80106595 <alltraps>
+
+80107541 <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+80107541:	6a 00                	push   $0x0
+  pushl $227
+80107543:	68 e3 00 00 00       	push   $0xe3
+  jmp alltraps
+80107548:	e9 48 f0 ff ff       	jmp    80106595 <alltraps>
+
+8010754d <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+8010754d:	6a 00                	push   $0x0
+  pushl $228
+8010754f:	68 e4 00 00 00       	push   $0xe4
+  jmp alltraps
+80107554:	e9 3c f0 ff ff       	jmp    80106595 <alltraps>
+
+80107559 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+80107559:	6a 00                	push   $0x0
+  pushl $229
+8010755b:	68 e5 00 00 00       	push   $0xe5
+  jmp alltraps
+80107560:	e9 30 f0 ff ff       	jmp    80106595 <alltraps>
+
+80107565 <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+80107565:	6a 00                	push   $0x0
+  pushl $230
+80107567:	68 e6 00 00 00       	push   $0xe6
+  jmp alltraps
+8010756c:	e9 24 f0 ff ff       	jmp    80106595 <alltraps>
+
+80107571 <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+80107571:	6a 00                	push   $0x0
+  pushl $231
+80107573:	68 e7 00 00 00       	push   $0xe7
+  jmp alltraps
+80107578:	e9 18 f0 ff ff       	jmp    80106595 <alltraps>
+
+8010757d <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+8010757d:	6a 00                	push   $0x0
+  pushl $232
+8010757f:	68 e8 00 00 00       	push   $0xe8
+  jmp alltraps
+80107584:	e9 0c f0 ff ff       	jmp    80106595 <alltraps>
+
+80107589 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+80107589:	6a 00                	push   $0x0
+  pushl $233
+8010758b:	68 e9 00 00 00       	push   $0xe9
+  jmp alltraps
+80107590:	e9 00 f0 ff ff       	jmp    80106595 <alltraps>
+
+80107595 <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+80107595:	6a 00                	push   $0x0
+  pushl $234
+80107597:	68 ea 00 00 00       	push   $0xea
+  jmp alltraps
+8010759c:	e9 f4 ef ff ff       	jmp    80106595 <alltraps>
+
+801075a1 <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+801075a1:	6a 00                	push   $0x0
+  pushl $235
+801075a3:	68 eb 00 00 00       	push   $0xeb
+  jmp alltraps
+801075a8:	e9 e8 ef ff ff       	jmp    80106595 <alltraps>
+
+801075ad <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+801075ad:	6a 00                	push   $0x0
+  pushl $236
+801075af:	68 ec 00 00 00       	push   $0xec
+  jmp alltraps
+801075b4:	e9 dc ef ff ff       	jmp    80106595 <alltraps>
+
+801075b9 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+801075b9:	6a 00                	push   $0x0
+  pushl $237
+801075bb:	68 ed 00 00 00       	push   $0xed
+  jmp alltraps
+801075c0:	e9 d0 ef ff ff       	jmp    80106595 <alltraps>
+
+801075c5 <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+801075c5:	6a 00                	push   $0x0
+  pushl $238
+801075c7:	68 ee 00 00 00       	push   $0xee
+  jmp alltraps
+801075cc:	e9 c4 ef ff ff       	jmp    80106595 <alltraps>
+
+801075d1 <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+801075d1:	6a 00                	push   $0x0
+  pushl $239
+801075d3:	68 ef 00 00 00       	push   $0xef
+  jmp alltraps
+801075d8:	e9 b8 ef ff ff       	jmp    80106595 <alltraps>
+
+801075dd <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+801075dd:	6a 00                	push   $0x0
+  pushl $240
+801075df:	68 f0 00 00 00       	push   $0xf0
+  jmp alltraps
+801075e4:	e9 ac ef ff ff       	jmp    80106595 <alltraps>
+
+801075e9 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+801075e9:	6a 00                	push   $0x0
+  pushl $241
+801075eb:	68 f1 00 00 00       	push   $0xf1
+  jmp alltraps
+801075f0:	e9 a0 ef ff ff       	jmp    80106595 <alltraps>
+
+801075f5 <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+801075f5:	6a 00                	push   $0x0
+  pushl $242
+801075f7:	68 f2 00 00 00       	push   $0xf2
+  jmp alltraps
+801075fc:	e9 94 ef ff ff       	jmp    80106595 <alltraps>
+
+80107601 <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+80107601:	6a 00                	push   $0x0
+  pushl $243
+80107603:	68 f3 00 00 00       	push   $0xf3
+  jmp alltraps
+80107608:	e9 88 ef ff ff       	jmp    80106595 <alltraps>
+
+8010760d <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+8010760d:	6a 00                	push   $0x0
+  pushl $244
+8010760f:	68 f4 00 00 00       	push   $0xf4
+  jmp alltraps
+80107614:	e9 7c ef ff ff       	jmp    80106595 <alltraps>
+
+80107619 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+80107619:	6a 00                	push   $0x0
+  pushl $245
+8010761b:	68 f5 00 00 00       	push   $0xf5
+  jmp alltraps
+80107620:	e9 70 ef ff ff       	jmp    80106595 <alltraps>
+
+80107625 <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+80107625:	6a 00                	push   $0x0
+  pushl $246
+80107627:	68 f6 00 00 00       	push   $0xf6
+  jmp alltraps
+8010762c:	e9 64 ef ff ff       	jmp    80106595 <alltraps>
+
+80107631 <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+80107631:	6a 00                	push   $0x0
+  pushl $247
+80107633:	68 f7 00 00 00       	push   $0xf7
+  jmp alltraps
+80107638:	e9 58 ef ff ff       	jmp    80106595 <alltraps>
+
+8010763d <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+8010763d:	6a 00                	push   $0x0
+  pushl $248
+8010763f:	68 f8 00 00 00       	push   $0xf8
+  jmp alltraps
+80107644:	e9 4c ef ff ff       	jmp    80106595 <alltraps>
+
+80107649 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+80107649:	6a 00                	push   $0x0
+  pushl $249
+8010764b:	68 f9 00 00 00       	push   $0xf9
+  jmp alltraps
+80107650:	e9 40 ef ff ff       	jmp    80106595 <alltraps>
+
+80107655 <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+80107655:	6a 00                	push   $0x0
+  pushl $250
+80107657:	68 fa 00 00 00       	push   $0xfa
+  jmp alltraps
+8010765c:	e9 34 ef ff ff       	jmp    80106595 <alltraps>
+
+80107661 <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+80107661:	6a 00                	push   $0x0
+  pushl $251
+80107663:	68 fb 00 00 00       	push   $0xfb
+  jmp alltraps
+80107668:	e9 28 ef ff ff       	jmp    80106595 <alltraps>
+
+8010766d <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+8010766d:	6a 00                	push   $0x0
+  pushl $252
+8010766f:	68 fc 00 00 00       	push   $0xfc
+  jmp alltraps
+80107674:	e9 1c ef ff ff       	jmp    80106595 <alltraps>
+
+80107679 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+80107679:	6a 00                	push   $0x0
+  pushl $253
+8010767b:	68 fd 00 00 00       	push   $0xfd
+  jmp alltraps
+80107680:	e9 10 ef ff ff       	jmp    80106595 <alltraps>
+
+80107685 <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+80107685:	6a 00                	push   $0x0
+  pushl $254
+80107687:	68 fe 00 00 00       	push   $0xfe
+  jmp alltraps
+8010768c:	e9 04 ef ff ff       	jmp    80106595 <alltraps>
+
+80107691 <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+80107691:	6a 00                	push   $0x0
+  pushl $255
+80107693:	68 ff 00 00 00       	push   $0xff
+  jmp alltraps
+80107698:	e9 f8 ee ff ff       	jmp    80106595 <alltraps>
+
+8010769d <lgdt>:
+
+struct segdesc;
+
+static inline void
+lgdt(struct segdesc *p, int size)
+{
+8010769d:	55                   	push   %ebp
+8010769e:	89 e5                	mov    %esp,%ebp
+801076a0:	83 ec 10             	sub    $0x10,%esp
+  volatile ushort pd[3];
+
+  pd[0] = size-1;
+801076a3:	8b 45 0c             	mov    0xc(%ebp),%eax
+801076a6:	83 e8 01             	sub    $0x1,%eax
+801076a9:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+801076ad:	8b 45 08             	mov    0x8(%ebp),%eax
+801076b0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+801076b4:	8b 45 08             	mov    0x8(%ebp),%eax
+801076b7:	c1 e8 10             	shr    $0x10,%eax
+801076ba:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+
+  asm volatile("lgdt (%0)" : : "r" (pd));
+801076be:	8d 45 fa             	lea    -0x6(%ebp),%eax
+801076c1:	0f 01 10             	lgdtl  (%eax)
+}
+801076c4:	90                   	nop
+801076c5:	c9                   	leave  
+801076c6:	c3                   	ret    
+
+801076c7 <ltr>:
+  asm volatile("lidt (%0)" : : "r" (pd));
+}
+
+static inline void
+ltr(ushort sel)
+{
+801076c7:	55                   	push   %ebp
+801076c8:	89 e5                	mov    %esp,%ebp
+801076ca:	83 ec 04             	sub    $0x4,%esp
+801076cd:	8b 45 08             	mov    0x8(%ebp),%eax
+801076d0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  asm volatile("ltr %0" : : "r" (sel));
+801076d4:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+801076d8:	0f 00 d8             	ltr    %ax
+}
+801076db:	90                   	nop
+801076dc:	c9                   	leave  
+801076dd:	c3                   	ret    
+
+801076de <loadgs>:
+  return eflags;
+}
+
+static inline void
+loadgs(ushort v)
+{
+801076de:	55                   	push   %ebp
+801076df:	89 e5                	mov    %esp,%ebp
+801076e1:	83 ec 04             	sub    $0x4,%esp
+801076e4:	8b 45 08             	mov    0x8(%ebp),%eax
+801076e7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  asm volatile("movw %0, %%gs" : : "r" (v));
+801076eb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+801076ef:	8e e8                	mov    %eax,%gs
+}
+801076f1:	90                   	nop
+801076f2:	c9                   	leave  
+801076f3:	c3                   	ret    
+
+801076f4 <lcr3>:
+  return val;
+}
+
+static inline void
+lcr3(uint val) 
+{
+801076f4:	55                   	push   %ebp
+801076f5:	89 e5                	mov    %esp,%ebp
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+801076f7:	8b 45 08             	mov    0x8(%ebp),%eax
+801076fa:	0f 22 d8             	mov    %eax,%cr3
+}
+801076fd:	90                   	nop
+801076fe:	5d                   	pop    %ebp
+801076ff:	c3                   	ret    
+
+80107700 <v2p>:
+#define KERNBASE 0x80000000         // First kernel virtual address
+#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked
+
+#ifndef __ASSEMBLER__
+
+static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }
+80107700:	55                   	push   %ebp
+80107701:	89 e5                	mov    %esp,%ebp
+80107703:	8b 45 08             	mov    0x8(%ebp),%eax
+80107706:	05 00 00 00 80       	add    $0x80000000,%eax
+8010770b:	5d                   	pop    %ebp
+8010770c:	c3                   	ret    
+
+8010770d <p2v>:
+static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
+8010770d:	55                   	push   %ebp
+8010770e:	89 e5                	mov    %esp,%ebp
+80107710:	8b 45 08             	mov    0x8(%ebp),%eax
+80107713:	05 00 00 00 80       	add    $0x80000000,%eax
+80107718:	5d                   	pop    %ebp
+80107719:	c3                   	ret    
+
+8010771a <seginit>:
+
+// Set up CPU's kernel segment descriptors.
+// Run once on entry on each CPU.
+void
+seginit(void)
+{
+8010771a:	55                   	push   %ebp
+8010771b:	89 e5                	mov    %esp,%ebp
+8010771d:	53                   	push   %ebx
+8010771e:	83 ec 14             	sub    $0x14,%esp
+
+  // Map "logical" addresses to virtual addresses using identity map.
+  // Cannot share a CODE descriptor for both kernel and user
+  // because it would have to have DPL_USR, but the CPU forbids
+  // an interrupt from CPL=0 to DPL=3.
+  c = &cpus[cpunum()];
+80107721:	e8 05 b8 ff ff       	call   80102f2b <cpunum>
+80107726:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
+8010772c:	05 60 23 11 80       	add    $0x80112360,%eax
+80107731:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+80107734:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107737:	66 c7 40 78 ff ff    	movw   $0xffff,0x78(%eax)
+8010773d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107740:	66 c7 40 7a 00 00    	movw   $0x0,0x7a(%eax)
+80107746:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107749:	c6 40 7c 00          	movb   $0x0,0x7c(%eax)
+8010774d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107750:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
+80107754:	83 e2 f0             	and    $0xfffffff0,%edx
+80107757:	83 ca 0a             	or     $0xa,%edx
+8010775a:	88 50 7d             	mov    %dl,0x7d(%eax)
+8010775d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107760:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
+80107764:	83 ca 10             	or     $0x10,%edx
+80107767:	88 50 7d             	mov    %dl,0x7d(%eax)
+8010776a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010776d:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
+80107771:	83 e2 9f             	and    $0xffffff9f,%edx
+80107774:	88 50 7d             	mov    %dl,0x7d(%eax)
+80107777:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010777a:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
+8010777e:	83 ca 80             	or     $0xffffff80,%edx
+80107781:	88 50 7d             	mov    %dl,0x7d(%eax)
+80107784:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107787:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
+8010778b:	83 ca 0f             	or     $0xf,%edx
+8010778e:	88 50 7e             	mov    %dl,0x7e(%eax)
+80107791:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107794:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
+80107798:	83 e2 ef             	and    $0xffffffef,%edx
+8010779b:	88 50 7e             	mov    %dl,0x7e(%eax)
+8010779e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801077a1:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
+801077a5:	83 e2 df             	and    $0xffffffdf,%edx
+801077a8:	88 50 7e             	mov    %dl,0x7e(%eax)
+801077ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801077ae:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
+801077b2:	83 ca 40             	or     $0x40,%edx
+801077b5:	88 50 7e             	mov    %dl,0x7e(%eax)
+801077b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801077bb:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
+801077bf:	83 ca 80             	or     $0xffffff80,%edx
+801077c2:	88 50 7e             	mov    %dl,0x7e(%eax)
+801077c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801077c8:	c6 40 7f 00          	movb   $0x0,0x7f(%eax)
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+801077cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801077cf:	66 c7 80 80 00 00 00 	movw   $0xffff,0x80(%eax)
+801077d6:	ff ff 
+801077d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801077db:	66 c7 80 82 00 00 00 	movw   $0x0,0x82(%eax)
+801077e2:	00 00 
+801077e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801077e7:	c6 80 84 00 00 00 00 	movb   $0x0,0x84(%eax)
+801077ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801077f1:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
+801077f8:	83 e2 f0             	and    $0xfffffff0,%edx
+801077fb:	83 ca 02             	or     $0x2,%edx
+801077fe:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
+80107804:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107807:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
+8010780e:	83 ca 10             	or     $0x10,%edx
+80107811:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
+80107817:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010781a:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
+80107821:	83 e2 9f             	and    $0xffffff9f,%edx
+80107824:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
+8010782a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010782d:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
+80107834:	83 ca 80             	or     $0xffffff80,%edx
+80107837:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
+8010783d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107840:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
+80107847:	83 ca 0f             	or     $0xf,%edx
+8010784a:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
+80107850:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107853:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
+8010785a:	83 e2 ef             	and    $0xffffffef,%edx
+8010785d:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
+80107863:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107866:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
+8010786d:	83 e2 df             	and    $0xffffffdf,%edx
+80107870:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
+80107876:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107879:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
+80107880:	83 ca 40             	or     $0x40,%edx
+80107883:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
+80107889:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010788c:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
+80107893:	83 ca 80             	or     $0xffffff80,%edx
+80107896:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
+8010789c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010789f:	c6 80 87 00 00 00 00 	movb   $0x0,0x87(%eax)
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+801078a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801078a9:	66 c7 80 90 00 00 00 	movw   $0xffff,0x90(%eax)
+801078b0:	ff ff 
+801078b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801078b5:	66 c7 80 92 00 00 00 	movw   $0x0,0x92(%eax)
+801078bc:	00 00 
+801078be:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801078c1:	c6 80 94 00 00 00 00 	movb   $0x0,0x94(%eax)
+801078c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801078cb:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
+801078d2:	83 e2 f0             	and    $0xfffffff0,%edx
+801078d5:	83 ca 0a             	or     $0xa,%edx
+801078d8:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
+801078de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801078e1:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
+801078e8:	83 ca 10             	or     $0x10,%edx
+801078eb:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
+801078f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801078f4:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
+801078fb:	83 ca 60             	or     $0x60,%edx
+801078fe:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
+80107904:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107907:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
+8010790e:	83 ca 80             	or     $0xffffff80,%edx
+80107911:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
+80107917:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010791a:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
+80107921:	83 ca 0f             	or     $0xf,%edx
+80107924:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
+8010792a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010792d:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
+80107934:	83 e2 ef             	and    $0xffffffef,%edx
+80107937:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
+8010793d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107940:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
+80107947:	83 e2 df             	and    $0xffffffdf,%edx
+8010794a:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
+80107950:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107953:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
+8010795a:	83 ca 40             	or     $0x40,%edx
+8010795d:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
+80107963:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107966:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
+8010796d:	83 ca 80             	or     $0xffffff80,%edx
+80107970:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
+80107976:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107979:	c6 80 97 00 00 00 00 	movb   $0x0,0x97(%eax)
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+80107980:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107983:	66 c7 80 98 00 00 00 	movw   $0xffff,0x98(%eax)
+8010798a:	ff ff 
+8010798c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010798f:	66 c7 80 9a 00 00 00 	movw   $0x0,0x9a(%eax)
+80107996:	00 00 
+80107998:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010799b:	c6 80 9c 00 00 00 00 	movb   $0x0,0x9c(%eax)
+801079a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801079a5:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
+801079ac:	83 e2 f0             	and    $0xfffffff0,%edx
+801079af:	83 ca 02             	or     $0x2,%edx
+801079b2:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
+801079b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801079bb:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
+801079c2:	83 ca 10             	or     $0x10,%edx
+801079c5:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
+801079cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801079ce:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
+801079d5:	83 ca 60             	or     $0x60,%edx
+801079d8:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
+801079de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801079e1:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
+801079e8:	83 ca 80             	or     $0xffffff80,%edx
+801079eb:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
+801079f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801079f4:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
+801079fb:	83 ca 0f             	or     $0xf,%edx
+801079fe:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
+80107a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a07:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
+80107a0e:	83 e2 ef             	and    $0xffffffef,%edx
+80107a11:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
+80107a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a1a:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
+80107a21:	83 e2 df             	and    $0xffffffdf,%edx
+80107a24:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
+80107a2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a2d:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
+80107a34:	83 ca 40             	or     $0x40,%edx
+80107a37:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
+80107a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a40:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
+80107a47:	83 ca 80             	or     $0xffffff80,%edx
+80107a4a:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
+80107a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a53:	c6 80 9f 00 00 00 00 	movb   $0x0,0x9f(%eax)
+
+  // Map cpu, and curproc
+  c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
+80107a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a5d:	05 b4 00 00 00       	add    $0xb4,%eax
+80107a62:	89 c3                	mov    %eax,%ebx
+80107a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a67:	05 b4 00 00 00       	add    $0xb4,%eax
+80107a6c:	c1 e8 10             	shr    $0x10,%eax
+80107a6f:	89 c2                	mov    %eax,%edx
+80107a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a74:	05 b4 00 00 00       	add    $0xb4,%eax
+80107a79:	c1 e8 18             	shr    $0x18,%eax
+80107a7c:	89 c1                	mov    %eax,%ecx
+80107a7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a81:	66 c7 80 88 00 00 00 	movw   $0x0,0x88(%eax)
+80107a88:	00 00 
+80107a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a8d:	66 89 98 8a 00 00 00 	mov    %bx,0x8a(%eax)
+80107a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107a97:	88 90 8c 00 00 00    	mov    %dl,0x8c(%eax)
+80107a9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107aa0:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
+80107aa7:	83 e2 f0             	and    $0xfffffff0,%edx
+80107aaa:	83 ca 02             	or     $0x2,%edx
+80107aad:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
+80107ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107ab6:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
+80107abd:	83 ca 10             	or     $0x10,%edx
+80107ac0:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
+80107ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107ac9:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
+80107ad0:	83 e2 9f             	and    $0xffffff9f,%edx
+80107ad3:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
+80107ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107adc:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
+80107ae3:	83 ca 80             	or     $0xffffff80,%edx
+80107ae6:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
+80107aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107aef:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
+80107af6:	83 e2 f0             	and    $0xfffffff0,%edx
+80107af9:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
+80107aff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107b02:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
+80107b09:	83 e2 ef             	and    $0xffffffef,%edx
+80107b0c:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
+80107b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107b15:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
+80107b1c:	83 e2 df             	and    $0xffffffdf,%edx
+80107b1f:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
+80107b25:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107b28:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
+80107b2f:	83 ca 40             	or     $0x40,%edx
+80107b32:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
+80107b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107b3b:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
+80107b42:	83 ca 80             	or     $0xffffff80,%edx
+80107b45:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
+80107b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107b4e:	88 88 8f 00 00 00    	mov    %cl,0x8f(%eax)
+
+  lgdt(c->gdt, sizeof(c->gdt));
+80107b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107b57:	83 c0 70             	add    $0x70,%eax
+80107b5a:	83 ec 08             	sub    $0x8,%esp
+80107b5d:	6a 38                	push   $0x38
+80107b5f:	50                   	push   %eax
+80107b60:	e8 38 fb ff ff       	call   8010769d <lgdt>
+80107b65:	83 c4 10             	add    $0x10,%esp
+  loadgs(SEG_KCPU << 3);
+80107b68:	83 ec 0c             	sub    $0xc,%esp
+80107b6b:	6a 18                	push   $0x18
+80107b6d:	e8 6c fb ff ff       	call   801076de <loadgs>
+80107b72:	83 c4 10             	add    $0x10,%esp
+  
+  // Initialize cpu-local storage.
+  cpu = c;
+80107b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107b78:	65 a3 00 00 00 00    	mov    %eax,%gs:0x0
+  proc = 0;
+80107b7e:	65 c7 05 04 00 00 00 	movl   $0x0,%gs:0x4
+80107b85:	00 00 00 00 
+}
+80107b89:	90                   	nop
+80107b8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80107b8d:	c9                   	leave  
+80107b8e:	c3                   	ret    
+
+80107b8f <walkpgdir>:
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+80107b8f:	55                   	push   %ebp
+80107b90:	89 e5                	mov    %esp,%ebp
+80107b92:	83 ec 18             	sub    $0x18,%esp
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+80107b95:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107b98:	c1 e8 16             	shr    $0x16,%eax
+80107b9b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80107ba2:	8b 45 08             	mov    0x8(%ebp),%eax
+80107ba5:	01 d0                	add    %edx,%eax
+80107ba7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(*pde & PTE_P){
+80107baa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80107bad:	8b 00                	mov    (%eax),%eax
+80107baf:	83 e0 01             	and    $0x1,%eax
+80107bb2:	85 c0                	test   %eax,%eax
+80107bb4:	74 18                	je     80107bce <walkpgdir+0x3f>
+    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));
+80107bb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80107bb9:	8b 00                	mov    (%eax),%eax
+80107bbb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107bc0:	50                   	push   %eax
+80107bc1:	e8 47 fb ff ff       	call   8010770d <p2v>
+80107bc6:	83 c4 04             	add    $0x4,%esp
+80107bc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80107bcc:	eb 48                	jmp    80107c16 <walkpgdir+0x87>
+  } else {
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+80107bce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+80107bd2:	74 0e                	je     80107be2 <walkpgdir+0x53>
+80107bd4:	e8 ec af ff ff       	call   80102bc5 <kalloc>
+80107bd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+80107bdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+80107be0:	75 07                	jne    80107be9 <walkpgdir+0x5a>
+      return 0;
+80107be2:	b8 00 00 00 00       	mov    $0x0,%eax
+80107be7:	eb 44                	jmp    80107c2d <walkpgdir+0x9e>
+    // Make sure all those PTE_P bits are zero.
+    memset(pgtab, 0, PGSIZE);
+80107be9:	83 ec 04             	sub    $0x4,%esp
+80107bec:	68 00 10 00 00       	push   $0x1000
+80107bf1:	6a 00                	push   $0x0
+80107bf3:	ff 75 f4             	pushl  -0xc(%ebp)
+80107bf6:	e8 be d5 ff ff       	call   801051b9 <memset>
+80107bfb:	83 c4 10             	add    $0x10,%esp
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table 
+    // entries, if necessary.
+    *pde = v2p(pgtab) | PTE_P | PTE_W | PTE_U;
+80107bfe:	83 ec 0c             	sub    $0xc,%esp
+80107c01:	ff 75 f4             	pushl  -0xc(%ebp)
+80107c04:	e8 f7 fa ff ff       	call   80107700 <v2p>
+80107c09:	83 c4 10             	add    $0x10,%esp
+80107c0c:	83 c8 07             	or     $0x7,%eax
+80107c0f:	89 c2                	mov    %eax,%edx
+80107c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80107c14:	89 10                	mov    %edx,(%eax)
+  }
+  return &pgtab[PTX(va)];
+80107c16:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107c19:	c1 e8 0c             	shr    $0xc,%eax
+80107c1c:	25 ff 03 00 00       	and    $0x3ff,%eax
+80107c21:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80107c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107c2b:	01 d0                	add    %edx,%eax
+}
+80107c2d:	c9                   	leave  
+80107c2e:	c3                   	ret    
+
+80107c2f <mappages>:
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+80107c2f:	55                   	push   %ebp
+80107c30:	89 e5                	mov    %esp,%ebp
+80107c32:	83 ec 18             	sub    $0x18,%esp
+  char *a, *last;
+  pte_t *pte;
+  
+  a = (char*)PGROUNDDOWN((uint)va);
+80107c35:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107c38:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107c3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80107c40:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107c43:	8b 45 10             	mov    0x10(%ebp),%eax
+80107c46:	01 d0                	add    %edx,%eax
+80107c48:	83 e8 01             	sub    $0x1,%eax
+80107c4b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107c50:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+80107c53:	83 ec 04             	sub    $0x4,%esp
+80107c56:	6a 01                	push   $0x1
+80107c58:	ff 75 f4             	pushl  -0xc(%ebp)
+80107c5b:	ff 75 08             	pushl  0x8(%ebp)
+80107c5e:	e8 2c ff ff ff       	call   80107b8f <walkpgdir>
+80107c63:	83 c4 10             	add    $0x10,%esp
+80107c66:	89 45 ec             	mov    %eax,-0x14(%ebp)
+80107c69:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+80107c6d:	75 07                	jne    80107c76 <mappages+0x47>
+      return -1;
+80107c6f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107c74:	eb 47                	jmp    80107cbd <mappages+0x8e>
+    if(*pte & PTE_P)
+80107c76:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80107c79:	8b 00                	mov    (%eax),%eax
+80107c7b:	83 e0 01             	and    $0x1,%eax
+80107c7e:	85 c0                	test   %eax,%eax
+80107c80:	74 0d                	je     80107c8f <mappages+0x60>
+      panic("remap");
+80107c82:	83 ec 0c             	sub    $0xc,%esp
+80107c85:	68 8c 8a 10 80       	push   $0x80108a8c
+80107c8a:	e8 d7 88 ff ff       	call   80100566 <panic>
+    *pte = pa | perm | PTE_P;
+80107c8f:	8b 45 18             	mov    0x18(%ebp),%eax
+80107c92:	0b 45 14             	or     0x14(%ebp),%eax
+80107c95:	83 c8 01             	or     $0x1,%eax
+80107c98:	89 c2                	mov    %eax,%edx
+80107c9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80107c9d:	89 10                	mov    %edx,(%eax)
+    if(a == last)
+80107c9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107ca2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+80107ca5:	74 10                	je     80107cb7 <mappages+0x88>
+      break;
+    a += PGSIZE;
+80107ca7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+    pa += PGSIZE;
+80107cae:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
+  }
+80107cb5:	eb 9c                	jmp    80107c53 <mappages+0x24>
+      return -1;
+    if(*pte & PTE_P)
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+    if(a == last)
+      break;
+80107cb7:	90                   	nop
+    a += PGSIZE;
+    pa += PGSIZE;
+  }
+  return 0;
+80107cb8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80107cbd:	c9                   	leave  
+80107cbe:	c3                   	ret    
+
+80107cbf <setupkvm>:
+};
+
+// Set up kernel part of a page table.
+pde_t*
+setupkvm(void)
+{
+80107cbf:	55                   	push   %ebp
+80107cc0:	89 e5                	mov    %esp,%ebp
+80107cc2:	53                   	push   %ebx
+80107cc3:	83 ec 14             	sub    $0x14,%esp
+  pde_t *pgdir;
+  struct kmap *k;
+
+  if((pgdir = (pde_t*)kalloc()) == 0)
+80107cc6:	e8 fa ae ff ff       	call   80102bc5 <kalloc>
+80107ccb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80107cce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80107cd2:	75 0a                	jne    80107cde <setupkvm+0x1f>
+    return 0;
+80107cd4:	b8 00 00 00 00       	mov    $0x0,%eax
+80107cd9:	e9 8e 00 00 00       	jmp    80107d6c <setupkvm+0xad>
+  memset(pgdir, 0, PGSIZE);
+80107cde:	83 ec 04             	sub    $0x4,%esp
+80107ce1:	68 00 10 00 00       	push   $0x1000
+80107ce6:	6a 00                	push   $0x0
+80107ce8:	ff 75 f0             	pushl  -0x10(%ebp)
+80107ceb:	e8 c9 d4 ff ff       	call   801051b9 <memset>
+80107cf0:	83 c4 10             	add    $0x10,%esp
+  if (p2v(PHYSTOP) > (void*)DEVSPACE)
+80107cf3:	83 ec 0c             	sub    $0xc,%esp
+80107cf6:	68 00 00 00 0e       	push   $0xe000000
+80107cfb:	e8 0d fa ff ff       	call   8010770d <p2v>
+80107d00:	83 c4 10             	add    $0x10,%esp
+80107d03:	3d 00 00 00 fe       	cmp    $0xfe000000,%eax
+80107d08:	76 0d                	jbe    80107d17 <setupkvm+0x58>
+    panic("PHYSTOP too high");
+80107d0a:	83 ec 0c             	sub    $0xc,%esp
+80107d0d:	68 92 8a 10 80       	push   $0x80108a92
+80107d12:	e8 4f 88 ff ff       	call   80100566 <panic>
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80107d17:	c7 45 f4 a0 b4 10 80 	movl   $0x8010b4a0,-0xc(%ebp)
+80107d1e:	eb 40                	jmp    80107d60 <setupkvm+0xa1>
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
+80107d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107d23:	8b 48 0c             	mov    0xc(%eax),%ecx
+                (uint)k->phys_start, k->perm) < 0)
+80107d26:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107d29:	8b 50 04             	mov    0x4(%eax),%edx
+    return 0;
+  memset(pgdir, 0, PGSIZE);
+  if (p2v(PHYSTOP) > (void*)DEVSPACE)
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
+80107d2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107d2f:	8b 58 08             	mov    0x8(%eax),%ebx
+80107d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107d35:	8b 40 04             	mov    0x4(%eax),%eax
+80107d38:	29 c3                	sub    %eax,%ebx
+80107d3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107d3d:	8b 00                	mov    (%eax),%eax
+80107d3f:	83 ec 0c             	sub    $0xc,%esp
+80107d42:	51                   	push   %ecx
+80107d43:	52                   	push   %edx
+80107d44:	53                   	push   %ebx
+80107d45:	50                   	push   %eax
+80107d46:	ff 75 f0             	pushl  -0x10(%ebp)
+80107d49:	e8 e1 fe ff ff       	call   80107c2f <mappages>
+80107d4e:	83 c4 20             	add    $0x20,%esp
+80107d51:	85 c0                	test   %eax,%eax
+80107d53:	79 07                	jns    80107d5c <setupkvm+0x9d>
+                (uint)k->phys_start, k->perm) < 0)
+      return 0;
+80107d55:	b8 00 00 00 00       	mov    $0x0,%eax
+80107d5a:	eb 10                	jmp    80107d6c <setupkvm+0xad>
+  if((pgdir = (pde_t*)kalloc()) == 0)
+    return 0;
+  memset(pgdir, 0, PGSIZE);
+  if (p2v(PHYSTOP) > (void*)DEVSPACE)
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80107d5c:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
+80107d60:	81 7d f4 e0 b4 10 80 	cmpl   $0x8010b4e0,-0xc(%ebp)
+80107d67:	72 b7                	jb     80107d20 <setupkvm+0x61>
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
+                (uint)k->phys_start, k->perm) < 0)
+      return 0;
+  return pgdir;
+80107d69:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+80107d6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80107d6f:	c9                   	leave  
+80107d70:	c3                   	ret    
+
+80107d71 <kvmalloc>:
+
+// Allocate one page table for the machine for the kernel address
+// space for scheduler processes.
+void
+kvmalloc(void)
+{
+80107d71:	55                   	push   %ebp
+80107d72:	89 e5                	mov    %esp,%ebp
+80107d74:	83 ec 08             	sub    $0x8,%esp
+  kpgdir = setupkvm();
+80107d77:	e8 43 ff ff ff       	call   80107cbf <setupkvm>
+80107d7c:	a3 38 52 11 80       	mov    %eax,0x80115238
+  switchkvm();
+80107d81:	e8 03 00 00 00       	call   80107d89 <switchkvm>
+}
+80107d86:	90                   	nop
+80107d87:	c9                   	leave  
+80107d88:	c3                   	ret    
+
+80107d89 <switchkvm>:
+
+// Switch h/w page table register to the kernel-only page table,
+// for when no process is running.
+void
+switchkvm(void)
+{
+80107d89:	55                   	push   %ebp
+80107d8a:	89 e5                	mov    %esp,%ebp
+  lcr3(v2p(kpgdir));   // switch to the kernel page table
+80107d8c:	a1 38 52 11 80       	mov    0x80115238,%eax
+80107d91:	50                   	push   %eax
+80107d92:	e8 69 f9 ff ff       	call   80107700 <v2p>
+80107d97:	83 c4 04             	add    $0x4,%esp
+80107d9a:	50                   	push   %eax
+80107d9b:	e8 54 f9 ff ff       	call   801076f4 <lcr3>
+80107da0:	83 c4 04             	add    $0x4,%esp
+}
+80107da3:	90                   	nop
+80107da4:	c9                   	leave  
+80107da5:	c3                   	ret    
+
+80107da6 <switchuvm>:
+
+// Switch TSS and h/w page table to correspond to process p.
+void
+switchuvm(struct proc *p)
+{
+80107da6:	55                   	push   %ebp
+80107da7:	89 e5                	mov    %esp,%ebp
+80107da9:	56                   	push   %esi
+80107daa:	53                   	push   %ebx
+  pushcli();
+80107dab:	e8 03 d3 ff ff       	call   801050b3 <pushcli>
+  cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
+80107db0:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80107db6:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
+80107dbd:	83 c2 08             	add    $0x8,%edx
+80107dc0:	89 d6                	mov    %edx,%esi
+80107dc2:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
+80107dc9:	83 c2 08             	add    $0x8,%edx
+80107dcc:	c1 ea 10             	shr    $0x10,%edx
+80107dcf:	89 d3                	mov    %edx,%ebx
+80107dd1:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
+80107dd8:	83 c2 08             	add    $0x8,%edx
+80107ddb:	c1 ea 18             	shr    $0x18,%edx
+80107dde:	89 d1                	mov    %edx,%ecx
+80107de0:	66 c7 80 a0 00 00 00 	movw   $0x67,0xa0(%eax)
+80107de7:	67 00 
+80107de9:	66 89 b0 a2 00 00 00 	mov    %si,0xa2(%eax)
+80107df0:	88 98 a4 00 00 00    	mov    %bl,0xa4(%eax)
+80107df6:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
+80107dfd:	83 e2 f0             	and    $0xfffffff0,%edx
+80107e00:	83 ca 09             	or     $0x9,%edx
+80107e03:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
+80107e09:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
+80107e10:	83 ca 10             	or     $0x10,%edx
+80107e13:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
+80107e19:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
+80107e20:	83 e2 9f             	and    $0xffffff9f,%edx
+80107e23:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
+80107e29:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
+80107e30:	83 ca 80             	or     $0xffffff80,%edx
+80107e33:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
+80107e39:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
+80107e40:	83 e2 f0             	and    $0xfffffff0,%edx
+80107e43:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
+80107e49:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
+80107e50:	83 e2 ef             	and    $0xffffffef,%edx
+80107e53:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
+80107e59:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
+80107e60:	83 e2 df             	and    $0xffffffdf,%edx
+80107e63:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
+80107e69:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
+80107e70:	83 ca 40             	or     $0x40,%edx
+80107e73:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
+80107e79:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
+80107e80:	83 e2 7f             	and    $0x7f,%edx
+80107e83:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
+80107e89:	88 88 a7 00 00 00    	mov    %cl,0xa7(%eax)
+  cpu->gdt[SEG_TSS].s = 0;
+80107e8f:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80107e95:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
+80107e9c:	83 e2 ef             	and    $0xffffffef,%edx
+80107e9f:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
+  cpu->ts.ss0 = SEG_KDATA << 3;
+80107ea5:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80107eab:	66 c7 40 10 10 00    	movw   $0x10,0x10(%eax)
+  cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
+80107eb1:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
+80107eb7:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
+80107ebe:	8b 52 08             	mov    0x8(%edx),%edx
+80107ec1:	81 c2 00 10 00 00    	add    $0x1000,%edx
+80107ec7:	89 50 0c             	mov    %edx,0xc(%eax)
+  ltr(SEG_TSS << 3);
+80107eca:	83 ec 0c             	sub    $0xc,%esp
+80107ecd:	6a 30                	push   $0x30
+80107ecf:	e8 f3 f7 ff ff       	call   801076c7 <ltr>
+80107ed4:	83 c4 10             	add    $0x10,%esp
+  if(p->pgdir == 0)
+80107ed7:	8b 45 08             	mov    0x8(%ebp),%eax
+80107eda:	8b 40 04             	mov    0x4(%eax),%eax
+80107edd:	85 c0                	test   %eax,%eax
+80107edf:	75 0d                	jne    80107eee <switchuvm+0x148>
+    panic("switchuvm: no pgdir");
+80107ee1:	83 ec 0c             	sub    $0xc,%esp
+80107ee4:	68 a3 8a 10 80       	push   $0x80108aa3
+80107ee9:	e8 78 86 ff ff       	call   80100566 <panic>
+  lcr3(v2p(p->pgdir));  // switch to new address space
+80107eee:	8b 45 08             	mov    0x8(%ebp),%eax
+80107ef1:	8b 40 04             	mov    0x4(%eax),%eax
+80107ef4:	83 ec 0c             	sub    $0xc,%esp
+80107ef7:	50                   	push   %eax
+80107ef8:	e8 03 f8 ff ff       	call   80107700 <v2p>
+80107efd:	83 c4 10             	add    $0x10,%esp
+80107f00:	83 ec 0c             	sub    $0xc,%esp
+80107f03:	50                   	push   %eax
+80107f04:	e8 eb f7 ff ff       	call   801076f4 <lcr3>
+80107f09:	83 c4 10             	add    $0x10,%esp
+  popcli();
+80107f0c:	e8 e7 d1 ff ff       	call   801050f8 <popcli>
+}
+80107f11:	90                   	nop
+80107f12:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107f15:	5b                   	pop    %ebx
+80107f16:	5e                   	pop    %esi
+80107f17:	5d                   	pop    %ebp
+80107f18:	c3                   	ret    
+
+80107f19 <inituvm>:
+
+// Load the initcode into address 0 of pgdir.
+// sz must be less than a page.
+void
+inituvm(pde_t *pgdir, char *init, uint sz)
+{
+80107f19:	55                   	push   %ebp
+80107f1a:	89 e5                	mov    %esp,%ebp
+80107f1c:	83 ec 18             	sub    $0x18,%esp
+  char *mem;
+  
+  if(sz >= PGSIZE)
+80107f1f:	81 7d 10 ff 0f 00 00 	cmpl   $0xfff,0x10(%ebp)
+80107f26:	76 0d                	jbe    80107f35 <inituvm+0x1c>
+    panic("inituvm: more than a page");
+80107f28:	83 ec 0c             	sub    $0xc,%esp
+80107f2b:	68 b7 8a 10 80       	push   $0x80108ab7
+80107f30:	e8 31 86 ff ff       	call   80100566 <panic>
+  mem = kalloc();
+80107f35:	e8 8b ac ff ff       	call   80102bc5 <kalloc>
+80107f3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  memset(mem, 0, PGSIZE);
+80107f3d:	83 ec 04             	sub    $0x4,%esp
+80107f40:	68 00 10 00 00       	push   $0x1000
+80107f45:	6a 00                	push   $0x0
+80107f47:	ff 75 f4             	pushl  -0xc(%ebp)
+80107f4a:	e8 6a d2 ff ff       	call   801051b9 <memset>
+80107f4f:	83 c4 10             	add    $0x10,%esp
+  mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
+80107f52:	83 ec 0c             	sub    $0xc,%esp
+80107f55:	ff 75 f4             	pushl  -0xc(%ebp)
+80107f58:	e8 a3 f7 ff ff       	call   80107700 <v2p>
+80107f5d:	83 c4 10             	add    $0x10,%esp
+80107f60:	83 ec 0c             	sub    $0xc,%esp
+80107f63:	6a 06                	push   $0x6
+80107f65:	50                   	push   %eax
+80107f66:	68 00 10 00 00       	push   $0x1000
+80107f6b:	6a 00                	push   $0x0
+80107f6d:	ff 75 08             	pushl  0x8(%ebp)
+80107f70:	e8 ba fc ff ff       	call   80107c2f <mappages>
+80107f75:	83 c4 20             	add    $0x20,%esp
+  memmove(mem, init, sz);
+80107f78:	83 ec 04             	sub    $0x4,%esp
+80107f7b:	ff 75 10             	pushl  0x10(%ebp)
+80107f7e:	ff 75 0c             	pushl  0xc(%ebp)
+80107f81:	ff 75 f4             	pushl  -0xc(%ebp)
+80107f84:	e8 ef d2 ff ff       	call   80105278 <memmove>
+80107f89:	83 c4 10             	add    $0x10,%esp
+}
+80107f8c:	90                   	nop
+80107f8d:	c9                   	leave  
+80107f8e:	c3                   	ret    
+
+80107f8f <loaduvm>:
+
+// Load a program segment into pgdir.  addr must be page-aligned
+// and the pages from addr to addr+sz must already be mapped.
+int
+loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
+{
+80107f8f:	55                   	push   %ebp
+80107f90:	89 e5                	mov    %esp,%ebp
+80107f92:	53                   	push   %ebx
+80107f93:	83 ec 14             	sub    $0x14,%esp
+  uint i, pa, n;
+  pte_t *pte;
+
+  if((uint) addr % PGSIZE != 0)
+80107f96:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107f99:	25 ff 0f 00 00       	and    $0xfff,%eax
+80107f9e:	85 c0                	test   %eax,%eax
+80107fa0:	74 0d                	je     80107faf <loaduvm+0x20>
+    panic("loaduvm: addr must be page aligned");
+80107fa2:	83 ec 0c             	sub    $0xc,%esp
+80107fa5:	68 d4 8a 10 80       	push   $0x80108ad4
+80107faa:	e8 b7 85 ff ff       	call   80100566 <panic>
+  for(i = 0; i < sz; i += PGSIZE){
+80107faf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80107fb6:	e9 95 00 00 00       	jmp    80108050 <loaduvm+0xc1>
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+80107fbb:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80107fc1:	01 d0                	add    %edx,%eax
+80107fc3:	83 ec 04             	sub    $0x4,%esp
+80107fc6:	6a 00                	push   $0x0
+80107fc8:	50                   	push   %eax
+80107fc9:	ff 75 08             	pushl  0x8(%ebp)
+80107fcc:	e8 be fb ff ff       	call   80107b8f <walkpgdir>
+80107fd1:	83 c4 10             	add    $0x10,%esp
+80107fd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+80107fd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+80107fdb:	75 0d                	jne    80107fea <loaduvm+0x5b>
+      panic("loaduvm: address should exist");
+80107fdd:	83 ec 0c             	sub    $0xc,%esp
+80107fe0:	68 f7 8a 10 80       	push   $0x80108af7
+80107fe5:	e8 7c 85 ff ff       	call   80100566 <panic>
+    pa = PTE_ADDR(*pte);
+80107fea:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80107fed:	8b 00                	mov    (%eax),%eax
+80107fef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107ff4:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    if(sz - i < PGSIZE)
+80107ff7:	8b 45 18             	mov    0x18(%ebp),%eax
+80107ffa:	2b 45 f4             	sub    -0xc(%ebp),%eax
+80107ffd:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+80108002:	77 0b                	ja     8010800f <loaduvm+0x80>
+      n = sz - i;
+80108004:	8b 45 18             	mov    0x18(%ebp),%eax
+80108007:	2b 45 f4             	sub    -0xc(%ebp),%eax
+8010800a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+8010800d:	eb 07                	jmp    80108016 <loaduvm+0x87>
+    else
+      n = PGSIZE;
+8010800f:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
+    if(readi(ip, p2v(pa), offset+i, n) != n)
+80108016:	8b 55 14             	mov    0x14(%ebp),%edx
+80108019:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010801c:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
+8010801f:	83 ec 0c             	sub    $0xc,%esp
+80108022:	ff 75 e8             	pushl  -0x18(%ebp)
+80108025:	e8 e3 f6 ff ff       	call   8010770d <p2v>
+8010802a:	83 c4 10             	add    $0x10,%esp
+8010802d:	ff 75 f0             	pushl  -0x10(%ebp)
+80108030:	53                   	push   %ebx
+80108031:	50                   	push   %eax
+80108032:	ff 75 10             	pushl  0x10(%ebp)
+80108035:	e8 39 9e ff ff       	call   80101e73 <readi>
+8010803a:	83 c4 10             	add    $0x10,%esp
+8010803d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+80108040:	74 07                	je     80108049 <loaduvm+0xba>
+      return -1;
+80108042:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80108047:	eb 18                	jmp    80108061 <loaduvm+0xd2>
+  uint i, pa, n;
+  pte_t *pte;
+
+  if((uint) addr % PGSIZE != 0)
+    panic("loaduvm: addr must be page aligned");
+  for(i = 0; i < sz; i += PGSIZE){
+80108049:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+80108050:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80108053:	3b 45 18             	cmp    0x18(%ebp),%eax
+80108056:	0f 82 5f ff ff ff    	jb     80107fbb <loaduvm+0x2c>
+    else
+      n = PGSIZE;
+    if(readi(ip, p2v(pa), offset+i, n) != n)
+      return -1;
+  }
+  return 0;
+8010805c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+80108061:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80108064:	c9                   	leave  
+80108065:	c3                   	ret    
+
+80108066 <allocuvm>:
+
+// Allocate page tables and physical memory to grow process from oldsz to
+// newsz, which need not be page aligned.  Returns new size or 0 on error.
+int
+allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+{
+80108066:	55                   	push   %ebp
+80108067:	89 e5                	mov    %esp,%ebp
+80108069:	83 ec 18             	sub    $0x18,%esp
+  char *mem;
+  uint a;
+
+  if(newsz >= KERNBASE)
+8010806c:	8b 45 10             	mov    0x10(%ebp),%eax
+8010806f:	85 c0                	test   %eax,%eax
+80108071:	79 0a                	jns    8010807d <allocuvm+0x17>
+    return 0;
+80108073:	b8 00 00 00 00       	mov    $0x0,%eax
+80108078:	e9 b0 00 00 00       	jmp    8010812d <allocuvm+0xc7>
+  if(newsz < oldsz)
+8010807d:	8b 45 10             	mov    0x10(%ebp),%eax
+80108080:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80108083:	73 08                	jae    8010808d <allocuvm+0x27>
+    return oldsz;
+80108085:	8b 45 0c             	mov    0xc(%ebp),%eax
+80108088:	e9 a0 00 00 00       	jmp    8010812d <allocuvm+0xc7>
+
+  a = PGROUNDUP(oldsz);
+8010808d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80108090:	05 ff 0f 00 00       	add    $0xfff,%eax
+80108095:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010809a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  for(; a < newsz; a += PGSIZE){
+8010809d:	eb 7f                	jmp    8010811e <allocuvm+0xb8>
+    mem = kalloc();
+8010809f:	e8 21 ab ff ff       	call   80102bc5 <kalloc>
+801080a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(mem == 0){
+801080a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+801080ab:	75 2b                	jne    801080d8 <allocuvm+0x72>
+      cprintf("allocuvm out of memory\n");
+801080ad:	83 ec 0c             	sub    $0xc,%esp
+801080b0:	68 15 8b 10 80       	push   $0x80108b15
+801080b5:	e8 0c 83 ff ff       	call   801003c6 <cprintf>
+801080ba:	83 c4 10             	add    $0x10,%esp
+      deallocuvm(pgdir, newsz, oldsz);
+801080bd:	83 ec 04             	sub    $0x4,%esp
+801080c0:	ff 75 0c             	pushl  0xc(%ebp)
+801080c3:	ff 75 10             	pushl  0x10(%ebp)
+801080c6:	ff 75 08             	pushl  0x8(%ebp)
+801080c9:	e8 61 00 00 00       	call   8010812f <deallocuvm>
+801080ce:	83 c4 10             	add    $0x10,%esp
+      return 0;
+801080d1:	b8 00 00 00 00       	mov    $0x0,%eax
+801080d6:	eb 55                	jmp    8010812d <allocuvm+0xc7>
+    }
+    memset(mem, 0, PGSIZE);
+801080d8:	83 ec 04             	sub    $0x4,%esp
+801080db:	68 00 10 00 00       	push   $0x1000
+801080e0:	6a 00                	push   $0x0
+801080e2:	ff 75 f0             	pushl  -0x10(%ebp)
+801080e5:	e8 cf d0 ff ff       	call   801051b9 <memset>
+801080ea:	83 c4 10             	add    $0x10,%esp
+    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
+801080ed:	83 ec 0c             	sub    $0xc,%esp
+801080f0:	ff 75 f0             	pushl  -0x10(%ebp)
+801080f3:	e8 08 f6 ff ff       	call   80107700 <v2p>
+801080f8:	83 c4 10             	add    $0x10,%esp
+801080fb:	89 c2                	mov    %eax,%edx
+801080fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80108100:	83 ec 0c             	sub    $0xc,%esp
+80108103:	6a 06                	push   $0x6
+80108105:	52                   	push   %edx
+80108106:	68 00 10 00 00       	push   $0x1000
+8010810b:	50                   	push   %eax
+8010810c:	ff 75 08             	pushl  0x8(%ebp)
+8010810f:	e8 1b fb ff ff       	call   80107c2f <mappages>
+80108114:	83 c4 20             	add    $0x20,%esp
+    return 0;
+  if(newsz < oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(oldsz);
+  for(; a < newsz; a += PGSIZE){
+80108117:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+8010811e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80108121:	3b 45 10             	cmp    0x10(%ebp),%eax
+80108124:	0f 82 75 ff ff ff    	jb     8010809f <allocuvm+0x39>
+      return 0;
+    }
+    memset(mem, 0, PGSIZE);
+    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
+  }
+  return newsz;
+8010812a:	8b 45 10             	mov    0x10(%ebp),%eax
+}
+8010812d:	c9                   	leave  
+8010812e:	c3                   	ret    
+
+8010812f <deallocuvm>:
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+{
+8010812f:	55                   	push   %ebp
+80108130:	89 e5                	mov    %esp,%ebp
+80108132:	83 ec 18             	sub    $0x18,%esp
+  pte_t *pte;
+  uint a, pa;
+
+  if(newsz >= oldsz)
+80108135:	8b 45 10             	mov    0x10(%ebp),%eax
+80108138:	3b 45 0c             	cmp    0xc(%ebp),%eax
+8010813b:	72 08                	jb     80108145 <deallocuvm+0x16>
+    return oldsz;
+8010813d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80108140:	e9 a5 00 00 00       	jmp    801081ea <deallocuvm+0xbb>
+
+  a = PGROUNDUP(newsz);
+80108145:	8b 45 10             	mov    0x10(%ebp),%eax
+80108148:	05 ff 0f 00 00       	add    $0xfff,%eax
+8010814d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108152:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  for(; a  < oldsz; a += PGSIZE){
+80108155:	e9 81 00 00 00       	jmp    801081db <deallocuvm+0xac>
+    pte = walkpgdir(pgdir, (char*)a, 0);
+8010815a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010815d:	83 ec 04             	sub    $0x4,%esp
+80108160:	6a 00                	push   $0x0
+80108162:	50                   	push   %eax
+80108163:	ff 75 08             	pushl  0x8(%ebp)
+80108166:	e8 24 fa ff ff       	call   80107b8f <walkpgdir>
+8010816b:	83 c4 10             	add    $0x10,%esp
+8010816e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(!pte)
+80108171:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+80108175:	75 09                	jne    80108180 <deallocuvm+0x51>
+      a += (NPTENTRIES - 1) * PGSIZE;
+80108177:	81 45 f4 00 f0 3f 00 	addl   $0x3ff000,-0xc(%ebp)
+8010817e:	eb 54                	jmp    801081d4 <deallocuvm+0xa5>
+    else if((*pte & PTE_P) != 0){
+80108180:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80108183:	8b 00                	mov    (%eax),%eax
+80108185:	83 e0 01             	and    $0x1,%eax
+80108188:	85 c0                	test   %eax,%eax
+8010818a:	74 48                	je     801081d4 <deallocuvm+0xa5>
+      pa = PTE_ADDR(*pte);
+8010818c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010818f:	8b 00                	mov    (%eax),%eax
+80108191:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108196:	89 45 ec             	mov    %eax,-0x14(%ebp)
+      if(pa == 0)
+80108199:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+8010819d:	75 0d                	jne    801081ac <deallocuvm+0x7d>
+        panic("kfree");
+8010819f:	83 ec 0c             	sub    $0xc,%esp
+801081a2:	68 2d 8b 10 80       	push   $0x80108b2d
+801081a7:	e8 ba 83 ff ff       	call   80100566 <panic>
+      char *v = p2v(pa);
+801081ac:	83 ec 0c             	sub    $0xc,%esp
+801081af:	ff 75 ec             	pushl  -0x14(%ebp)
+801081b2:	e8 56 f5 ff ff       	call   8010770d <p2v>
+801081b7:	83 c4 10             	add    $0x10,%esp
+801081ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
+      kfree(v);
+801081bd:	83 ec 0c             	sub    $0xc,%esp
+801081c0:	ff 75 e8             	pushl  -0x18(%ebp)
+801081c3:	e8 60 a9 ff ff       	call   80102b28 <kfree>
+801081c8:	83 c4 10             	add    $0x10,%esp
+      *pte = 0;
+801081cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801081ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+  for(; a  < oldsz; a += PGSIZE){
+801081d4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+801081db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801081de:	3b 45 0c             	cmp    0xc(%ebp),%eax
+801081e1:	0f 82 73 ff ff ff    	jb     8010815a <deallocuvm+0x2b>
+      char *v = p2v(pa);
+      kfree(v);
+      *pte = 0;
+    }
+  }
+  return newsz;
+801081e7:	8b 45 10             	mov    0x10(%ebp),%eax
+}
+801081ea:	c9                   	leave  
+801081eb:	c3                   	ret    
+
+801081ec <freevm>:
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+801081ec:	55                   	push   %ebp
+801081ed:	89 e5                	mov    %esp,%ebp
+801081ef:	83 ec 18             	sub    $0x18,%esp
+  uint i;
+
+  if(pgdir == 0)
+801081f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+801081f6:	75 0d                	jne    80108205 <freevm+0x19>
+    panic("freevm: no pgdir");
+801081f8:	83 ec 0c             	sub    $0xc,%esp
+801081fb:	68 33 8b 10 80       	push   $0x80108b33
+80108200:	e8 61 83 ff ff       	call   80100566 <panic>
+  deallocuvm(pgdir, KERNBASE, 0);
+80108205:	83 ec 04             	sub    $0x4,%esp
+80108208:	6a 00                	push   $0x0
+8010820a:	68 00 00 00 80       	push   $0x80000000
+8010820f:	ff 75 08             	pushl  0x8(%ebp)
+80108212:	e8 18 ff ff ff       	call   8010812f <deallocuvm>
+80108217:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < NPDENTRIES; i++){
+8010821a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+80108221:	eb 4f                	jmp    80108272 <freevm+0x86>
+    if(pgdir[i] & PTE_P){
+80108223:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80108226:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+8010822d:	8b 45 08             	mov    0x8(%ebp),%eax
+80108230:	01 d0                	add    %edx,%eax
+80108232:	8b 00                	mov    (%eax),%eax
+80108234:	83 e0 01             	and    $0x1,%eax
+80108237:	85 c0                	test   %eax,%eax
+80108239:	74 33                	je     8010826e <freevm+0x82>
+      char * v = p2v(PTE_ADDR(pgdir[i]));
+8010823b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010823e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+80108245:	8b 45 08             	mov    0x8(%ebp),%eax
+80108248:	01 d0                	add    %edx,%eax
+8010824a:	8b 00                	mov    (%eax),%eax
+8010824c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108251:	83 ec 0c             	sub    $0xc,%esp
+80108254:	50                   	push   %eax
+80108255:	e8 b3 f4 ff ff       	call   8010770d <p2v>
+8010825a:	83 c4 10             	add    $0x10,%esp
+8010825d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+      kfree(v);
+80108260:	83 ec 0c             	sub    $0xc,%esp
+80108263:	ff 75 f0             	pushl  -0x10(%ebp)
+80108266:	e8 bd a8 ff ff       	call   80102b28 <kfree>
+8010826b:	83 c4 10             	add    $0x10,%esp
+  uint i;
+
+  if(pgdir == 0)
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+8010826e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+80108272:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
+80108279:	76 a8                	jbe    80108223 <freevm+0x37>
+    if(pgdir[i] & PTE_P){
+      char * v = p2v(PTE_ADDR(pgdir[i]));
+      kfree(v);
+    }
+  }
+  kfree((char*)pgdir);
+8010827b:	83 ec 0c             	sub    $0xc,%esp
+8010827e:	ff 75 08             	pushl  0x8(%ebp)
+80108281:	e8 a2 a8 ff ff       	call   80102b28 <kfree>
+80108286:	83 c4 10             	add    $0x10,%esp
+}
+80108289:	90                   	nop
+8010828a:	c9                   	leave  
+8010828b:	c3                   	ret    
+
+8010828c <clearpteu>:
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+8010828c:	55                   	push   %ebp
+8010828d:	89 e5                	mov    %esp,%ebp
+8010828f:	83 ec 18             	sub    $0x18,%esp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80108292:	83 ec 04             	sub    $0x4,%esp
+80108295:	6a 00                	push   $0x0
+80108297:	ff 75 0c             	pushl  0xc(%ebp)
+8010829a:	ff 75 08             	pushl  0x8(%ebp)
+8010829d:	e8 ed f8 ff ff       	call   80107b8f <walkpgdir>
+801082a2:	83 c4 10             	add    $0x10,%esp
+801082a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(pte == 0)
+801082a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+801082ac:	75 0d                	jne    801082bb <clearpteu+0x2f>
+    panic("clearpteu");
+801082ae:	83 ec 0c             	sub    $0xc,%esp
+801082b1:	68 44 8b 10 80       	push   $0x80108b44
+801082b6:	e8 ab 82 ff ff       	call   80100566 <panic>
+  *pte &= ~PTE_U;
+801082bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801082be:	8b 00                	mov    (%eax),%eax
+801082c0:	83 e0 fb             	and    $0xfffffffb,%eax
+801082c3:	89 c2                	mov    %eax,%edx
+801082c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801082c8:	89 10                	mov    %edx,(%eax)
+}
+801082ca:	90                   	nop
+801082cb:	c9                   	leave  
+801082cc:	c3                   	ret    
+
+801082cd <copyuvm>:
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+801082cd:	55                   	push   %ebp
+801082ce:	89 e5                	mov    %esp,%ebp
+801082d0:	53                   	push   %ebx
+801082d1:	83 ec 24             	sub    $0x24,%esp
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+801082d4:	e8 e6 f9 ff ff       	call   80107cbf <setupkvm>
+801082d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+801082dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+801082e0:	75 0a                	jne    801082ec <copyuvm+0x1f>
+    return 0;
+801082e2:	b8 00 00 00 00       	mov    $0x0,%eax
+801082e7:	e9 f8 00 00 00       	jmp    801083e4 <copyuvm+0x117>
+  for(i = 0; i < sz; i += PGSIZE){
+801082ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+801082f3:	e9 c4 00 00 00       	jmp    801083bc <copyuvm+0xef>
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+801082f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801082fb:	83 ec 04             	sub    $0x4,%esp
+801082fe:	6a 00                	push   $0x0
+80108300:	50                   	push   %eax
+80108301:	ff 75 08             	pushl  0x8(%ebp)
+80108304:	e8 86 f8 ff ff       	call   80107b8f <walkpgdir>
+80108309:	83 c4 10             	add    $0x10,%esp
+8010830c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+8010830f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+80108313:	75 0d                	jne    80108322 <copyuvm+0x55>
+      panic("copyuvm: pte should exist");
+80108315:	83 ec 0c             	sub    $0xc,%esp
+80108318:	68 4e 8b 10 80       	push   $0x80108b4e
+8010831d:	e8 44 82 ff ff       	call   80100566 <panic>
+    if(!(*pte & PTE_P))
+80108322:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80108325:	8b 00                	mov    (%eax),%eax
+80108327:	83 e0 01             	and    $0x1,%eax
+8010832a:	85 c0                	test   %eax,%eax
+8010832c:	75 0d                	jne    8010833b <copyuvm+0x6e>
+      panic("copyuvm: page not present");
+8010832e:	83 ec 0c             	sub    $0xc,%esp
+80108331:	68 68 8b 10 80       	push   $0x80108b68
+80108336:	e8 2b 82 ff ff       	call   80100566 <panic>
+    pa = PTE_ADDR(*pte);
+8010833b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010833e:	8b 00                	mov    (%eax),%eax
+80108340:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108345:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    flags = PTE_FLAGS(*pte);
+80108348:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010834b:	8b 00                	mov    (%eax),%eax
+8010834d:	25 ff 0f 00 00       	and    $0xfff,%eax
+80108352:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if((mem = kalloc()) == 0)
+80108355:	e8 6b a8 ff ff       	call   80102bc5 <kalloc>
+8010835a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010835d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+80108361:	74 6a                	je     801083cd <copyuvm+0x100>
+      goto bad;
+    memmove(mem, (char*)p2v(pa), PGSIZE);
+80108363:	83 ec 0c             	sub    $0xc,%esp
+80108366:	ff 75 e8             	pushl  -0x18(%ebp)
+80108369:	e8 9f f3 ff ff       	call   8010770d <p2v>
+8010836e:	83 c4 10             	add    $0x10,%esp
+80108371:	83 ec 04             	sub    $0x4,%esp
+80108374:	68 00 10 00 00       	push   $0x1000
+80108379:	50                   	push   %eax
+8010837a:	ff 75 e0             	pushl  -0x20(%ebp)
+8010837d:	e8 f6 ce ff ff       	call   80105278 <memmove>
+80108382:	83 c4 10             	add    $0x10,%esp
+    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
+80108385:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80108388:	83 ec 0c             	sub    $0xc,%esp
+8010838b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010838e:	e8 6d f3 ff ff       	call   80107700 <v2p>
+80108393:	83 c4 10             	add    $0x10,%esp
+80108396:	89 c2                	mov    %eax,%edx
+80108398:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010839b:	83 ec 0c             	sub    $0xc,%esp
+8010839e:	53                   	push   %ebx
+8010839f:	52                   	push   %edx
+801083a0:	68 00 10 00 00       	push   $0x1000
+801083a5:	50                   	push   %eax
+801083a6:	ff 75 f0             	pushl  -0x10(%ebp)
+801083a9:	e8 81 f8 ff ff       	call   80107c2f <mappages>
+801083ae:	83 c4 20             	add    $0x20,%esp
+801083b1:	85 c0                	test   %eax,%eax
+801083b3:	78 1b                	js     801083d0 <copyuvm+0x103>
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+801083b5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+801083bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801083bf:	3b 45 0c             	cmp    0xc(%ebp),%eax
+801083c2:	0f 82 30 ff ff ff    	jb     801082f8 <copyuvm+0x2b>
+      goto bad;
+    memmove(mem, (char*)p2v(pa), PGSIZE);
+    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
+      goto bad;
+  }
+  return d;
+801083c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801083cb:	eb 17                	jmp    801083e4 <copyuvm+0x117>
+    if(!(*pte & PTE_P))
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+801083cd:	90                   	nop
+801083ce:	eb 01                	jmp    801083d1 <copyuvm+0x104>
+    memmove(mem, (char*)p2v(pa), PGSIZE);
+    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
+      goto bad;
+801083d0:	90                   	nop
+  }
+  return d;
+
+bad:
+  freevm(d);
+801083d1:	83 ec 0c             	sub    $0xc,%esp
+801083d4:	ff 75 f0             	pushl  -0x10(%ebp)
+801083d7:	e8 10 fe ff ff       	call   801081ec <freevm>
+801083dc:	83 c4 10             	add    $0x10,%esp
+  return 0;
+801083df:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801083e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801083e7:	c9                   	leave  
+801083e8:	c3                   	ret    
+
+801083e9 <uva2ka>:
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+801083e9:	55                   	push   %ebp
+801083ea:	89 e5                	mov    %esp,%ebp
+801083ec:	83 ec 18             	sub    $0x18,%esp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+801083ef:	83 ec 04             	sub    $0x4,%esp
+801083f2:	6a 00                	push   $0x0
+801083f4:	ff 75 0c             	pushl  0xc(%ebp)
+801083f7:	ff 75 08             	pushl  0x8(%ebp)
+801083fa:	e8 90 f7 ff ff       	call   80107b8f <walkpgdir>
+801083ff:	83 c4 10             	add    $0x10,%esp
+80108402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if((*pte & PTE_P) == 0)
+80108405:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80108408:	8b 00                	mov    (%eax),%eax
+8010840a:	83 e0 01             	and    $0x1,%eax
+8010840d:	85 c0                	test   %eax,%eax
+8010840f:	75 07                	jne    80108418 <uva2ka+0x2f>
+    return 0;
+80108411:	b8 00 00 00 00       	mov    $0x0,%eax
+80108416:	eb 29                	jmp    80108441 <uva2ka+0x58>
+  if((*pte & PTE_U) == 0)
+80108418:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010841b:	8b 00                	mov    (%eax),%eax
+8010841d:	83 e0 04             	and    $0x4,%eax
+80108420:	85 c0                	test   %eax,%eax
+80108422:	75 07                	jne    8010842b <uva2ka+0x42>
+    return 0;
+80108424:	b8 00 00 00 00       	mov    $0x0,%eax
+80108429:	eb 16                	jmp    80108441 <uva2ka+0x58>
+  return (char*)p2v(PTE_ADDR(*pte));
+8010842b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010842e:	8b 00                	mov    (%eax),%eax
+80108430:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108435:	83 ec 0c             	sub    $0xc,%esp
+80108438:	50                   	push   %eax
+80108439:	e8 cf f2 ff ff       	call   8010770d <p2v>
+8010843e:	83 c4 10             	add    $0x10,%esp
+}
+80108441:	c9                   	leave  
+80108442:	c3                   	ret    
+
+80108443 <copyout>:
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+80108443:	55                   	push   %ebp
+80108444:	89 e5                	mov    %esp,%ebp
+80108446:	83 ec 18             	sub    $0x18,%esp
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+80108449:	8b 45 10             	mov    0x10(%ebp),%eax
+8010844c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  while(len > 0){
+8010844f:	eb 7f                	jmp    801084d0 <copyout+0x8d>
+    va0 = (uint)PGROUNDDOWN(va);
+80108451:	8b 45 0c             	mov    0xc(%ebp),%eax
+80108454:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108459:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    pa0 = uva2ka(pgdir, (char*)va0);
+8010845c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010845f:	83 ec 08             	sub    $0x8,%esp
+80108462:	50                   	push   %eax
+80108463:	ff 75 08             	pushl  0x8(%ebp)
+80108466:	e8 7e ff ff ff       	call   801083e9 <uva2ka>
+8010846b:	83 c4 10             	add    $0x10,%esp
+8010846e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    if(pa0 == 0)
+80108471:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+80108475:	75 07                	jne    8010847e <copyout+0x3b>
+      return -1;
+80108477:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010847c:	eb 61                	jmp    801084df <copyout+0x9c>
+    n = PGSIZE - (va - va0);
+8010847e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80108481:	2b 45 0c             	sub    0xc(%ebp),%eax
+80108484:	05 00 10 00 00       	add    $0x1000,%eax
+80108489:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(n > len)
+8010848c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010848f:	3b 45 14             	cmp    0x14(%ebp),%eax
+80108492:	76 06                	jbe    8010849a <copyout+0x57>
+      n = len;
+80108494:	8b 45 14             	mov    0x14(%ebp),%eax
+80108497:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    memmove(pa0 + (va - va0), buf, n);
+8010849a:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010849d:	2b 45 ec             	sub    -0x14(%ebp),%eax
+801084a0:	89 c2                	mov    %eax,%edx
+801084a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+801084a5:	01 d0                	add    %edx,%eax
+801084a7:	83 ec 04             	sub    $0x4,%esp
+801084aa:	ff 75 f0             	pushl  -0x10(%ebp)
+801084ad:	ff 75 f4             	pushl  -0xc(%ebp)
+801084b0:	50                   	push   %eax
+801084b1:	e8 c2 cd ff ff       	call   80105278 <memmove>
+801084b6:	83 c4 10             	add    $0x10,%esp
+    len -= n;
+801084b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801084bc:	29 45 14             	sub    %eax,0x14(%ebp)
+    buf += n;
+801084bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801084c2:	01 45 f4             	add    %eax,-0xc(%ebp)
+    va = va0 + PGSIZE;
+801084c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801084c8:	05 00 10 00 00       	add    $0x1000,%eax
+801084cd:	89 45 0c             	mov    %eax,0xc(%ebp)
+{
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+801084d0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+801084d4:	0f 85 77 ff ff ff    	jne    80108451 <copyout+0xe>
+    memmove(pa0 + (va - va0), buf, n);
+    len -= n;
+    buf += n;
+    va = va0 + PGSIZE;
+  }
+  return 0;
+801084da:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+801084df:	c9                   	leave  
+801084e0:	c3                   	ret    
Los archivos binarios xv6-unrc/._kernel.ld y xv6-mod/._kernel.ld son distintos
diff -rupN xv6-unrc/kernel.sym xv6-mod/kernel.sym
--- xv6-unrc/kernel.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/kernel.sym	2018-04-04 15:21:50.372267295 -0300
@@ -0,0 +1,579 @@
+80100000 .text
+801084e4 .rodata
+80108b82 .stab
+80108b83 .stabstr
+80109000 .data
+8010b5a0 .bss
+00000000 .debug_line
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_aranges
+00000000 .debug_loc
+00000000 .debug_str
+00000000 .comment
+00000000 .debug_ranges
+00000000 bio.c
+801000b3 bget
+00000000 console.c
+801002d4 inb
+801002f1 outb
+80100310 cli
+8010b5a0 panicked
+8010b5c0 cons
+80100317 printint
+80109004 digits.1592
+80100776 consputc
+80109000 crt
+80100601 cgaputc
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+801013ab bzero
+801013ff balloc
+8010155d bfree
+801017f2 iget
+80101d09 itrunc
+80101bea bmap
+801022ff skipelem
+801023a3 namex
+00000000 ide.c
+801024fa inb
+80102517 insl
+8010253d outb
+8010255c outsl
+8010b600 idelock
+8010b634 idequeue
+8010b638 havedisk1
+80102582 idewait
+80102675 idestart
+00000000 ioapic.c
+80102951 ioapicread
+80102968 ioapicwrite
+00000000 kalloc.c
+80102a81 v2p
+00000000 kbd.c
+80102c1a inb
+80109020 shiftcode
+80109120 togglecode
+80109220 normalmap
+80109320 shiftmap
+80109420 ctlmap
+8010b63c shift.1430
+80109520 charcode.1431
+00000000 lapic.c
+80102d9f inb
+80102dbc outb
+80102ddb readeflags
+80102deb lapicw
+8010b640 n.1511
+80103086 cmos_read
+801030b6 fill_rtcdate
+00000000 log.c
+80103492 recover_from_log
+801032e3 install_trans
+8010339b read_head
+8010340f write_head
+801036bc commit
+80103604 write_log
+00000000 main.c
+801037c2 v2p
+801037cf p2v
+801037dc xchg
+80103911 startothers
+801038cb mpmain
+801038b1 mpenter
+00000000 mp.c
+801039fc p2v
+80103a09 inb
+80103a26 outb
+8010b644 bcpu
+80103a63 sum
+80103a9b mpsearch1
+80103b07 mpsearch
+80103bc3 mpconfig
+00000000 picirq.c
+80103e33 outb
+8010b000 irqmask
+80103e52 picsetmask
+00000000 pipe.c
+00000000 proc.c
+801043aa readeflags
+801043ba sti
+8010b648 initproc
+801043df allocproc
+80104d09 wakeup1
+8010b008 first.1621
+8010b00c states.1646
+00000000 spinlock.c
+80104efc readeflags
+80104f0c cli
+80104f13 sti
+80104f1a xchg
+00000000 string.c
+8010516d stosb
+80105193 stosl
+00000000 syscall.c
+8010b040 syscalls
+00000000 sysfile.c
+8010561a argfd
+8010568f fdalloc
+80105a4c isdirempty
+80105c92 create
+00000000 sysproc.c
+00000000 timer.c
+80106539 outb
+00000000 trap.c
+801065c0 lidt
+801065ea rcr2
+00000000 uart.c
+80106a3a inb
+80106a57 outb
+8010b64c uart
+80106bcf uartgetc
+00000000 vm.c
+8010769d lgdt
+801076c7 ltr
+801076de loadgs
+801076f4 lcr3
+80107700 v2p
+8010770d p2v
+80107b8f walkpgdir
+80107c2f mappages
+8010b4a0 kmap
+8010095f consoleread
+801075f5 vector242
+8010704c vector119
+8010000c entry
+80106f2c vector87
+80106f23 vector86
+801053bc safestrcpy
+80105808 sys_close
+80107661 vector251
+80106f50 vector91
+80106d46 vector33
+80107235 vector162
+80104bf1 yield
+80112260 log
+80112220 kmem
+80107499 vector213
+80106fe9 vector108
+80106a76 uartinit
+80106da0 vector43
+80102f84 lapiceoi
+80106558 timerinit
+80107259 vector165
+80107349 vector185
+80102983 ioapicinit
+80107028 vector115
+80101175 fileread
+80107067 vector122
+801063fd sys_sbrk
+80112340 ioapicid
+801071ed vector156
+80107619 vector245
+80112214 ioapic
+80107379 vector189
+80106c6a vector7
+80106e42 vector61
+80106cf5 vector24
+80107004 vector111
+801073fd vector200
+80106e78 vector67
+80107115 vector138
+80106eb7 vector74
+80104b35 sched
+80105278 memmove
+80106e1e vector57
+80105594 syscall
+801074a5 vector214
+80106f98 vector99
+80101fca writei
+80107139 vector141
+80106390 sys_fork
+8010c660 bcache
+801072ad vector172
+801075e9 vector241
+80112344 ismp
+8010500f getcallerpcs
+80106001 sys_mkdir
+80107679 vector253
+80106c46 vector3
+80106c3d vector2
+80102152 namecmp
+80107541 vector227
+80107475 vector210
+80105563 argstr
+8010751d vector224
+80106d8e vector41
+801003c6 cprintf
+80100fe5 filedup
+801024c3 namei
+80106cda vector21
+80100034 binit
+801072e9 vector177
+80107043 vector118
+80106e93 vector70
+80106e8a vector69
+801075b9 vector237
+80106e5d vector64
+80106d10 vector27
+801070cd vector132
+80107355 vector186
+80105732 sys_read
+801074c9 vector217
+80105442 fetchint
+80107cbf setupkvm
+801052f8 memcpy
+801081ec freevm
+80106c34 vector1
+801072f5 vector178
+80106d73 vector38
+80102b28 kfree
+801075c5 vector238
+80101ad5 iput
+801070d9 vector133
+80106eae vector73
+8010715d vector144
+80107685 vector254
+80101369 readsb
+8010b004 nextpid
+80106faa vector101
+80107481 vector211
+80103c6e mpinit
+801072c5 vector174
+80107601 vector243
+80102f2b cpunum
+80100f5a fileinit
+80115200 gdt
+80104f34 initlock
+8010709d vector128
+80108443 copyout
+80106ef6 vector81
+80104c5d sleep
+80102f9f microdelay
+80106c98 vector13
+80106de8 vector51
+80106caf vector16
+80110780 input
+801075dd vector240
+80106e03 vector54
+80106cc8 vector19
+80106f59 vector92
+8010760d vector244
+80101e2d stati
+8010712d vector140
+801063bc sys_kill
+80106db2 vector45
+80106ee4 vector79
+80104100 pipeclose
+80107559 vector229
+80107205 vector158
+80105858 sys_fstat
+80100a70 consolewrite
+80106d7c vector39
+8010727d vector168
+80103540 end_op
+80106d58 vector35
+80107016 vector113
+80102aeb freerange
+80107082 vector125
+80108066 allocuvm
+801065b5 trapret
+801074bd vector216
+80106e54 vector63
+80106d07 vector26
+801073a9 vector193
+80102e0d lapicinit
+801073cd vector196
+80107469 vector209
+80106c4f vector4
+80107295 vector170
+8010b650 stack
+801070fd vector136
+80106c83 vector10
+80107445 vector206
+80101a63 iunlock
+80106449 sys_sleep
+80107691 vector255
+80107319 vector181
+80106e30 vector59
+80106f1a vector85
+80106f11 vector84
+80107331 vector183
+80107211 vector159
+8010748d vector212
+801058a8 sys_link
+80106dc4 vector47
+8010754d vector228
+80106d97 vector42
+8010701f vector114
+801083e9 uva2ka
+801072d1 vector175
+80107151 vector143
+80100f78 filealloc
+80104d48 wakeup
+801070b5 vector130
+80107625 vector246
+80106c7a vector9
+80107145 vector142
+80106fa1 vector100
+80107409 vector201
+8010828c clearpteu
+801065fb tvinit
+80106e39 vector60
+80106cec vector23
+801018d1 idup
+801075ad vector236
+80102d86 kbdintr
+80105e64 sys_open
+80107571 vector231
+80106e6f vector66
+80106d22 vector29
+80101e73 readi
+801070f1 vector135
+801007dd consoleintr
+80104d7f kill
+80106ed2 vector77
+80101656 ialloc
+8010730d vector180
+80115238 kpgdir
+8010745d vector208
+80103127 cmostime
+80106c12 uartintr
+80106f8f vector98
+80106f86 vector97
+801072dd vector176
+801073b5 vector194
+80106d3d vector32
+8011523c end
+801073f1 vector199
+801070c1 vector131
+8010766d vector252
+8010122d filewrite
+80106c2b vector0
+801054de argint
+80100b56 exec
+80107169 vector145
+8010579d sys_write
+80104fbd release
+8010547c fetchstr
+80106fe0 vector107
+80106d85 vector40
+8010496c wait
+80106fb3 vector102
+8010a000 entrypgdir
+0010000c _start
+80106e15 vector56
+80106e81 vector68
+80106c61 vector6
+8010b50c _binary_initcode_end
+80100000 multiboot_header
+801070a9 vector129
+80104a90 scheduler
+8010216d dirlookup
+801073d9 vector197
+80101036 fileclose
+801034b4 begin_op
+801071bd vector152
+80107d71 kvmalloc
+80107565 vector230
+8010530e strncmp
+80106d6a vector37
+80107439 vector205
+80107229 vector161
+801149a0 tickslock
+801041aa pipewrite
+80105364 strncpy
+80106e9c vector71
+801082cd copyuvm
+80110840 ftable
+8010721d vector160
+80105506 argptr
+801074b1 vector215
+801071f9 vector157
+801056db sys_dup
+8010700d vector112
+80100566 panic
+80104c2c forkret
+80107325 vector182
+80106c91 vector12
+80105220 memcmp
+80102c37 kbdgetc
+80106ff2 vector109
+80106cd1 vector20
+801046a3 fork
+80106dfa vector53
+80106cbf vector18
+0000008a _binary_entryother_size
+80112360 cpus
+80106f74 vector95
+80105089 holding
+80104f56 acquire
+80107535 vector226
+801024df nameiparent
+80106dd6 vector49
+80106da9 vector44
+8011225c lapic
+80106edb vector78
+80106595 alltraps
+801072b9 vector173
+8010703a vector117
+80106eff vector82
+80103e97 picenable
+80107505 vector222
+80106c73 vector8
+80107199 vector149
+80101737 iupdate
+80109000 data
+801051b9 memset
+8010757d vector232
+801037f6 main
+80107d89 switchkvm
+80106fd7 vector106
+801074ed vector220
+80106f47 vector90
+80107241 vector163
+80107595 vector234
+801036ec log_write
+80105aaf sys_unlink
+80106e4b vector62
+80106cfe vector25
+801073e5 vector198
+80107055 vector120
+8010b50c _binary_entryother_start
+80102a8e kinit1
+80106ddf vector50
+80106ca6 vector15
+801071b1 vector151
+80106f08 vector83
+80106f3e vector89
+80106f35 vector88
+80106789 trap
+801064e4 sys_uptime
+80107301 vector179
+80106d4f vector34
+80106dbb vector46
+801070e5 vector134
+80107511 vector223
+801149e0 idt
+801074d5 vector218
+801043c1 pinit
+8010812f deallocuvm
+80107529 vector225
+80107361 vector187
+80104600 growproc
+80112940 ncpu
+80106d2b vector30
+801044e5 userinit
+801001b6 bread
+80107094 vector127
+801042a8 piperead
+801151e0 ticks
+8010739d vector192
+80107265 vector166
+80100ae9 consoleinit
+80106ec9 vector76
+80106ec0 vector75
+80102797 ideintr
+801073c1 vector195
+801071a5 vector150
+80106e27 vector58
+8010763d vector248
+80107070 vector123
+80106f7d vector96
+80106d34 vector31
+80107421 vector203
+80107121 vector139
+801071c9 vector153
+8010724d vector164
+80104e03 procdump
+8010705e vector121
+80106b6a uartputc
+80106c58 vector5
+80107271 vector167
+801071e1 vector155
+80107649 vector249
+8010022e brelse
+80107655 vector250
+80107079 vector124
+80106ffb vector110
+8010742d vector204
+8010190b ilock
+801061b0 sys_exec
+80107109 vector137
+8010b4e0 _binary_initcode_start
+8010542d swtch
+80107631 vector247
+80106ce3 vector22
+80107415 vector202
+8010771a seginit
+80101bc5 iunlockput
+80106ea5 vector72
+80106e0c vector55
+8010708b vector126
+80106e66 vector65
+80106d19 vector28
+8010b596 _binary_entryother_end
+80107289 vector169
+801001ef bwrite
+80107589 vector233
+80106771 idtinit
+80104834 exit
+801063af sys_wait
+8010639d sys_exit
+80102227 dirlink
+0000002c _binary_initcode_size
+80107181 vector147
+801025c7 ideinit
+80107f8f loaduvm
+80106fc5 vector104
+80107031 vector116
+80106517 sys_procstat
+80112960 ptable
+80102a39 ioapicenable
+801050f8 popcli
+8010b09c vectors
+80106df1 vector52
+80106cb8 vector17
+8010733d vector184
+80105406 strlen
+80103a45 mpbcpu
+801062b8 sys_pipe
+80101638 iinit
+80103ec4 picinit
+80107451 vector207
+80107f19 inituvm
+80107385 vector190
+801075d1 vector239
+80106f6b vector94
+80106f62 vector93
+8010328e initlog
+8010736d vector188
+80106dcd vector48
+8010286c iderw
+801074e1 vector219
+8010718d vector148
+801074f9 vector221
+80102bc5 kalloc
+801111e0 devsw
+801063ef sys_getpid
+80106eed vector80
+801072a1 vector171
+801071d5 vector154
+80106d61 vector36
+80103fad pipealloc
+801075a1 vector235
+80106fce vector105
+801060fc sys_chdir
+80111240 icache
+80107175 vector146
+80107391 vector191
+80106fbc vector103
+80106062 sys_mknod
+80102fa5 lapicstartap
+80107da6 switchuvm
+801050b3 pushcli
+80102ac7 kinit2
+80106c8a vector11
+80106c9f vector14
+8010111e filestat
Los archivos binarios xv6-unrc/_kill y xv6-mod/_kill son distintos
diff -rupN xv6-unrc/kill.asm xv6-mod/kill.asm
--- xv6-unrc/kill.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/kill.asm	2018-04-04 14:53:53.363447401 -0300
@@ -0,0 +1,1206 @@
+
+_kill:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+   f:	83 ec 10             	sub    $0x10,%esp
+  12:	89 cb                	mov    %ecx,%ebx
+  int i;
+
+  if(argc < 1){
+  14:	83 3b 00             	cmpl   $0x0,(%ebx)
+  17:	7f 17                	jg     30 <main+0x30>
+    printf(2, "usage: kill pid...\n");
+  19:	83 ec 08             	sub    $0x8,%esp
+  1c:	68 fe 07 00 00       	push   $0x7fe
+  21:	6a 02                	push   $0x2
+  23:	e8 20 04 00 00       	call   448 <printf>
+  28:	83 c4 10             	add    $0x10,%esp
+    exit();
+  2b:	e8 99 02 00 00       	call   2c9 <exit>
+  }
+  for(i=1; i<argc; i++)
+  30:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+  37:	eb 2d                	jmp    66 <main+0x66>
+    kill(atoi(argv[i]));
+  39:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  43:	8b 43 04             	mov    0x4(%ebx),%eax
+  46:	01 d0                	add    %edx,%eax
+  48:	8b 00                	mov    (%eax),%eax
+  4a:	83 ec 0c             	sub    $0xc,%esp
+  4d:	50                   	push   %eax
+  4e:	e8 e4 01 00 00       	call   237 <atoi>
+  53:	83 c4 10             	add    $0x10,%esp
+  56:	83 ec 0c             	sub    $0xc,%esp
+  59:	50                   	push   %eax
+  5a:	e8 9a 02 00 00       	call   2f9 <kill>
+  5f:	83 c4 10             	add    $0x10,%esp
+
+  if(argc < 1){
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+  62:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  66:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  69:	3b 03                	cmp    (%ebx),%eax
+  6b:	7c cc                	jl     39 <main+0x39>
+    kill(atoi(argv[i]));
+  exit();
+  6d:	e8 57 02 00 00       	call   2c9 <exit>
+
+00000072 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  72:	55                   	push   %ebp
+  73:	89 e5                	mov    %esp,%ebp
+  75:	57                   	push   %edi
+  76:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+  77:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  7a:	8b 55 10             	mov    0x10(%ebp),%edx
+  7d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80:	89 cb                	mov    %ecx,%ebx
+  82:	89 df                	mov    %ebx,%edi
+  84:	89 d1                	mov    %edx,%ecx
+  86:	fc                   	cld    
+  87:	f3 aa                	rep stos %al,%es:(%edi)
+  89:	89 ca                	mov    %ecx,%edx
+  8b:	89 fb                	mov    %edi,%ebx
+  8d:	89 5d 08             	mov    %ebx,0x8(%ebp)
+  90:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+  93:	90                   	nop
+  94:	5b                   	pop    %ebx
+  95:	5f                   	pop    %edi
+  96:	5d                   	pop    %ebp
+  97:	c3                   	ret    
+
+00000098 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+  98:	55                   	push   %ebp
+  99:	89 e5                	mov    %esp,%ebp
+  9b:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+  9e:	8b 45 08             	mov    0x8(%ebp),%eax
+  a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+  a4:	90                   	nop
+  a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  a8:	8d 50 01             	lea    0x1(%eax),%edx
+  ab:	89 55 08             	mov    %edx,0x8(%ebp)
+  ae:	8b 55 0c             	mov    0xc(%ebp),%edx
+  b1:	8d 4a 01             	lea    0x1(%edx),%ecx
+  b4:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+  b7:	0f b6 12             	movzbl (%edx),%edx
+  ba:	88 10                	mov    %dl,(%eax)
+  bc:	0f b6 00             	movzbl (%eax),%eax
+  bf:	84 c0                	test   %al,%al
+  c1:	75 e2                	jne    a5 <strcpy+0xd>
+    ;
+  return os;
+  c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  c6:	c9                   	leave  
+  c7:	c3                   	ret    
+
+000000c8 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  c8:	55                   	push   %ebp
+  c9:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+  cb:	eb 08                	jmp    d5 <strcmp+0xd>
+    p++, q++;
+  cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  d1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  d8:	0f b6 00             	movzbl (%eax),%eax
+  db:	84 c0                	test   %al,%al
+  dd:	74 10                	je     ef <strcmp+0x27>
+  df:	8b 45 08             	mov    0x8(%ebp),%eax
+  e2:	0f b6 10             	movzbl (%eax),%edx
+  e5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  e8:	0f b6 00             	movzbl (%eax),%eax
+  eb:	38 c2                	cmp    %al,%dl
+  ed:	74 de                	je     cd <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  ef:	8b 45 08             	mov    0x8(%ebp),%eax
+  f2:	0f b6 00             	movzbl (%eax),%eax
+  f5:	0f b6 d0             	movzbl %al,%edx
+  f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  fb:	0f b6 00             	movzbl (%eax),%eax
+  fe:	0f b6 c0             	movzbl %al,%eax
+ 101:	29 c2                	sub    %eax,%edx
+ 103:	89 d0                	mov    %edx,%eax
+}
+ 105:	5d                   	pop    %ebp
+ 106:	c3                   	ret    
+
+00000107 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 107:	55                   	push   %ebp
+ 108:	89 e5                	mov    %esp,%ebp
+ 10a:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 114:	eb 04                	jmp    11a <strlen+0x13>
+ 116:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 11a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 11d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 120:	01 d0                	add    %edx,%eax
+ 122:	0f b6 00             	movzbl (%eax),%eax
+ 125:	84 c0                	test   %al,%al
+ 127:	75 ed                	jne    116 <strlen+0xf>
+    ;
+  return n;
+ 129:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 12c:	c9                   	leave  
+ 12d:	c3                   	ret    
+
+0000012e <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 12e:	55                   	push   %ebp
+ 12f:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 131:	8b 45 10             	mov    0x10(%ebp),%eax
+ 134:	50                   	push   %eax
+ 135:	ff 75 0c             	pushl  0xc(%ebp)
+ 138:	ff 75 08             	pushl  0x8(%ebp)
+ 13b:	e8 32 ff ff ff       	call   72 <stosb>
+ 140:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 143:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 146:	c9                   	leave  
+ 147:	c3                   	ret    
+
+00000148 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 148:	55                   	push   %ebp
+ 149:	89 e5                	mov    %esp,%ebp
+ 14b:	83 ec 04             	sub    $0x4,%esp
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 154:	eb 14                	jmp    16a <strchr+0x22>
+    if(*s == c)
+ 156:	8b 45 08             	mov    0x8(%ebp),%eax
+ 159:	0f b6 00             	movzbl (%eax),%eax
+ 15c:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 15f:	75 05                	jne    166 <strchr+0x1e>
+      return (char*)s;
+ 161:	8b 45 08             	mov    0x8(%ebp),%eax
+ 164:	eb 13                	jmp    179 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 166:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 16a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16d:	0f b6 00             	movzbl (%eax),%eax
+ 170:	84 c0                	test   %al,%al
+ 172:	75 e2                	jne    156 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 174:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 179:	c9                   	leave  
+ 17a:	c3                   	ret    
+
+0000017b <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 17b:	55                   	push   %ebp
+ 17c:	89 e5                	mov    %esp,%ebp
+ 17e:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 181:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 188:	eb 42                	jmp    1cc <gets+0x51>
+    cc = read(0, &c, 1);
+ 18a:	83 ec 04             	sub    $0x4,%esp
+ 18d:	6a 01                	push   $0x1
+ 18f:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 192:	50                   	push   %eax
+ 193:	6a 00                	push   $0x0
+ 195:	e8 47 01 00 00       	call   2e1 <read>
+ 19a:	83 c4 10             	add    $0x10,%esp
+ 19d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 1a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 1a4:	7e 33                	jle    1d9 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 1a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1a9:	8d 50 01             	lea    0x1(%eax),%edx
+ 1ac:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 1af:	89 c2                	mov    %eax,%edx
+ 1b1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b4:	01 c2                	add    %eax,%edx
+ 1b6:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1ba:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 1bc:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1c0:	3c 0a                	cmp    $0xa,%al
+ 1c2:	74 16                	je     1da <gets+0x5f>
+ 1c4:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1c8:	3c 0d                	cmp    $0xd,%al
+ 1ca:	74 0e                	je     1da <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1cf:	83 c0 01             	add    $0x1,%eax
+ 1d2:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 1d5:	7c b3                	jl     18a <gets+0xf>
+ 1d7:	eb 01                	jmp    1da <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 1d9:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1da:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 1dd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e0:	01 d0                	add    %edx,%eax
+ 1e2:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 1e8:	c9                   	leave  
+ 1e9:	c3                   	ret    
+
+000001ea <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 1ea:	55                   	push   %ebp
+ 1eb:	89 e5                	mov    %esp,%ebp
+ 1ed:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f0:	83 ec 08             	sub    $0x8,%esp
+ 1f3:	6a 00                	push   $0x0
+ 1f5:	ff 75 08             	pushl  0x8(%ebp)
+ 1f8:	e8 0c 01 00 00       	call   309 <open>
+ 1fd:	83 c4 10             	add    $0x10,%esp
+ 200:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 203:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 207:	79 07                	jns    210 <stat+0x26>
+    return -1;
+ 209:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 20e:	eb 25                	jmp    235 <stat+0x4b>
+  r = fstat(fd, st);
+ 210:	83 ec 08             	sub    $0x8,%esp
+ 213:	ff 75 0c             	pushl  0xc(%ebp)
+ 216:	ff 75 f4             	pushl  -0xc(%ebp)
+ 219:	e8 03 01 00 00       	call   321 <fstat>
+ 21e:	83 c4 10             	add    $0x10,%esp
+ 221:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 224:	83 ec 0c             	sub    $0xc,%esp
+ 227:	ff 75 f4             	pushl  -0xc(%ebp)
+ 22a:	e8 c2 00 00 00       	call   2f1 <close>
+ 22f:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 232:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 235:	c9                   	leave  
+ 236:	c3                   	ret    
+
+00000237 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 237:	55                   	push   %ebp
+ 238:	89 e5                	mov    %esp,%ebp
+ 23a:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 23d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 244:	eb 25                	jmp    26b <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 246:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 249:	89 d0                	mov    %edx,%eax
+ 24b:	c1 e0 02             	shl    $0x2,%eax
+ 24e:	01 d0                	add    %edx,%eax
+ 250:	01 c0                	add    %eax,%eax
+ 252:	89 c1                	mov    %eax,%ecx
+ 254:	8b 45 08             	mov    0x8(%ebp),%eax
+ 257:	8d 50 01             	lea    0x1(%eax),%edx
+ 25a:	89 55 08             	mov    %edx,0x8(%ebp)
+ 25d:	0f b6 00             	movzbl (%eax),%eax
+ 260:	0f be c0             	movsbl %al,%eax
+ 263:	01 c8                	add    %ecx,%eax
+ 265:	83 e8 30             	sub    $0x30,%eax
+ 268:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 26b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 26e:	0f b6 00             	movzbl (%eax),%eax
+ 271:	3c 2f                	cmp    $0x2f,%al
+ 273:	7e 0a                	jle    27f <atoi+0x48>
+ 275:	8b 45 08             	mov    0x8(%ebp),%eax
+ 278:	0f b6 00             	movzbl (%eax),%eax
+ 27b:	3c 39                	cmp    $0x39,%al
+ 27d:	7e c7                	jle    246 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 27f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 282:	c9                   	leave  
+ 283:	c3                   	ret    
+
+00000284 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 284:	55                   	push   %ebp
+ 285:	89 e5                	mov    %esp,%ebp
+ 287:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 28a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 290:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 293:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 296:	eb 17                	jmp    2af <memmove+0x2b>
+    *dst++ = *src++;
+ 298:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 29b:	8d 50 01             	lea    0x1(%eax),%edx
+ 29e:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 2a1:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 2a4:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 2a7:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 2aa:	0f b6 12             	movzbl (%edx),%edx
+ 2ad:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2af:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2b2:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 2b5:	89 55 10             	mov    %edx,0x10(%ebp)
+ 2b8:	85 c0                	test   %eax,%eax
+ 2ba:	7f dc                	jg     298 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 2bc:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 2bf:	c9                   	leave  
+ 2c0:	c3                   	ret    
+
+000002c1 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2c1:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2c6:	cd 40                	int    $0x40
+ 2c8:	c3                   	ret    
+
+000002c9 <exit>:
+SYSCALL(exit)
+ 2c9:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <wait>:
+SYSCALL(wait)
+ 2d1:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <pipe>:
+SYSCALL(pipe)
+ 2d9:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <read>:
+SYSCALL(read)
+ 2e1:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <write>:
+SYSCALL(write)
+ 2e9:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <close>:
+SYSCALL(close)
+ 2f1:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <kill>:
+SYSCALL(kill)
+ 2f9:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <exec>:
+SYSCALL(exec)
+ 301:	b8 07 00 00 00       	mov    $0x7,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <open>:
+SYSCALL(open)
+ 309:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <mknod>:
+SYSCALL(mknod)
+ 311:	b8 11 00 00 00       	mov    $0x11,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <unlink>:
+SYSCALL(unlink)
+ 319:	b8 12 00 00 00       	mov    $0x12,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+
+00000321 <fstat>:
+SYSCALL(fstat)
+ 321:	b8 08 00 00 00       	mov    $0x8,%eax
+ 326:	cd 40                	int    $0x40
+ 328:	c3                   	ret    
+
+00000329 <link>:
+SYSCALL(link)
+ 329:	b8 13 00 00 00       	mov    $0x13,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <mkdir>:
+SYSCALL(mkdir)
+ 331:	b8 14 00 00 00       	mov    $0x14,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <chdir>:
+SYSCALL(chdir)
+ 339:	b8 09 00 00 00       	mov    $0x9,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <dup>:
+SYSCALL(dup)
+ 341:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <getpid>:
+SYSCALL(getpid)
+ 349:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+
+00000351 <sbrk>:
+SYSCALL(sbrk)
+ 351:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 356:	cd 40                	int    $0x40
+ 358:	c3                   	ret    
+
+00000359 <sleep>:
+SYSCALL(sleep)
+ 359:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 35e:	cd 40                	int    $0x40
+ 360:	c3                   	ret    
+
+00000361 <uptime>:
+SYSCALL(uptime)
+ 361:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 366:	cd 40                	int    $0x40
+ 368:	c3                   	ret    
+
+00000369 <procstat>:
+SYSCALL(procstat) 
+ 369:	b8 16 00 00 00       	mov    $0x16,%eax
+ 36e:	cd 40                	int    $0x40
+ 370:	c3                   	ret    
+
+00000371 <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 371:	55                   	push   %ebp
+ 372:	89 e5                	mov    %esp,%ebp
+ 374:	83 ec 18             	sub    $0x18,%esp
+ 377:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 37a:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 37d:	83 ec 04             	sub    $0x4,%esp
+ 380:	6a 01                	push   $0x1
+ 382:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 385:	50                   	push   %eax
+ 386:	ff 75 08             	pushl  0x8(%ebp)
+ 389:	e8 5b ff ff ff       	call   2e9 <write>
+ 38e:	83 c4 10             	add    $0x10,%esp
+}
+ 391:	90                   	nop
+ 392:	c9                   	leave  
+ 393:	c3                   	ret    
+
+00000394 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 394:	55                   	push   %ebp
+ 395:	89 e5                	mov    %esp,%ebp
+ 397:	53                   	push   %ebx
+ 398:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 39b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 3a2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 3a6:	74 17                	je     3bf <printint+0x2b>
+ 3a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 3ac:	79 11                	jns    3bf <printint+0x2b>
+    neg = 1;
+ 3ae:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 3b5:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3b8:	f7 d8                	neg    %eax
+ 3ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 3bd:	eb 06                	jmp    3c5 <printint+0x31>
+  } else {
+    x = xx;
+ 3bf:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 3c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 3cc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 3cf:	8d 41 01             	lea    0x1(%ecx),%eax
+ 3d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 3d5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3db:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3e0:	f7 f3                	div    %ebx
+ 3e2:	89 d0                	mov    %edx,%eax
+ 3e4:	0f b6 80 68 0a 00 00 	movzbl 0xa68(%eax),%eax
+ 3eb:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 3ef:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3f5:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3fa:	f7 f3                	div    %ebx
+ 3fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 3ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 403:	75 c7                	jne    3cc <printint+0x38>
+  if(neg)
+ 405:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 409:	74 2d                	je     438 <printint+0xa4>
+    buf[i++] = '-';
+ 40b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 40e:	8d 50 01             	lea    0x1(%eax),%edx
+ 411:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 414:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 419:	eb 1d                	jmp    438 <printint+0xa4>
+    putc(fd, buf[i]);
+ 41b:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 41e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 421:	01 d0                	add    %edx,%eax
+ 423:	0f b6 00             	movzbl (%eax),%eax
+ 426:	0f be c0             	movsbl %al,%eax
+ 429:	83 ec 08             	sub    $0x8,%esp
+ 42c:	50                   	push   %eax
+ 42d:	ff 75 08             	pushl  0x8(%ebp)
+ 430:	e8 3c ff ff ff       	call   371 <putc>
+ 435:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 438:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 43c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 440:	79 d9                	jns    41b <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 442:	90                   	nop
+ 443:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 446:	c9                   	leave  
+ 447:	c3                   	ret    
+
+00000448 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 448:	55                   	push   %ebp
+ 449:	89 e5                	mov    %esp,%ebp
+ 44b:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 44e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 455:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 458:	83 c0 04             	add    $0x4,%eax
+ 45b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 45e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 465:	e9 59 01 00 00       	jmp    5c3 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 46a:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 46d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 470:	01 d0                	add    %edx,%eax
+ 472:	0f b6 00             	movzbl (%eax),%eax
+ 475:	0f be c0             	movsbl %al,%eax
+ 478:	25 ff 00 00 00       	and    $0xff,%eax
+ 47d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 480:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 484:	75 2c                	jne    4b2 <printf+0x6a>
+      if(c == '%'){
+ 486:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 48a:	75 0c                	jne    498 <printf+0x50>
+        state = '%';
+ 48c:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 493:	e9 27 01 00 00       	jmp    5bf <printf+0x177>
+      } else {
+        putc(fd, c);
+ 498:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 49b:	0f be c0             	movsbl %al,%eax
+ 49e:	83 ec 08             	sub    $0x8,%esp
+ 4a1:	50                   	push   %eax
+ 4a2:	ff 75 08             	pushl  0x8(%ebp)
+ 4a5:	e8 c7 fe ff ff       	call   371 <putc>
+ 4aa:	83 c4 10             	add    $0x10,%esp
+ 4ad:	e9 0d 01 00 00       	jmp    5bf <printf+0x177>
+      }
+    } else if(state == '%'){
+ 4b2:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 4b6:	0f 85 03 01 00 00    	jne    5bf <printf+0x177>
+      if(c == 'd'){
+ 4bc:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 4c0:	75 1e                	jne    4e0 <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 4c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4c5:	8b 00                	mov    (%eax),%eax
+ 4c7:	6a 01                	push   $0x1
+ 4c9:	6a 0a                	push   $0xa
+ 4cb:	50                   	push   %eax
+ 4cc:	ff 75 08             	pushl  0x8(%ebp)
+ 4cf:	e8 c0 fe ff ff       	call   394 <printint>
+ 4d4:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 4d7:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 4db:	e9 d8 00 00 00       	jmp    5b8 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 4e0:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 4e4:	74 06                	je     4ec <printf+0xa4>
+ 4e6:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 4ea:	75 1e                	jne    50a <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 4ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4ef:	8b 00                	mov    (%eax),%eax
+ 4f1:	6a 00                	push   $0x0
+ 4f3:	6a 10                	push   $0x10
+ 4f5:	50                   	push   %eax
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 96 fe ff ff       	call   394 <printint>
+ 4fe:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 501:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 505:	e9 ae 00 00 00       	jmp    5b8 <printf+0x170>
+      } else if(c == 's'){
+ 50a:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 50e:	75 43                	jne    553 <printf+0x10b>
+        s = (char*)*ap;
+ 510:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 513:	8b 00                	mov    (%eax),%eax
+ 515:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 518:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 51c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 520:	75 25                	jne    547 <printf+0xff>
+          s = "(null)";
+ 522:	c7 45 f4 12 08 00 00 	movl   $0x812,-0xc(%ebp)
+        while(*s != 0){
+ 529:	eb 1c                	jmp    547 <printf+0xff>
+          putc(fd, *s);
+ 52b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 52e:	0f b6 00             	movzbl (%eax),%eax
+ 531:	0f be c0             	movsbl %al,%eax
+ 534:	83 ec 08             	sub    $0x8,%esp
+ 537:	50                   	push   %eax
+ 538:	ff 75 08             	pushl  0x8(%ebp)
+ 53b:	e8 31 fe ff ff       	call   371 <putc>
+ 540:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 543:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 547:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 54a:	0f b6 00             	movzbl (%eax),%eax
+ 54d:	84 c0                	test   %al,%al
+ 54f:	75 da                	jne    52b <printf+0xe3>
+ 551:	eb 65                	jmp    5b8 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 553:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 557:	75 1d                	jne    576 <printf+0x12e>
+        putc(fd, *ap);
+ 559:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 55c:	8b 00                	mov    (%eax),%eax
+ 55e:	0f be c0             	movsbl %al,%eax
+ 561:	83 ec 08             	sub    $0x8,%esp
+ 564:	50                   	push   %eax
+ 565:	ff 75 08             	pushl  0x8(%ebp)
+ 568:	e8 04 fe ff ff       	call   371 <putc>
+ 56d:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 570:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 574:	eb 42                	jmp    5b8 <printf+0x170>
+      } else if(c == '%'){
+ 576:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 57a:	75 17                	jne    593 <printf+0x14b>
+        putc(fd, c);
+ 57c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 57f:	0f be c0             	movsbl %al,%eax
+ 582:	83 ec 08             	sub    $0x8,%esp
+ 585:	50                   	push   %eax
+ 586:	ff 75 08             	pushl  0x8(%ebp)
+ 589:	e8 e3 fd ff ff       	call   371 <putc>
+ 58e:	83 c4 10             	add    $0x10,%esp
+ 591:	eb 25                	jmp    5b8 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 593:	83 ec 08             	sub    $0x8,%esp
+ 596:	6a 25                	push   $0x25
+ 598:	ff 75 08             	pushl  0x8(%ebp)
+ 59b:	e8 d1 fd ff ff       	call   371 <putc>
+ 5a0:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 5a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 5a6:	0f be c0             	movsbl %al,%eax
+ 5a9:	83 ec 08             	sub    $0x8,%esp
+ 5ac:	50                   	push   %eax
+ 5ad:	ff 75 08             	pushl  0x8(%ebp)
+ 5b0:	e8 bc fd ff ff       	call   371 <putc>
+ 5b5:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5bf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 5c3:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 5c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 5c9:	01 d0                	add    %edx,%eax
+ 5cb:	0f b6 00             	movzbl (%eax),%eax
+ 5ce:	84 c0                	test   %al,%al
+ 5d0:	0f 85 94 fe ff ff    	jne    46a <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5d6:	90                   	nop
+ 5d7:	c9                   	leave  
+ 5d8:	c3                   	ret    
+
+000005d9 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d9:	55                   	push   %ebp
+ 5da:	89 e5                	mov    %esp,%ebp
+ 5dc:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5df:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5e2:	83 e8 08             	sub    $0x8,%eax
+ 5e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e8:	a1 84 0a 00 00       	mov    0xa84,%eax
+ 5ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 5f0:	eb 24                	jmp    616 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5f5:	8b 00                	mov    (%eax),%eax
+ 5f7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 5fa:	77 12                	ja     60e <free+0x35>
+ 5fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 5ff:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 602:	77 24                	ja     628 <free+0x4f>
+ 604:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 607:	8b 00                	mov    (%eax),%eax
+ 609:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 60c:	77 1a                	ja     628 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 60e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 611:	8b 00                	mov    (%eax),%eax
+ 613:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 616:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 619:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 61c:	76 d4                	jbe    5f2 <free+0x19>
+ 61e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 621:	8b 00                	mov    (%eax),%eax
+ 623:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 626:	76 ca                	jbe    5f2 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 62b:	8b 40 04             	mov    0x4(%eax),%eax
+ 62e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 635:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 638:	01 c2                	add    %eax,%edx
+ 63a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 63d:	8b 00                	mov    (%eax),%eax
+ 63f:	39 c2                	cmp    %eax,%edx
+ 641:	75 24                	jne    667 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 643:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 646:	8b 50 04             	mov    0x4(%eax),%edx
+ 649:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 64c:	8b 00                	mov    (%eax),%eax
+ 64e:	8b 40 04             	mov    0x4(%eax),%eax
+ 651:	01 c2                	add    %eax,%edx
+ 653:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 656:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 659:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 65c:	8b 00                	mov    (%eax),%eax
+ 65e:	8b 10                	mov    (%eax),%edx
+ 660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 663:	89 10                	mov    %edx,(%eax)
+ 665:	eb 0a                	jmp    671 <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 667:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 66f:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 671:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 674:	8b 40 04             	mov    0x4(%eax),%eax
+ 677:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 67e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 681:	01 d0                	add    %edx,%eax
+ 683:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 686:	75 20                	jne    6a8 <free+0xcf>
+    p->s.size += bp->s.size;
+ 688:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 68b:	8b 50 04             	mov    0x4(%eax),%edx
+ 68e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 691:	8b 40 04             	mov    0x4(%eax),%eax
+ 694:	01 c2                	add    %eax,%edx
+ 696:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 699:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 69c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 69f:	8b 10                	mov    (%eax),%edx
+ 6a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6a4:	89 10                	mov    %edx,(%eax)
+ 6a6:	eb 08                	jmp    6b0 <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 6a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6ab:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 6ae:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 6b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6b3:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 6b8:	90                   	nop
+ 6b9:	c9                   	leave  
+ 6ba:	c3                   	ret    
+
+000006bb <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 6bb:	55                   	push   %ebp
+ 6bc:	89 e5                	mov    %esp,%ebp
+ 6be:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 6c1:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 6c8:	77 07                	ja     6d1 <morecore+0x16>
+    nu = 4096;
+ 6ca:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 6d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6d4:	c1 e0 03             	shl    $0x3,%eax
+ 6d7:	83 ec 0c             	sub    $0xc,%esp
+ 6da:	50                   	push   %eax
+ 6db:	e8 71 fc ff ff       	call   351 <sbrk>
+ 6e0:	83 c4 10             	add    $0x10,%esp
+ 6e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 6e6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 6ea:	75 07                	jne    6f3 <morecore+0x38>
+    return 0;
+ 6ec:	b8 00 00 00 00       	mov    $0x0,%eax
+ 6f1:	eb 26                	jmp    719 <morecore+0x5e>
+  hp = (Header*)p;
+ 6f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 6f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 6f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 6fc:	8b 55 08             	mov    0x8(%ebp),%edx
+ 6ff:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 702:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 705:	83 c0 08             	add    $0x8,%eax
+ 708:	83 ec 0c             	sub    $0xc,%esp
+ 70b:	50                   	push   %eax
+ 70c:	e8 c8 fe ff ff       	call   5d9 <free>
+ 711:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 714:	a1 84 0a 00 00       	mov    0xa84,%eax
+}
+ 719:	c9                   	leave  
+ 71a:	c3                   	ret    
+
+0000071b <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 71b:	55                   	push   %ebp
+ 71c:	89 e5                	mov    %esp,%ebp
+ 71e:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 721:	8b 45 08             	mov    0x8(%ebp),%eax
+ 724:	83 c0 07             	add    $0x7,%eax
+ 727:	c1 e8 03             	shr    $0x3,%eax
+ 72a:	83 c0 01             	add    $0x1,%eax
+ 72d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 730:	a1 84 0a 00 00       	mov    0xa84,%eax
+ 735:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 738:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 73c:	75 23                	jne    761 <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 73e:	c7 45 f0 7c 0a 00 00 	movl   $0xa7c,-0x10(%ebp)
+ 745:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 748:	a3 84 0a 00 00       	mov    %eax,0xa84
+ 74d:	a1 84 0a 00 00       	mov    0xa84,%eax
+ 752:	a3 7c 0a 00 00       	mov    %eax,0xa7c
+    base.s.size = 0;
+ 757:	c7 05 80 0a 00 00 00 	movl   $0x0,0xa80
+ 75e:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 761:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 764:	8b 00                	mov    (%eax),%eax
+ 766:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 769:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 76c:	8b 40 04             	mov    0x4(%eax),%eax
+ 76f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 772:	72 4d                	jb     7c1 <malloc+0xa6>
+      if(p->s.size == nunits)
+ 774:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 777:	8b 40 04             	mov    0x4(%eax),%eax
+ 77a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 77d:	75 0c                	jne    78b <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 77f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 782:	8b 10                	mov    (%eax),%edx
+ 784:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 787:	89 10                	mov    %edx,(%eax)
+ 789:	eb 26                	jmp    7b1 <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 78b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 78e:	8b 40 04             	mov    0x4(%eax),%eax
+ 791:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 794:	89 c2                	mov    %eax,%edx
+ 796:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 799:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 79c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 79f:	8b 40 04             	mov    0x4(%eax),%eax
+ 7a2:	c1 e0 03             	shl    $0x3,%eax
+ 7a5:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 7a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 7ae:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 7b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7b4:	a3 84 0a 00 00       	mov    %eax,0xa84
+      return (void*)(p + 1);
+ 7b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7bc:	83 c0 08             	add    $0x8,%eax
+ 7bf:	eb 3b                	jmp    7fc <malloc+0xe1>
+    }
+    if(p == freep)
+ 7c1:	a1 84 0a 00 00       	mov    0xa84,%eax
+ 7c6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 7c9:	75 1e                	jne    7e9 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 7cb:	83 ec 0c             	sub    $0xc,%esp
+ 7ce:	ff 75 ec             	pushl  -0x14(%ebp)
+ 7d1:	e8 e5 fe ff ff       	call   6bb <morecore>
+ 7d6:	83 c4 10             	add    $0x10,%esp
+ 7d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 7dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 7e0:	75 07                	jne    7e9 <malloc+0xce>
+        return 0;
+ 7e2:	b8 00 00 00 00       	mov    $0x0,%eax
+ 7e7:	eb 13                	jmp    7fc <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 7ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7f2:	8b 00                	mov    (%eax),%eax
+ 7f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 7f7:	e9 6d ff ff ff       	jmp    769 <malloc+0x4e>
+}
+ 7fc:	c9                   	leave  
+ 7fd:	c3                   	ret    
diff -rupN xv6-unrc/kill.sym xv6-mod/kill.sym
--- xv6-unrc/kill.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/kill.sym	2018-04-04 14:53:53.383447602 -0300
@@ -0,0 +1,61 @@
+00000000 .text
+000007fe .rodata
+0000081c .eh_frame
+00000a68 .data
+00000a7c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 kill.c
+00000000 ulib.c
+00000072 stosb
+00000000 printf.c
+00000371 putc
+00000394 printint
+00000a68 digits.1109
+00000000 umalloc.c
+00000a7c base
+00000a84 freep
+000006bb morecore
+00000098 strcpy
+00000448 printf
+00000284 memmove
+00000311 mknod
+0000017b gets
+00000349 getpid
+0000071b malloc
+00000369 procstat
+00000359 sleep
+000002d9 pipe
+000002e9 write
+00000321 fstat
+000002f9 kill
+00000339 chdir
+00000301 exec
+000002d1 wait
+000002e1 read
+00000319 unlink
+000002c1 fork
+00000351 sbrk
+00000361 uptime
+00000a79 __bss_start
+0000012e memset
+00000000 main
+000000c8 strcmp
+00000341 dup
+000001ea stat
+00000a79 _edata
+00000a88 _end
+00000329 link
+000002c9 exit
+00000237 atoi
+00000107 strlen
+00000309 open
+00000148 strchr
+00000331 mkdir
+000002f1 close
+000005d9 free
Los archivos binarios xv6-unrc/._lapic.c y xv6-mod/._lapic.c son distintos
diff -rupN xv6-unrc/lapic.d xv6-mod/lapic.d
--- xv6-unrc/lapic.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/lapic.d	2018-04-04 14:54:00.611520097 -0300
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Los archivos binarios xv6-unrc/lapic.o y xv6-mod/lapic.o son distintos
Los archivos binarios xv6-unrc/._LICENSE y xv6-mod/._LICENSE son distintos
Los archivos binarios xv6-unrc/_ln y xv6-mod/_ln son distintos
diff -rupN xv6-unrc/ln.asm xv6-mod/ln.asm
--- xv6-unrc/ln.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/ln.asm	2018-04-04 14:53:53.595449728 -0300
@@ -0,0 +1,1202 @@
+
+_ln:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+   f:	89 cb                	mov    %ecx,%ebx
+  if(argc != 3){
+  11:	83 3b 03             	cmpl   $0x3,(%ebx)
+  14:	74 17                	je     2d <main+0x2d>
+    printf(2, "Usage: ln old new\n");
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	68 00 08 00 00       	push   $0x800
+  1e:	6a 02                	push   $0x2
+  20:	e8 25 04 00 00       	call   44a <printf>
+  25:	83 c4 10             	add    $0x10,%esp
+    exit();
+  28:	e8 9e 02 00 00       	call   2cb <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2d:	8b 43 04             	mov    0x4(%ebx),%eax
+  30:	83 c0 08             	add    $0x8,%eax
+  33:	8b 10                	mov    (%eax),%edx
+  35:	8b 43 04             	mov    0x4(%ebx),%eax
+  38:	83 c0 04             	add    $0x4,%eax
+  3b:	8b 00                	mov    (%eax),%eax
+  3d:	83 ec 08             	sub    $0x8,%esp
+  40:	52                   	push   %edx
+  41:	50                   	push   %eax
+  42:	e8 e4 02 00 00       	call   32b <link>
+  47:	83 c4 10             	add    $0x10,%esp
+  4a:	85 c0                	test   %eax,%eax
+  4c:	79 21                	jns    6f <main+0x6f>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  4e:	8b 43 04             	mov    0x4(%ebx),%eax
+  51:	83 c0 08             	add    $0x8,%eax
+  54:	8b 10                	mov    (%eax),%edx
+  56:	8b 43 04             	mov    0x4(%ebx),%eax
+  59:	83 c0 04             	add    $0x4,%eax
+  5c:	8b 00                	mov    (%eax),%eax
+  5e:	52                   	push   %edx
+  5f:	50                   	push   %eax
+  60:	68 13 08 00 00       	push   $0x813
+  65:	6a 02                	push   $0x2
+  67:	e8 de 03 00 00       	call   44a <printf>
+  6c:	83 c4 10             	add    $0x10,%esp
+  exit();
+  6f:	e8 57 02 00 00       	call   2cb <exit>
+
+00000074 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  74:	55                   	push   %ebp
+  75:	89 e5                	mov    %esp,%ebp
+  77:	57                   	push   %edi
+  78:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+  79:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  7c:	8b 55 10             	mov    0x10(%ebp),%edx
+  7f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  82:	89 cb                	mov    %ecx,%ebx
+  84:	89 df                	mov    %ebx,%edi
+  86:	89 d1                	mov    %edx,%ecx
+  88:	fc                   	cld    
+  89:	f3 aa                	rep stos %al,%es:(%edi)
+  8b:	89 ca                	mov    %ecx,%edx
+  8d:	89 fb                	mov    %edi,%ebx
+  8f:	89 5d 08             	mov    %ebx,0x8(%ebp)
+  92:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+  95:	90                   	nop
+  96:	5b                   	pop    %ebx
+  97:	5f                   	pop    %edi
+  98:	5d                   	pop    %ebp
+  99:	c3                   	ret    
+
+0000009a <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+  9a:	55                   	push   %ebp
+  9b:	89 e5                	mov    %esp,%ebp
+  9d:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+  a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+  a6:	90                   	nop
+  a7:	8b 45 08             	mov    0x8(%ebp),%eax
+  aa:	8d 50 01             	lea    0x1(%eax),%edx
+  ad:	89 55 08             	mov    %edx,0x8(%ebp)
+  b0:	8b 55 0c             	mov    0xc(%ebp),%edx
+  b3:	8d 4a 01             	lea    0x1(%edx),%ecx
+  b6:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+  b9:	0f b6 12             	movzbl (%edx),%edx
+  bc:	88 10                	mov    %dl,(%eax)
+  be:	0f b6 00             	movzbl (%eax),%eax
+  c1:	84 c0                	test   %al,%al
+  c3:	75 e2                	jne    a7 <strcpy+0xd>
+    ;
+  return os;
+  c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  c8:	c9                   	leave  
+  c9:	c3                   	ret    
+
+000000ca <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  ca:	55                   	push   %ebp
+  cb:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+  cd:	eb 08                	jmp    d7 <strcmp+0xd>
+    p++, q++;
+  cf:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  d3:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  da:	0f b6 00             	movzbl (%eax),%eax
+  dd:	84 c0                	test   %al,%al
+  df:	74 10                	je     f1 <strcmp+0x27>
+  e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  e4:	0f b6 10             	movzbl (%eax),%edx
+  e7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ea:	0f b6 00             	movzbl (%eax),%eax
+  ed:	38 c2                	cmp    %al,%dl
+  ef:	74 de                	je     cf <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  f4:	0f b6 00             	movzbl (%eax),%eax
+  f7:	0f b6 d0             	movzbl %al,%edx
+  fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+  fd:	0f b6 00             	movzbl (%eax),%eax
+ 100:	0f b6 c0             	movzbl %al,%eax
+ 103:	29 c2                	sub    %eax,%edx
+ 105:	89 d0                	mov    %edx,%eax
+}
+ 107:	5d                   	pop    %ebp
+ 108:	c3                   	ret    
+
+00000109 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 109:	55                   	push   %ebp
+ 10a:	89 e5                	mov    %esp,%ebp
+ 10c:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 116:	eb 04                	jmp    11c <strlen+0x13>
+ 118:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 11c:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 11f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 122:	01 d0                	add    %edx,%eax
+ 124:	0f b6 00             	movzbl (%eax),%eax
+ 127:	84 c0                	test   %al,%al
+ 129:	75 ed                	jne    118 <strlen+0xf>
+    ;
+  return n;
+ 12b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 12e:	c9                   	leave  
+ 12f:	c3                   	ret    
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 133:	8b 45 10             	mov    0x10(%ebp),%eax
+ 136:	50                   	push   %eax
+ 137:	ff 75 0c             	pushl  0xc(%ebp)
+ 13a:	ff 75 08             	pushl  0x8(%ebp)
+ 13d:	e8 32 ff ff ff       	call   74 <stosb>
+ 142:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 145:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 148:	c9                   	leave  
+ 149:	c3                   	ret    
+
+0000014a <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 14a:	55                   	push   %ebp
+ 14b:	89 e5                	mov    %esp,%ebp
+ 14d:	83 ec 04             	sub    $0x4,%esp
+ 150:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 153:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 156:	eb 14                	jmp    16c <strchr+0x22>
+    if(*s == c)
+ 158:	8b 45 08             	mov    0x8(%ebp),%eax
+ 15b:	0f b6 00             	movzbl (%eax),%eax
+ 15e:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 161:	75 05                	jne    168 <strchr+0x1e>
+      return (char*)s;
+ 163:	8b 45 08             	mov    0x8(%ebp),%eax
+ 166:	eb 13                	jmp    17b <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 168:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 16c:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16f:	0f b6 00             	movzbl (%eax),%eax
+ 172:	84 c0                	test   %al,%al
+ 174:	75 e2                	jne    158 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 176:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 17b:	c9                   	leave  
+ 17c:	c3                   	ret    
+
+0000017d <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 17d:	55                   	push   %ebp
+ 17e:	89 e5                	mov    %esp,%ebp
+ 180:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 183:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 18a:	eb 42                	jmp    1ce <gets+0x51>
+    cc = read(0, &c, 1);
+ 18c:	83 ec 04             	sub    $0x4,%esp
+ 18f:	6a 01                	push   $0x1
+ 191:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 194:	50                   	push   %eax
+ 195:	6a 00                	push   $0x0
+ 197:	e8 47 01 00 00       	call   2e3 <read>
+ 19c:	83 c4 10             	add    $0x10,%esp
+ 19f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 1a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 1a6:	7e 33                	jle    1db <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 1a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1ab:	8d 50 01             	lea    0x1(%eax),%edx
+ 1ae:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 1b1:	89 c2                	mov    %eax,%edx
+ 1b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b6:	01 c2                	add    %eax,%edx
+ 1b8:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1bc:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 1be:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1c2:	3c 0a                	cmp    $0xa,%al
+ 1c4:	74 16                	je     1dc <gets+0x5f>
+ 1c6:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1ca:	3c 0d                	cmp    $0xd,%al
+ 1cc:	74 0e                	je     1dc <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1d1:	83 c0 01             	add    $0x1,%eax
+ 1d4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 1d7:	7c b3                	jl     18c <gets+0xf>
+ 1d9:	eb 01                	jmp    1dc <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 1db:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 1df:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e2:	01 d0                	add    %edx,%eax
+ 1e4:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 1e7:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 1ea:	c9                   	leave  
+ 1eb:	c3                   	ret    
+
+000001ec <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 1ec:	55                   	push   %ebp
+ 1ed:	89 e5                	mov    %esp,%ebp
+ 1ef:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f2:	83 ec 08             	sub    $0x8,%esp
+ 1f5:	6a 00                	push   $0x0
+ 1f7:	ff 75 08             	pushl  0x8(%ebp)
+ 1fa:	e8 0c 01 00 00       	call   30b <open>
+ 1ff:	83 c4 10             	add    $0x10,%esp
+ 202:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 205:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 209:	79 07                	jns    212 <stat+0x26>
+    return -1;
+ 20b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 210:	eb 25                	jmp    237 <stat+0x4b>
+  r = fstat(fd, st);
+ 212:	83 ec 08             	sub    $0x8,%esp
+ 215:	ff 75 0c             	pushl  0xc(%ebp)
+ 218:	ff 75 f4             	pushl  -0xc(%ebp)
+ 21b:	e8 03 01 00 00       	call   323 <fstat>
+ 220:	83 c4 10             	add    $0x10,%esp
+ 223:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 226:	83 ec 0c             	sub    $0xc,%esp
+ 229:	ff 75 f4             	pushl  -0xc(%ebp)
+ 22c:	e8 c2 00 00 00       	call   2f3 <close>
+ 231:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 234:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 237:	c9                   	leave  
+ 238:	c3                   	ret    
+
+00000239 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 239:	55                   	push   %ebp
+ 23a:	89 e5                	mov    %esp,%ebp
+ 23c:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 23f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 246:	eb 25                	jmp    26d <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 248:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 24b:	89 d0                	mov    %edx,%eax
+ 24d:	c1 e0 02             	shl    $0x2,%eax
+ 250:	01 d0                	add    %edx,%eax
+ 252:	01 c0                	add    %eax,%eax
+ 254:	89 c1                	mov    %eax,%ecx
+ 256:	8b 45 08             	mov    0x8(%ebp),%eax
+ 259:	8d 50 01             	lea    0x1(%eax),%edx
+ 25c:	89 55 08             	mov    %edx,0x8(%ebp)
+ 25f:	0f b6 00             	movzbl (%eax),%eax
+ 262:	0f be c0             	movsbl %al,%eax
+ 265:	01 c8                	add    %ecx,%eax
+ 267:	83 e8 30             	sub    $0x30,%eax
+ 26a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 26d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 270:	0f b6 00             	movzbl (%eax),%eax
+ 273:	3c 2f                	cmp    $0x2f,%al
+ 275:	7e 0a                	jle    281 <atoi+0x48>
+ 277:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27a:	0f b6 00             	movzbl (%eax),%eax
+ 27d:	3c 39                	cmp    $0x39,%al
+ 27f:	7e c7                	jle    248 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 281:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 284:	c9                   	leave  
+ 285:	c3                   	ret    
+
+00000286 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 286:	55                   	push   %ebp
+ 287:	89 e5                	mov    %esp,%ebp
+ 289:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 28c:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 292:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 295:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 298:	eb 17                	jmp    2b1 <memmove+0x2b>
+    *dst++ = *src++;
+ 29a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 29d:	8d 50 01             	lea    0x1(%eax),%edx
+ 2a0:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 2a3:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 2a6:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 2a9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 2ac:	0f b6 12             	movzbl (%edx),%edx
+ 2af:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b1:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2b4:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 2b7:	89 55 10             	mov    %edx,0x10(%ebp)
+ 2ba:	85 c0                	test   %eax,%eax
+ 2bc:	7f dc                	jg     29a <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 2be:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 2c1:	c9                   	leave  
+ 2c2:	c3                   	ret    
+
+000002c3 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2c3:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exit>:
+SYSCALL(exit)
+ 2cb:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <wait>:
+SYSCALL(wait)
+ 2d3:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <pipe>:
+SYSCALL(pipe)
+ 2db:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <read>:
+SYSCALL(read)
+ 2e3:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <write>:
+SYSCALL(write)
+ 2eb:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <close>:
+SYSCALL(close)
+ 2f3:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <kill>:
+SYSCALL(kill)
+ 2fb:	b8 06 00 00 00       	mov    $0x6,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <exec>:
+SYSCALL(exec)
+ 303:	b8 07 00 00 00       	mov    $0x7,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <open>:
+SYSCALL(open)
+ 30b:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <mknod>:
+SYSCALL(mknod)
+ 313:	b8 11 00 00 00       	mov    $0x11,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <unlink>:
+SYSCALL(unlink)
+ 31b:	b8 12 00 00 00       	mov    $0x12,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <fstat>:
+SYSCALL(fstat)
+ 323:	b8 08 00 00 00       	mov    $0x8,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <link>:
+SYSCALL(link)
+ 32b:	b8 13 00 00 00       	mov    $0x13,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <mkdir>:
+SYSCALL(mkdir)
+ 333:	b8 14 00 00 00       	mov    $0x14,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <chdir>:
+SYSCALL(chdir)
+ 33b:	b8 09 00 00 00       	mov    $0x9,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <dup>:
+SYSCALL(dup)
+ 343:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <getpid>:
+SYSCALL(getpid)
+ 34b:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <sbrk>:
+SYSCALL(sbrk)
+ 353:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sleep>:
+SYSCALL(sleep)
+ 35b:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <uptime>:
+SYSCALL(uptime)
+ 363:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <procstat>:
+SYSCALL(procstat) 
+ 36b:	b8 16 00 00 00       	mov    $0x16,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 373:	55                   	push   %ebp
+ 374:	89 e5                	mov    %esp,%ebp
+ 376:	83 ec 18             	sub    $0x18,%esp
+ 379:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 37c:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 37f:	83 ec 04             	sub    $0x4,%esp
+ 382:	6a 01                	push   $0x1
+ 384:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 387:	50                   	push   %eax
+ 388:	ff 75 08             	pushl  0x8(%ebp)
+ 38b:	e8 5b ff ff ff       	call   2eb <write>
+ 390:	83 c4 10             	add    $0x10,%esp
+}
+ 393:	90                   	nop
+ 394:	c9                   	leave  
+ 395:	c3                   	ret    
+
+00000396 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 396:	55                   	push   %ebp
+ 397:	89 e5                	mov    %esp,%ebp
+ 399:	53                   	push   %ebx
+ 39a:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 39d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 3a4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 3a8:	74 17                	je     3c1 <printint+0x2b>
+ 3aa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 3ae:	79 11                	jns    3c1 <printint+0x2b>
+    neg = 1;
+ 3b0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 3b7:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3ba:	f7 d8                	neg    %eax
+ 3bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 3bf:	eb 06                	jmp    3c7 <printint+0x31>
+  } else {
+    x = xx;
+ 3c1:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 3c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 3ce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 3d1:	8d 41 01             	lea    0x1(%ecx),%eax
+ 3d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 3d7:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3da:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3dd:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3e2:	f7 f3                	div    %ebx
+ 3e4:	89 d0                	mov    %edx,%eax
+ 3e6:	0f b6 80 7c 0a 00 00 	movzbl 0xa7c(%eax),%eax
+ 3ed:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 3f1:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3f7:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3fc:	f7 f3                	div    %ebx
+ 3fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 401:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 405:	75 c7                	jne    3ce <printint+0x38>
+  if(neg)
+ 407:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 40b:	74 2d                	je     43a <printint+0xa4>
+    buf[i++] = '-';
+ 40d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 410:	8d 50 01             	lea    0x1(%eax),%edx
+ 413:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 416:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 41b:	eb 1d                	jmp    43a <printint+0xa4>
+    putc(fd, buf[i]);
+ 41d:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 420:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 423:	01 d0                	add    %edx,%eax
+ 425:	0f b6 00             	movzbl (%eax),%eax
+ 428:	0f be c0             	movsbl %al,%eax
+ 42b:	83 ec 08             	sub    $0x8,%esp
+ 42e:	50                   	push   %eax
+ 42f:	ff 75 08             	pushl  0x8(%ebp)
+ 432:	e8 3c ff ff ff       	call   373 <putc>
+ 437:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 43a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 43e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 442:	79 d9                	jns    41d <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 444:	90                   	nop
+ 445:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 448:	c9                   	leave  
+ 449:	c3                   	ret    
+
+0000044a <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 44a:	55                   	push   %ebp
+ 44b:	89 e5                	mov    %esp,%ebp
+ 44d:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 450:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 457:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 45a:	83 c0 04             	add    $0x4,%eax
+ 45d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 460:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 467:	e9 59 01 00 00       	jmp    5c5 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 46c:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 46f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 472:	01 d0                	add    %edx,%eax
+ 474:	0f b6 00             	movzbl (%eax),%eax
+ 477:	0f be c0             	movsbl %al,%eax
+ 47a:	25 ff 00 00 00       	and    $0xff,%eax
+ 47f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 482:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 486:	75 2c                	jne    4b4 <printf+0x6a>
+      if(c == '%'){
+ 488:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 48c:	75 0c                	jne    49a <printf+0x50>
+        state = '%';
+ 48e:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 495:	e9 27 01 00 00       	jmp    5c1 <printf+0x177>
+      } else {
+        putc(fd, c);
+ 49a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 49d:	0f be c0             	movsbl %al,%eax
+ 4a0:	83 ec 08             	sub    $0x8,%esp
+ 4a3:	50                   	push   %eax
+ 4a4:	ff 75 08             	pushl  0x8(%ebp)
+ 4a7:	e8 c7 fe ff ff       	call   373 <putc>
+ 4ac:	83 c4 10             	add    $0x10,%esp
+ 4af:	e9 0d 01 00 00       	jmp    5c1 <printf+0x177>
+      }
+    } else if(state == '%'){
+ 4b4:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 4b8:	0f 85 03 01 00 00    	jne    5c1 <printf+0x177>
+      if(c == 'd'){
+ 4be:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 4c2:	75 1e                	jne    4e2 <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 4c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4c7:	8b 00                	mov    (%eax),%eax
+ 4c9:	6a 01                	push   $0x1
+ 4cb:	6a 0a                	push   $0xa
+ 4cd:	50                   	push   %eax
+ 4ce:	ff 75 08             	pushl  0x8(%ebp)
+ 4d1:	e8 c0 fe ff ff       	call   396 <printint>
+ 4d6:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 4d9:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 4dd:	e9 d8 00 00 00       	jmp    5ba <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 4e2:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 4e6:	74 06                	je     4ee <printf+0xa4>
+ 4e8:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 4ec:	75 1e                	jne    50c <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 4ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4f1:	8b 00                	mov    (%eax),%eax
+ 4f3:	6a 00                	push   $0x0
+ 4f5:	6a 10                	push   $0x10
+ 4f7:	50                   	push   %eax
+ 4f8:	ff 75 08             	pushl  0x8(%ebp)
+ 4fb:	e8 96 fe ff ff       	call   396 <printint>
+ 500:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 503:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 507:	e9 ae 00 00 00       	jmp    5ba <printf+0x170>
+      } else if(c == 's'){
+ 50c:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 510:	75 43                	jne    555 <printf+0x10b>
+        s = (char*)*ap;
+ 512:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 515:	8b 00                	mov    (%eax),%eax
+ 517:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 51a:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 51e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 522:	75 25                	jne    549 <printf+0xff>
+          s = "(null)";
+ 524:	c7 45 f4 27 08 00 00 	movl   $0x827,-0xc(%ebp)
+        while(*s != 0){
+ 52b:	eb 1c                	jmp    549 <printf+0xff>
+          putc(fd, *s);
+ 52d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 530:	0f b6 00             	movzbl (%eax),%eax
+ 533:	0f be c0             	movsbl %al,%eax
+ 536:	83 ec 08             	sub    $0x8,%esp
+ 539:	50                   	push   %eax
+ 53a:	ff 75 08             	pushl  0x8(%ebp)
+ 53d:	e8 31 fe ff ff       	call   373 <putc>
+ 542:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 545:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 549:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 54c:	0f b6 00             	movzbl (%eax),%eax
+ 54f:	84 c0                	test   %al,%al
+ 551:	75 da                	jne    52d <printf+0xe3>
+ 553:	eb 65                	jmp    5ba <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 555:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 559:	75 1d                	jne    578 <printf+0x12e>
+        putc(fd, *ap);
+ 55b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 55e:	8b 00                	mov    (%eax),%eax
+ 560:	0f be c0             	movsbl %al,%eax
+ 563:	83 ec 08             	sub    $0x8,%esp
+ 566:	50                   	push   %eax
+ 567:	ff 75 08             	pushl  0x8(%ebp)
+ 56a:	e8 04 fe ff ff       	call   373 <putc>
+ 56f:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 572:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 576:	eb 42                	jmp    5ba <printf+0x170>
+      } else if(c == '%'){
+ 578:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 57c:	75 17                	jne    595 <printf+0x14b>
+        putc(fd, c);
+ 57e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 581:	0f be c0             	movsbl %al,%eax
+ 584:	83 ec 08             	sub    $0x8,%esp
+ 587:	50                   	push   %eax
+ 588:	ff 75 08             	pushl  0x8(%ebp)
+ 58b:	e8 e3 fd ff ff       	call   373 <putc>
+ 590:	83 c4 10             	add    $0x10,%esp
+ 593:	eb 25                	jmp    5ba <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 595:	83 ec 08             	sub    $0x8,%esp
+ 598:	6a 25                	push   $0x25
+ 59a:	ff 75 08             	pushl  0x8(%ebp)
+ 59d:	e8 d1 fd ff ff       	call   373 <putc>
+ 5a2:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 5a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 5a8:	0f be c0             	movsbl %al,%eax
+ 5ab:	83 ec 08             	sub    $0x8,%esp
+ 5ae:	50                   	push   %eax
+ 5af:	ff 75 08             	pushl  0x8(%ebp)
+ 5b2:	e8 bc fd ff ff       	call   373 <putc>
+ 5b7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5c1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 5c5:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 5c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 5cb:	01 d0                	add    %edx,%eax
+ 5cd:	0f b6 00             	movzbl (%eax),%eax
+ 5d0:	84 c0                	test   %al,%al
+ 5d2:	0f 85 94 fe ff ff    	jne    46c <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5d8:	90                   	nop
+ 5d9:	c9                   	leave  
+ 5da:	c3                   	ret    
+
+000005db <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5db:	55                   	push   %ebp
+ 5dc:	89 e5                	mov    %esp,%ebp
+ 5de:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5e1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5e4:	83 e8 08             	sub    $0x8,%eax
+ 5e7:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ea:	a1 98 0a 00 00       	mov    0xa98,%eax
+ 5ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 5f2:	eb 24                	jmp    618 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5f7:	8b 00                	mov    (%eax),%eax
+ 5f9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 5fc:	77 12                	ja     610 <free+0x35>
+ 5fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 601:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 604:	77 24                	ja     62a <free+0x4f>
+ 606:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 609:	8b 00                	mov    (%eax),%eax
+ 60b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 60e:	77 1a                	ja     62a <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 610:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 613:	8b 00                	mov    (%eax),%eax
+ 615:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 618:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 61b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 61e:	76 d4                	jbe    5f4 <free+0x19>
+ 620:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 623:	8b 00                	mov    (%eax),%eax
+ 625:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 628:	76 ca                	jbe    5f4 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 62a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 62d:	8b 40 04             	mov    0x4(%eax),%eax
+ 630:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 637:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 63a:	01 c2                	add    %eax,%edx
+ 63c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 63f:	8b 00                	mov    (%eax),%eax
+ 641:	39 c2                	cmp    %eax,%edx
+ 643:	75 24                	jne    669 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 645:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 648:	8b 50 04             	mov    0x4(%eax),%edx
+ 64b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 64e:	8b 00                	mov    (%eax),%eax
+ 650:	8b 40 04             	mov    0x4(%eax),%eax
+ 653:	01 c2                	add    %eax,%edx
+ 655:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 658:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 65b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 65e:	8b 00                	mov    (%eax),%eax
+ 660:	8b 10                	mov    (%eax),%edx
+ 662:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 665:	89 10                	mov    %edx,(%eax)
+ 667:	eb 0a                	jmp    673 <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 669:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 66c:	8b 10                	mov    (%eax),%edx
+ 66e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 671:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 673:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 676:	8b 40 04             	mov    0x4(%eax),%eax
+ 679:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 680:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 683:	01 d0                	add    %edx,%eax
+ 685:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 688:	75 20                	jne    6aa <free+0xcf>
+    p->s.size += bp->s.size;
+ 68a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 693:	8b 40 04             	mov    0x4(%eax),%eax
+ 696:	01 c2                	add    %eax,%edx
+ 698:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 69b:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 69e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6a1:	8b 10                	mov    (%eax),%edx
+ 6a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6a6:	89 10                	mov    %edx,(%eax)
+ 6a8:	eb 08                	jmp    6b2 <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 6aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6ad:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 6b0:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 6b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6b5:	a3 98 0a 00 00       	mov    %eax,0xa98
+}
+ 6ba:	90                   	nop
+ 6bb:	c9                   	leave  
+ 6bc:	c3                   	ret    
+
+000006bd <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 6bd:	55                   	push   %ebp
+ 6be:	89 e5                	mov    %esp,%ebp
+ 6c0:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 6c3:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 6ca:	77 07                	ja     6d3 <morecore+0x16>
+    nu = 4096;
+ 6cc:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 6d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6d6:	c1 e0 03             	shl    $0x3,%eax
+ 6d9:	83 ec 0c             	sub    $0xc,%esp
+ 6dc:	50                   	push   %eax
+ 6dd:	e8 71 fc ff ff       	call   353 <sbrk>
+ 6e2:	83 c4 10             	add    $0x10,%esp
+ 6e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 6e8:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 6ec:	75 07                	jne    6f5 <morecore+0x38>
+    return 0;
+ 6ee:	b8 00 00 00 00       	mov    $0x0,%eax
+ 6f3:	eb 26                	jmp    71b <morecore+0x5e>
+  hp = (Header*)p;
+ 6f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 6f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 6fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 6fe:	8b 55 08             	mov    0x8(%ebp),%edx
+ 701:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 704:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 707:	83 c0 08             	add    $0x8,%eax
+ 70a:	83 ec 0c             	sub    $0xc,%esp
+ 70d:	50                   	push   %eax
+ 70e:	e8 c8 fe ff ff       	call   5db <free>
+ 713:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 716:	a1 98 0a 00 00       	mov    0xa98,%eax
+}
+ 71b:	c9                   	leave  
+ 71c:	c3                   	ret    
+
+0000071d <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 71d:	55                   	push   %ebp
+ 71e:	89 e5                	mov    %esp,%ebp
+ 720:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 723:	8b 45 08             	mov    0x8(%ebp),%eax
+ 726:	83 c0 07             	add    $0x7,%eax
+ 729:	c1 e8 03             	shr    $0x3,%eax
+ 72c:	83 c0 01             	add    $0x1,%eax
+ 72f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 732:	a1 98 0a 00 00       	mov    0xa98,%eax
+ 737:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 73a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 73e:	75 23                	jne    763 <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 45 f0 90 0a 00 00 	movl   $0xa90,-0x10(%ebp)
+ 747:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 74a:	a3 98 0a 00 00       	mov    %eax,0xa98
+ 74f:	a1 98 0a 00 00       	mov    0xa98,%eax
+ 754:	a3 90 0a 00 00       	mov    %eax,0xa90
+    base.s.size = 0;
+ 759:	c7 05 94 0a 00 00 00 	movl   $0x0,0xa94
+ 760:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 763:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 766:	8b 00                	mov    (%eax),%eax
+ 768:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 76b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 76e:	8b 40 04             	mov    0x4(%eax),%eax
+ 771:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 774:	72 4d                	jb     7c3 <malloc+0xa6>
+      if(p->s.size == nunits)
+ 776:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 779:	8b 40 04             	mov    0x4(%eax),%eax
+ 77c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 77f:	75 0c                	jne    78d <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 781:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 784:	8b 10                	mov    (%eax),%edx
+ 786:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 789:	89 10                	mov    %edx,(%eax)
+ 78b:	eb 26                	jmp    7b3 <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 78d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 790:	8b 40 04             	mov    0x4(%eax),%eax
+ 793:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 796:	89 c2                	mov    %eax,%edx
+ 798:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 79b:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 79e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7a1:	8b 40 04             	mov    0x4(%eax),%eax
+ 7a4:	c1 e0 03             	shl    $0x3,%eax
+ 7a7:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 7aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 7b0:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 7b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7b6:	a3 98 0a 00 00       	mov    %eax,0xa98
+      return (void*)(p + 1);
+ 7bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7be:	83 c0 08             	add    $0x8,%eax
+ 7c1:	eb 3b                	jmp    7fe <malloc+0xe1>
+    }
+    if(p == freep)
+ 7c3:	a1 98 0a 00 00       	mov    0xa98,%eax
+ 7c8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 7cb:	75 1e                	jne    7eb <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 7cd:	83 ec 0c             	sub    $0xc,%esp
+ 7d0:	ff 75 ec             	pushl  -0x14(%ebp)
+ 7d3:	e8 e5 fe ff ff       	call   6bd <morecore>
+ 7d8:	83 c4 10             	add    $0x10,%esp
+ 7db:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 7de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 7e2:	75 07                	jne    7eb <malloc+0xce>
+        return 0;
+ 7e4:	b8 00 00 00 00       	mov    $0x0,%eax
+ 7e9:	eb 13                	jmp    7fe <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 7f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7f4:	8b 00                	mov    (%eax),%eax
+ 7f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 7f9:	e9 6d ff ff ff       	jmp    76b <malloc+0x4e>
+}
+ 7fe:	c9                   	leave  
+ 7ff:	c3                   	ret    
diff -rupN xv6-unrc/ln.sym xv6-mod/ln.sym
--- xv6-unrc/ln.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/ln.sym	2018-04-04 14:53:53.631450089 -0300
@@ -0,0 +1,61 @@
+00000000 .text
+00000800 .rodata
+00000830 .eh_frame
+00000a7c .data
+00000a90 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 ln.c
+00000000 ulib.c
+00000074 stosb
+00000000 printf.c
+00000373 putc
+00000396 printint
+00000a7c digits.1109
+00000000 umalloc.c
+00000a90 base
+00000a98 freep
+000006bd morecore
+0000009a strcpy
+0000044a printf
+00000286 memmove
+00000313 mknod
+0000017d gets
+0000034b getpid
+0000071d malloc
+0000036b procstat
+0000035b sleep
+000002db pipe
+000002eb write
+00000323 fstat
+000002fb kill
+0000033b chdir
+00000303 exec
+000002d3 wait
+000002e3 read
+0000031b unlink
+000002c3 fork
+00000353 sbrk
+00000363 uptime
+00000a8d __bss_start
+00000130 memset
+00000000 main
+000000ca strcmp
+00000343 dup
+000001ec stat
+00000a8d _edata
+00000a9c _end
+0000032b link
+000002cb exit
+00000239 atoi
+00000109 strlen
+0000030b open
+0000014a strchr
+00000333 mkdir
+000002f3 close
+000005db free
Los archivos binarios xv6-unrc/._log.c y xv6-mod/._log.c son distintos
diff -rupN xv6-unrc/log.d xv6-mod/log.d
--- xv6-unrc/log.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/log.d	2018-04-04 14:54:00.835522343 -0300
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ fs.h buf.h
Los archivos binarios xv6-unrc/log.o y xv6-mod/log.o son distintos
Los archivos binarios xv6-unrc/_ls y xv6-mod/_ls son distintos
diff -rupN xv6-unrc/ls.asm xv6-mod/ls.asm
--- xv6-unrc/ls.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/ls.asm	2018-04-04 14:53:53.991453700 -0300
@@ -0,0 +1,1511 @@
+
+_ls:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <fmtname>:
+#include "user.h"
+#include "fs.h"
+
+char*
+fmtname(char *path)
+{
+   0:	55                   	push   %ebp
+   1:	89 e5                	mov    %esp,%ebp
+   3:	53                   	push   %ebx
+   4:	83 ec 14             	sub    $0x14,%esp
+  static char buf[DIRSIZ+1];
+  char *p;
+  
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+   7:	83 ec 0c             	sub    $0xc,%esp
+   a:	ff 75 08             	pushl  0x8(%ebp)
+   d:	e8 c9 03 00 00       	call   3db <strlen>
+  12:	83 c4 10             	add    $0x10,%esp
+  15:	89 c2                	mov    %eax,%edx
+  17:	8b 45 08             	mov    0x8(%ebp),%eax
+  1a:	01 d0                	add    %edx,%eax
+  1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  1f:	eb 04                	jmp    25 <fmtname+0x25>
+  21:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+  25:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  28:	3b 45 08             	cmp    0x8(%ebp),%eax
+  2b:	72 0a                	jb     37 <fmtname+0x37>
+  2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  30:	0f b6 00             	movzbl (%eax),%eax
+  33:	3c 2f                	cmp    $0x2f,%al
+  35:	75 ea                	jne    21 <fmtname+0x21>
+    ;
+  p++;
+  37:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+  3b:	83 ec 0c             	sub    $0xc,%esp
+  3e:	ff 75 f4             	pushl  -0xc(%ebp)
+  41:	e8 95 03 00 00       	call   3db <strlen>
+  46:	83 c4 10             	add    $0x10,%esp
+  49:	83 f8 0d             	cmp    $0xd,%eax
+  4c:	76 05                	jbe    53 <fmtname+0x53>
+    return p;
+  4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  51:	eb 60                	jmp    b3 <fmtname+0xb3>
+  memmove(buf, p, strlen(p));
+  53:	83 ec 0c             	sub    $0xc,%esp
+  56:	ff 75 f4             	pushl  -0xc(%ebp)
+  59:	e8 7d 03 00 00       	call   3db <strlen>
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	83 ec 04             	sub    $0x4,%esp
+  64:	50                   	push   %eax
+  65:	ff 75 f4             	pushl  -0xc(%ebp)
+  68:	68 d8 0d 00 00       	push   $0xdd8
+  6d:	e8 e6 04 00 00       	call   558 <memmove>
+  72:	83 c4 10             	add    $0x10,%esp
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  75:	83 ec 0c             	sub    $0xc,%esp
+  78:	ff 75 f4             	pushl  -0xc(%ebp)
+  7b:	e8 5b 03 00 00       	call   3db <strlen>
+  80:	83 c4 10             	add    $0x10,%esp
+  83:	ba 0e 00 00 00       	mov    $0xe,%edx
+  88:	89 d3                	mov    %edx,%ebx
+  8a:	29 c3                	sub    %eax,%ebx
+  8c:	83 ec 0c             	sub    $0xc,%esp
+  8f:	ff 75 f4             	pushl  -0xc(%ebp)
+  92:	e8 44 03 00 00       	call   3db <strlen>
+  97:	83 c4 10             	add    $0x10,%esp
+  9a:	05 d8 0d 00 00       	add    $0xdd8,%eax
+  9f:	83 ec 04             	sub    $0x4,%esp
+  a2:	53                   	push   %ebx
+  a3:	6a 20                	push   $0x20
+  a5:	50                   	push   %eax
+  a6:	e8 57 03 00 00       	call   402 <memset>
+  ab:	83 c4 10             	add    $0x10,%esp
+  return buf;
+  ae:	b8 d8 0d 00 00       	mov    $0xdd8,%eax
+}
+  b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  b6:	c9                   	leave  
+  b7:	c3                   	ret    
+
+000000b8 <ls>:
+
+void
+ls(char *path)
+{
+  b8:	55                   	push   %ebp
+  b9:	89 e5                	mov    %esp,%ebp
+  bb:	57                   	push   %edi
+  bc:	56                   	push   %esi
+  bd:	53                   	push   %ebx
+  be:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+  
+  if((fd = open(path, 0)) < 0){
+  c4:	83 ec 08             	sub    $0x8,%esp
+  c7:	6a 00                	push   $0x0
+  c9:	ff 75 08             	pushl  0x8(%ebp)
+  cc:	e8 0c 05 00 00       	call   5dd <open>
+  d1:	83 c4 10             	add    $0x10,%esp
+  d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  d7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  db:	79 1a                	jns    f7 <ls+0x3f>
+    printf(2, "ls: cannot open %s\n", path);
+  dd:	83 ec 04             	sub    $0x4,%esp
+  e0:	ff 75 08             	pushl  0x8(%ebp)
+  e3:	68 d2 0a 00 00       	push   $0xad2
+  e8:	6a 02                	push   $0x2
+  ea:	e8 2d 06 00 00       	call   71c <printf>
+  ef:	83 c4 10             	add    $0x10,%esp
+    return;
+  f2:	e9 e3 01 00 00       	jmp    2da <ls+0x222>
+  }
+  
+  if(fstat(fd, &st) < 0){
+  f7:	83 ec 08             	sub    $0x8,%esp
+  fa:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+ 100:	50                   	push   %eax
+ 101:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 104:	e8 ec 04 00 00       	call   5f5 <fstat>
+ 109:	83 c4 10             	add    $0x10,%esp
+ 10c:	85 c0                	test   %eax,%eax
+ 10e:	79 28                	jns    138 <ls+0x80>
+    printf(2, "ls: cannot stat %s\n", path);
+ 110:	83 ec 04             	sub    $0x4,%esp
+ 113:	ff 75 08             	pushl  0x8(%ebp)
+ 116:	68 e6 0a 00 00       	push   $0xae6
+ 11b:	6a 02                	push   $0x2
+ 11d:	e8 fa 05 00 00       	call   71c <printf>
+ 122:	83 c4 10             	add    $0x10,%esp
+    close(fd);
+ 125:	83 ec 0c             	sub    $0xc,%esp
+ 128:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 12b:	e8 95 04 00 00       	call   5c5 <close>
+ 130:	83 c4 10             	add    $0x10,%esp
+    return;
+ 133:	e9 a2 01 00 00       	jmp    2da <ls+0x222>
+  }
+  
+  switch(st.type){
+ 138:	0f b7 85 bc fd ff ff 	movzwl -0x244(%ebp),%eax
+ 13f:	98                   	cwtl   
+ 140:	83 f8 01             	cmp    $0x1,%eax
+ 143:	74 48                	je     18d <ls+0xd5>
+ 145:	83 f8 02             	cmp    $0x2,%eax
+ 148:	0f 85 7e 01 00 00    	jne    2cc <ls+0x214>
+  case T_FILE:
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 14e:	8b bd cc fd ff ff    	mov    -0x234(%ebp),%edi
+ 154:	8b b5 c4 fd ff ff    	mov    -0x23c(%ebp),%esi
+ 15a:	0f b7 85 bc fd ff ff 	movzwl -0x244(%ebp),%eax
+ 161:	0f bf d8             	movswl %ax,%ebx
+ 164:	83 ec 0c             	sub    $0xc,%esp
+ 167:	ff 75 08             	pushl  0x8(%ebp)
+ 16a:	e8 91 fe ff ff       	call   0 <fmtname>
+ 16f:	83 c4 10             	add    $0x10,%esp
+ 172:	83 ec 08             	sub    $0x8,%esp
+ 175:	57                   	push   %edi
+ 176:	56                   	push   %esi
+ 177:	53                   	push   %ebx
+ 178:	50                   	push   %eax
+ 179:	68 fa 0a 00 00       	push   $0xafa
+ 17e:	6a 01                	push   $0x1
+ 180:	e8 97 05 00 00       	call   71c <printf>
+ 185:	83 c4 20             	add    $0x20,%esp
+    break;
+ 188:	e9 3f 01 00 00       	jmp    2cc <ls+0x214>
+  
+  case T_DIR:
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 18d:	83 ec 0c             	sub    $0xc,%esp
+ 190:	ff 75 08             	pushl  0x8(%ebp)
+ 193:	e8 43 02 00 00       	call   3db <strlen>
+ 198:	83 c4 10             	add    $0x10,%esp
+ 19b:	83 c0 10             	add    $0x10,%eax
+ 19e:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1a3:	76 17                	jbe    1bc <ls+0x104>
+      printf(1, "ls: path too long\n");
+ 1a5:	83 ec 08             	sub    $0x8,%esp
+ 1a8:	68 07 0b 00 00       	push   $0xb07
+ 1ad:	6a 01                	push   $0x1
+ 1af:	e8 68 05 00 00       	call   71c <printf>
+ 1b4:	83 c4 10             	add    $0x10,%esp
+      break;
+ 1b7:	e9 10 01 00 00       	jmp    2cc <ls+0x214>
+    }
+    strcpy(buf, path);
+ 1bc:	83 ec 08             	sub    $0x8,%esp
+ 1bf:	ff 75 08             	pushl  0x8(%ebp)
+ 1c2:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
+ 1c8:	50                   	push   %eax
+ 1c9:	e8 9e 01 00 00       	call   36c <strcpy>
+ 1ce:	83 c4 10             	add    $0x10,%esp
+    p = buf+strlen(buf);
+ 1d1:	83 ec 0c             	sub    $0xc,%esp
+ 1d4:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
+ 1da:	50                   	push   %eax
+ 1db:	e8 fb 01 00 00       	call   3db <strlen>
+ 1e0:	83 c4 10             	add    $0x10,%esp
+ 1e3:	89 c2                	mov    %eax,%edx
+ 1e5:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
+ 1eb:	01 d0                	add    %edx,%eax
+ 1ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    *p++ = '/';
+ 1f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+ 1f3:	8d 50 01             	lea    0x1(%eax),%edx
+ 1f6:	89 55 e0             	mov    %edx,-0x20(%ebp)
+ 1f9:	c6 00 2f             	movb   $0x2f,(%eax)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1fc:	e9 aa 00 00 00       	jmp    2ab <ls+0x1f3>
+      if(de.inum == 0)
+ 201:	0f b7 85 d0 fd ff ff 	movzwl -0x230(%ebp),%eax
+ 208:	66 85 c0             	test   %ax,%ax
+ 20b:	75 05                	jne    212 <ls+0x15a>
+        continue;
+ 20d:	e9 99 00 00 00       	jmp    2ab <ls+0x1f3>
+      memmove(p, de.name, DIRSIZ);
+ 212:	83 ec 04             	sub    $0x4,%esp
+ 215:	6a 0e                	push   $0xe
+ 217:	8d 85 d0 fd ff ff    	lea    -0x230(%ebp),%eax
+ 21d:	83 c0 02             	add    $0x2,%eax
+ 220:	50                   	push   %eax
+ 221:	ff 75 e0             	pushl  -0x20(%ebp)
+ 224:	e8 2f 03 00 00       	call   558 <memmove>
+ 229:	83 c4 10             	add    $0x10,%esp
+      p[DIRSIZ] = 0;
+ 22c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+ 22f:	83 c0 0e             	add    $0xe,%eax
+ 232:	c6 00 00             	movb   $0x0,(%eax)
+      if(stat(buf, &st) < 0){
+ 235:	83 ec 08             	sub    $0x8,%esp
+ 238:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+ 23e:	50                   	push   %eax
+ 23f:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
+ 245:	50                   	push   %eax
+ 246:	e8 73 02 00 00       	call   4be <stat>
+ 24b:	83 c4 10             	add    $0x10,%esp
+ 24e:	85 c0                	test   %eax,%eax
+ 250:	79 1b                	jns    26d <ls+0x1b5>
+        printf(1, "ls: cannot stat %s\n", buf);
+ 252:	83 ec 04             	sub    $0x4,%esp
+ 255:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
+ 25b:	50                   	push   %eax
+ 25c:	68 e6 0a 00 00       	push   $0xae6
+ 261:	6a 01                	push   $0x1
+ 263:	e8 b4 04 00 00       	call   71c <printf>
+ 268:	83 c4 10             	add    $0x10,%esp
+        continue;
+ 26b:	eb 3e                	jmp    2ab <ls+0x1f3>
+      }
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 26d:	8b bd cc fd ff ff    	mov    -0x234(%ebp),%edi
+ 273:	8b b5 c4 fd ff ff    	mov    -0x23c(%ebp),%esi
+ 279:	0f b7 85 bc fd ff ff 	movzwl -0x244(%ebp),%eax
+ 280:	0f bf d8             	movswl %ax,%ebx
+ 283:	83 ec 0c             	sub    $0xc,%esp
+ 286:	8d 85 e0 fd ff ff    	lea    -0x220(%ebp),%eax
+ 28c:	50                   	push   %eax
+ 28d:	e8 6e fd ff ff       	call   0 <fmtname>
+ 292:	83 c4 10             	add    $0x10,%esp
+ 295:	83 ec 08             	sub    $0x8,%esp
+ 298:	57                   	push   %edi
+ 299:	56                   	push   %esi
+ 29a:	53                   	push   %ebx
+ 29b:	50                   	push   %eax
+ 29c:	68 fa 0a 00 00       	push   $0xafa
+ 2a1:	6a 01                	push   $0x1
+ 2a3:	e8 74 04 00 00       	call   71c <printf>
+ 2a8:	83 c4 20             	add    $0x20,%esp
+      break;
+    }
+    strcpy(buf, path);
+    p = buf+strlen(buf);
+    *p++ = '/';
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 2ab:	83 ec 04             	sub    $0x4,%esp
+ 2ae:	6a 10                	push   $0x10
+ 2b0:	8d 85 d0 fd ff ff    	lea    -0x230(%ebp),%eax
+ 2b6:	50                   	push   %eax
+ 2b7:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 2ba:	e8 f6 02 00 00       	call   5b5 <read>
+ 2bf:	83 c4 10             	add    $0x10,%esp
+ 2c2:	83 f8 10             	cmp    $0x10,%eax
+ 2c5:	0f 84 36 ff ff ff    	je     201 <ls+0x149>
+        printf(1, "ls: cannot stat %s\n", buf);
+        continue;
+      }
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+    }
+    break;
+ 2cb:	90                   	nop
+  }
+  close(fd);
+ 2cc:	83 ec 0c             	sub    $0xc,%esp
+ 2cf:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 2d2:	e8 ee 02 00 00       	call   5c5 <close>
+ 2d7:	83 c4 10             	add    $0x10,%esp
+}
+ 2da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2dd:	5b                   	pop    %ebx
+ 2de:	5e                   	pop    %esi
+ 2df:	5f                   	pop    %edi
+ 2e0:	5d                   	pop    %ebp
+ 2e1:	c3                   	ret    
+
+000002e2 <main>:
+
+int
+main(int argc, char *argv[])
+{
+ 2e2:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+ 2e6:	83 e4 f0             	and    $0xfffffff0,%esp
+ 2e9:	ff 71 fc             	pushl  -0x4(%ecx)
+ 2ec:	55                   	push   %ebp
+ 2ed:	89 e5                	mov    %esp,%ebp
+ 2ef:	53                   	push   %ebx
+ 2f0:	51                   	push   %ecx
+ 2f1:	83 ec 10             	sub    $0x10,%esp
+ 2f4:	89 cb                	mov    %ecx,%ebx
+  int i;
+
+  if(argc < 2){
+ 2f6:	83 3b 01             	cmpl   $0x1,(%ebx)
+ 2f9:	7f 15                	jg     310 <main+0x2e>
+    ls(".");
+ 2fb:	83 ec 0c             	sub    $0xc,%esp
+ 2fe:	68 1a 0b 00 00       	push   $0xb1a
+ 303:	e8 b0 fd ff ff       	call   b8 <ls>
+ 308:	83 c4 10             	add    $0x10,%esp
+    exit();
+ 30b:	e8 8d 02 00 00       	call   59d <exit>
+  }
+  for(i=1; i<argc; i++)
+ 310:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+ 317:	eb 21                	jmp    33a <main+0x58>
+    ls(argv[i]);
+ 319:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 31c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+ 323:	8b 43 04             	mov    0x4(%ebx),%eax
+ 326:	01 d0                	add    %edx,%eax
+ 328:	8b 00                	mov    (%eax),%eax
+ 32a:	83 ec 0c             	sub    $0xc,%esp
+ 32d:	50                   	push   %eax
+ 32e:	e8 85 fd ff ff       	call   b8 <ls>
+ 333:	83 c4 10             	add    $0x10,%esp
+
+  if(argc < 2){
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+ 336:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+ 33a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 33d:	3b 03                	cmp    (%ebx),%eax
+ 33f:	7c d8                	jl     319 <main+0x37>
+    ls(argv[i]);
+  exit();
+ 341:	e8 57 02 00 00       	call   59d <exit>
+
+00000346 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+ 346:	55                   	push   %ebp
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	57                   	push   %edi
+ 34a:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+ 34b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34e:	8b 55 10             	mov    0x10(%ebp),%edx
+ 351:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 354:	89 cb                	mov    %ecx,%ebx
+ 356:	89 df                	mov    %ebx,%edi
+ 358:	89 d1                	mov    %edx,%ecx
+ 35a:	fc                   	cld    
+ 35b:	f3 aa                	rep stos %al,%es:(%edi)
+ 35d:	89 ca                	mov    %ecx,%edx
+ 35f:	89 fb                	mov    %edi,%ebx
+ 361:	89 5d 08             	mov    %ebx,0x8(%ebp)
+ 364:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+ 367:	90                   	nop
+ 368:	5b                   	pop    %ebx
+ 369:	5f                   	pop    %edi
+ 36a:	5d                   	pop    %ebp
+ 36b:	c3                   	ret    
+
+0000036c <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+ 36c:	55                   	push   %ebp
+ 36d:	89 e5                	mov    %esp,%ebp
+ 36f:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+ 372:	8b 45 08             	mov    0x8(%ebp),%eax
+ 375:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+ 378:	90                   	nop
+ 379:	8b 45 08             	mov    0x8(%ebp),%eax
+ 37c:	8d 50 01             	lea    0x1(%eax),%edx
+ 37f:	89 55 08             	mov    %edx,0x8(%ebp)
+ 382:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 385:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 388:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+ 38b:	0f b6 12             	movzbl (%edx),%edx
+ 38e:	88 10                	mov    %dl,(%eax)
+ 390:	0f b6 00             	movzbl (%eax),%eax
+ 393:	84 c0                	test   %al,%al
+ 395:	75 e2                	jne    379 <strcpy+0xd>
+    ;
+  return os;
+ 397:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 39a:	c9                   	leave  
+ 39b:	c3                   	ret    
+
+0000039c <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 39c:	55                   	push   %ebp
+ 39d:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+ 39f:	eb 08                	jmp    3a9 <strcmp+0xd>
+    p++, q++;
+ 3a1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 3a5:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 3a9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3ac:	0f b6 00             	movzbl (%eax),%eax
+ 3af:	84 c0                	test   %al,%al
+ 3b1:	74 10                	je     3c3 <strcmp+0x27>
+ 3b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3b6:	0f b6 10             	movzbl (%eax),%edx
+ 3b9:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3bc:	0f b6 00             	movzbl (%eax),%eax
+ 3bf:	38 c2                	cmp    %al,%dl
+ 3c1:	74 de                	je     3a1 <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 3c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3c6:	0f b6 00             	movzbl (%eax),%eax
+ 3c9:	0f b6 d0             	movzbl %al,%edx
+ 3cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3cf:	0f b6 00             	movzbl (%eax),%eax
+ 3d2:	0f b6 c0             	movzbl %al,%eax
+ 3d5:	29 c2                	sub    %eax,%edx
+ 3d7:	89 d0                	mov    %edx,%eax
+}
+ 3d9:	5d                   	pop    %ebp
+ 3da:	c3                   	ret    
+
+000003db <strlen>:
+
+uint
+strlen(char *s)
+{
+ 3db:	55                   	push   %ebp
+ 3dc:	89 e5                	mov    %esp,%ebp
+ 3de:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 3e8:	eb 04                	jmp    3ee <strlen+0x13>
+ 3ea:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 3ee:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 3f1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3f4:	01 d0                	add    %edx,%eax
+ 3f6:	0f b6 00             	movzbl (%eax),%eax
+ 3f9:	84 c0                	test   %al,%al
+ 3fb:	75 ed                	jne    3ea <strlen+0xf>
+    ;
+  return n;
+ 3fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 400:	c9                   	leave  
+ 401:	c3                   	ret    
+
+00000402 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 402:	55                   	push   %ebp
+ 403:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 405:	8b 45 10             	mov    0x10(%ebp),%eax
+ 408:	50                   	push   %eax
+ 409:	ff 75 0c             	pushl  0xc(%ebp)
+ 40c:	ff 75 08             	pushl  0x8(%ebp)
+ 40f:	e8 32 ff ff ff       	call   346 <stosb>
+ 414:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 417:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 41a:	c9                   	leave  
+ 41b:	c3                   	ret    
+
+0000041c <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 41c:	55                   	push   %ebp
+ 41d:	89 e5                	mov    %esp,%ebp
+ 41f:	83 ec 04             	sub    $0x4,%esp
+ 422:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 425:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 428:	eb 14                	jmp    43e <strchr+0x22>
+    if(*s == c)
+ 42a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42d:	0f b6 00             	movzbl (%eax),%eax
+ 430:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 433:	75 05                	jne    43a <strchr+0x1e>
+      return (char*)s;
+ 435:	8b 45 08             	mov    0x8(%ebp),%eax
+ 438:	eb 13                	jmp    44d <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 43a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 43e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 441:	0f b6 00             	movzbl (%eax),%eax
+ 444:	84 c0                	test   %al,%al
+ 446:	75 e2                	jne    42a <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 448:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 44d:	c9                   	leave  
+ 44e:	c3                   	ret    
+
+0000044f <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 44f:	55                   	push   %ebp
+ 450:	89 e5                	mov    %esp,%ebp
+ 452:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 455:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 45c:	eb 42                	jmp    4a0 <gets+0x51>
+    cc = read(0, &c, 1);
+ 45e:	83 ec 04             	sub    $0x4,%esp
+ 461:	6a 01                	push   $0x1
+ 463:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 466:	50                   	push   %eax
+ 467:	6a 00                	push   $0x0
+ 469:	e8 47 01 00 00       	call   5b5 <read>
+ 46e:	83 c4 10             	add    $0x10,%esp
+ 471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 474:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 478:	7e 33                	jle    4ad <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 47a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 47d:	8d 50 01             	lea    0x1(%eax),%edx
+ 480:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 483:	89 c2                	mov    %eax,%edx
+ 485:	8b 45 08             	mov    0x8(%ebp),%eax
+ 488:	01 c2                	add    %eax,%edx
+ 48a:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 48e:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 490:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 494:	3c 0a                	cmp    $0xa,%al
+ 496:	74 16                	je     4ae <gets+0x5f>
+ 498:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 49c:	3c 0d                	cmp    $0xd,%al
+ 49e:	74 0e                	je     4ae <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 4a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 4a3:	83 c0 01             	add    $0x1,%eax
+ 4a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 4a9:	7c b3                	jl     45e <gets+0xf>
+ 4ab:	eb 01                	jmp    4ae <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 4ad:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 4ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 4b1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4b4:	01 d0                	add    %edx,%eax
+ 4b6:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 4b9:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 4bc:	c9                   	leave  
+ 4bd:	c3                   	ret    
+
+000004be <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 4be:	55                   	push   %ebp
+ 4bf:	89 e5                	mov    %esp,%ebp
+ 4c1:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4c4:	83 ec 08             	sub    $0x8,%esp
+ 4c7:	6a 00                	push   $0x0
+ 4c9:	ff 75 08             	pushl  0x8(%ebp)
+ 4cc:	e8 0c 01 00 00       	call   5dd <open>
+ 4d1:	83 c4 10             	add    $0x10,%esp
+ 4d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 4d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 4db:	79 07                	jns    4e4 <stat+0x26>
+    return -1;
+ 4dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 4e2:	eb 25                	jmp    509 <stat+0x4b>
+  r = fstat(fd, st);
+ 4e4:	83 ec 08             	sub    $0x8,%esp
+ 4e7:	ff 75 0c             	pushl  0xc(%ebp)
+ 4ea:	ff 75 f4             	pushl  -0xc(%ebp)
+ 4ed:	e8 03 01 00 00       	call   5f5 <fstat>
+ 4f2:	83 c4 10             	add    $0x10,%esp
+ 4f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 4f8:	83 ec 0c             	sub    $0xc,%esp
+ 4fb:	ff 75 f4             	pushl  -0xc(%ebp)
+ 4fe:	e8 c2 00 00 00       	call   5c5 <close>
+ 503:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 506:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 509:	c9                   	leave  
+ 50a:	c3                   	ret    
+
+0000050b <atoi>:
+
+int
+atoi(const char *s)
+{
+ 50b:	55                   	push   %ebp
+ 50c:	89 e5                	mov    %esp,%ebp
+ 50e:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 511:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 518:	eb 25                	jmp    53f <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 51a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 51d:	89 d0                	mov    %edx,%eax
+ 51f:	c1 e0 02             	shl    $0x2,%eax
+ 522:	01 d0                	add    %edx,%eax
+ 524:	01 c0                	add    %eax,%eax
+ 526:	89 c1                	mov    %eax,%ecx
+ 528:	8b 45 08             	mov    0x8(%ebp),%eax
+ 52b:	8d 50 01             	lea    0x1(%eax),%edx
+ 52e:	89 55 08             	mov    %edx,0x8(%ebp)
+ 531:	0f b6 00             	movzbl (%eax),%eax
+ 534:	0f be c0             	movsbl %al,%eax
+ 537:	01 c8                	add    %ecx,%eax
+ 539:	83 e8 30             	sub    $0x30,%eax
+ 53c:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 542:	0f b6 00             	movzbl (%eax),%eax
+ 545:	3c 2f                	cmp    $0x2f,%al
+ 547:	7e 0a                	jle    553 <atoi+0x48>
+ 549:	8b 45 08             	mov    0x8(%ebp),%eax
+ 54c:	0f b6 00             	movzbl (%eax),%eax
+ 54f:	3c 39                	cmp    $0x39,%al
+ 551:	7e c7                	jle    51a <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 553:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 556:	c9                   	leave  
+ 557:	c3                   	ret    
+
+00000558 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 558:	55                   	push   %ebp
+ 559:	89 e5                	mov    %esp,%ebp
+ 55b:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 55e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 561:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 564:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 567:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 56a:	eb 17                	jmp    583 <memmove+0x2b>
+    *dst++ = *src++;
+ 56c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 56f:	8d 50 01             	lea    0x1(%eax),%edx
+ 572:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 575:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 578:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 57b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 57e:	0f b6 12             	movzbl (%edx),%edx
+ 581:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 583:	8b 45 10             	mov    0x10(%ebp),%eax
+ 586:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 589:	89 55 10             	mov    %edx,0x10(%ebp)
+ 58c:	85 c0                	test   %eax,%eax
+ 58e:	7f dc                	jg     56c <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 590:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 593:	c9                   	leave  
+ 594:	c3                   	ret    
+
+00000595 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 595:	b8 01 00 00 00       	mov    $0x1,%eax
+ 59a:	cd 40                	int    $0x40
+ 59c:	c3                   	ret    
+
+0000059d <exit>:
+SYSCALL(exit)
+ 59d:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a2:	cd 40                	int    $0x40
+ 5a4:	c3                   	ret    
+
+000005a5 <wait>:
+SYSCALL(wait)
+ 5a5:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5aa:	cd 40                	int    $0x40
+ 5ac:	c3                   	ret    
+
+000005ad <pipe>:
+SYSCALL(pipe)
+ 5ad:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b2:	cd 40                	int    $0x40
+ 5b4:	c3                   	ret    
+
+000005b5 <read>:
+SYSCALL(read)
+ 5b5:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5ba:	cd 40                	int    $0x40
+ 5bc:	c3                   	ret    
+
+000005bd <write>:
+SYSCALL(write)
+ 5bd:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c2:	cd 40                	int    $0x40
+ 5c4:	c3                   	ret    
+
+000005c5 <close>:
+SYSCALL(close)
+ 5c5:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5ca:	cd 40                	int    $0x40
+ 5cc:	c3                   	ret    
+
+000005cd <kill>:
+SYSCALL(kill)
+ 5cd:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d2:	cd 40                	int    $0x40
+ 5d4:	c3                   	ret    
+
+000005d5 <exec>:
+SYSCALL(exec)
+ 5d5:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5da:	cd 40                	int    $0x40
+ 5dc:	c3                   	ret    
+
+000005dd <open>:
+SYSCALL(open)
+ 5dd:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e2:	cd 40                	int    $0x40
+ 5e4:	c3                   	ret    
+
+000005e5 <mknod>:
+SYSCALL(mknod)
+ 5e5:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5ea:	cd 40                	int    $0x40
+ 5ec:	c3                   	ret    
+
+000005ed <unlink>:
+SYSCALL(unlink)
+ 5ed:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f2:	cd 40                	int    $0x40
+ 5f4:	c3                   	ret    
+
+000005f5 <fstat>:
+SYSCALL(fstat)
+ 5f5:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5fa:	cd 40                	int    $0x40
+ 5fc:	c3                   	ret    
+
+000005fd <link>:
+SYSCALL(link)
+ 5fd:	b8 13 00 00 00       	mov    $0x13,%eax
+ 602:	cd 40                	int    $0x40
+ 604:	c3                   	ret    
+
+00000605 <mkdir>:
+SYSCALL(mkdir)
+ 605:	b8 14 00 00 00       	mov    $0x14,%eax
+ 60a:	cd 40                	int    $0x40
+ 60c:	c3                   	ret    
+
+0000060d <chdir>:
+SYSCALL(chdir)
+ 60d:	b8 09 00 00 00       	mov    $0x9,%eax
+ 612:	cd 40                	int    $0x40
+ 614:	c3                   	ret    
+
+00000615 <dup>:
+SYSCALL(dup)
+ 615:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 61a:	cd 40                	int    $0x40
+ 61c:	c3                   	ret    
+
+0000061d <getpid>:
+SYSCALL(getpid)
+ 61d:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 622:	cd 40                	int    $0x40
+ 624:	c3                   	ret    
+
+00000625 <sbrk>:
+SYSCALL(sbrk)
+ 625:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 62a:	cd 40                	int    $0x40
+ 62c:	c3                   	ret    
+
+0000062d <sleep>:
+SYSCALL(sleep)
+ 62d:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 632:	cd 40                	int    $0x40
+ 634:	c3                   	ret    
+
+00000635 <uptime>:
+SYSCALL(uptime)
+ 635:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 63a:	cd 40                	int    $0x40
+ 63c:	c3                   	ret    
+
+0000063d <procstat>:
+SYSCALL(procstat) 
+ 63d:	b8 16 00 00 00       	mov    $0x16,%eax
+ 642:	cd 40                	int    $0x40
+ 644:	c3                   	ret    
+
+00000645 <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 645:	55                   	push   %ebp
+ 646:	89 e5                	mov    %esp,%ebp
+ 648:	83 ec 18             	sub    $0x18,%esp
+ 64b:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 64e:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 651:	83 ec 04             	sub    $0x4,%esp
+ 654:	6a 01                	push   $0x1
+ 656:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 659:	50                   	push   %eax
+ 65a:	ff 75 08             	pushl  0x8(%ebp)
+ 65d:	e8 5b ff ff ff       	call   5bd <write>
+ 662:	83 c4 10             	add    $0x10,%esp
+}
+ 665:	90                   	nop
+ 666:	c9                   	leave  
+ 667:	c3                   	ret    
+
+00000668 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 668:	55                   	push   %ebp
+ 669:	89 e5                	mov    %esp,%ebp
+ 66b:	53                   	push   %ebx
+ 66c:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 66f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 676:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 67a:	74 17                	je     693 <printint+0x2b>
+ 67c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 680:	79 11                	jns    693 <printint+0x2b>
+    neg = 1;
+ 682:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 689:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 68c:	f7 d8                	neg    %eax
+ 68e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 691:	eb 06                	jmp    699 <printint+0x31>
+  } else {
+    x = xx;
+ 693:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 696:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 699:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 6a0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 6a3:	8d 41 01             	lea    0x1(%ecx),%eax
+ 6a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 6a9:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 6ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 6af:	ba 00 00 00 00       	mov    $0x0,%edx
+ 6b4:	f7 f3                	div    %ebx
+ 6b6:	89 d0                	mov    %edx,%eax
+ 6b8:	0f b6 80 c4 0d 00 00 	movzbl 0xdc4(%eax),%eax
+ 6bf:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 6c3:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 6c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 6c9:	ba 00 00 00 00       	mov    $0x0,%edx
+ 6ce:	f7 f3                	div    %ebx
+ 6d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 6d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 6d7:	75 c7                	jne    6a0 <printint+0x38>
+  if(neg)
+ 6d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 6dd:	74 2d                	je     70c <printint+0xa4>
+    buf[i++] = '-';
+ 6df:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 6e2:	8d 50 01             	lea    0x1(%eax),%edx
+ 6e5:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 6e8:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 6ed:	eb 1d                	jmp    70c <printint+0xa4>
+    putc(fd, buf[i]);
+ 6ef:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 6f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 6f5:	01 d0                	add    %edx,%eax
+ 6f7:	0f b6 00             	movzbl (%eax),%eax
+ 6fa:	0f be c0             	movsbl %al,%eax
+ 6fd:	83 ec 08             	sub    $0x8,%esp
+ 700:	50                   	push   %eax
+ 701:	ff 75 08             	pushl  0x8(%ebp)
+ 704:	e8 3c ff ff ff       	call   645 <putc>
+ 709:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 70c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 710:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 714:	79 d9                	jns    6ef <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 716:	90                   	nop
+ 717:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 71a:	c9                   	leave  
+ 71b:	c3                   	ret    
+
+0000071c <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 71c:	55                   	push   %ebp
+ 71d:	89 e5                	mov    %esp,%ebp
+ 71f:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 722:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 729:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 72c:	83 c0 04             	add    $0x4,%eax
+ 72f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 732:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 739:	e9 59 01 00 00       	jmp    897 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 73e:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 741:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 744:	01 d0                	add    %edx,%eax
+ 746:	0f b6 00             	movzbl (%eax),%eax
+ 749:	0f be c0             	movsbl %al,%eax
+ 74c:	25 ff 00 00 00       	and    $0xff,%eax
+ 751:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 754:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 758:	75 2c                	jne    786 <printf+0x6a>
+      if(c == '%'){
+ 75a:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 75e:	75 0c                	jne    76c <printf+0x50>
+        state = '%';
+ 760:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 767:	e9 27 01 00 00       	jmp    893 <printf+0x177>
+      } else {
+        putc(fd, c);
+ 76c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 76f:	0f be c0             	movsbl %al,%eax
+ 772:	83 ec 08             	sub    $0x8,%esp
+ 775:	50                   	push   %eax
+ 776:	ff 75 08             	pushl  0x8(%ebp)
+ 779:	e8 c7 fe ff ff       	call   645 <putc>
+ 77e:	83 c4 10             	add    $0x10,%esp
+ 781:	e9 0d 01 00 00       	jmp    893 <printf+0x177>
+      }
+    } else if(state == '%'){
+ 786:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 78a:	0f 85 03 01 00 00    	jne    893 <printf+0x177>
+      if(c == 'd'){
+ 790:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 794:	75 1e                	jne    7b4 <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 796:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 799:	8b 00                	mov    (%eax),%eax
+ 79b:	6a 01                	push   $0x1
+ 79d:	6a 0a                	push   $0xa
+ 79f:	50                   	push   %eax
+ 7a0:	ff 75 08             	pushl  0x8(%ebp)
+ 7a3:	e8 c0 fe ff ff       	call   668 <printint>
+ 7a8:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 7ab:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 7af:	e9 d8 00 00 00       	jmp    88c <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 7b4:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 7b8:	74 06                	je     7c0 <printf+0xa4>
+ 7ba:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 7be:	75 1e                	jne    7de <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 7c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 7c3:	8b 00                	mov    (%eax),%eax
+ 7c5:	6a 00                	push   $0x0
+ 7c7:	6a 10                	push   $0x10
+ 7c9:	50                   	push   %eax
+ 7ca:	ff 75 08             	pushl  0x8(%ebp)
+ 7cd:	e8 96 fe ff ff       	call   668 <printint>
+ 7d2:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 7d5:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 7d9:	e9 ae 00 00 00       	jmp    88c <printf+0x170>
+      } else if(c == 's'){
+ 7de:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 7e2:	75 43                	jne    827 <printf+0x10b>
+        s = (char*)*ap;
+ 7e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 7e7:	8b 00                	mov    (%eax),%eax
+ 7e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 7ec:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 7f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 7f4:	75 25                	jne    81b <printf+0xff>
+          s = "(null)";
+ 7f6:	c7 45 f4 1c 0b 00 00 	movl   $0xb1c,-0xc(%ebp)
+        while(*s != 0){
+ 7fd:	eb 1c                	jmp    81b <printf+0xff>
+          putc(fd, *s);
+ 7ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 802:	0f b6 00             	movzbl (%eax),%eax
+ 805:	0f be c0             	movsbl %al,%eax
+ 808:	83 ec 08             	sub    $0x8,%esp
+ 80b:	50                   	push   %eax
+ 80c:	ff 75 08             	pushl  0x8(%ebp)
+ 80f:	e8 31 fe ff ff       	call   645 <putc>
+ 814:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 817:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 81b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 81e:	0f b6 00             	movzbl (%eax),%eax
+ 821:	84 c0                	test   %al,%al
+ 823:	75 da                	jne    7ff <printf+0xe3>
+ 825:	eb 65                	jmp    88c <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 827:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 82b:	75 1d                	jne    84a <printf+0x12e>
+        putc(fd, *ap);
+ 82d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 830:	8b 00                	mov    (%eax),%eax
+ 832:	0f be c0             	movsbl %al,%eax
+ 835:	83 ec 08             	sub    $0x8,%esp
+ 838:	50                   	push   %eax
+ 839:	ff 75 08             	pushl  0x8(%ebp)
+ 83c:	e8 04 fe ff ff       	call   645 <putc>
+ 841:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 844:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 848:	eb 42                	jmp    88c <printf+0x170>
+      } else if(c == '%'){
+ 84a:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 84e:	75 17                	jne    867 <printf+0x14b>
+        putc(fd, c);
+ 850:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 853:	0f be c0             	movsbl %al,%eax
+ 856:	83 ec 08             	sub    $0x8,%esp
+ 859:	50                   	push   %eax
+ 85a:	ff 75 08             	pushl  0x8(%ebp)
+ 85d:	e8 e3 fd ff ff       	call   645 <putc>
+ 862:	83 c4 10             	add    $0x10,%esp
+ 865:	eb 25                	jmp    88c <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 867:	83 ec 08             	sub    $0x8,%esp
+ 86a:	6a 25                	push   $0x25
+ 86c:	ff 75 08             	pushl  0x8(%ebp)
+ 86f:	e8 d1 fd ff ff       	call   645 <putc>
+ 874:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 877:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 87a:	0f be c0             	movsbl %al,%eax
+ 87d:	83 ec 08             	sub    $0x8,%esp
+ 880:	50                   	push   %eax
+ 881:	ff 75 08             	pushl  0x8(%ebp)
+ 884:	e8 bc fd ff ff       	call   645 <putc>
+ 889:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 88c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 893:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 897:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 89a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 89d:	01 d0                	add    %edx,%eax
+ 89f:	0f b6 00             	movzbl (%eax),%eax
+ 8a2:	84 c0                	test   %al,%al
+ 8a4:	0f 85 94 fe ff ff    	jne    73e <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 8aa:	90                   	nop
+ 8ab:	c9                   	leave  
+ 8ac:	c3                   	ret    
+
+000008ad <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8ad:	55                   	push   %ebp
+ 8ae:	89 e5                	mov    %esp,%ebp
+ 8b0:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 8b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 8b6:	83 e8 08             	sub    $0x8,%eax
+ 8b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8bc:	a1 f0 0d 00 00       	mov    0xdf0,%eax
+ 8c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 8c4:	eb 24                	jmp    8ea <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8c9:	8b 00                	mov    (%eax),%eax
+ 8cb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 8ce:	77 12                	ja     8e2 <free+0x35>
+ 8d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 8d3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 8d6:	77 24                	ja     8fc <free+0x4f>
+ 8d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8db:	8b 00                	mov    (%eax),%eax
+ 8dd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 8e0:	77 1a                	ja     8fc <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8e5:	8b 00                	mov    (%eax),%eax
+ 8e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 8ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 8ed:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 8f0:	76 d4                	jbe    8c6 <free+0x19>
+ 8f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 8f5:	8b 00                	mov    (%eax),%eax
+ 8f7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 8fa:	76 ca                	jbe    8c6 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 8ff:	8b 40 04             	mov    0x4(%eax),%eax
+ 902:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 909:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 90c:	01 c2                	add    %eax,%edx
+ 90e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 911:	8b 00                	mov    (%eax),%eax
+ 913:	39 c2                	cmp    %eax,%edx
+ 915:	75 24                	jne    93b <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 917:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 91a:	8b 50 04             	mov    0x4(%eax),%edx
+ 91d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 920:	8b 00                	mov    (%eax),%eax
+ 922:	8b 40 04             	mov    0x4(%eax),%eax
+ 925:	01 c2                	add    %eax,%edx
+ 927:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 92a:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 92d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 930:	8b 00                	mov    (%eax),%eax
+ 932:	8b 10                	mov    (%eax),%edx
+ 934:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 937:	89 10                	mov    %edx,(%eax)
+ 939:	eb 0a                	jmp    945 <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 93b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 93e:	8b 10                	mov    (%eax),%edx
+ 940:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 943:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 945:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 948:	8b 40 04             	mov    0x4(%eax),%eax
+ 94b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 952:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 955:	01 d0                	add    %edx,%eax
+ 957:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 95a:	75 20                	jne    97c <free+0xcf>
+    p->s.size += bp->s.size;
+ 95c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 95f:	8b 50 04             	mov    0x4(%eax),%edx
+ 962:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 965:	8b 40 04             	mov    0x4(%eax),%eax
+ 968:	01 c2                	add    %eax,%edx
+ 96a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 96d:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 970:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 973:	8b 10                	mov    (%eax),%edx
+ 975:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 978:	89 10                	mov    %edx,(%eax)
+ 97a:	eb 08                	jmp    984 <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 97c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 97f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 982:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 984:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 987:	a3 f0 0d 00 00       	mov    %eax,0xdf0
+}
+ 98c:	90                   	nop
+ 98d:	c9                   	leave  
+ 98e:	c3                   	ret    
+
+0000098f <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 98f:	55                   	push   %ebp
+ 990:	89 e5                	mov    %esp,%ebp
+ 992:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 995:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 99c:	77 07                	ja     9a5 <morecore+0x16>
+    nu = 4096;
+ 99e:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 9a5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 9a8:	c1 e0 03             	shl    $0x3,%eax
+ 9ab:	83 ec 0c             	sub    $0xc,%esp
+ 9ae:	50                   	push   %eax
+ 9af:	e8 71 fc ff ff       	call   625 <sbrk>
+ 9b4:	83 c4 10             	add    $0x10,%esp
+ 9b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 9ba:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 9be:	75 07                	jne    9c7 <morecore+0x38>
+    return 0;
+ 9c0:	b8 00 00 00 00       	mov    $0x0,%eax
+ 9c5:	eb 26                	jmp    9ed <morecore+0x5e>
+  hp = (Header*)p;
+ 9c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 9ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 9cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 9d0:	8b 55 08             	mov    0x8(%ebp),%edx
+ 9d3:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 9d9:	83 c0 08             	add    $0x8,%eax
+ 9dc:	83 ec 0c             	sub    $0xc,%esp
+ 9df:	50                   	push   %eax
+ 9e0:	e8 c8 fe ff ff       	call   8ad <free>
+ 9e5:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 9e8:	a1 f0 0d 00 00       	mov    0xdf0,%eax
+}
+ 9ed:	c9                   	leave  
+ 9ee:	c3                   	ret    
+
+000009ef <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 9ef:	55                   	push   %ebp
+ 9f0:	89 e5                	mov    %esp,%ebp
+ 9f2:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9f5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 9f8:	83 c0 07             	add    $0x7,%eax
+ 9fb:	c1 e8 03             	shr    $0x3,%eax
+ 9fe:	83 c0 01             	add    $0x1,%eax
+ a01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ a04:	a1 f0 0d 00 00       	mov    0xdf0,%eax
+ a09:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ a0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ a10:	75 23                	jne    a35 <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ a12:	c7 45 f0 e8 0d 00 00 	movl   $0xde8,-0x10(%ebp)
+ a19:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ a1c:	a3 f0 0d 00 00       	mov    %eax,0xdf0
+ a21:	a1 f0 0d 00 00       	mov    0xdf0,%eax
+ a26:	a3 e8 0d 00 00       	mov    %eax,0xde8
+    base.s.size = 0;
+ a2b:	c7 05 ec 0d 00 00 00 	movl   $0x0,0xdec
+ a32:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a35:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ a38:	8b 00                	mov    (%eax),%eax
+ a3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a40:	8b 40 04             	mov    0x4(%eax),%eax
+ a43:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ a46:	72 4d                	jb     a95 <malloc+0xa6>
+      if(p->s.size == nunits)
+ a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a4b:	8b 40 04             	mov    0x4(%eax),%eax
+ a4e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ a51:	75 0c                	jne    a5f <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a56:	8b 10                	mov    (%eax),%edx
+ a58:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ a5b:	89 10                	mov    %edx,(%eax)
+ a5d:	eb 26                	jmp    a85 <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a62:	8b 40 04             	mov    0x4(%eax),%eax
+ a65:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ a68:	89 c2                	mov    %eax,%edx
+ a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a6d:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a73:	8b 40 04             	mov    0x4(%eax),%eax
+ a76:	c1 e0 03             	shl    $0x3,%eax
+ a79:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ a7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ a82:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ a85:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ a88:	a3 f0 0d 00 00       	mov    %eax,0xdf0
+      return (void*)(p + 1);
+ a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ a90:	83 c0 08             	add    $0x8,%eax
+ a93:	eb 3b                	jmp    ad0 <malloc+0xe1>
+    }
+    if(p == freep)
+ a95:	a1 f0 0d 00 00       	mov    0xdf0,%eax
+ a9a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ a9d:	75 1e                	jne    abd <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ a9f:	83 ec 0c             	sub    $0xc,%esp
+ aa2:	ff 75 ec             	pushl  -0x14(%ebp)
+ aa5:	e8 e5 fe ff ff       	call   98f <morecore>
+ aaa:	83 c4 10             	add    $0x10,%esp
+ aad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ ab0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ ab4:	75 07                	jne    abd <malloc+0xce>
+        return 0;
+ ab6:	b8 00 00 00 00       	mov    $0x0,%eax
+ abb:	eb 13                	jmp    ad0 <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ ac0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ ac6:	8b 00                	mov    (%eax),%eax
+ ac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ acb:	e9 6d ff ff ff       	jmp    a3d <malloc+0x4e>
+}
+ ad0:	c9                   	leave  
+ ad1:	c3                   	ret    
diff -rupN xv6-unrc/ls.sym xv6-mod/ls.sym
--- xv6-unrc/ls.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/ls.sym	2018-04-04 14:53:54.027454061 -0300
@@ -0,0 +1,64 @@
+00000000 .text
+00000ad2 .rodata
+00000b24 .eh_frame
+00000dc4 .data
+00000dd8 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 ls.c
+00000dd8 buf.1117
+00000000 ulib.c
+00000346 stosb
+00000000 printf.c
+00000645 putc
+00000668 printint
+00000dc4 digits.1109
+00000000 umalloc.c
+00000de8 base
+00000df0 freep
+0000098f morecore
+0000036c strcpy
+00000000 fmtname
+0000071c printf
+00000558 memmove
+000005e5 mknod
+0000044f gets
+0000061d getpid
+000009ef malloc
+0000063d procstat
+0000062d sleep
+000005ad pipe
+000005bd write
+000005f5 fstat
+000005cd kill
+0000060d chdir
+000005d5 exec
+000005a5 wait
+000005b5 read
+000005ed unlink
+00000595 fork
+00000625 sbrk
+00000635 uptime
+00000dd5 __bss_start
+00000402 memset
+000002e2 main
+0000039c strcmp
+00000615 dup
+000004be stat
+00000dd5 _edata
+00000df4 _end
+000005fd link
+000000b8 ls
+0000059d exit
+0000050b atoi
+000003db strlen
+000005dd open
+0000041c strchr
+00000605 mkdir
+000005c5 close
+000008ad free
Los archivos binarios xv6-unrc/._LucidaSans-Typewriter83~ y xv6-mod/._LucidaSans-Typewriter83~ son distintos
Los archivos binarios xv6-unrc/._main.c y xv6-mod/._main.c son distintos
diff -rupN xv6-unrc/main.d xv6-mod/main.d
--- xv6-unrc/main.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/main.d	2018-04-04 14:54:01.031524310 -0300
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Los archivos binarios xv6-unrc/main.o y xv6-mod/main.o son distintos
Los archivos binarios xv6-unrc/._Makefile y xv6-mod/._Makefile son distintos
Los archivos binarios xv6-unrc/._memide.c y xv6-mod/._memide.c son distintos
Los archivos binarios xv6-unrc/._memlayout.h y xv6-mod/._memlayout.h son distintos
Los archivos binarios xv6-unrc/_mkdir y xv6-mod/_mkdir son distintos
diff -rupN xv6-unrc/mkdir.asm xv6-mod/mkdir.asm
--- xv6-unrc/mkdir.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/mkdir.asm	2018-04-04 14:53:54.263456428 -0300
@@ -0,0 +1,1223 @@
+
+_mkdir:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+   f:	83 ec 10             	sub    $0x10,%esp
+  12:	89 cb                	mov    %ecx,%ebx
+  int i;
+
+  if(argc < 2){
+  14:	83 3b 01             	cmpl   $0x1,(%ebx)
+  17:	7f 17                	jg     30 <main+0x30>
+    printf(2, "Usage: mkdir files...\n");
+  19:	83 ec 08             	sub    $0x8,%esp
+  1c:	68 1c 08 00 00       	push   $0x81c
+  21:	6a 02                	push   $0x2
+  23:	e8 3e 04 00 00       	call   466 <printf>
+  28:	83 c4 10             	add    $0x10,%esp
+    exit();
+  2b:	e8 b7 02 00 00       	call   2e7 <exit>
+  }
+
+  for(i = 1; i < argc; i++){
+  30:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+  37:	eb 4b                	jmp    84 <main+0x84>
+    if(mkdir(argv[i]) < 0){
+  39:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  43:	8b 43 04             	mov    0x4(%ebx),%eax
+  46:	01 d0                	add    %edx,%eax
+  48:	8b 00                	mov    (%eax),%eax
+  4a:	83 ec 0c             	sub    $0xc,%esp
+  4d:	50                   	push   %eax
+  4e:	e8 fc 02 00 00       	call   34f <mkdir>
+  53:	83 c4 10             	add    $0x10,%esp
+  56:	85 c0                	test   %eax,%eax
+  58:	79 26                	jns    80 <main+0x80>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  64:	8b 43 04             	mov    0x4(%ebx),%eax
+  67:	01 d0                	add    %edx,%eax
+  69:	8b 00                	mov    (%eax),%eax
+  6b:	83 ec 04             	sub    $0x4,%esp
+  6e:	50                   	push   %eax
+  6f:	68 33 08 00 00       	push   $0x833
+  74:	6a 02                	push   $0x2
+  76:	e8 eb 03 00 00       	call   466 <printf>
+  7b:	83 c4 10             	add    $0x10,%esp
+      break;
+  7e:	eb 0b                	jmp    8b <main+0x8b>
+  if(argc < 2){
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  80:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  84:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  87:	3b 03                	cmp    (%ebx),%eax
+  89:	7c ae                	jl     39 <main+0x39>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  8b:	e8 57 02 00 00       	call   2e7 <exit>
+
+00000090 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	57                   	push   %edi
+  94:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+  95:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  98:	8b 55 10             	mov    0x10(%ebp),%edx
+  9b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  9e:	89 cb                	mov    %ecx,%ebx
+  a0:	89 df                	mov    %ebx,%edi
+  a2:	89 d1                	mov    %edx,%ecx
+  a4:	fc                   	cld    
+  a5:	f3 aa                	rep stos %al,%es:(%edi)
+  a7:	89 ca                	mov    %ecx,%edx
+  a9:	89 fb                	mov    %edi,%ebx
+  ab:	89 5d 08             	mov    %ebx,0x8(%ebp)
+  ae:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+  b1:	90                   	nop
+  b2:	5b                   	pop    %ebx
+  b3:	5f                   	pop    %edi
+  b4:	5d                   	pop    %ebp
+  b5:	c3                   	ret    
+
+000000b6 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+  b6:	55                   	push   %ebp
+  b7:	89 e5                	mov    %esp,%ebp
+  b9:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+  bc:	8b 45 08             	mov    0x8(%ebp),%eax
+  bf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+  c2:	90                   	nop
+  c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  c6:	8d 50 01             	lea    0x1(%eax),%edx
+  c9:	89 55 08             	mov    %edx,0x8(%ebp)
+  cc:	8b 55 0c             	mov    0xc(%ebp),%edx
+  cf:	8d 4a 01             	lea    0x1(%edx),%ecx
+  d2:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+  d5:	0f b6 12             	movzbl (%edx),%edx
+  d8:	88 10                	mov    %dl,(%eax)
+  da:	0f b6 00             	movzbl (%eax),%eax
+  dd:	84 c0                	test   %al,%al
+  df:	75 e2                	jne    c3 <strcpy+0xd>
+    ;
+  return os;
+  e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  e4:	c9                   	leave  
+  e5:	c3                   	ret    
+
+000000e6 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  e6:	55                   	push   %ebp
+  e7:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+  e9:	eb 08                	jmp    f3 <strcmp+0xd>
+    p++, q++;
+  eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  ef:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  f3:	8b 45 08             	mov    0x8(%ebp),%eax
+  f6:	0f b6 00             	movzbl (%eax),%eax
+  f9:	84 c0                	test   %al,%al
+  fb:	74 10                	je     10d <strcmp+0x27>
+  fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 100:	0f b6 10             	movzbl (%eax),%edx
+ 103:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 106:	0f b6 00             	movzbl (%eax),%eax
+ 109:	38 c2                	cmp    %al,%dl
+ 10b:	74 de                	je     eb <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 10d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 110:	0f b6 00             	movzbl (%eax),%eax
+ 113:	0f b6 d0             	movzbl %al,%edx
+ 116:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 119:	0f b6 00             	movzbl (%eax),%eax
+ 11c:	0f b6 c0             	movzbl %al,%eax
+ 11f:	29 c2                	sub    %eax,%edx
+ 121:	89 d0                	mov    %edx,%eax
+}
+ 123:	5d                   	pop    %ebp
+ 124:	c3                   	ret    
+
+00000125 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 125:	55                   	push   %ebp
+ 126:	89 e5                	mov    %esp,%ebp
+ 128:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 12b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 132:	eb 04                	jmp    138 <strlen+0x13>
+ 134:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 138:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 13b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 13e:	01 d0                	add    %edx,%eax
+ 140:	0f b6 00             	movzbl (%eax),%eax
+ 143:	84 c0                	test   %al,%al
+ 145:	75 ed                	jne    134 <strlen+0xf>
+    ;
+  return n;
+ 147:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 14a:	c9                   	leave  
+ 14b:	c3                   	ret    
+
+0000014c <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 14c:	55                   	push   %ebp
+ 14d:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 14f:	8b 45 10             	mov    0x10(%ebp),%eax
+ 152:	50                   	push   %eax
+ 153:	ff 75 0c             	pushl  0xc(%ebp)
+ 156:	ff 75 08             	pushl  0x8(%ebp)
+ 159:	e8 32 ff ff ff       	call   90 <stosb>
+ 15e:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 161:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 164:	c9                   	leave  
+ 165:	c3                   	ret    
+
+00000166 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 166:	55                   	push   %ebp
+ 167:	89 e5                	mov    %esp,%ebp
+ 169:	83 ec 04             	sub    $0x4,%esp
+ 16c:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 16f:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 172:	eb 14                	jmp    188 <strchr+0x22>
+    if(*s == c)
+ 174:	8b 45 08             	mov    0x8(%ebp),%eax
+ 177:	0f b6 00             	movzbl (%eax),%eax
+ 17a:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 17d:	75 05                	jne    184 <strchr+0x1e>
+      return (char*)s;
+ 17f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 182:	eb 13                	jmp    197 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 184:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 188:	8b 45 08             	mov    0x8(%ebp),%eax
+ 18b:	0f b6 00             	movzbl (%eax),%eax
+ 18e:	84 c0                	test   %al,%al
+ 190:	75 e2                	jne    174 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 192:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 197:	c9                   	leave  
+ 198:	c3                   	ret    
+
+00000199 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 199:	55                   	push   %ebp
+ 19a:	89 e5                	mov    %esp,%ebp
+ 19c:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 19f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 1a6:	eb 42                	jmp    1ea <gets+0x51>
+    cc = read(0, &c, 1);
+ 1a8:	83 ec 04             	sub    $0x4,%esp
+ 1ab:	6a 01                	push   $0x1
+ 1ad:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 47 01 00 00       	call   2ff <read>
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 1be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 1c2:	7e 33                	jle    1f7 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 1c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1c7:	8d 50 01             	lea    0x1(%eax),%edx
+ 1ca:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 1cd:	89 c2                	mov    %eax,%edx
+ 1cf:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d2:	01 c2                	add    %eax,%edx
+ 1d4:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1d8:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 1da:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1de:	3c 0a                	cmp    $0xa,%al
+ 1e0:	74 16                	je     1f8 <gets+0x5f>
+ 1e2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1e6:	3c 0d                	cmp    $0xd,%al
+ 1e8:	74 0e                	je     1f8 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1ed:	83 c0 01             	add    $0x1,%eax
+ 1f0:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 1f3:	7c b3                	jl     1a8 <gets+0xf>
+ 1f5:	eb 01                	jmp    1f8 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 1f7:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fe:	01 d0                	add    %edx,%eax
+ 200:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 203:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 206:	c9                   	leave  
+ 207:	c3                   	ret    
+
+00000208 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 208:	55                   	push   %ebp
+ 209:	89 e5                	mov    %esp,%ebp
+ 20b:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 20e:	83 ec 08             	sub    $0x8,%esp
+ 211:	6a 00                	push   $0x0
+ 213:	ff 75 08             	pushl  0x8(%ebp)
+ 216:	e8 0c 01 00 00       	call   327 <open>
+ 21b:	83 c4 10             	add    $0x10,%esp
+ 21e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 221:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 225:	79 07                	jns    22e <stat+0x26>
+    return -1;
+ 227:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 22c:	eb 25                	jmp    253 <stat+0x4b>
+  r = fstat(fd, st);
+ 22e:	83 ec 08             	sub    $0x8,%esp
+ 231:	ff 75 0c             	pushl  0xc(%ebp)
+ 234:	ff 75 f4             	pushl  -0xc(%ebp)
+ 237:	e8 03 01 00 00       	call   33f <fstat>
+ 23c:	83 c4 10             	add    $0x10,%esp
+ 23f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 242:	83 ec 0c             	sub    $0xc,%esp
+ 245:	ff 75 f4             	pushl  -0xc(%ebp)
+ 248:	e8 c2 00 00 00       	call   30f <close>
+ 24d:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 250:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 253:	c9                   	leave  
+ 254:	c3                   	ret    
+
+00000255 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 255:	55                   	push   %ebp
+ 256:	89 e5                	mov    %esp,%ebp
+ 258:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 25b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 262:	eb 25                	jmp    289 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 264:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 267:	89 d0                	mov    %edx,%eax
+ 269:	c1 e0 02             	shl    $0x2,%eax
+ 26c:	01 d0                	add    %edx,%eax
+ 26e:	01 c0                	add    %eax,%eax
+ 270:	89 c1                	mov    %eax,%ecx
+ 272:	8b 45 08             	mov    0x8(%ebp),%eax
+ 275:	8d 50 01             	lea    0x1(%eax),%edx
+ 278:	89 55 08             	mov    %edx,0x8(%ebp)
+ 27b:	0f b6 00             	movzbl (%eax),%eax
+ 27e:	0f be c0             	movsbl %al,%eax
+ 281:	01 c8                	add    %ecx,%eax
+ 283:	83 e8 30             	sub    $0x30,%eax
+ 286:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 289:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28c:	0f b6 00             	movzbl (%eax),%eax
+ 28f:	3c 2f                	cmp    $0x2f,%al
+ 291:	7e 0a                	jle    29d <atoi+0x48>
+ 293:	8b 45 08             	mov    0x8(%ebp),%eax
+ 296:	0f b6 00             	movzbl (%eax),%eax
+ 299:	3c 39                	cmp    $0x39,%al
+ 29b:	7e c7                	jle    264 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 29d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 2a0:	c9                   	leave  
+ 2a1:	c3                   	ret    
+
+000002a2 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 2a2:	55                   	push   %ebp
+ 2a3:	89 e5                	mov    %esp,%ebp
+ 2a5:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 2a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 2ae:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 2b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 2b4:	eb 17                	jmp    2cd <memmove+0x2b>
+    *dst++ = *src++;
+ 2b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 2b9:	8d 50 01             	lea    0x1(%eax),%edx
+ 2bc:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 2bf:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 2c2:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 2c5:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 2c8:	0f b6 12             	movzbl (%edx),%edx
+ 2cb:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2cd:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2d0:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 2d3:	89 55 10             	mov    %edx,0x10(%ebp)
+ 2d6:	85 c0                	test   %eax,%eax
+ 2d8:	7f dc                	jg     2b6 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 2da:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 2dd:	c9                   	leave  
+ 2de:	c3                   	ret    
+
+000002df <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2df:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e4:	cd 40                	int    $0x40
+ 2e6:	c3                   	ret    
+
+000002e7 <exit>:
+SYSCALL(exit)
+ 2e7:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2ec:	cd 40                	int    $0x40
+ 2ee:	c3                   	ret    
+
+000002ef <wait>:
+SYSCALL(wait)
+ 2ef:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f4:	cd 40                	int    $0x40
+ 2f6:	c3                   	ret    
+
+000002f7 <pipe>:
+SYSCALL(pipe)
+ 2f7:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2fc:	cd 40                	int    $0x40
+ 2fe:	c3                   	ret    
+
+000002ff <read>:
+SYSCALL(read)
+ 2ff:	b8 05 00 00 00       	mov    $0x5,%eax
+ 304:	cd 40                	int    $0x40
+ 306:	c3                   	ret    
+
+00000307 <write>:
+SYSCALL(write)
+ 307:	b8 10 00 00 00       	mov    $0x10,%eax
+ 30c:	cd 40                	int    $0x40
+ 30e:	c3                   	ret    
+
+0000030f <close>:
+SYSCALL(close)
+ 30f:	b8 15 00 00 00       	mov    $0x15,%eax
+ 314:	cd 40                	int    $0x40
+ 316:	c3                   	ret    
+
+00000317 <kill>:
+SYSCALL(kill)
+ 317:	b8 06 00 00 00       	mov    $0x6,%eax
+ 31c:	cd 40                	int    $0x40
+ 31e:	c3                   	ret    
+
+0000031f <exec>:
+SYSCALL(exec)
+ 31f:	b8 07 00 00 00       	mov    $0x7,%eax
+ 324:	cd 40                	int    $0x40
+ 326:	c3                   	ret    
+
+00000327 <open>:
+SYSCALL(open)
+ 327:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 32c:	cd 40                	int    $0x40
+ 32e:	c3                   	ret    
+
+0000032f <mknod>:
+SYSCALL(mknod)
+ 32f:	b8 11 00 00 00       	mov    $0x11,%eax
+ 334:	cd 40                	int    $0x40
+ 336:	c3                   	ret    
+
+00000337 <unlink>:
+SYSCALL(unlink)
+ 337:	b8 12 00 00 00       	mov    $0x12,%eax
+ 33c:	cd 40                	int    $0x40
+ 33e:	c3                   	ret    
+
+0000033f <fstat>:
+SYSCALL(fstat)
+ 33f:	b8 08 00 00 00       	mov    $0x8,%eax
+ 344:	cd 40                	int    $0x40
+ 346:	c3                   	ret    
+
+00000347 <link>:
+SYSCALL(link)
+ 347:	b8 13 00 00 00       	mov    $0x13,%eax
+ 34c:	cd 40                	int    $0x40
+ 34e:	c3                   	ret    
+
+0000034f <mkdir>:
+SYSCALL(mkdir)
+ 34f:	b8 14 00 00 00       	mov    $0x14,%eax
+ 354:	cd 40                	int    $0x40
+ 356:	c3                   	ret    
+
+00000357 <chdir>:
+SYSCALL(chdir)
+ 357:	b8 09 00 00 00       	mov    $0x9,%eax
+ 35c:	cd 40                	int    $0x40
+ 35e:	c3                   	ret    
+
+0000035f <dup>:
+SYSCALL(dup)
+ 35f:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 364:	cd 40                	int    $0x40
+ 366:	c3                   	ret    
+
+00000367 <getpid>:
+SYSCALL(getpid)
+ 367:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 36c:	cd 40                	int    $0x40
+ 36e:	c3                   	ret    
+
+0000036f <sbrk>:
+SYSCALL(sbrk)
+ 36f:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 374:	cd 40                	int    $0x40
+ 376:	c3                   	ret    
+
+00000377 <sleep>:
+SYSCALL(sleep)
+ 377:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 37c:	cd 40                	int    $0x40
+ 37e:	c3                   	ret    
+
+0000037f <uptime>:
+SYSCALL(uptime)
+ 37f:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 384:	cd 40                	int    $0x40
+ 386:	c3                   	ret    
+
+00000387 <procstat>:
+SYSCALL(procstat) 
+ 387:	b8 16 00 00 00       	mov    $0x16,%eax
+ 38c:	cd 40                	int    $0x40
+ 38e:	c3                   	ret    
+
+0000038f <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 38f:	55                   	push   %ebp
+ 390:	89 e5                	mov    %esp,%ebp
+ 392:	83 ec 18             	sub    $0x18,%esp
+ 395:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 398:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 39b:	83 ec 04             	sub    $0x4,%esp
+ 39e:	6a 01                	push   $0x1
+ 3a0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 3a3:	50                   	push   %eax
+ 3a4:	ff 75 08             	pushl  0x8(%ebp)
+ 3a7:	e8 5b ff ff ff       	call   307 <write>
+ 3ac:	83 c4 10             	add    $0x10,%esp
+}
+ 3af:	90                   	nop
+ 3b0:	c9                   	leave  
+ 3b1:	c3                   	ret    
+
+000003b2 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b2:	55                   	push   %ebp
+ 3b3:	89 e5                	mov    %esp,%ebp
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 3b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 3c0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 3c4:	74 17                	je     3dd <printint+0x2b>
+ 3c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 3ca:	79 11                	jns    3dd <printint+0x2b>
+    neg = 1;
+ 3cc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 3d3:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3d6:	f7 d8                	neg    %eax
+ 3d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 3db:	eb 06                	jmp    3e3 <printint+0x31>
+  } else {
+    x = xx;
+ 3dd:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 3e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 3ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 3ed:	8d 41 01             	lea    0x1(%ecx),%eax
+ 3f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 3f3:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3f9:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3fe:	f7 f3                	div    %ebx
+ 400:	89 d0                	mov    %edx,%eax
+ 402:	0f b6 80 a4 0a 00 00 	movzbl 0xaa4(%eax),%eax
+ 409:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 40d:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 410:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 413:	ba 00 00 00 00       	mov    $0x0,%edx
+ 418:	f7 f3                	div    %ebx
+ 41a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 41d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 421:	75 c7                	jne    3ea <printint+0x38>
+  if(neg)
+ 423:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 427:	74 2d                	je     456 <printint+0xa4>
+    buf[i++] = '-';
+ 429:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 42c:	8d 50 01             	lea    0x1(%eax),%edx
+ 42f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 432:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 437:	eb 1d                	jmp    456 <printint+0xa4>
+    putc(fd, buf[i]);
+ 439:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 43c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 43f:	01 d0                	add    %edx,%eax
+ 441:	0f b6 00             	movzbl (%eax),%eax
+ 444:	0f be c0             	movsbl %al,%eax
+ 447:	83 ec 08             	sub    $0x8,%esp
+ 44a:	50                   	push   %eax
+ 44b:	ff 75 08             	pushl  0x8(%ebp)
+ 44e:	e8 3c ff ff ff       	call   38f <putc>
+ 453:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 456:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 45a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 45e:	79 d9                	jns    439 <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 460:	90                   	nop
+ 461:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 464:	c9                   	leave  
+ 465:	c3                   	ret    
+
+00000466 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 466:	55                   	push   %ebp
+ 467:	89 e5                	mov    %esp,%ebp
+ 469:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 46c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 473:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 476:	83 c0 04             	add    $0x4,%eax
+ 479:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 47c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 483:	e9 59 01 00 00       	jmp    5e1 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 488:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 48b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 48e:	01 d0                	add    %edx,%eax
+ 490:	0f b6 00             	movzbl (%eax),%eax
+ 493:	0f be c0             	movsbl %al,%eax
+ 496:	25 ff 00 00 00       	and    $0xff,%eax
+ 49b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 49e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 4a2:	75 2c                	jne    4d0 <printf+0x6a>
+      if(c == '%'){
+ 4a4:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 4a8:	75 0c                	jne    4b6 <printf+0x50>
+        state = '%';
+ 4aa:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 4b1:	e9 27 01 00 00       	jmp    5dd <printf+0x177>
+      } else {
+        putc(fd, c);
+ 4b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 4b9:	0f be c0             	movsbl %al,%eax
+ 4bc:	83 ec 08             	sub    $0x8,%esp
+ 4bf:	50                   	push   %eax
+ 4c0:	ff 75 08             	pushl  0x8(%ebp)
+ 4c3:	e8 c7 fe ff ff       	call   38f <putc>
+ 4c8:	83 c4 10             	add    $0x10,%esp
+ 4cb:	e9 0d 01 00 00       	jmp    5dd <printf+0x177>
+      }
+    } else if(state == '%'){
+ 4d0:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 4d4:	0f 85 03 01 00 00    	jne    5dd <printf+0x177>
+      if(c == 'd'){
+ 4da:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 4de:	75 1e                	jne    4fe <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 4e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4e3:	8b 00                	mov    (%eax),%eax
+ 4e5:	6a 01                	push   $0x1
+ 4e7:	6a 0a                	push   $0xa
+ 4e9:	50                   	push   %eax
+ 4ea:	ff 75 08             	pushl  0x8(%ebp)
+ 4ed:	e8 c0 fe ff ff       	call   3b2 <printint>
+ 4f2:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 4f5:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 4f9:	e9 d8 00 00 00       	jmp    5d6 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 4fe:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 502:	74 06                	je     50a <printf+0xa4>
+ 504:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 508:	75 1e                	jne    528 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 50a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 50d:	8b 00                	mov    (%eax),%eax
+ 50f:	6a 00                	push   $0x0
+ 511:	6a 10                	push   $0x10
+ 513:	50                   	push   %eax
+ 514:	ff 75 08             	pushl  0x8(%ebp)
+ 517:	e8 96 fe ff ff       	call   3b2 <printint>
+ 51c:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 51f:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 523:	e9 ae 00 00 00       	jmp    5d6 <printf+0x170>
+      } else if(c == 's'){
+ 528:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 52c:	75 43                	jne    571 <printf+0x10b>
+        s = (char*)*ap;
+ 52e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 531:	8b 00                	mov    (%eax),%eax
+ 533:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 536:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 53a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 53e:	75 25                	jne    565 <printf+0xff>
+          s = "(null)";
+ 540:	c7 45 f4 4f 08 00 00 	movl   $0x84f,-0xc(%ebp)
+        while(*s != 0){
+ 547:	eb 1c                	jmp    565 <printf+0xff>
+          putc(fd, *s);
+ 549:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 54c:	0f b6 00             	movzbl (%eax),%eax
+ 54f:	0f be c0             	movsbl %al,%eax
+ 552:	83 ec 08             	sub    $0x8,%esp
+ 555:	50                   	push   %eax
+ 556:	ff 75 08             	pushl  0x8(%ebp)
+ 559:	e8 31 fe ff ff       	call   38f <putc>
+ 55e:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 561:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 565:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 568:	0f b6 00             	movzbl (%eax),%eax
+ 56b:	84 c0                	test   %al,%al
+ 56d:	75 da                	jne    549 <printf+0xe3>
+ 56f:	eb 65                	jmp    5d6 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 571:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 575:	75 1d                	jne    594 <printf+0x12e>
+        putc(fd, *ap);
+ 577:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 57a:	8b 00                	mov    (%eax),%eax
+ 57c:	0f be c0             	movsbl %al,%eax
+ 57f:	83 ec 08             	sub    $0x8,%esp
+ 582:	50                   	push   %eax
+ 583:	ff 75 08             	pushl  0x8(%ebp)
+ 586:	e8 04 fe ff ff       	call   38f <putc>
+ 58b:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 58e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 592:	eb 42                	jmp    5d6 <printf+0x170>
+      } else if(c == '%'){
+ 594:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 598:	75 17                	jne    5b1 <printf+0x14b>
+        putc(fd, c);
+ 59a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 59d:	0f be c0             	movsbl %al,%eax
+ 5a0:	83 ec 08             	sub    $0x8,%esp
+ 5a3:	50                   	push   %eax
+ 5a4:	ff 75 08             	pushl  0x8(%ebp)
+ 5a7:	e8 e3 fd ff ff       	call   38f <putc>
+ 5ac:	83 c4 10             	add    $0x10,%esp
+ 5af:	eb 25                	jmp    5d6 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 5b1:	83 ec 08             	sub    $0x8,%esp
+ 5b4:	6a 25                	push   $0x25
+ 5b6:	ff 75 08             	pushl  0x8(%ebp)
+ 5b9:	e8 d1 fd ff ff       	call   38f <putc>
+ 5be:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 5c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 5c4:	0f be c0             	movsbl %al,%eax
+ 5c7:	83 ec 08             	sub    $0x8,%esp
+ 5ca:	50                   	push   %eax
+ 5cb:	ff 75 08             	pushl  0x8(%ebp)
+ 5ce:	e8 bc fd ff ff       	call   38f <putc>
+ 5d3:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5dd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 5e1:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 5e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 5e7:	01 d0                	add    %edx,%eax
+ 5e9:	0f b6 00             	movzbl (%eax),%eax
+ 5ec:	84 c0                	test   %al,%al
+ 5ee:	0f 85 94 fe ff ff    	jne    488 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5f4:	90                   	nop
+ 5f5:	c9                   	leave  
+ 5f6:	c3                   	ret    
+
+000005f7 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f7:	55                   	push   %ebp
+ 5f8:	89 e5                	mov    %esp,%ebp
+ 5fa:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 600:	83 e8 08             	sub    $0x8,%eax
+ 603:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 606:	a1 c0 0a 00 00       	mov    0xac0,%eax
+ 60b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 60e:	eb 24                	jmp    634 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 610:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 613:	8b 00                	mov    (%eax),%eax
+ 615:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 618:	77 12                	ja     62c <free+0x35>
+ 61a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 61d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 620:	77 24                	ja     646 <free+0x4f>
+ 622:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 625:	8b 00                	mov    (%eax),%eax
+ 627:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 62a:	77 1a                	ja     646 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 62c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 62f:	8b 00                	mov    (%eax),%eax
+ 631:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 634:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 637:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 63a:	76 d4                	jbe    610 <free+0x19>
+ 63c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 63f:	8b 00                	mov    (%eax),%eax
+ 641:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 644:	76 ca                	jbe    610 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 646:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 649:	8b 40 04             	mov    0x4(%eax),%eax
+ 64c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 653:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 656:	01 c2                	add    %eax,%edx
+ 658:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 65b:	8b 00                	mov    (%eax),%eax
+ 65d:	39 c2                	cmp    %eax,%edx
+ 65f:	75 24                	jne    685 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 661:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 664:	8b 50 04             	mov    0x4(%eax),%edx
+ 667:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 66a:	8b 00                	mov    (%eax),%eax
+ 66c:	8b 40 04             	mov    0x4(%eax),%eax
+ 66f:	01 c2                	add    %eax,%edx
+ 671:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 674:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 677:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 67a:	8b 00                	mov    (%eax),%eax
+ 67c:	8b 10                	mov    (%eax),%edx
+ 67e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 681:	89 10                	mov    %edx,(%eax)
+ 683:	eb 0a                	jmp    68f <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 685:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 688:	8b 10                	mov    (%eax),%edx
+ 68a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 68d:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 68f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 692:	8b 40 04             	mov    0x4(%eax),%eax
+ 695:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 69c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 69f:	01 d0                	add    %edx,%eax
+ 6a1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 6a4:	75 20                	jne    6c6 <free+0xcf>
+    p->s.size += bp->s.size;
+ 6a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6a9:	8b 50 04             	mov    0x4(%eax),%edx
+ 6ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6af:	8b 40 04             	mov    0x4(%eax),%eax
+ 6b2:	01 c2                	add    %eax,%edx
+ 6b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6b7:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6bd:	8b 10                	mov    (%eax),%edx
+ 6bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6c2:	89 10                	mov    %edx,(%eax)
+ 6c4:	eb 08                	jmp    6ce <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 6c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6c9:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 6cc:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 6ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6d1:	a3 c0 0a 00 00       	mov    %eax,0xac0
+}
+ 6d6:	90                   	nop
+ 6d7:	c9                   	leave  
+ 6d8:	c3                   	ret    
+
+000006d9 <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 6d9:	55                   	push   %ebp
+ 6da:	89 e5                	mov    %esp,%ebp
+ 6dc:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 6df:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 6e6:	77 07                	ja     6ef <morecore+0x16>
+    nu = 4096;
+ 6e8:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 6ef:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6f2:	c1 e0 03             	shl    $0x3,%eax
+ 6f5:	83 ec 0c             	sub    $0xc,%esp
+ 6f8:	50                   	push   %eax
+ 6f9:	e8 71 fc ff ff       	call   36f <sbrk>
+ 6fe:	83 c4 10             	add    $0x10,%esp
+ 701:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 704:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 708:	75 07                	jne    711 <morecore+0x38>
+    return 0;
+ 70a:	b8 00 00 00 00       	mov    $0x0,%eax
+ 70f:	eb 26                	jmp    737 <morecore+0x5e>
+  hp = (Header*)p;
+ 711:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 714:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 717:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 71a:	8b 55 08             	mov    0x8(%ebp),%edx
+ 71d:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 720:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 723:	83 c0 08             	add    $0x8,%eax
+ 726:	83 ec 0c             	sub    $0xc,%esp
+ 729:	50                   	push   %eax
+ 72a:	e8 c8 fe ff ff       	call   5f7 <free>
+ 72f:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 732:	a1 c0 0a 00 00       	mov    0xac0,%eax
+}
+ 737:	c9                   	leave  
+ 738:	c3                   	ret    
+
+00000739 <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 739:	55                   	push   %ebp
+ 73a:	89 e5                	mov    %esp,%ebp
+ 73c:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 73f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 742:	83 c0 07             	add    $0x7,%eax
+ 745:	c1 e8 03             	shr    $0x3,%eax
+ 748:	83 c0 01             	add    $0x1,%eax
+ 74b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 74e:	a1 c0 0a 00 00       	mov    0xac0,%eax
+ 753:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 756:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 75a:	75 23                	jne    77f <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 75c:	c7 45 f0 b8 0a 00 00 	movl   $0xab8,-0x10(%ebp)
+ 763:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 766:	a3 c0 0a 00 00       	mov    %eax,0xac0
+ 76b:	a1 c0 0a 00 00       	mov    0xac0,%eax
+ 770:	a3 b8 0a 00 00       	mov    %eax,0xab8
+    base.s.size = 0;
+ 775:	c7 05 bc 0a 00 00 00 	movl   $0x0,0xabc
+ 77c:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 77f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 782:	8b 00                	mov    (%eax),%eax
+ 784:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 787:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 78a:	8b 40 04             	mov    0x4(%eax),%eax
+ 78d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 790:	72 4d                	jb     7df <malloc+0xa6>
+      if(p->s.size == nunits)
+ 792:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 795:	8b 40 04             	mov    0x4(%eax),%eax
+ 798:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 79b:	75 0c                	jne    7a9 <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 79d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7a0:	8b 10                	mov    (%eax),%edx
+ 7a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7a5:	89 10                	mov    %edx,(%eax)
+ 7a7:	eb 26                	jmp    7cf <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 7a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7ac:	8b 40 04             	mov    0x4(%eax),%eax
+ 7af:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 7b2:	89 c2                	mov    %eax,%edx
+ 7b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7b7:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 7ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7bd:	8b 40 04             	mov    0x4(%eax),%eax
+ 7c0:	c1 e0 03             	shl    $0x3,%eax
+ 7c3:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 7c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 7cc:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 7cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7d2:	a3 c0 0a 00 00       	mov    %eax,0xac0
+      return (void*)(p + 1);
+ 7d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7da:	83 c0 08             	add    $0x8,%eax
+ 7dd:	eb 3b                	jmp    81a <malloc+0xe1>
+    }
+    if(p == freep)
+ 7df:	a1 c0 0a 00 00       	mov    0xac0,%eax
+ 7e4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 7e7:	75 1e                	jne    807 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 7e9:	83 ec 0c             	sub    $0xc,%esp
+ 7ec:	ff 75 ec             	pushl  -0x14(%ebp)
+ 7ef:	e8 e5 fe ff ff       	call   6d9 <morecore>
+ 7f4:	83 c4 10             	add    $0x10,%esp
+ 7f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 7fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 7fe:	75 07                	jne    807 <malloc+0xce>
+        return 0;
+ 800:	b8 00 00 00 00       	mov    $0x0,%eax
+ 805:	eb 13                	jmp    81a <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 807:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 80a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 80d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 810:	8b 00                	mov    (%eax),%eax
+ 812:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 815:	e9 6d ff ff ff       	jmp    787 <malloc+0x4e>
+}
+ 81a:	c9                   	leave  
+ 81b:	c3                   	ret    
diff -rupN xv6-unrc/mkdir.sym xv6-mod/mkdir.sym
--- xv6-unrc/mkdir.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/mkdir.sym	2018-04-04 14:53:54.295456749 -0300
@@ -0,0 +1,61 @@
+00000000 .text
+0000081c .rodata
+00000858 .eh_frame
+00000aa4 .data
+00000ab8 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 mkdir.c
+00000000 ulib.c
+00000090 stosb
+00000000 printf.c
+0000038f putc
+000003b2 printint
+00000aa4 digits.1109
+00000000 umalloc.c
+00000ab8 base
+00000ac0 freep
+000006d9 morecore
+000000b6 strcpy
+00000466 printf
+000002a2 memmove
+0000032f mknod
+00000199 gets
+00000367 getpid
+00000739 malloc
+00000387 procstat
+00000377 sleep
+000002f7 pipe
+00000307 write
+0000033f fstat
+00000317 kill
+00000357 chdir
+0000031f exec
+000002ef wait
+000002ff read
+00000337 unlink
+000002df fork
+0000036f sbrk
+0000037f uptime
+00000ab5 __bss_start
+0000014c memset
+00000000 main
+000000e6 strcmp
+0000035f dup
+00000208 stat
+00000ab5 _edata
+00000ac4 _end
+00000347 link
+000002e7 exit
+00000255 atoi
+00000125 strlen
+00000327 open
+00000166 strchr
+0000034f mkdir
+0000030f close
+000005f7 free
Los archivos binarios xv6-unrc/mkfs y xv6-mod/mkfs son distintos
Los archivos binarios xv6-unrc/._mkfs.c y xv6-mod/._mkfs.c son distintos
diff -rupN xv6-unrc/mkfs.c xv6-mod/mkfs.c
--- xv6-unrc/mkfs.c	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/mkfs.c	2018-03-31 16:57:50.968353536 -0300
@@ -11,7 +11,7 @@
 #include "stat.h"
 #include "param.h"
 
-#define static_assert(a, b) do { switch (0) case 0: case (a): ; } while (0)
+//#define static_assert(a, b) do { switch (0) case 0: case (a): ; } while (0)
 
 int nblocks = (995-LOGSIZE);
 int nlog = LOGSIZE;
Los archivos binarios xv6-unrc/._mmu.h y xv6-mod/._mmu.h son distintos
Los archivos binarios xv6-unrc/._mp.c y xv6-mod/._mp.c son distintos
diff -rupN xv6-unrc/mp.d xv6-mod/mp.d
--- xv6-unrc/mp.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/mp.d	2018-04-04 14:54:01.283526837 -0300
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Los archivos binarios xv6-unrc/._mp.h y xv6-mod/._mp.h son distintos
Los archivos binarios xv6-unrc/mp.o y xv6-mod/mp.o son distintos
Los archivos binarios xv6-unrc/._Notes y xv6-mod/._Notes son distintos
Los archivos binarios xv6-unrc/._param.h y xv6-mod/._param.h son distintos
diff -rupN xv6-unrc/param.h xv6-mod/param.h
--- xv6-unrc/param.h	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/param.h	2018-03-31 17:16:49.576199968 -0300
@@ -10,4 +10,4 @@
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data sectors in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-
+#define TIMESLICE    3  //amount of ticks per burst of execution
Los archivos binarios xv6-unrc/._picirq.c y xv6-mod/._picirq.c son distintos
diff -rupN xv6-unrc/picirq.d xv6-mod/picirq.d
--- xv6-unrc/picirq.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/picirq.d	2018-04-04 14:54:01.475528763 -0300
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Los archivos binarios xv6-unrc/picirq.o y xv6-mod/picirq.o son distintos
Los archivos binarios xv6-unrc/._pipe.c y xv6-mod/._pipe.c son distintos
diff -rupN xv6-unrc/pipe.d xv6-mod/pipe.d
--- xv6-unrc/pipe.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/pipe.d	2018-04-04 14:54:01.671530729 -0300
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h file.h spinlock.h
Los archivos binarios xv6-unrc/pipe.o y xv6-mod/pipe.o son distintos
Los archivos binarios xv6-unrc/._printpcs y xv6-mod/._printpcs son distintos
Los archivos binarios xv6-unrc/._proc.c y xv6-mod/._proc.c son distintos
diff -rupN xv6-unrc/proc.d xv6-mod/proc.d
--- xv6-unrc/proc.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/proc.d	2018-04-04 14:54:01.995533978 -0300
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h
Los archivos binarios xv6-unrc/._proc.h y xv6-mod/._proc.h son distintos
diff -rupN xv6-unrc/proc.h xv6-mod/proc.h
--- xv6-unrc/proc.h	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/proc.h	2018-03-31 16:57:50.968353536 -0300
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  ushort ticks;                // Ticks that have been executed during the execution burst
 };
 
 // Process memory is laid out contiguously, low addresses first:
Los archivos binarios xv6-unrc/proc.o y xv6-mod/proc.o son distintos
Los archivos binarios xv6-unrc/._pr.pl y xv6-mod/._pr.pl son distintos
Los archivos binarios xv6-unrc/._README y xv6-mod/._README son distintos
Los archivos binarios xv6-unrc/_rm y xv6-mod/_rm son distintos
diff -rupN xv6-unrc/rm.asm xv6-mod/rm.asm
--- xv6-unrc/rm.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/rm.asm	2018-04-04 14:53:54.567459477 -0300
@@ -0,0 +1,1223 @@
+
+_rm:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+   f:	83 ec 10             	sub    $0x10,%esp
+  12:	89 cb                	mov    %ecx,%ebx
+  int i;
+
+  if(argc < 2){
+  14:	83 3b 01             	cmpl   $0x1,(%ebx)
+  17:	7f 17                	jg     30 <main+0x30>
+    printf(2, "Usage: rm files...\n");
+  19:	83 ec 08             	sub    $0x8,%esp
+  1c:	68 1c 08 00 00       	push   $0x81c
+  21:	6a 02                	push   $0x2
+  23:	e8 3e 04 00 00       	call   466 <printf>
+  28:	83 c4 10             	add    $0x10,%esp
+    exit();
+  2b:	e8 b7 02 00 00       	call   2e7 <exit>
+  }
+
+  for(i = 1; i < argc; i++){
+  30:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+  37:	eb 4b                	jmp    84 <main+0x84>
+    if(unlink(argv[i]) < 0){
+  39:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  43:	8b 43 04             	mov    0x4(%ebx),%eax
+  46:	01 d0                	add    %edx,%eax
+  48:	8b 00                	mov    (%eax),%eax
+  4a:	83 ec 0c             	sub    $0xc,%esp
+  4d:	50                   	push   %eax
+  4e:	e8 e4 02 00 00       	call   337 <unlink>
+  53:	83 c4 10             	add    $0x10,%esp
+  56:	85 c0                	test   %eax,%eax
+  58:	79 26                	jns    80 <main+0x80>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  64:	8b 43 04             	mov    0x4(%ebx),%eax
+  67:	01 d0                	add    %edx,%eax
+  69:	8b 00                	mov    (%eax),%eax
+  6b:	83 ec 04             	sub    $0x4,%esp
+  6e:	50                   	push   %eax
+  6f:	68 30 08 00 00       	push   $0x830
+  74:	6a 02                	push   $0x2
+  76:	e8 eb 03 00 00       	call   466 <printf>
+  7b:	83 c4 10             	add    $0x10,%esp
+      break;
+  7e:	eb 0b                	jmp    8b <main+0x8b>
+  if(argc < 2){
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  80:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  84:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  87:	3b 03                	cmp    (%ebx),%eax
+  89:	7c ae                	jl     39 <main+0x39>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  8b:	e8 57 02 00 00       	call   2e7 <exit>
+
+00000090 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	57                   	push   %edi
+  94:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+  95:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  98:	8b 55 10             	mov    0x10(%ebp),%edx
+  9b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  9e:	89 cb                	mov    %ecx,%ebx
+  a0:	89 df                	mov    %ebx,%edi
+  a2:	89 d1                	mov    %edx,%ecx
+  a4:	fc                   	cld    
+  a5:	f3 aa                	rep stos %al,%es:(%edi)
+  a7:	89 ca                	mov    %ecx,%edx
+  a9:	89 fb                	mov    %edi,%ebx
+  ab:	89 5d 08             	mov    %ebx,0x8(%ebp)
+  ae:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+  b1:	90                   	nop
+  b2:	5b                   	pop    %ebx
+  b3:	5f                   	pop    %edi
+  b4:	5d                   	pop    %ebp
+  b5:	c3                   	ret    
+
+000000b6 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+  b6:	55                   	push   %ebp
+  b7:	89 e5                	mov    %esp,%ebp
+  b9:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+  bc:	8b 45 08             	mov    0x8(%ebp),%eax
+  bf:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+  c2:	90                   	nop
+  c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  c6:	8d 50 01             	lea    0x1(%eax),%edx
+  c9:	89 55 08             	mov    %edx,0x8(%ebp)
+  cc:	8b 55 0c             	mov    0xc(%ebp),%edx
+  cf:	8d 4a 01             	lea    0x1(%edx),%ecx
+  d2:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+  d5:	0f b6 12             	movzbl (%edx),%edx
+  d8:	88 10                	mov    %dl,(%eax)
+  da:	0f b6 00             	movzbl (%eax),%eax
+  dd:	84 c0                	test   %al,%al
+  df:	75 e2                	jne    c3 <strcpy+0xd>
+    ;
+  return os;
+  e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  e4:	c9                   	leave  
+  e5:	c3                   	ret    
+
+000000e6 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  e6:	55                   	push   %ebp
+  e7:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+  e9:	eb 08                	jmp    f3 <strcmp+0xd>
+    p++, q++;
+  eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  ef:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  f3:	8b 45 08             	mov    0x8(%ebp),%eax
+  f6:	0f b6 00             	movzbl (%eax),%eax
+  f9:	84 c0                	test   %al,%al
+  fb:	74 10                	je     10d <strcmp+0x27>
+  fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 100:	0f b6 10             	movzbl (%eax),%edx
+ 103:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 106:	0f b6 00             	movzbl (%eax),%eax
+ 109:	38 c2                	cmp    %al,%dl
+ 10b:	74 de                	je     eb <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 10d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 110:	0f b6 00             	movzbl (%eax),%eax
+ 113:	0f b6 d0             	movzbl %al,%edx
+ 116:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 119:	0f b6 00             	movzbl (%eax),%eax
+ 11c:	0f b6 c0             	movzbl %al,%eax
+ 11f:	29 c2                	sub    %eax,%edx
+ 121:	89 d0                	mov    %edx,%eax
+}
+ 123:	5d                   	pop    %ebp
+ 124:	c3                   	ret    
+
+00000125 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 125:	55                   	push   %ebp
+ 126:	89 e5                	mov    %esp,%ebp
+ 128:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 12b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 132:	eb 04                	jmp    138 <strlen+0x13>
+ 134:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 138:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 13b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 13e:	01 d0                	add    %edx,%eax
+ 140:	0f b6 00             	movzbl (%eax),%eax
+ 143:	84 c0                	test   %al,%al
+ 145:	75 ed                	jne    134 <strlen+0xf>
+    ;
+  return n;
+ 147:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 14a:	c9                   	leave  
+ 14b:	c3                   	ret    
+
+0000014c <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 14c:	55                   	push   %ebp
+ 14d:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 14f:	8b 45 10             	mov    0x10(%ebp),%eax
+ 152:	50                   	push   %eax
+ 153:	ff 75 0c             	pushl  0xc(%ebp)
+ 156:	ff 75 08             	pushl  0x8(%ebp)
+ 159:	e8 32 ff ff ff       	call   90 <stosb>
+ 15e:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 161:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 164:	c9                   	leave  
+ 165:	c3                   	ret    
+
+00000166 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 166:	55                   	push   %ebp
+ 167:	89 e5                	mov    %esp,%ebp
+ 169:	83 ec 04             	sub    $0x4,%esp
+ 16c:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 16f:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 172:	eb 14                	jmp    188 <strchr+0x22>
+    if(*s == c)
+ 174:	8b 45 08             	mov    0x8(%ebp),%eax
+ 177:	0f b6 00             	movzbl (%eax),%eax
+ 17a:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 17d:	75 05                	jne    184 <strchr+0x1e>
+      return (char*)s;
+ 17f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 182:	eb 13                	jmp    197 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 184:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 188:	8b 45 08             	mov    0x8(%ebp),%eax
+ 18b:	0f b6 00             	movzbl (%eax),%eax
+ 18e:	84 c0                	test   %al,%al
+ 190:	75 e2                	jne    174 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 192:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 197:	c9                   	leave  
+ 198:	c3                   	ret    
+
+00000199 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 199:	55                   	push   %ebp
+ 19a:	89 e5                	mov    %esp,%ebp
+ 19c:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 19f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 1a6:	eb 42                	jmp    1ea <gets+0x51>
+    cc = read(0, &c, 1);
+ 1a8:	83 ec 04             	sub    $0x4,%esp
+ 1ab:	6a 01                	push   $0x1
+ 1ad:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 47 01 00 00       	call   2ff <read>
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 1be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 1c2:	7e 33                	jle    1f7 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 1c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1c7:	8d 50 01             	lea    0x1(%eax),%edx
+ 1ca:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 1cd:	89 c2                	mov    %eax,%edx
+ 1cf:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d2:	01 c2                	add    %eax,%edx
+ 1d4:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1d8:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 1da:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1de:	3c 0a                	cmp    $0xa,%al
+ 1e0:	74 16                	je     1f8 <gets+0x5f>
+ 1e2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 1e6:	3c 0d                	cmp    $0xd,%al
+ 1e8:	74 0e                	je     1f8 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1ed:	83 c0 01             	add    $0x1,%eax
+ 1f0:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 1f3:	7c b3                	jl     1a8 <gets+0xf>
+ 1f5:	eb 01                	jmp    1f8 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 1f7:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fe:	01 d0                	add    %edx,%eax
+ 200:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 203:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 206:	c9                   	leave  
+ 207:	c3                   	ret    
+
+00000208 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 208:	55                   	push   %ebp
+ 209:	89 e5                	mov    %esp,%ebp
+ 20b:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 20e:	83 ec 08             	sub    $0x8,%esp
+ 211:	6a 00                	push   $0x0
+ 213:	ff 75 08             	pushl  0x8(%ebp)
+ 216:	e8 0c 01 00 00       	call   327 <open>
+ 21b:	83 c4 10             	add    $0x10,%esp
+ 21e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 221:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 225:	79 07                	jns    22e <stat+0x26>
+    return -1;
+ 227:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 22c:	eb 25                	jmp    253 <stat+0x4b>
+  r = fstat(fd, st);
+ 22e:	83 ec 08             	sub    $0x8,%esp
+ 231:	ff 75 0c             	pushl  0xc(%ebp)
+ 234:	ff 75 f4             	pushl  -0xc(%ebp)
+ 237:	e8 03 01 00 00       	call   33f <fstat>
+ 23c:	83 c4 10             	add    $0x10,%esp
+ 23f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 242:	83 ec 0c             	sub    $0xc,%esp
+ 245:	ff 75 f4             	pushl  -0xc(%ebp)
+ 248:	e8 c2 00 00 00       	call   30f <close>
+ 24d:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 250:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 253:	c9                   	leave  
+ 254:	c3                   	ret    
+
+00000255 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 255:	55                   	push   %ebp
+ 256:	89 e5                	mov    %esp,%ebp
+ 258:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 25b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 262:	eb 25                	jmp    289 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 264:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 267:	89 d0                	mov    %edx,%eax
+ 269:	c1 e0 02             	shl    $0x2,%eax
+ 26c:	01 d0                	add    %edx,%eax
+ 26e:	01 c0                	add    %eax,%eax
+ 270:	89 c1                	mov    %eax,%ecx
+ 272:	8b 45 08             	mov    0x8(%ebp),%eax
+ 275:	8d 50 01             	lea    0x1(%eax),%edx
+ 278:	89 55 08             	mov    %edx,0x8(%ebp)
+ 27b:	0f b6 00             	movzbl (%eax),%eax
+ 27e:	0f be c0             	movsbl %al,%eax
+ 281:	01 c8                	add    %ecx,%eax
+ 283:	83 e8 30             	sub    $0x30,%eax
+ 286:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 289:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28c:	0f b6 00             	movzbl (%eax),%eax
+ 28f:	3c 2f                	cmp    $0x2f,%al
+ 291:	7e 0a                	jle    29d <atoi+0x48>
+ 293:	8b 45 08             	mov    0x8(%ebp),%eax
+ 296:	0f b6 00             	movzbl (%eax),%eax
+ 299:	3c 39                	cmp    $0x39,%al
+ 29b:	7e c7                	jle    264 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 29d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 2a0:	c9                   	leave  
+ 2a1:	c3                   	ret    
+
+000002a2 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 2a2:	55                   	push   %ebp
+ 2a3:	89 e5                	mov    %esp,%ebp
+ 2a5:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 2a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 2ae:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 2b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 2b4:	eb 17                	jmp    2cd <memmove+0x2b>
+    *dst++ = *src++;
+ 2b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 2b9:	8d 50 01             	lea    0x1(%eax),%edx
+ 2bc:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 2bf:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 2c2:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 2c5:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 2c8:	0f b6 12             	movzbl (%edx),%edx
+ 2cb:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2cd:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2d0:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 2d3:	89 55 10             	mov    %edx,0x10(%ebp)
+ 2d6:	85 c0                	test   %eax,%eax
+ 2d8:	7f dc                	jg     2b6 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 2da:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 2dd:	c9                   	leave  
+ 2de:	c3                   	ret    
+
+000002df <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2df:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e4:	cd 40                	int    $0x40
+ 2e6:	c3                   	ret    
+
+000002e7 <exit>:
+SYSCALL(exit)
+ 2e7:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2ec:	cd 40                	int    $0x40
+ 2ee:	c3                   	ret    
+
+000002ef <wait>:
+SYSCALL(wait)
+ 2ef:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f4:	cd 40                	int    $0x40
+ 2f6:	c3                   	ret    
+
+000002f7 <pipe>:
+SYSCALL(pipe)
+ 2f7:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2fc:	cd 40                	int    $0x40
+ 2fe:	c3                   	ret    
+
+000002ff <read>:
+SYSCALL(read)
+ 2ff:	b8 05 00 00 00       	mov    $0x5,%eax
+ 304:	cd 40                	int    $0x40
+ 306:	c3                   	ret    
+
+00000307 <write>:
+SYSCALL(write)
+ 307:	b8 10 00 00 00       	mov    $0x10,%eax
+ 30c:	cd 40                	int    $0x40
+ 30e:	c3                   	ret    
+
+0000030f <close>:
+SYSCALL(close)
+ 30f:	b8 15 00 00 00       	mov    $0x15,%eax
+ 314:	cd 40                	int    $0x40
+ 316:	c3                   	ret    
+
+00000317 <kill>:
+SYSCALL(kill)
+ 317:	b8 06 00 00 00       	mov    $0x6,%eax
+ 31c:	cd 40                	int    $0x40
+ 31e:	c3                   	ret    
+
+0000031f <exec>:
+SYSCALL(exec)
+ 31f:	b8 07 00 00 00       	mov    $0x7,%eax
+ 324:	cd 40                	int    $0x40
+ 326:	c3                   	ret    
+
+00000327 <open>:
+SYSCALL(open)
+ 327:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 32c:	cd 40                	int    $0x40
+ 32e:	c3                   	ret    
+
+0000032f <mknod>:
+SYSCALL(mknod)
+ 32f:	b8 11 00 00 00       	mov    $0x11,%eax
+ 334:	cd 40                	int    $0x40
+ 336:	c3                   	ret    
+
+00000337 <unlink>:
+SYSCALL(unlink)
+ 337:	b8 12 00 00 00       	mov    $0x12,%eax
+ 33c:	cd 40                	int    $0x40
+ 33e:	c3                   	ret    
+
+0000033f <fstat>:
+SYSCALL(fstat)
+ 33f:	b8 08 00 00 00       	mov    $0x8,%eax
+ 344:	cd 40                	int    $0x40
+ 346:	c3                   	ret    
+
+00000347 <link>:
+SYSCALL(link)
+ 347:	b8 13 00 00 00       	mov    $0x13,%eax
+ 34c:	cd 40                	int    $0x40
+ 34e:	c3                   	ret    
+
+0000034f <mkdir>:
+SYSCALL(mkdir)
+ 34f:	b8 14 00 00 00       	mov    $0x14,%eax
+ 354:	cd 40                	int    $0x40
+ 356:	c3                   	ret    
+
+00000357 <chdir>:
+SYSCALL(chdir)
+ 357:	b8 09 00 00 00       	mov    $0x9,%eax
+ 35c:	cd 40                	int    $0x40
+ 35e:	c3                   	ret    
+
+0000035f <dup>:
+SYSCALL(dup)
+ 35f:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 364:	cd 40                	int    $0x40
+ 366:	c3                   	ret    
+
+00000367 <getpid>:
+SYSCALL(getpid)
+ 367:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 36c:	cd 40                	int    $0x40
+ 36e:	c3                   	ret    
+
+0000036f <sbrk>:
+SYSCALL(sbrk)
+ 36f:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 374:	cd 40                	int    $0x40
+ 376:	c3                   	ret    
+
+00000377 <sleep>:
+SYSCALL(sleep)
+ 377:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 37c:	cd 40                	int    $0x40
+ 37e:	c3                   	ret    
+
+0000037f <uptime>:
+SYSCALL(uptime)
+ 37f:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 384:	cd 40                	int    $0x40
+ 386:	c3                   	ret    
+
+00000387 <procstat>:
+SYSCALL(procstat) 
+ 387:	b8 16 00 00 00       	mov    $0x16,%eax
+ 38c:	cd 40                	int    $0x40
+ 38e:	c3                   	ret    
+
+0000038f <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 38f:	55                   	push   %ebp
+ 390:	89 e5                	mov    %esp,%ebp
+ 392:	83 ec 18             	sub    $0x18,%esp
+ 395:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 398:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 39b:	83 ec 04             	sub    $0x4,%esp
+ 39e:	6a 01                	push   $0x1
+ 3a0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 3a3:	50                   	push   %eax
+ 3a4:	ff 75 08             	pushl  0x8(%ebp)
+ 3a7:	e8 5b ff ff ff       	call   307 <write>
+ 3ac:	83 c4 10             	add    $0x10,%esp
+}
+ 3af:	90                   	nop
+ 3b0:	c9                   	leave  
+ 3b1:	c3                   	ret    
+
+000003b2 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b2:	55                   	push   %ebp
+ 3b3:	89 e5                	mov    %esp,%ebp
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 3b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 3c0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 3c4:	74 17                	je     3dd <printint+0x2b>
+ 3c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 3ca:	79 11                	jns    3dd <printint+0x2b>
+    neg = 1;
+ 3cc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 3d3:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3d6:	f7 d8                	neg    %eax
+ 3d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 3db:	eb 06                	jmp    3e3 <printint+0x31>
+  } else {
+    x = xx;
+ 3dd:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 3e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 3ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 3ed:	8d 41 01             	lea    0x1(%ecx),%eax
+ 3f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 3f3:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3f9:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3fe:	f7 f3                	div    %ebx
+ 400:	89 d0                	mov    %edx,%eax
+ 402:	0f b6 80 9c 0a 00 00 	movzbl 0xa9c(%eax),%eax
+ 409:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 40d:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 410:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 413:	ba 00 00 00 00       	mov    $0x0,%edx
+ 418:	f7 f3                	div    %ebx
+ 41a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 41d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 421:	75 c7                	jne    3ea <printint+0x38>
+  if(neg)
+ 423:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 427:	74 2d                	je     456 <printint+0xa4>
+    buf[i++] = '-';
+ 429:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 42c:	8d 50 01             	lea    0x1(%eax),%edx
+ 42f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 432:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 437:	eb 1d                	jmp    456 <printint+0xa4>
+    putc(fd, buf[i]);
+ 439:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 43c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 43f:	01 d0                	add    %edx,%eax
+ 441:	0f b6 00             	movzbl (%eax),%eax
+ 444:	0f be c0             	movsbl %al,%eax
+ 447:	83 ec 08             	sub    $0x8,%esp
+ 44a:	50                   	push   %eax
+ 44b:	ff 75 08             	pushl  0x8(%ebp)
+ 44e:	e8 3c ff ff ff       	call   38f <putc>
+ 453:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 456:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 45a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 45e:	79 d9                	jns    439 <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 460:	90                   	nop
+ 461:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 464:	c9                   	leave  
+ 465:	c3                   	ret    
+
+00000466 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 466:	55                   	push   %ebp
+ 467:	89 e5                	mov    %esp,%ebp
+ 469:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 46c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 473:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 476:	83 c0 04             	add    $0x4,%eax
+ 479:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 47c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 483:	e9 59 01 00 00       	jmp    5e1 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 488:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 48b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 48e:	01 d0                	add    %edx,%eax
+ 490:	0f b6 00             	movzbl (%eax),%eax
+ 493:	0f be c0             	movsbl %al,%eax
+ 496:	25 ff 00 00 00       	and    $0xff,%eax
+ 49b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 49e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 4a2:	75 2c                	jne    4d0 <printf+0x6a>
+      if(c == '%'){
+ 4a4:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 4a8:	75 0c                	jne    4b6 <printf+0x50>
+        state = '%';
+ 4aa:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 4b1:	e9 27 01 00 00       	jmp    5dd <printf+0x177>
+      } else {
+        putc(fd, c);
+ 4b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 4b9:	0f be c0             	movsbl %al,%eax
+ 4bc:	83 ec 08             	sub    $0x8,%esp
+ 4bf:	50                   	push   %eax
+ 4c0:	ff 75 08             	pushl  0x8(%ebp)
+ 4c3:	e8 c7 fe ff ff       	call   38f <putc>
+ 4c8:	83 c4 10             	add    $0x10,%esp
+ 4cb:	e9 0d 01 00 00       	jmp    5dd <printf+0x177>
+      }
+    } else if(state == '%'){
+ 4d0:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 4d4:	0f 85 03 01 00 00    	jne    5dd <printf+0x177>
+      if(c == 'd'){
+ 4da:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 4de:	75 1e                	jne    4fe <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 4e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4e3:	8b 00                	mov    (%eax),%eax
+ 4e5:	6a 01                	push   $0x1
+ 4e7:	6a 0a                	push   $0xa
+ 4e9:	50                   	push   %eax
+ 4ea:	ff 75 08             	pushl  0x8(%ebp)
+ 4ed:	e8 c0 fe ff ff       	call   3b2 <printint>
+ 4f2:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 4f5:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 4f9:	e9 d8 00 00 00       	jmp    5d6 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 4fe:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 502:	74 06                	je     50a <printf+0xa4>
+ 504:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 508:	75 1e                	jne    528 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 50a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 50d:	8b 00                	mov    (%eax),%eax
+ 50f:	6a 00                	push   $0x0
+ 511:	6a 10                	push   $0x10
+ 513:	50                   	push   %eax
+ 514:	ff 75 08             	pushl  0x8(%ebp)
+ 517:	e8 96 fe ff ff       	call   3b2 <printint>
+ 51c:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 51f:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 523:	e9 ae 00 00 00       	jmp    5d6 <printf+0x170>
+      } else if(c == 's'){
+ 528:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 52c:	75 43                	jne    571 <printf+0x10b>
+        s = (char*)*ap;
+ 52e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 531:	8b 00                	mov    (%eax),%eax
+ 533:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 536:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 53a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 53e:	75 25                	jne    565 <printf+0xff>
+          s = "(null)";
+ 540:	c7 45 f4 49 08 00 00 	movl   $0x849,-0xc(%ebp)
+        while(*s != 0){
+ 547:	eb 1c                	jmp    565 <printf+0xff>
+          putc(fd, *s);
+ 549:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 54c:	0f b6 00             	movzbl (%eax),%eax
+ 54f:	0f be c0             	movsbl %al,%eax
+ 552:	83 ec 08             	sub    $0x8,%esp
+ 555:	50                   	push   %eax
+ 556:	ff 75 08             	pushl  0x8(%ebp)
+ 559:	e8 31 fe ff ff       	call   38f <putc>
+ 55e:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 561:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 565:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 568:	0f b6 00             	movzbl (%eax),%eax
+ 56b:	84 c0                	test   %al,%al
+ 56d:	75 da                	jne    549 <printf+0xe3>
+ 56f:	eb 65                	jmp    5d6 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 571:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 575:	75 1d                	jne    594 <printf+0x12e>
+        putc(fd, *ap);
+ 577:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 57a:	8b 00                	mov    (%eax),%eax
+ 57c:	0f be c0             	movsbl %al,%eax
+ 57f:	83 ec 08             	sub    $0x8,%esp
+ 582:	50                   	push   %eax
+ 583:	ff 75 08             	pushl  0x8(%ebp)
+ 586:	e8 04 fe ff ff       	call   38f <putc>
+ 58b:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 58e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 592:	eb 42                	jmp    5d6 <printf+0x170>
+      } else if(c == '%'){
+ 594:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 598:	75 17                	jne    5b1 <printf+0x14b>
+        putc(fd, c);
+ 59a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 59d:	0f be c0             	movsbl %al,%eax
+ 5a0:	83 ec 08             	sub    $0x8,%esp
+ 5a3:	50                   	push   %eax
+ 5a4:	ff 75 08             	pushl  0x8(%ebp)
+ 5a7:	e8 e3 fd ff ff       	call   38f <putc>
+ 5ac:	83 c4 10             	add    $0x10,%esp
+ 5af:	eb 25                	jmp    5d6 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 5b1:	83 ec 08             	sub    $0x8,%esp
+ 5b4:	6a 25                	push   $0x25
+ 5b6:	ff 75 08             	pushl  0x8(%ebp)
+ 5b9:	e8 d1 fd ff ff       	call   38f <putc>
+ 5be:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 5c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 5c4:	0f be c0             	movsbl %al,%eax
+ 5c7:	83 ec 08             	sub    $0x8,%esp
+ 5ca:	50                   	push   %eax
+ 5cb:	ff 75 08             	pushl  0x8(%ebp)
+ 5ce:	e8 bc fd ff ff       	call   38f <putc>
+ 5d3:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5dd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 5e1:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 5e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 5e7:	01 d0                	add    %edx,%eax
+ 5e9:	0f b6 00             	movzbl (%eax),%eax
+ 5ec:	84 c0                	test   %al,%al
+ 5ee:	0f 85 94 fe ff ff    	jne    488 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5f4:	90                   	nop
+ 5f5:	c9                   	leave  
+ 5f6:	c3                   	ret    
+
+000005f7 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f7:	55                   	push   %ebp
+ 5f8:	89 e5                	mov    %esp,%ebp
+ 5fa:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 600:	83 e8 08             	sub    $0x8,%eax
+ 603:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 606:	a1 b8 0a 00 00       	mov    0xab8,%eax
+ 60b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 60e:	eb 24                	jmp    634 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 610:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 613:	8b 00                	mov    (%eax),%eax
+ 615:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 618:	77 12                	ja     62c <free+0x35>
+ 61a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 61d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 620:	77 24                	ja     646 <free+0x4f>
+ 622:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 625:	8b 00                	mov    (%eax),%eax
+ 627:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 62a:	77 1a                	ja     646 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 62c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 62f:	8b 00                	mov    (%eax),%eax
+ 631:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 634:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 637:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 63a:	76 d4                	jbe    610 <free+0x19>
+ 63c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 63f:	8b 00                	mov    (%eax),%eax
+ 641:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 644:	76 ca                	jbe    610 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 646:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 649:	8b 40 04             	mov    0x4(%eax),%eax
+ 64c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 653:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 656:	01 c2                	add    %eax,%edx
+ 658:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 65b:	8b 00                	mov    (%eax),%eax
+ 65d:	39 c2                	cmp    %eax,%edx
+ 65f:	75 24                	jne    685 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 661:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 664:	8b 50 04             	mov    0x4(%eax),%edx
+ 667:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 66a:	8b 00                	mov    (%eax),%eax
+ 66c:	8b 40 04             	mov    0x4(%eax),%eax
+ 66f:	01 c2                	add    %eax,%edx
+ 671:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 674:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 677:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 67a:	8b 00                	mov    (%eax),%eax
+ 67c:	8b 10                	mov    (%eax),%edx
+ 67e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 681:	89 10                	mov    %edx,(%eax)
+ 683:	eb 0a                	jmp    68f <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 685:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 688:	8b 10                	mov    (%eax),%edx
+ 68a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 68d:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 68f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 692:	8b 40 04             	mov    0x4(%eax),%eax
+ 695:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 69c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 69f:	01 d0                	add    %edx,%eax
+ 6a1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 6a4:	75 20                	jne    6c6 <free+0xcf>
+    p->s.size += bp->s.size;
+ 6a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6a9:	8b 50 04             	mov    0x4(%eax),%edx
+ 6ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6af:	8b 40 04             	mov    0x4(%eax),%eax
+ 6b2:	01 c2                	add    %eax,%edx
+ 6b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6b7:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6bd:	8b 10                	mov    (%eax),%edx
+ 6bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6c2:	89 10                	mov    %edx,(%eax)
+ 6c4:	eb 08                	jmp    6ce <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 6c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6c9:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 6cc:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 6ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6d1:	a3 b8 0a 00 00       	mov    %eax,0xab8
+}
+ 6d6:	90                   	nop
+ 6d7:	c9                   	leave  
+ 6d8:	c3                   	ret    
+
+000006d9 <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 6d9:	55                   	push   %ebp
+ 6da:	89 e5                	mov    %esp,%ebp
+ 6dc:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 6df:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 6e6:	77 07                	ja     6ef <morecore+0x16>
+    nu = 4096;
+ 6e8:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 6ef:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6f2:	c1 e0 03             	shl    $0x3,%eax
+ 6f5:	83 ec 0c             	sub    $0xc,%esp
+ 6f8:	50                   	push   %eax
+ 6f9:	e8 71 fc ff ff       	call   36f <sbrk>
+ 6fe:	83 c4 10             	add    $0x10,%esp
+ 701:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 704:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 708:	75 07                	jne    711 <morecore+0x38>
+    return 0;
+ 70a:	b8 00 00 00 00       	mov    $0x0,%eax
+ 70f:	eb 26                	jmp    737 <morecore+0x5e>
+  hp = (Header*)p;
+ 711:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 714:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 717:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 71a:	8b 55 08             	mov    0x8(%ebp),%edx
+ 71d:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 720:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 723:	83 c0 08             	add    $0x8,%eax
+ 726:	83 ec 0c             	sub    $0xc,%esp
+ 729:	50                   	push   %eax
+ 72a:	e8 c8 fe ff ff       	call   5f7 <free>
+ 72f:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 732:	a1 b8 0a 00 00       	mov    0xab8,%eax
+}
+ 737:	c9                   	leave  
+ 738:	c3                   	ret    
+
+00000739 <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 739:	55                   	push   %ebp
+ 73a:	89 e5                	mov    %esp,%ebp
+ 73c:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 73f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 742:	83 c0 07             	add    $0x7,%eax
+ 745:	c1 e8 03             	shr    $0x3,%eax
+ 748:	83 c0 01             	add    $0x1,%eax
+ 74b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 74e:	a1 b8 0a 00 00       	mov    0xab8,%eax
+ 753:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 756:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 75a:	75 23                	jne    77f <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 75c:	c7 45 f0 b0 0a 00 00 	movl   $0xab0,-0x10(%ebp)
+ 763:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 766:	a3 b8 0a 00 00       	mov    %eax,0xab8
+ 76b:	a1 b8 0a 00 00       	mov    0xab8,%eax
+ 770:	a3 b0 0a 00 00       	mov    %eax,0xab0
+    base.s.size = 0;
+ 775:	c7 05 b4 0a 00 00 00 	movl   $0x0,0xab4
+ 77c:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 77f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 782:	8b 00                	mov    (%eax),%eax
+ 784:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 787:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 78a:	8b 40 04             	mov    0x4(%eax),%eax
+ 78d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 790:	72 4d                	jb     7df <malloc+0xa6>
+      if(p->s.size == nunits)
+ 792:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 795:	8b 40 04             	mov    0x4(%eax),%eax
+ 798:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 79b:	75 0c                	jne    7a9 <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 79d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7a0:	8b 10                	mov    (%eax),%edx
+ 7a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7a5:	89 10                	mov    %edx,(%eax)
+ 7a7:	eb 26                	jmp    7cf <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 7a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7ac:	8b 40 04             	mov    0x4(%eax),%eax
+ 7af:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 7b2:	89 c2                	mov    %eax,%edx
+ 7b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7b7:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 7ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7bd:	8b 40 04             	mov    0x4(%eax),%eax
+ 7c0:	c1 e0 03             	shl    $0x3,%eax
+ 7c3:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 7c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 7cc:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 7cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7d2:	a3 b8 0a 00 00       	mov    %eax,0xab8
+      return (void*)(p + 1);
+ 7d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7da:	83 c0 08             	add    $0x8,%eax
+ 7dd:	eb 3b                	jmp    81a <malloc+0xe1>
+    }
+    if(p == freep)
+ 7df:	a1 b8 0a 00 00       	mov    0xab8,%eax
+ 7e4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 7e7:	75 1e                	jne    807 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 7e9:	83 ec 0c             	sub    $0xc,%esp
+ 7ec:	ff 75 ec             	pushl  -0x14(%ebp)
+ 7ef:	e8 e5 fe ff ff       	call   6d9 <morecore>
+ 7f4:	83 c4 10             	add    $0x10,%esp
+ 7f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 7fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 7fe:	75 07                	jne    807 <malloc+0xce>
+        return 0;
+ 800:	b8 00 00 00 00       	mov    $0x0,%eax
+ 805:	eb 13                	jmp    81a <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 807:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 80a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 80d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 810:	8b 00                	mov    (%eax),%eax
+ 812:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 815:	e9 6d ff ff ff       	jmp    787 <malloc+0x4e>
+}
+ 81a:	c9                   	leave  
+ 81b:	c3                   	ret    
diff -rupN xv6-unrc/rm.sym xv6-mod/rm.sym
--- xv6-unrc/rm.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/rm.sym	2018-04-04 14:53:54.587459678 -0300
@@ -0,0 +1,61 @@
+00000000 .text
+0000081c .rodata
+00000850 .eh_frame
+00000a9c .data
+00000ab0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 rm.c
+00000000 ulib.c
+00000090 stosb
+00000000 printf.c
+0000038f putc
+000003b2 printint
+00000a9c digits.1109
+00000000 umalloc.c
+00000ab0 base
+00000ab8 freep
+000006d9 morecore
+000000b6 strcpy
+00000466 printf
+000002a2 memmove
+0000032f mknod
+00000199 gets
+00000367 getpid
+00000739 malloc
+00000387 procstat
+00000377 sleep
+000002f7 pipe
+00000307 write
+0000033f fstat
+00000317 kill
+00000357 chdir
+0000031f exec
+000002ef wait
+000002ff read
+00000337 unlink
+000002df fork
+0000036f sbrk
+0000037f uptime
+00000aad __bss_start
+0000014c memset
+00000000 main
+000000e6 strcmp
+0000035f dup
+00000208 stat
+00000aad _edata
+00000abc _end
+00000347 link
+000002e7 exit
+00000255 atoi
+00000125 strlen
+00000327 open
+00000166 strchr
+0000034f mkdir
+0000030f close
+000005f7 free
Los archivos binarios xv6-unrc/._runoff y xv6-mod/._runoff son distintos
Los archivos binarios xv6-unrc/._runoff1 y xv6-mod/._runoff1 son distintos
Los archivos binarios xv6-unrc/._runoff.list y xv6-mod/._runoff.list son distintos
Los archivos binarios xv6-unrc/._runoff.spec y xv6-mod/._runoff.spec son distintos
Los archivos binarios xv6-unrc/_sh y xv6-mod/_sh son distintos
diff -rupN xv6-unrc/sh.asm xv6-mod/sh.asm
--- xv6-unrc/sh.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/sh.asm	2018-04-04 14:53:55.167465495 -0300
@@ -0,0 +1,2765 @@
+
+_sh:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <runcmd>:
+struct cmd *parsecmd(char*);
+
+// Execute cmd.  Never returns.
+void
+runcmd(struct cmd *cmd)
+{
+       0:	55                   	push   %ebp
+       1:	89 e5                	mov    %esp,%ebp
+       3:	83 ec 28             	sub    $0x28,%esp
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+       6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+       a:	75 05                	jne    11 <runcmd+0x11>
+    exit();
+       c:	e8 c4 0e 00 00       	call   ed5 <exit>
+  
+  switch(cmd->type){
+      11:	8b 45 08             	mov    0x8(%ebp),%eax
+      14:	8b 00                	mov    (%eax),%eax
+      16:	83 f8 05             	cmp    $0x5,%eax
+      19:	77 09                	ja     24 <runcmd+0x24>
+      1b:	8b 04 85 38 14 00 00 	mov    0x1438(,%eax,4),%eax
+      22:	ff e0                	jmp    *%eax
+  default:
+    panic("runcmd");
+      24:	83 ec 0c             	sub    $0xc,%esp
+      27:	68 0c 14 00 00       	push   $0x140c
+      2c:	e8 6b 03 00 00       	call   39c <panic>
+      31:	83 c4 10             	add    $0x10,%esp
+
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+      34:	8b 45 08             	mov    0x8(%ebp),%eax
+      37:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(ecmd->argv[0] == 0)
+      3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+      3d:	8b 40 04             	mov    0x4(%eax),%eax
+      40:	85 c0                	test   %eax,%eax
+      42:	75 05                	jne    49 <runcmd+0x49>
+      exit();
+      44:	e8 8c 0e 00 00       	call   ed5 <exit>
+    exec(ecmd->argv[0], ecmd->argv);
+      49:	8b 45 f4             	mov    -0xc(%ebp),%eax
+      4c:	8d 50 04             	lea    0x4(%eax),%edx
+      4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+      52:	8b 40 04             	mov    0x4(%eax),%eax
+      55:	83 ec 08             	sub    $0x8,%esp
+      58:	52                   	push   %edx
+      59:	50                   	push   %eax
+      5a:	e8 ae 0e 00 00       	call   f0d <exec>
+      5f:	83 c4 10             	add    $0x10,%esp
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+      62:	8b 45 f4             	mov    -0xc(%ebp),%eax
+      65:	8b 40 04             	mov    0x4(%eax),%eax
+      68:	83 ec 04             	sub    $0x4,%esp
+      6b:	50                   	push   %eax
+      6c:	68 13 14 00 00       	push   $0x1413
+      71:	6a 02                	push   $0x2
+      73:	e8 dc 0f 00 00       	call   1054 <printf>
+      78:	83 c4 10             	add    $0x10,%esp
+    break;
+      7b:	e9 c6 01 00 00       	jmp    246 <runcmd+0x246>
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+      80:	8b 45 08             	mov    0x8(%ebp),%eax
+      83:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    close(rcmd->fd);
+      86:	8b 45 f0             	mov    -0x10(%ebp),%eax
+      89:	8b 40 14             	mov    0x14(%eax),%eax
+      8c:	83 ec 0c             	sub    $0xc,%esp
+      8f:	50                   	push   %eax
+      90:	e8 68 0e 00 00       	call   efd <close>
+      95:	83 c4 10             	add    $0x10,%esp
+    if(open(rcmd->file, rcmd->mode) < 0){
+      98:	8b 45 f0             	mov    -0x10(%ebp),%eax
+      9b:	8b 50 10             	mov    0x10(%eax),%edx
+      9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+      a1:	8b 40 08             	mov    0x8(%eax),%eax
+      a4:	83 ec 08             	sub    $0x8,%esp
+      a7:	52                   	push   %edx
+      a8:	50                   	push   %eax
+      a9:	e8 67 0e 00 00       	call   f15 <open>
+      ae:	83 c4 10             	add    $0x10,%esp
+      b1:	85 c0                	test   %eax,%eax
+      b3:	79 1e                	jns    d3 <runcmd+0xd3>
+      printf(2, "open %s failed\n", rcmd->file);
+      b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+      b8:	8b 40 08             	mov    0x8(%eax),%eax
+      bb:	83 ec 04             	sub    $0x4,%esp
+      be:	50                   	push   %eax
+      bf:	68 23 14 00 00       	push   $0x1423
+      c4:	6a 02                	push   $0x2
+      c6:	e8 89 0f 00 00       	call   1054 <printf>
+      cb:	83 c4 10             	add    $0x10,%esp
+      exit();
+      ce:	e8 02 0e 00 00       	call   ed5 <exit>
+    }
+    runcmd(rcmd->cmd);
+      d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+      d6:	8b 40 04             	mov    0x4(%eax),%eax
+      d9:	83 ec 0c             	sub    $0xc,%esp
+      dc:	50                   	push   %eax
+      dd:	e8 1e ff ff ff       	call   0 <runcmd>
+      e2:	83 c4 10             	add    $0x10,%esp
+    break;
+      e5:	e9 5c 01 00 00       	jmp    246 <runcmd+0x246>
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+      ea:	8b 45 08             	mov    0x8(%ebp),%eax
+      ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if(fork1() == 0)
+      f0:	e8 c7 02 00 00       	call   3bc <fork1>
+      f5:	85 c0                	test   %eax,%eax
+      f7:	75 12                	jne    10b <runcmd+0x10b>
+      runcmd(lcmd->left);
+      f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+      fc:	8b 40 04             	mov    0x4(%eax),%eax
+      ff:	83 ec 0c             	sub    $0xc,%esp
+     102:	50                   	push   %eax
+     103:	e8 f8 fe ff ff       	call   0 <runcmd>
+     108:	83 c4 10             	add    $0x10,%esp
+    wait();
+     10b:	e8 cd 0d 00 00       	call   edd <wait>
+    runcmd(lcmd->right);
+     110:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     113:	8b 40 08             	mov    0x8(%eax),%eax
+     116:	83 ec 0c             	sub    $0xc,%esp
+     119:	50                   	push   %eax
+     11a:	e8 e1 fe ff ff       	call   0 <runcmd>
+     11f:	83 c4 10             	add    $0x10,%esp
+    break;
+     122:	e9 1f 01 00 00       	jmp    246 <runcmd+0x246>
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+     127:	8b 45 08             	mov    0x8(%ebp),%eax
+     12a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    if(pipe(p) < 0)
+     12d:	83 ec 0c             	sub    $0xc,%esp
+     130:	8d 45 dc             	lea    -0x24(%ebp),%eax
+     133:	50                   	push   %eax
+     134:	e8 ac 0d 00 00       	call   ee5 <pipe>
+     139:	83 c4 10             	add    $0x10,%esp
+     13c:	85 c0                	test   %eax,%eax
+     13e:	79 10                	jns    150 <runcmd+0x150>
+      panic("pipe");
+     140:	83 ec 0c             	sub    $0xc,%esp
+     143:	68 33 14 00 00       	push   $0x1433
+     148:	e8 4f 02 00 00       	call   39c <panic>
+     14d:	83 c4 10             	add    $0x10,%esp
+    if(fork1() == 0){
+     150:	e8 67 02 00 00       	call   3bc <fork1>
+     155:	85 c0                	test   %eax,%eax
+     157:	75 4c                	jne    1a5 <runcmd+0x1a5>
+      close(1);
+     159:	83 ec 0c             	sub    $0xc,%esp
+     15c:	6a 01                	push   $0x1
+     15e:	e8 9a 0d 00 00       	call   efd <close>
+     163:	83 c4 10             	add    $0x10,%esp
+      dup(p[1]);
+     166:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     169:	83 ec 0c             	sub    $0xc,%esp
+     16c:	50                   	push   %eax
+     16d:	e8 db 0d 00 00       	call   f4d <dup>
+     172:	83 c4 10             	add    $0x10,%esp
+      close(p[0]);
+     175:	8b 45 dc             	mov    -0x24(%ebp),%eax
+     178:	83 ec 0c             	sub    $0xc,%esp
+     17b:	50                   	push   %eax
+     17c:	e8 7c 0d 00 00       	call   efd <close>
+     181:	83 c4 10             	add    $0x10,%esp
+      close(p[1]);
+     184:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     187:	83 ec 0c             	sub    $0xc,%esp
+     18a:	50                   	push   %eax
+     18b:	e8 6d 0d 00 00       	call   efd <close>
+     190:	83 c4 10             	add    $0x10,%esp
+      runcmd(pcmd->left);
+     193:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     196:	8b 40 04             	mov    0x4(%eax),%eax
+     199:	83 ec 0c             	sub    $0xc,%esp
+     19c:	50                   	push   %eax
+     19d:	e8 5e fe ff ff       	call   0 <runcmd>
+     1a2:	83 c4 10             	add    $0x10,%esp
+    }
+    if(fork1() == 0){
+     1a5:	e8 12 02 00 00       	call   3bc <fork1>
+     1aa:	85 c0                	test   %eax,%eax
+     1ac:	75 4c                	jne    1fa <runcmd+0x1fa>
+      close(0);
+     1ae:	83 ec 0c             	sub    $0xc,%esp
+     1b1:	6a 00                	push   $0x0
+     1b3:	e8 45 0d 00 00       	call   efd <close>
+     1b8:	83 c4 10             	add    $0x10,%esp
+      dup(p[0]);
+     1bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+     1be:	83 ec 0c             	sub    $0xc,%esp
+     1c1:	50                   	push   %eax
+     1c2:	e8 86 0d 00 00       	call   f4d <dup>
+     1c7:	83 c4 10             	add    $0x10,%esp
+      close(p[0]);
+     1ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
+     1cd:	83 ec 0c             	sub    $0xc,%esp
+     1d0:	50                   	push   %eax
+     1d1:	e8 27 0d 00 00       	call   efd <close>
+     1d6:	83 c4 10             	add    $0x10,%esp
+      close(p[1]);
+     1d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     1dc:	83 ec 0c             	sub    $0xc,%esp
+     1df:	50                   	push   %eax
+     1e0:	e8 18 0d 00 00       	call   efd <close>
+     1e5:	83 c4 10             	add    $0x10,%esp
+      runcmd(pcmd->right);
+     1e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     1eb:	8b 40 08             	mov    0x8(%eax),%eax
+     1ee:	83 ec 0c             	sub    $0xc,%esp
+     1f1:	50                   	push   %eax
+     1f2:	e8 09 fe ff ff       	call   0 <runcmd>
+     1f7:	83 c4 10             	add    $0x10,%esp
+    }
+    close(p[0]);
+     1fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
+     1fd:	83 ec 0c             	sub    $0xc,%esp
+     200:	50                   	push   %eax
+     201:	e8 f7 0c 00 00       	call   efd <close>
+     206:	83 c4 10             	add    $0x10,%esp
+    close(p[1]);
+     209:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     20c:	83 ec 0c             	sub    $0xc,%esp
+     20f:	50                   	push   %eax
+     210:	e8 e8 0c 00 00       	call   efd <close>
+     215:	83 c4 10             	add    $0x10,%esp
+    wait();
+     218:	e8 c0 0c 00 00       	call   edd <wait>
+    wait();
+     21d:	e8 bb 0c 00 00       	call   edd <wait>
+    break;
+     222:	eb 22                	jmp    246 <runcmd+0x246>
+    
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+     224:	8b 45 08             	mov    0x8(%ebp),%eax
+     227:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(fork1() == 0)
+     22a:	e8 8d 01 00 00       	call   3bc <fork1>
+     22f:	85 c0                	test   %eax,%eax
+     231:	75 12                	jne    245 <runcmd+0x245>
+      runcmd(bcmd->cmd);
+     233:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     236:	8b 40 04             	mov    0x4(%eax),%eax
+     239:	83 ec 0c             	sub    $0xc,%esp
+     23c:	50                   	push   %eax
+     23d:	e8 be fd ff ff       	call   0 <runcmd>
+     242:	83 c4 10             	add    $0x10,%esp
+    break;
+     245:	90                   	nop
+  }
+  exit();
+     246:	e8 8a 0c 00 00       	call   ed5 <exit>
+
+0000024b <getcmd>:
+}
+
+int
+getcmd(char *buf, int nbuf)
+{
+     24b:	55                   	push   %ebp
+     24c:	89 e5                	mov    %esp,%ebp
+     24e:	83 ec 08             	sub    $0x8,%esp
+  printf(2, "$ ");
+     251:	83 ec 08             	sub    $0x8,%esp
+     254:	68 50 14 00 00       	push   $0x1450
+     259:	6a 02                	push   $0x2
+     25b:	e8 f4 0d 00 00       	call   1054 <printf>
+     260:	83 c4 10             	add    $0x10,%esp
+  memset(buf, 0, nbuf);
+     263:	8b 45 0c             	mov    0xc(%ebp),%eax
+     266:	83 ec 04             	sub    $0x4,%esp
+     269:	50                   	push   %eax
+     26a:	6a 00                	push   $0x0
+     26c:	ff 75 08             	pushl  0x8(%ebp)
+     26f:	e8 c6 0a 00 00       	call   d3a <memset>
+     274:	83 c4 10             	add    $0x10,%esp
+  gets(buf, nbuf);
+     277:	83 ec 08             	sub    $0x8,%esp
+     27a:	ff 75 0c             	pushl  0xc(%ebp)
+     27d:	ff 75 08             	pushl  0x8(%ebp)
+     280:	e8 02 0b 00 00       	call   d87 <gets>
+     285:	83 c4 10             	add    $0x10,%esp
+  if(buf[0] == 0) // EOF
+     288:	8b 45 08             	mov    0x8(%ebp),%eax
+     28b:	0f b6 00             	movzbl (%eax),%eax
+     28e:	84 c0                	test   %al,%al
+     290:	75 07                	jne    299 <getcmd+0x4e>
+    return -1;
+     292:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+     297:	eb 05                	jmp    29e <getcmd+0x53>
+  return 0;
+     299:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+     29e:	c9                   	leave  
+     29f:	c3                   	ret    
+
+000002a0 <main>:
+
+int
+main(void)
+{
+     2a0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+     2a4:	83 e4 f0             	and    $0xfffffff0,%esp
+     2a7:	ff 71 fc             	pushl  -0x4(%ecx)
+     2aa:	55                   	push   %ebp
+     2ab:	89 e5                	mov    %esp,%ebp
+     2ad:	51                   	push   %ecx
+     2ae:	83 ec 14             	sub    $0x14,%esp
+  static char buf[100];
+  int fd;
+  
+  // Assumes three file descriptors open.
+  while((fd = open("console", O_RDWR)) >= 0){
+     2b1:	eb 16                	jmp    2c9 <main+0x29>
+    if(fd >= 3){
+     2b3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
+     2b7:	7e 10                	jle    2c9 <main+0x29>
+      close(fd);
+     2b9:	83 ec 0c             	sub    $0xc,%esp
+     2bc:	ff 75 f4             	pushl  -0xc(%ebp)
+     2bf:	e8 39 0c 00 00       	call   efd <close>
+     2c4:	83 c4 10             	add    $0x10,%esp
+      break;
+     2c7:	eb 1b                	jmp    2e4 <main+0x44>
+{
+  static char buf[100];
+  int fd;
+  
+  // Assumes three file descriptors open.
+  while((fd = open("console", O_RDWR)) >= 0){
+     2c9:	83 ec 08             	sub    $0x8,%esp
+     2cc:	6a 02                	push   $0x2
+     2ce:	68 53 14 00 00       	push   $0x1453
+     2d3:	e8 3d 0c 00 00       	call   f15 <open>
+     2d8:	83 c4 10             	add    $0x10,%esp
+     2db:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     2de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     2e2:	79 cf                	jns    2b3 <main+0x13>
+      break;
+    }
+  }
+  
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+     2e4:	e9 94 00 00 00       	jmp    37d <main+0xdd>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+     2e9:	0f b6 05 c0 19 00 00 	movzbl 0x19c0,%eax
+     2f0:	3c 63                	cmp    $0x63,%al
+     2f2:	75 5f                	jne    353 <main+0xb3>
+     2f4:	0f b6 05 c1 19 00 00 	movzbl 0x19c1,%eax
+     2fb:	3c 64                	cmp    $0x64,%al
+     2fd:	75 54                	jne    353 <main+0xb3>
+     2ff:	0f b6 05 c2 19 00 00 	movzbl 0x19c2,%eax
+     306:	3c 20                	cmp    $0x20,%al
+     308:	75 49                	jne    353 <main+0xb3>
+      // Clumsy but will have to do for now.
+      // Chdir has no effect on the parent if run in the child.
+      buf[strlen(buf)-1] = 0;  // chop \n
+     30a:	83 ec 0c             	sub    $0xc,%esp
+     30d:	68 c0 19 00 00       	push   $0x19c0
+     312:	e8 fc 09 00 00       	call   d13 <strlen>
+     317:	83 c4 10             	add    $0x10,%esp
+     31a:	83 e8 01             	sub    $0x1,%eax
+     31d:	c6 80 c0 19 00 00 00 	movb   $0x0,0x19c0(%eax)
+      if(chdir(buf+3) < 0)
+     324:	b8 c3 19 00 00       	mov    $0x19c3,%eax
+     329:	83 ec 0c             	sub    $0xc,%esp
+     32c:	50                   	push   %eax
+     32d:	e8 13 0c 00 00       	call   f45 <chdir>
+     332:	83 c4 10             	add    $0x10,%esp
+     335:	85 c0                	test   %eax,%eax
+     337:	79 44                	jns    37d <main+0xdd>
+        printf(2, "cannot cd %s\n", buf+3);
+     339:	b8 c3 19 00 00       	mov    $0x19c3,%eax
+     33e:	83 ec 04             	sub    $0x4,%esp
+     341:	50                   	push   %eax
+     342:	68 5b 14 00 00       	push   $0x145b
+     347:	6a 02                	push   $0x2
+     349:	e8 06 0d 00 00       	call   1054 <printf>
+     34e:	83 c4 10             	add    $0x10,%esp
+      continue;
+     351:	eb 2a                	jmp    37d <main+0xdd>
+    }
+    if(fork1() == 0)
+     353:	e8 64 00 00 00       	call   3bc <fork1>
+     358:	85 c0                	test   %eax,%eax
+     35a:	75 1c                	jne    378 <main+0xd8>
+      runcmd(parsecmd(buf));
+     35c:	83 ec 0c             	sub    $0xc,%esp
+     35f:	68 c0 19 00 00       	push   $0x19c0
+     364:	e8 ab 03 00 00       	call   714 <parsecmd>
+     369:	83 c4 10             	add    $0x10,%esp
+     36c:	83 ec 0c             	sub    $0xc,%esp
+     36f:	50                   	push   %eax
+     370:	e8 8b fc ff ff       	call   0 <runcmd>
+     375:	83 c4 10             	add    $0x10,%esp
+    wait();
+     378:	e8 60 0b 00 00       	call   edd <wait>
+      break;
+    }
+  }
+  
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+     37d:	83 ec 08             	sub    $0x8,%esp
+     380:	6a 64                	push   $0x64
+     382:	68 c0 19 00 00       	push   $0x19c0
+     387:	e8 bf fe ff ff       	call   24b <getcmd>
+     38c:	83 c4 10             	add    $0x10,%esp
+     38f:	85 c0                	test   %eax,%eax
+     391:	0f 89 52 ff ff ff    	jns    2e9 <main+0x49>
+    }
+    if(fork1() == 0)
+      runcmd(parsecmd(buf));
+    wait();
+  }
+  exit();
+     397:	e8 39 0b 00 00       	call   ed5 <exit>
+
+0000039c <panic>:
+}
+
+void
+panic(char *s)
+{
+     39c:	55                   	push   %ebp
+     39d:	89 e5                	mov    %esp,%ebp
+     39f:	83 ec 08             	sub    $0x8,%esp
+  printf(2, "%s\n", s);
+     3a2:	83 ec 04             	sub    $0x4,%esp
+     3a5:	ff 75 08             	pushl  0x8(%ebp)
+     3a8:	68 69 14 00 00       	push   $0x1469
+     3ad:	6a 02                	push   $0x2
+     3af:	e8 a0 0c 00 00       	call   1054 <printf>
+     3b4:	83 c4 10             	add    $0x10,%esp
+  exit();
+     3b7:	e8 19 0b 00 00       	call   ed5 <exit>
+
+000003bc <fork1>:
+}
+
+int
+fork1(void)
+{
+     3bc:	55                   	push   %ebp
+     3bd:	89 e5                	mov    %esp,%ebp
+     3bf:	83 ec 18             	sub    $0x18,%esp
+  int pid;
+  
+  pid = fork();
+     3c2:	e8 06 0b 00 00       	call   ecd <fork>
+     3c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(pid == -1)
+     3ca:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+     3ce:	75 10                	jne    3e0 <fork1+0x24>
+    panic("fork");
+     3d0:	83 ec 0c             	sub    $0xc,%esp
+     3d3:	68 6d 14 00 00       	push   $0x146d
+     3d8:	e8 bf ff ff ff       	call   39c <panic>
+     3dd:	83 c4 10             	add    $0x10,%esp
+  return pid;
+     3e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     3e3:	c9                   	leave  
+     3e4:	c3                   	ret    
+
+000003e5 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     3e5:	55                   	push   %ebp
+     3e6:	89 e5                	mov    %esp,%ebp
+     3e8:	83 ec 18             	sub    $0x18,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3eb:	83 ec 0c             	sub    $0xc,%esp
+     3ee:	6a 54                	push   $0x54
+     3f0:	e8 32 0f 00 00       	call   1327 <malloc>
+     3f5:	83 c4 10             	add    $0x10,%esp
+     3f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  memset(cmd, 0, sizeof(*cmd));
+     3fb:	83 ec 04             	sub    $0x4,%esp
+     3fe:	6a 54                	push   $0x54
+     400:	6a 00                	push   $0x0
+     402:	ff 75 f4             	pushl  -0xc(%ebp)
+     405:	e8 30 09 00 00       	call   d3a <memset>
+     40a:	83 c4 10             	add    $0x10,%esp
+  cmd->type = EXEC;
+     40d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     410:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  return (struct cmd*)cmd;
+     416:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     419:	c9                   	leave  
+     41a:	c3                   	ret    
+
+0000041b <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     41b:	55                   	push   %ebp
+     41c:	89 e5                	mov    %esp,%ebp
+     41e:	83 ec 18             	sub    $0x18,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     421:	83 ec 0c             	sub    $0xc,%esp
+     424:	6a 18                	push   $0x18
+     426:	e8 fc 0e 00 00       	call   1327 <malloc>
+     42b:	83 c4 10             	add    $0x10,%esp
+     42e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  memset(cmd, 0, sizeof(*cmd));
+     431:	83 ec 04             	sub    $0x4,%esp
+     434:	6a 18                	push   $0x18
+     436:	6a 00                	push   $0x0
+     438:	ff 75 f4             	pushl  -0xc(%ebp)
+     43b:	e8 fa 08 00 00       	call   d3a <memset>
+     440:	83 c4 10             	add    $0x10,%esp
+  cmd->type = REDIR;
+     443:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     446:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+  cmd->cmd = subcmd;
+     44c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     44f:	8b 55 08             	mov    0x8(%ebp),%edx
+     452:	89 50 04             	mov    %edx,0x4(%eax)
+  cmd->file = file;
+     455:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     458:	8b 55 0c             	mov    0xc(%ebp),%edx
+     45b:	89 50 08             	mov    %edx,0x8(%eax)
+  cmd->efile = efile;
+     45e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     461:	8b 55 10             	mov    0x10(%ebp),%edx
+     464:	89 50 0c             	mov    %edx,0xc(%eax)
+  cmd->mode = mode;
+     467:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     46a:	8b 55 14             	mov    0x14(%ebp),%edx
+     46d:	89 50 10             	mov    %edx,0x10(%eax)
+  cmd->fd = fd;
+     470:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     473:	8b 55 18             	mov    0x18(%ebp),%edx
+     476:	89 50 14             	mov    %edx,0x14(%eax)
+  return (struct cmd*)cmd;
+     479:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     47c:	c9                   	leave  
+     47d:	c3                   	ret    
+
+0000047e <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     47e:	55                   	push   %ebp
+     47f:	89 e5                	mov    %esp,%ebp
+     481:	83 ec 18             	sub    $0x18,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     484:	83 ec 0c             	sub    $0xc,%esp
+     487:	6a 0c                	push   $0xc
+     489:	e8 99 0e 00 00       	call   1327 <malloc>
+     48e:	83 c4 10             	add    $0x10,%esp
+     491:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  memset(cmd, 0, sizeof(*cmd));
+     494:	83 ec 04             	sub    $0x4,%esp
+     497:	6a 0c                	push   $0xc
+     499:	6a 00                	push   $0x0
+     49b:	ff 75 f4             	pushl  -0xc(%ebp)
+     49e:	e8 97 08 00 00       	call   d3a <memset>
+     4a3:	83 c4 10             	add    $0x10,%esp
+  cmd->type = PIPE;
+     4a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     4a9:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
+  cmd->left = left;
+     4af:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     4b2:	8b 55 08             	mov    0x8(%ebp),%edx
+     4b5:	89 50 04             	mov    %edx,0x4(%eax)
+  cmd->right = right;
+     4b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     4bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+     4be:	89 50 08             	mov    %edx,0x8(%eax)
+  return (struct cmd*)cmd;
+     4c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     4c4:	c9                   	leave  
+     4c5:	c3                   	ret    
+
+000004c6 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     4c6:	55                   	push   %ebp
+     4c7:	89 e5                	mov    %esp,%ebp
+     4c9:	83 ec 18             	sub    $0x18,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     4cc:	83 ec 0c             	sub    $0xc,%esp
+     4cf:	6a 0c                	push   $0xc
+     4d1:	e8 51 0e 00 00       	call   1327 <malloc>
+     4d6:	83 c4 10             	add    $0x10,%esp
+     4d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  memset(cmd, 0, sizeof(*cmd));
+     4dc:	83 ec 04             	sub    $0x4,%esp
+     4df:	6a 0c                	push   $0xc
+     4e1:	6a 00                	push   $0x0
+     4e3:	ff 75 f4             	pushl  -0xc(%ebp)
+     4e6:	e8 4f 08 00 00       	call   d3a <memset>
+     4eb:	83 c4 10             	add    $0x10,%esp
+  cmd->type = LIST;
+     4ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     4f1:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
+  cmd->left = left;
+     4f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     4fa:	8b 55 08             	mov    0x8(%ebp),%edx
+     4fd:	89 50 04             	mov    %edx,0x4(%eax)
+  cmd->right = right;
+     500:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     503:	8b 55 0c             	mov    0xc(%ebp),%edx
+     506:	89 50 08             	mov    %edx,0x8(%eax)
+  return (struct cmd*)cmd;
+     509:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     50c:	c9                   	leave  
+     50d:	c3                   	ret    
+
+0000050e <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     50e:	55                   	push   %ebp
+     50f:	89 e5                	mov    %esp,%ebp
+     511:	83 ec 18             	sub    $0x18,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     514:	83 ec 0c             	sub    $0xc,%esp
+     517:	6a 08                	push   $0x8
+     519:	e8 09 0e 00 00       	call   1327 <malloc>
+     51e:	83 c4 10             	add    $0x10,%esp
+     521:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  memset(cmd, 0, sizeof(*cmd));
+     524:	83 ec 04             	sub    $0x4,%esp
+     527:	6a 08                	push   $0x8
+     529:	6a 00                	push   $0x0
+     52b:	ff 75 f4             	pushl  -0xc(%ebp)
+     52e:	e8 07 08 00 00       	call   d3a <memset>
+     533:	83 c4 10             	add    $0x10,%esp
+  cmd->type = BACK;
+     536:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     539:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
+  cmd->cmd = subcmd;
+     53f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     542:	8b 55 08             	mov    0x8(%ebp),%edx
+     545:	89 50 04             	mov    %edx,0x4(%eax)
+  return (struct cmd*)cmd;
+     548:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     54b:	c9                   	leave  
+     54c:	c3                   	ret    
+
+0000054d <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     54d:	55                   	push   %ebp
+     54e:	89 e5                	mov    %esp,%ebp
+     550:	83 ec 18             	sub    $0x18,%esp
+  char *s;
+  int ret;
+  
+  s = *ps;
+     553:	8b 45 08             	mov    0x8(%ebp),%eax
+     556:	8b 00                	mov    (%eax),%eax
+     558:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  while(s < es && strchr(whitespace, *s))
+     55b:	eb 04                	jmp    561 <gettoken+0x14>
+    s++;
+     55d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+{
+  char *s;
+  int ret;
+  
+  s = *ps;
+  while(s < es && strchr(whitespace, *s))
+     561:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     564:	3b 45 0c             	cmp    0xc(%ebp),%eax
+     567:	73 1e                	jae    587 <gettoken+0x3a>
+     569:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     56c:	0f b6 00             	movzbl (%eax),%eax
+     56f:	0f be c0             	movsbl %al,%eax
+     572:	83 ec 08             	sub    $0x8,%esp
+     575:	50                   	push   %eax
+     576:	68 88 19 00 00       	push   $0x1988
+     57b:	e8 d4 07 00 00       	call   d54 <strchr>
+     580:	83 c4 10             	add    $0x10,%esp
+     583:	85 c0                	test   %eax,%eax
+     585:	75 d6                	jne    55d <gettoken+0x10>
+    s++;
+  if(q)
+     587:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+     58b:	74 08                	je     595 <gettoken+0x48>
+    *q = s;
+     58d:	8b 45 10             	mov    0x10(%ebp),%eax
+     590:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     593:	89 10                	mov    %edx,(%eax)
+  ret = *s;
+     595:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     598:	0f b6 00             	movzbl (%eax),%eax
+     59b:	0f be c0             	movsbl %al,%eax
+     59e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  switch(*s){
+     5a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     5a4:	0f b6 00             	movzbl (%eax),%eax
+     5a7:	0f be c0             	movsbl %al,%eax
+     5aa:	83 f8 29             	cmp    $0x29,%eax
+     5ad:	7f 14                	jg     5c3 <gettoken+0x76>
+     5af:	83 f8 28             	cmp    $0x28,%eax
+     5b2:	7d 28                	jge    5dc <gettoken+0x8f>
+     5b4:	85 c0                	test   %eax,%eax
+     5b6:	0f 84 94 00 00 00    	je     650 <gettoken+0x103>
+     5bc:	83 f8 26             	cmp    $0x26,%eax
+     5bf:	74 1b                	je     5dc <gettoken+0x8f>
+     5c1:	eb 3a                	jmp    5fd <gettoken+0xb0>
+     5c3:	83 f8 3e             	cmp    $0x3e,%eax
+     5c6:	74 1a                	je     5e2 <gettoken+0x95>
+     5c8:	83 f8 3e             	cmp    $0x3e,%eax
+     5cb:	7f 0a                	jg     5d7 <gettoken+0x8a>
+     5cd:	83 e8 3b             	sub    $0x3b,%eax
+     5d0:	83 f8 01             	cmp    $0x1,%eax
+     5d3:	77 28                	ja     5fd <gettoken+0xb0>
+     5d5:	eb 05                	jmp    5dc <gettoken+0x8f>
+     5d7:	83 f8 7c             	cmp    $0x7c,%eax
+     5da:	75 21                	jne    5fd <gettoken+0xb0>
+  case '(':
+  case ')':
+  case ';':
+  case '&':
+  case '<':
+    s++;
+     5dc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    break;
+     5e0:	eb 75                	jmp    657 <gettoken+0x10a>
+  case '>':
+    s++;
+     5e2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    if(*s == '>'){
+     5e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     5e9:	0f b6 00             	movzbl (%eax),%eax
+     5ec:	3c 3e                	cmp    $0x3e,%al
+     5ee:	75 63                	jne    653 <gettoken+0x106>
+      ret = '+';
+     5f0:	c7 45 f0 2b 00 00 00 	movl   $0x2b,-0x10(%ebp)
+      s++;
+     5f7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    }
+    break;
+     5fb:	eb 56                	jmp    653 <gettoken+0x106>
+  default:
+    ret = 'a';
+     5fd:	c7 45 f0 61 00 00 00 	movl   $0x61,-0x10(%ebp)
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     604:	eb 04                	jmp    60a <gettoken+0xbd>
+      s++;
+     606:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      s++;
+    }
+    break;
+  default:
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     60a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     60d:	3b 45 0c             	cmp    0xc(%ebp),%eax
+     610:	73 44                	jae    656 <gettoken+0x109>
+     612:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     615:	0f b6 00             	movzbl (%eax),%eax
+     618:	0f be c0             	movsbl %al,%eax
+     61b:	83 ec 08             	sub    $0x8,%esp
+     61e:	50                   	push   %eax
+     61f:	68 88 19 00 00       	push   $0x1988
+     624:	e8 2b 07 00 00       	call   d54 <strchr>
+     629:	83 c4 10             	add    $0x10,%esp
+     62c:	85 c0                	test   %eax,%eax
+     62e:	75 26                	jne    656 <gettoken+0x109>
+     630:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     633:	0f b6 00             	movzbl (%eax),%eax
+     636:	0f be c0             	movsbl %al,%eax
+     639:	83 ec 08             	sub    $0x8,%esp
+     63c:	50                   	push   %eax
+     63d:	68 90 19 00 00       	push   $0x1990
+     642:	e8 0d 07 00 00       	call   d54 <strchr>
+     647:	83 c4 10             	add    $0x10,%esp
+     64a:	85 c0                	test   %eax,%eax
+     64c:	74 b8                	je     606 <gettoken+0xb9>
+      s++;
+    break;
+     64e:	eb 06                	jmp    656 <gettoken+0x109>
+  if(q)
+    *q = s;
+  ret = *s;
+  switch(*s){
+  case 0:
+    break;
+     650:	90                   	nop
+     651:	eb 04                	jmp    657 <gettoken+0x10a>
+    s++;
+    if(*s == '>'){
+      ret = '+';
+      s++;
+    }
+    break;
+     653:	90                   	nop
+     654:	eb 01                	jmp    657 <gettoken+0x10a>
+  default:
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+     656:	90                   	nop
+  }
+  if(eq)
+     657:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+     65b:	74 0e                	je     66b <gettoken+0x11e>
+    *eq = s;
+     65d:	8b 45 14             	mov    0x14(%ebp),%eax
+     660:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     663:	89 10                	mov    %edx,(%eax)
+  
+  while(s < es && strchr(whitespace, *s))
+     665:	eb 04                	jmp    66b <gettoken+0x11e>
+    s++;
+     667:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    break;
+  }
+  if(eq)
+    *eq = s;
+  
+  while(s < es && strchr(whitespace, *s))
+     66b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     66e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+     671:	73 1e                	jae    691 <gettoken+0x144>
+     673:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     676:	0f b6 00             	movzbl (%eax),%eax
+     679:	0f be c0             	movsbl %al,%eax
+     67c:	83 ec 08             	sub    $0x8,%esp
+     67f:	50                   	push   %eax
+     680:	68 88 19 00 00       	push   $0x1988
+     685:	e8 ca 06 00 00       	call   d54 <strchr>
+     68a:	83 c4 10             	add    $0x10,%esp
+     68d:	85 c0                	test   %eax,%eax
+     68f:	75 d6                	jne    667 <gettoken+0x11a>
+    s++;
+  *ps = s;
+     691:	8b 45 08             	mov    0x8(%ebp),%eax
+     694:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     697:	89 10                	mov    %edx,(%eax)
+  return ret;
+     699:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+     69c:	c9                   	leave  
+     69d:	c3                   	ret    
+
+0000069e <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     69e:	55                   	push   %ebp
+     69f:	89 e5                	mov    %esp,%ebp
+     6a1:	83 ec 18             	sub    $0x18,%esp
+  char *s;
+  
+  s = *ps;
+     6a4:	8b 45 08             	mov    0x8(%ebp),%eax
+     6a7:	8b 00                	mov    (%eax),%eax
+     6a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  while(s < es && strchr(whitespace, *s))
+     6ac:	eb 04                	jmp    6b2 <peek+0x14>
+    s++;
+     6ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+peek(char **ps, char *es, char *toks)
+{
+  char *s;
+  
+  s = *ps;
+  while(s < es && strchr(whitespace, *s))
+     6b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     6b5:	3b 45 0c             	cmp    0xc(%ebp),%eax
+     6b8:	73 1e                	jae    6d8 <peek+0x3a>
+     6ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     6bd:	0f b6 00             	movzbl (%eax),%eax
+     6c0:	0f be c0             	movsbl %al,%eax
+     6c3:	83 ec 08             	sub    $0x8,%esp
+     6c6:	50                   	push   %eax
+     6c7:	68 88 19 00 00       	push   $0x1988
+     6cc:	e8 83 06 00 00       	call   d54 <strchr>
+     6d1:	83 c4 10             	add    $0x10,%esp
+     6d4:	85 c0                	test   %eax,%eax
+     6d6:	75 d6                	jne    6ae <peek+0x10>
+    s++;
+  *ps = s;
+     6d8:	8b 45 08             	mov    0x8(%ebp),%eax
+     6db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     6de:	89 10                	mov    %edx,(%eax)
+  return *s && strchr(toks, *s);
+     6e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     6e3:	0f b6 00             	movzbl (%eax),%eax
+     6e6:	84 c0                	test   %al,%al
+     6e8:	74 23                	je     70d <peek+0x6f>
+     6ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     6ed:	0f b6 00             	movzbl (%eax),%eax
+     6f0:	0f be c0             	movsbl %al,%eax
+     6f3:	83 ec 08             	sub    $0x8,%esp
+     6f6:	50                   	push   %eax
+     6f7:	ff 75 10             	pushl  0x10(%ebp)
+     6fa:	e8 55 06 00 00       	call   d54 <strchr>
+     6ff:	83 c4 10             	add    $0x10,%esp
+     702:	85 c0                	test   %eax,%eax
+     704:	74 07                	je     70d <peek+0x6f>
+     706:	b8 01 00 00 00       	mov    $0x1,%eax
+     70b:	eb 05                	jmp    712 <peek+0x74>
+     70d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+     712:	c9                   	leave  
+     713:	c3                   	ret    
+
+00000714 <parsecmd>:
+struct cmd *parseexec(char**, char*);
+struct cmd *nulterminate(struct cmd*);
+
+struct cmd*
+parsecmd(char *s)
+{
+     714:	55                   	push   %ebp
+     715:	89 e5                	mov    %esp,%ebp
+     717:	53                   	push   %ebx
+     718:	83 ec 14             	sub    $0x14,%esp
+  char *es;
+  struct cmd *cmd;
+
+  es = s + strlen(s);
+     71b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     71e:	8b 45 08             	mov    0x8(%ebp),%eax
+     721:	83 ec 0c             	sub    $0xc,%esp
+     724:	50                   	push   %eax
+     725:	e8 e9 05 00 00       	call   d13 <strlen>
+     72a:	83 c4 10             	add    $0x10,%esp
+     72d:	01 d8                	add    %ebx,%eax
+     72f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  cmd = parseline(&s, es);
+     732:	83 ec 08             	sub    $0x8,%esp
+     735:	ff 75 f4             	pushl  -0xc(%ebp)
+     738:	8d 45 08             	lea    0x8(%ebp),%eax
+     73b:	50                   	push   %eax
+     73c:	e8 61 00 00 00       	call   7a2 <parseline>
+     741:	83 c4 10             	add    $0x10,%esp
+     744:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  peek(&s, es, "");
+     747:	83 ec 04             	sub    $0x4,%esp
+     74a:	68 72 14 00 00       	push   $0x1472
+     74f:	ff 75 f4             	pushl  -0xc(%ebp)
+     752:	8d 45 08             	lea    0x8(%ebp),%eax
+     755:	50                   	push   %eax
+     756:	e8 43 ff ff ff       	call   69e <peek>
+     75b:	83 c4 10             	add    $0x10,%esp
+  if(s != es){
+     75e:	8b 45 08             	mov    0x8(%ebp),%eax
+     761:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+     764:	74 26                	je     78c <parsecmd+0x78>
+    printf(2, "leftovers: %s\n", s);
+     766:	8b 45 08             	mov    0x8(%ebp),%eax
+     769:	83 ec 04             	sub    $0x4,%esp
+     76c:	50                   	push   %eax
+     76d:	68 73 14 00 00       	push   $0x1473
+     772:	6a 02                	push   $0x2
+     774:	e8 db 08 00 00       	call   1054 <printf>
+     779:	83 c4 10             	add    $0x10,%esp
+    panic("syntax");
+     77c:	83 ec 0c             	sub    $0xc,%esp
+     77f:	68 82 14 00 00       	push   $0x1482
+     784:	e8 13 fc ff ff       	call   39c <panic>
+     789:	83 c4 10             	add    $0x10,%esp
+  }
+  nulterminate(cmd);
+     78c:	83 ec 0c             	sub    $0xc,%esp
+     78f:	ff 75 f0             	pushl  -0x10(%ebp)
+     792:	e8 eb 03 00 00       	call   b82 <nulterminate>
+     797:	83 c4 10             	add    $0x10,%esp
+  return cmd;
+     79a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+     79d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     7a0:	c9                   	leave  
+     7a1:	c3                   	ret    
+
+000007a2 <parseline>:
+
+struct cmd*
+parseline(char **ps, char *es)
+{
+     7a2:	55                   	push   %ebp
+     7a3:	89 e5                	mov    %esp,%ebp
+     7a5:	83 ec 18             	sub    $0x18,%esp
+  struct cmd *cmd;
+
+  cmd = parsepipe(ps, es);
+     7a8:	83 ec 08             	sub    $0x8,%esp
+     7ab:	ff 75 0c             	pushl  0xc(%ebp)
+     7ae:	ff 75 08             	pushl  0x8(%ebp)
+     7b1:	e8 99 00 00 00       	call   84f <parsepipe>
+     7b6:	83 c4 10             	add    $0x10,%esp
+     7b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  while(peek(ps, es, "&")){
+     7bc:	eb 23                	jmp    7e1 <parseline+0x3f>
+    gettoken(ps, es, 0, 0);
+     7be:	6a 00                	push   $0x0
+     7c0:	6a 00                	push   $0x0
+     7c2:	ff 75 0c             	pushl  0xc(%ebp)
+     7c5:	ff 75 08             	pushl  0x8(%ebp)
+     7c8:	e8 80 fd ff ff       	call   54d <gettoken>
+     7cd:	83 c4 10             	add    $0x10,%esp
+    cmd = backcmd(cmd);
+     7d0:	83 ec 0c             	sub    $0xc,%esp
+     7d3:	ff 75 f4             	pushl  -0xc(%ebp)
+     7d6:	e8 33 fd ff ff       	call   50e <backcmd>
+     7db:	83 c4 10             	add    $0x10,%esp
+     7de:	89 45 f4             	mov    %eax,-0xc(%ebp)
+parseline(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  cmd = parsepipe(ps, es);
+  while(peek(ps, es, "&")){
+     7e1:	83 ec 04             	sub    $0x4,%esp
+     7e4:	68 89 14 00 00       	push   $0x1489
+     7e9:	ff 75 0c             	pushl  0xc(%ebp)
+     7ec:	ff 75 08             	pushl  0x8(%ebp)
+     7ef:	e8 aa fe ff ff       	call   69e <peek>
+     7f4:	83 c4 10             	add    $0x10,%esp
+     7f7:	85 c0                	test   %eax,%eax
+     7f9:	75 c3                	jne    7be <parseline+0x1c>
+    gettoken(ps, es, 0, 0);
+    cmd = backcmd(cmd);
+  }
+  if(peek(ps, es, ";")){
+     7fb:	83 ec 04             	sub    $0x4,%esp
+     7fe:	68 8b 14 00 00       	push   $0x148b
+     803:	ff 75 0c             	pushl  0xc(%ebp)
+     806:	ff 75 08             	pushl  0x8(%ebp)
+     809:	e8 90 fe ff ff       	call   69e <peek>
+     80e:	83 c4 10             	add    $0x10,%esp
+     811:	85 c0                	test   %eax,%eax
+     813:	74 35                	je     84a <parseline+0xa8>
+    gettoken(ps, es, 0, 0);
+     815:	6a 00                	push   $0x0
+     817:	6a 00                	push   $0x0
+     819:	ff 75 0c             	pushl  0xc(%ebp)
+     81c:	ff 75 08             	pushl  0x8(%ebp)
+     81f:	e8 29 fd ff ff       	call   54d <gettoken>
+     824:	83 c4 10             	add    $0x10,%esp
+    cmd = listcmd(cmd, parseline(ps, es));
+     827:	83 ec 08             	sub    $0x8,%esp
+     82a:	ff 75 0c             	pushl  0xc(%ebp)
+     82d:	ff 75 08             	pushl  0x8(%ebp)
+     830:	e8 6d ff ff ff       	call   7a2 <parseline>
+     835:	83 c4 10             	add    $0x10,%esp
+     838:	83 ec 08             	sub    $0x8,%esp
+     83b:	50                   	push   %eax
+     83c:	ff 75 f4             	pushl  -0xc(%ebp)
+     83f:	e8 82 fc ff ff       	call   4c6 <listcmd>
+     844:	83 c4 10             	add    $0x10,%esp
+     847:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  }
+  return cmd;
+     84a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     84d:	c9                   	leave  
+     84e:	c3                   	ret    
+
+0000084f <parsepipe>:
+
+struct cmd*
+parsepipe(char **ps, char *es)
+{
+     84f:	55                   	push   %ebp
+     850:	89 e5                	mov    %esp,%ebp
+     852:	83 ec 18             	sub    $0x18,%esp
+  struct cmd *cmd;
+
+  cmd = parseexec(ps, es);
+     855:	83 ec 08             	sub    $0x8,%esp
+     858:	ff 75 0c             	pushl  0xc(%ebp)
+     85b:	ff 75 08             	pushl  0x8(%ebp)
+     85e:	e8 ec 01 00 00       	call   a4f <parseexec>
+     863:	83 c4 10             	add    $0x10,%esp
+     866:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(peek(ps, es, "|")){
+     869:	83 ec 04             	sub    $0x4,%esp
+     86c:	68 8d 14 00 00       	push   $0x148d
+     871:	ff 75 0c             	pushl  0xc(%ebp)
+     874:	ff 75 08             	pushl  0x8(%ebp)
+     877:	e8 22 fe ff ff       	call   69e <peek>
+     87c:	83 c4 10             	add    $0x10,%esp
+     87f:	85 c0                	test   %eax,%eax
+     881:	74 35                	je     8b8 <parsepipe+0x69>
+    gettoken(ps, es, 0, 0);
+     883:	6a 00                	push   $0x0
+     885:	6a 00                	push   $0x0
+     887:	ff 75 0c             	pushl  0xc(%ebp)
+     88a:	ff 75 08             	pushl  0x8(%ebp)
+     88d:	e8 bb fc ff ff       	call   54d <gettoken>
+     892:	83 c4 10             	add    $0x10,%esp
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     895:	83 ec 08             	sub    $0x8,%esp
+     898:	ff 75 0c             	pushl  0xc(%ebp)
+     89b:	ff 75 08             	pushl  0x8(%ebp)
+     89e:	e8 ac ff ff ff       	call   84f <parsepipe>
+     8a3:	83 c4 10             	add    $0x10,%esp
+     8a6:	83 ec 08             	sub    $0x8,%esp
+     8a9:	50                   	push   %eax
+     8aa:	ff 75 f4             	pushl  -0xc(%ebp)
+     8ad:	e8 cc fb ff ff       	call   47e <pipecmd>
+     8b2:	83 c4 10             	add    $0x10,%esp
+     8b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  }
+  return cmd;
+     8b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     8bb:	c9                   	leave  
+     8bc:	c3                   	ret    
+
+000008bd <parseredirs>:
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     8bd:	55                   	push   %ebp
+     8be:	89 e5                	mov    %esp,%ebp
+     8c0:	83 ec 18             	sub    $0x18,%esp
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     8c3:	e9 b6 00 00 00       	jmp    97e <parseredirs+0xc1>
+    tok = gettoken(ps, es, 0, 0);
+     8c8:	6a 00                	push   $0x0
+     8ca:	6a 00                	push   $0x0
+     8cc:	ff 75 10             	pushl  0x10(%ebp)
+     8cf:	ff 75 0c             	pushl  0xc(%ebp)
+     8d2:	e8 76 fc ff ff       	call   54d <gettoken>
+     8d7:	83 c4 10             	add    $0x10,%esp
+     8da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     8dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
+     8e0:	50                   	push   %eax
+     8e1:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     8e4:	50                   	push   %eax
+     8e5:	ff 75 10             	pushl  0x10(%ebp)
+     8e8:	ff 75 0c             	pushl  0xc(%ebp)
+     8eb:	e8 5d fc ff ff       	call   54d <gettoken>
+     8f0:	83 c4 10             	add    $0x10,%esp
+     8f3:	83 f8 61             	cmp    $0x61,%eax
+     8f6:	74 10                	je     908 <parseredirs+0x4b>
+      panic("missing file for redirection");
+     8f8:	83 ec 0c             	sub    $0xc,%esp
+     8fb:	68 8f 14 00 00       	push   $0x148f
+     900:	e8 97 fa ff ff       	call   39c <panic>
+     905:	83 c4 10             	add    $0x10,%esp
+    switch(tok){
+     908:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     90b:	83 f8 3c             	cmp    $0x3c,%eax
+     90e:	74 0c                	je     91c <parseredirs+0x5f>
+     910:	83 f8 3e             	cmp    $0x3e,%eax
+     913:	74 26                	je     93b <parseredirs+0x7e>
+     915:	83 f8 2b             	cmp    $0x2b,%eax
+     918:	74 43                	je     95d <parseredirs+0xa0>
+     91a:	eb 62                	jmp    97e <parseredirs+0xc1>
+    case '<':
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     91c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+     91f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     922:	83 ec 0c             	sub    $0xc,%esp
+     925:	6a 00                	push   $0x0
+     927:	6a 00                	push   $0x0
+     929:	52                   	push   %edx
+     92a:	50                   	push   %eax
+     92b:	ff 75 08             	pushl  0x8(%ebp)
+     92e:	e8 e8 fa ff ff       	call   41b <redircmd>
+     933:	83 c4 20             	add    $0x20,%esp
+     936:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     939:	eb 43                	jmp    97e <parseredirs+0xc1>
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     93b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+     93e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     941:	83 ec 0c             	sub    $0xc,%esp
+     944:	6a 01                	push   $0x1
+     946:	68 01 02 00 00       	push   $0x201
+     94b:	52                   	push   %edx
+     94c:	50                   	push   %eax
+     94d:	ff 75 08             	pushl  0x8(%ebp)
+     950:	e8 c6 fa ff ff       	call   41b <redircmd>
+     955:	83 c4 20             	add    $0x20,%esp
+     958:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     95b:	eb 21                	jmp    97e <parseredirs+0xc1>
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     95d:	8b 55 ec             	mov    -0x14(%ebp),%edx
+     960:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     963:	83 ec 0c             	sub    $0xc,%esp
+     966:	6a 01                	push   $0x1
+     968:	68 01 02 00 00       	push   $0x201
+     96d:	52                   	push   %edx
+     96e:	50                   	push   %eax
+     96f:	ff 75 08             	pushl  0x8(%ebp)
+     972:	e8 a4 fa ff ff       	call   41b <redircmd>
+     977:	83 c4 20             	add    $0x20,%esp
+     97a:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     97d:	90                   	nop
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     97e:	83 ec 04             	sub    $0x4,%esp
+     981:	68 ac 14 00 00       	push   $0x14ac
+     986:	ff 75 10             	pushl  0x10(%ebp)
+     989:	ff 75 0c             	pushl  0xc(%ebp)
+     98c:	e8 0d fd ff ff       	call   69e <peek>
+     991:	83 c4 10             	add    $0x10,%esp
+     994:	85 c0                	test   %eax,%eax
+     996:	0f 85 2c ff ff ff    	jne    8c8 <parseredirs+0xb>
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    }
+  }
+  return cmd;
+     99c:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+     99f:	c9                   	leave  
+     9a0:	c3                   	ret    
+
+000009a1 <parseblock>:
+
+struct cmd*
+parseblock(char **ps, char *es)
+{
+     9a1:	55                   	push   %ebp
+     9a2:	89 e5                	mov    %esp,%ebp
+     9a4:	83 ec 18             	sub    $0x18,%esp
+  struct cmd *cmd;
+
+  if(!peek(ps, es, "("))
+     9a7:	83 ec 04             	sub    $0x4,%esp
+     9aa:	68 af 14 00 00       	push   $0x14af
+     9af:	ff 75 0c             	pushl  0xc(%ebp)
+     9b2:	ff 75 08             	pushl  0x8(%ebp)
+     9b5:	e8 e4 fc ff ff       	call   69e <peek>
+     9ba:	83 c4 10             	add    $0x10,%esp
+     9bd:	85 c0                	test   %eax,%eax
+     9bf:	75 10                	jne    9d1 <parseblock+0x30>
+    panic("parseblock");
+     9c1:	83 ec 0c             	sub    $0xc,%esp
+     9c4:	68 b1 14 00 00       	push   $0x14b1
+     9c9:	e8 ce f9 ff ff       	call   39c <panic>
+     9ce:	83 c4 10             	add    $0x10,%esp
+  gettoken(ps, es, 0, 0);
+     9d1:	6a 00                	push   $0x0
+     9d3:	6a 00                	push   $0x0
+     9d5:	ff 75 0c             	pushl  0xc(%ebp)
+     9d8:	ff 75 08             	pushl  0x8(%ebp)
+     9db:	e8 6d fb ff ff       	call   54d <gettoken>
+     9e0:	83 c4 10             	add    $0x10,%esp
+  cmd = parseline(ps, es);
+     9e3:	83 ec 08             	sub    $0x8,%esp
+     9e6:	ff 75 0c             	pushl  0xc(%ebp)
+     9e9:	ff 75 08             	pushl  0x8(%ebp)
+     9ec:	e8 b1 fd ff ff       	call   7a2 <parseline>
+     9f1:	83 c4 10             	add    $0x10,%esp
+     9f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(!peek(ps, es, ")"))
+     9f7:	83 ec 04             	sub    $0x4,%esp
+     9fa:	68 bc 14 00 00       	push   $0x14bc
+     9ff:	ff 75 0c             	pushl  0xc(%ebp)
+     a02:	ff 75 08             	pushl  0x8(%ebp)
+     a05:	e8 94 fc ff ff       	call   69e <peek>
+     a0a:	83 c4 10             	add    $0x10,%esp
+     a0d:	85 c0                	test   %eax,%eax
+     a0f:	75 10                	jne    a21 <parseblock+0x80>
+    panic("syntax - missing )");
+     a11:	83 ec 0c             	sub    $0xc,%esp
+     a14:	68 be 14 00 00       	push   $0x14be
+     a19:	e8 7e f9 ff ff       	call   39c <panic>
+     a1e:	83 c4 10             	add    $0x10,%esp
+  gettoken(ps, es, 0, 0);
+     a21:	6a 00                	push   $0x0
+     a23:	6a 00                	push   $0x0
+     a25:	ff 75 0c             	pushl  0xc(%ebp)
+     a28:	ff 75 08             	pushl  0x8(%ebp)
+     a2b:	e8 1d fb ff ff       	call   54d <gettoken>
+     a30:	83 c4 10             	add    $0x10,%esp
+  cmd = parseredirs(cmd, ps, es);
+     a33:	83 ec 04             	sub    $0x4,%esp
+     a36:	ff 75 0c             	pushl  0xc(%ebp)
+     a39:	ff 75 08             	pushl  0x8(%ebp)
+     a3c:	ff 75 f4             	pushl  -0xc(%ebp)
+     a3f:	e8 79 fe ff ff       	call   8bd <parseredirs>
+     a44:	83 c4 10             	add    $0x10,%esp
+     a47:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  return cmd;
+     a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+     a4d:	c9                   	leave  
+     a4e:	c3                   	ret    
+
+00000a4f <parseexec>:
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     a4f:	55                   	push   %ebp
+     a50:	89 e5                	mov    %esp,%ebp
+     a52:	83 ec 28             	sub    $0x28,%esp
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+  
+  if(peek(ps, es, "("))
+     a55:	83 ec 04             	sub    $0x4,%esp
+     a58:	68 af 14 00 00       	push   $0x14af
+     a5d:	ff 75 0c             	pushl  0xc(%ebp)
+     a60:	ff 75 08             	pushl  0x8(%ebp)
+     a63:	e8 36 fc ff ff       	call   69e <peek>
+     a68:	83 c4 10             	add    $0x10,%esp
+     a6b:	85 c0                	test   %eax,%eax
+     a6d:	74 16                	je     a85 <parseexec+0x36>
+    return parseblock(ps, es);
+     a6f:	83 ec 08             	sub    $0x8,%esp
+     a72:	ff 75 0c             	pushl  0xc(%ebp)
+     a75:	ff 75 08             	pushl  0x8(%ebp)
+     a78:	e8 24 ff ff ff       	call   9a1 <parseblock>
+     a7d:	83 c4 10             	add    $0x10,%esp
+     a80:	e9 fb 00 00 00       	jmp    b80 <parseexec+0x131>
+
+  ret = execcmd();
+     a85:	e8 5b f9 ff ff       	call   3e5 <execcmd>
+     a8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  cmd = (struct execcmd*)ret;
+     a8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     a90:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+  argc = 0;
+     a93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  ret = parseredirs(ret, ps, es);
+     a9a:	83 ec 04             	sub    $0x4,%esp
+     a9d:	ff 75 0c             	pushl  0xc(%ebp)
+     aa0:	ff 75 08             	pushl  0x8(%ebp)
+     aa3:	ff 75 f0             	pushl  -0x10(%ebp)
+     aa6:	e8 12 fe ff ff       	call   8bd <parseredirs>
+     aab:	83 c4 10             	add    $0x10,%esp
+     aae:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     ab1:	e9 87 00 00 00       	jmp    b3d <parseexec+0xee>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     ab6:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     ab9:	50                   	push   %eax
+     aba:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     abd:	50                   	push   %eax
+     abe:	ff 75 0c             	pushl  0xc(%ebp)
+     ac1:	ff 75 08             	pushl  0x8(%ebp)
+     ac4:	e8 84 fa ff ff       	call   54d <gettoken>
+     ac9:	83 c4 10             	add    $0x10,%esp
+     acc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+     acf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+     ad3:	0f 84 84 00 00 00    	je     b5d <parseexec+0x10e>
+      break;
+    if(tok != 'a')
+     ad9:	83 7d e8 61          	cmpl   $0x61,-0x18(%ebp)
+     add:	74 10                	je     aef <parseexec+0xa0>
+      panic("syntax");
+     adf:	83 ec 0c             	sub    $0xc,%esp
+     ae2:	68 82 14 00 00       	push   $0x1482
+     ae7:	e8 b0 f8 ff ff       	call   39c <panic>
+     aec:	83 c4 10             	add    $0x10,%esp
+    cmd->argv[argc] = q;
+     aef:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+     af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     af5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     af8:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
+    cmd->eargv[argc] = eq;
+     afc:	8b 55 e0             	mov    -0x20(%ebp),%edx
+     aff:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     b02:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+     b05:	83 c1 08             	add    $0x8,%ecx
+     b08:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
+    argc++;
+     b0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    if(argc >= MAXARGS)
+     b10:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+     b14:	7e 10                	jle    b26 <parseexec+0xd7>
+      panic("too many args");
+     b16:	83 ec 0c             	sub    $0xc,%esp
+     b19:	68 d1 14 00 00       	push   $0x14d1
+     b1e:	e8 79 f8 ff ff       	call   39c <panic>
+     b23:	83 c4 10             	add    $0x10,%esp
+    ret = parseredirs(ret, ps, es);
+     b26:	83 ec 04             	sub    $0x4,%esp
+     b29:	ff 75 0c             	pushl  0xc(%ebp)
+     b2c:	ff 75 08             	pushl  0x8(%ebp)
+     b2f:	ff 75 f0             	pushl  -0x10(%ebp)
+     b32:	e8 86 fd ff ff       	call   8bd <parseredirs>
+     b37:	83 c4 10             	add    $0x10,%esp
+     b3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  ret = execcmd();
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+  while(!peek(ps, es, "|)&;")){
+     b3d:	83 ec 04             	sub    $0x4,%esp
+     b40:	68 df 14 00 00       	push   $0x14df
+     b45:	ff 75 0c             	pushl  0xc(%ebp)
+     b48:	ff 75 08             	pushl  0x8(%ebp)
+     b4b:	e8 4e fb ff ff       	call   69e <peek>
+     b50:	83 c4 10             	add    $0x10,%esp
+     b53:	85 c0                	test   %eax,%eax
+     b55:	0f 84 5b ff ff ff    	je     ab6 <parseexec+0x67>
+     b5b:	eb 01                	jmp    b5e <parseexec+0x10f>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+      break;
+     b5d:	90                   	nop
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+  }
+  cmd->argv[argc] = 0;
+     b5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     b61:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     b64:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
+     b6b:	00 
+  cmd->eargv[argc] = 0;
+     b6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     b6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     b72:	83 c2 08             	add    $0x8,%edx
+     b75:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
+     b7c:	00 
+  return ret;
+     b7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+     b80:	c9                   	leave  
+     b81:	c3                   	ret    
+
+00000b82 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     b82:	55                   	push   %ebp
+     b83:	89 e5                	mov    %esp,%ebp
+     b85:	83 ec 28             	sub    $0x28,%esp
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     b88:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+     b8c:	75 0a                	jne    b98 <nulterminate+0x16>
+    return 0;
+     b8e:	b8 00 00 00 00       	mov    $0x0,%eax
+     b93:	e9 e4 00 00 00       	jmp    c7c <nulterminate+0xfa>
+  
+  switch(cmd->type){
+     b98:	8b 45 08             	mov    0x8(%ebp),%eax
+     b9b:	8b 00                	mov    (%eax),%eax
+     b9d:	83 f8 05             	cmp    $0x5,%eax
+     ba0:	0f 87 d3 00 00 00    	ja     c79 <nulterminate+0xf7>
+     ba6:	8b 04 85 e4 14 00 00 	mov    0x14e4(,%eax,4),%eax
+     bad:	ff e0                	jmp    *%eax
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+     baf:	8b 45 08             	mov    0x8(%ebp),%eax
+     bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    for(i=0; ecmd->argv[i]; i++)
+     bb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     bbc:	eb 14                	jmp    bd2 <nulterminate+0x50>
+      *ecmd->eargv[i] = 0;
+     bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     bc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     bc4:	83 c2 08             	add    $0x8,%edx
+     bc7:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
+     bcb:	c6 00 00             	movb   $0x0,(%eax)
+    return 0;
+  
+  switch(cmd->type){
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    for(i=0; ecmd->argv[i]; i++)
+     bce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+     bd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     bd8:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
+     bdc:	85 c0                	test   %eax,%eax
+     bde:	75 de                	jne    bbe <nulterminate+0x3c>
+      *ecmd->eargv[i] = 0;
+    break;
+     be0:	e9 94 00 00 00       	jmp    c79 <nulterminate+0xf7>
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+     be5:	8b 45 08             	mov    0x8(%ebp),%eax
+     be8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    nulterminate(rcmd->cmd);
+     beb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     bee:	8b 40 04             	mov    0x4(%eax),%eax
+     bf1:	83 ec 0c             	sub    $0xc,%esp
+     bf4:	50                   	push   %eax
+     bf5:	e8 88 ff ff ff       	call   b82 <nulterminate>
+     bfa:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     bfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     c00:	8b 40 0c             	mov    0xc(%eax),%eax
+     c03:	c6 00 00             	movb   $0x0,(%eax)
+    break;
+     c06:	eb 71                	jmp    c79 <nulterminate+0xf7>
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+     c08:	8b 45 08             	mov    0x8(%ebp),%eax
+     c0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    nulterminate(pcmd->left);
+     c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     c11:	8b 40 04             	mov    0x4(%eax),%eax
+     c14:	83 ec 0c             	sub    $0xc,%esp
+     c17:	50                   	push   %eax
+     c18:	e8 65 ff ff ff       	call   b82 <nulterminate>
+     c1d:	83 c4 10             	add    $0x10,%esp
+    nulterminate(pcmd->right);
+     c20:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     c23:	8b 40 08             	mov    0x8(%eax),%eax
+     c26:	83 ec 0c             	sub    $0xc,%esp
+     c29:	50                   	push   %eax
+     c2a:	e8 53 ff ff ff       	call   b82 <nulterminate>
+     c2f:	83 c4 10             	add    $0x10,%esp
+    break;
+     c32:	eb 45                	jmp    c79 <nulterminate+0xf7>
+    
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+     c34:	8b 45 08             	mov    0x8(%ebp),%eax
+     c37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    nulterminate(lcmd->left);
+     c3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     c3d:	8b 40 04             	mov    0x4(%eax),%eax
+     c40:	83 ec 0c             	sub    $0xc,%esp
+     c43:	50                   	push   %eax
+     c44:	e8 39 ff ff ff       	call   b82 <nulterminate>
+     c49:	83 c4 10             	add    $0x10,%esp
+    nulterminate(lcmd->right);
+     c4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     c4f:	8b 40 08             	mov    0x8(%eax),%eax
+     c52:	83 ec 0c             	sub    $0xc,%esp
+     c55:	50                   	push   %eax
+     c56:	e8 27 ff ff ff       	call   b82 <nulterminate>
+     c5b:	83 c4 10             	add    $0x10,%esp
+    break;
+     c5e:	eb 19                	jmp    c79 <nulterminate+0xf7>
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+     c60:	8b 45 08             	mov    0x8(%ebp),%eax
+     c63:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    nulterminate(bcmd->cmd);
+     c66:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     c69:	8b 40 04             	mov    0x4(%eax),%eax
+     c6c:	83 ec 0c             	sub    $0xc,%esp
+     c6f:	50                   	push   %eax
+     c70:	e8 0d ff ff ff       	call   b82 <nulterminate>
+     c75:	83 c4 10             	add    $0x10,%esp
+    break;
+     c78:	90                   	nop
+  }
+  return cmd;
+     c79:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+     c7c:	c9                   	leave  
+     c7d:	c3                   	ret    
+
+00000c7e <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+     c7e:	55                   	push   %ebp
+     c7f:	89 e5                	mov    %esp,%ebp
+     c81:	57                   	push   %edi
+     c82:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+     c83:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     c86:	8b 55 10             	mov    0x10(%ebp),%edx
+     c89:	8b 45 0c             	mov    0xc(%ebp),%eax
+     c8c:	89 cb                	mov    %ecx,%ebx
+     c8e:	89 df                	mov    %ebx,%edi
+     c90:	89 d1                	mov    %edx,%ecx
+     c92:	fc                   	cld    
+     c93:	f3 aa                	rep stos %al,%es:(%edi)
+     c95:	89 ca                	mov    %ecx,%edx
+     c97:	89 fb                	mov    %edi,%ebx
+     c99:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     c9c:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+     c9f:	90                   	nop
+     ca0:	5b                   	pop    %ebx
+     ca1:	5f                   	pop    %edi
+     ca2:	5d                   	pop    %ebp
+     ca3:	c3                   	ret    
+
+00000ca4 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+     ca4:	55                   	push   %ebp
+     ca5:	89 e5                	mov    %esp,%ebp
+     ca7:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+     caa:	8b 45 08             	mov    0x8(%ebp),%eax
+     cad:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+     cb0:	90                   	nop
+     cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+     cb4:	8d 50 01             	lea    0x1(%eax),%edx
+     cb7:	89 55 08             	mov    %edx,0x8(%ebp)
+     cba:	8b 55 0c             	mov    0xc(%ebp),%edx
+     cbd:	8d 4a 01             	lea    0x1(%edx),%ecx
+     cc0:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+     cc3:	0f b6 12             	movzbl (%edx),%edx
+     cc6:	88 10                	mov    %dl,(%eax)
+     cc8:	0f b6 00             	movzbl (%eax),%eax
+     ccb:	84 c0                	test   %al,%al
+     ccd:	75 e2                	jne    cb1 <strcpy+0xd>
+    ;
+  return os;
+     ccf:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+     cd2:	c9                   	leave  
+     cd3:	c3                   	ret    
+
+00000cd4 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     cd4:	55                   	push   %ebp
+     cd5:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+     cd7:	eb 08                	jmp    ce1 <strcmp+0xd>
+    p++, q++;
+     cd9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+     cdd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+     ce1:	8b 45 08             	mov    0x8(%ebp),%eax
+     ce4:	0f b6 00             	movzbl (%eax),%eax
+     ce7:	84 c0                	test   %al,%al
+     ce9:	74 10                	je     cfb <strcmp+0x27>
+     ceb:	8b 45 08             	mov    0x8(%ebp),%eax
+     cee:	0f b6 10             	movzbl (%eax),%edx
+     cf1:	8b 45 0c             	mov    0xc(%ebp),%eax
+     cf4:	0f b6 00             	movzbl (%eax),%eax
+     cf7:	38 c2                	cmp    %al,%dl
+     cf9:	74 de                	je     cd9 <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+     cfb:	8b 45 08             	mov    0x8(%ebp),%eax
+     cfe:	0f b6 00             	movzbl (%eax),%eax
+     d01:	0f b6 d0             	movzbl %al,%edx
+     d04:	8b 45 0c             	mov    0xc(%ebp),%eax
+     d07:	0f b6 00             	movzbl (%eax),%eax
+     d0a:	0f b6 c0             	movzbl %al,%eax
+     d0d:	29 c2                	sub    %eax,%edx
+     d0f:	89 d0                	mov    %edx,%eax
+}
+     d11:	5d                   	pop    %ebp
+     d12:	c3                   	ret    
+
+00000d13 <strlen>:
+
+uint
+strlen(char *s)
+{
+     d13:	55                   	push   %ebp
+     d14:	89 e5                	mov    %esp,%ebp
+     d16:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+     d19:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+     d20:	eb 04                	jmp    d26 <strlen+0x13>
+     d22:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+     d26:	8b 55 fc             	mov    -0x4(%ebp),%edx
+     d29:	8b 45 08             	mov    0x8(%ebp),%eax
+     d2c:	01 d0                	add    %edx,%eax
+     d2e:	0f b6 00             	movzbl (%eax),%eax
+     d31:	84 c0                	test   %al,%al
+     d33:	75 ed                	jne    d22 <strlen+0xf>
+    ;
+  return n;
+     d35:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+     d38:	c9                   	leave  
+     d39:	c3                   	ret    
+
+00000d3a <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     d3a:	55                   	push   %ebp
+     d3b:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+     d3d:	8b 45 10             	mov    0x10(%ebp),%eax
+     d40:	50                   	push   %eax
+     d41:	ff 75 0c             	pushl  0xc(%ebp)
+     d44:	ff 75 08             	pushl  0x8(%ebp)
+     d47:	e8 32 ff ff ff       	call   c7e <stosb>
+     d4c:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+     d4f:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+     d52:	c9                   	leave  
+     d53:	c3                   	ret    
+
+00000d54 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     d54:	55                   	push   %ebp
+     d55:	89 e5                	mov    %esp,%ebp
+     d57:	83 ec 04             	sub    $0x4,%esp
+     d5a:	8b 45 0c             	mov    0xc(%ebp),%eax
+     d5d:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+     d60:	eb 14                	jmp    d76 <strchr+0x22>
+    if(*s == c)
+     d62:	8b 45 08             	mov    0x8(%ebp),%eax
+     d65:	0f b6 00             	movzbl (%eax),%eax
+     d68:	3a 45 fc             	cmp    -0x4(%ebp),%al
+     d6b:	75 05                	jne    d72 <strchr+0x1e>
+      return (char*)s;
+     d6d:	8b 45 08             	mov    0x8(%ebp),%eax
+     d70:	eb 13                	jmp    d85 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+     d72:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+     d76:	8b 45 08             	mov    0x8(%ebp),%eax
+     d79:	0f b6 00             	movzbl (%eax),%eax
+     d7c:	84 c0                	test   %al,%al
+     d7e:	75 e2                	jne    d62 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+     d80:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+     d85:	c9                   	leave  
+     d86:	c3                   	ret    
+
+00000d87 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     d87:	55                   	push   %ebp
+     d88:	89 e5                	mov    %esp,%ebp
+     d8a:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     d8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     d94:	eb 42                	jmp    dd8 <gets+0x51>
+    cc = read(0, &c, 1);
+     d96:	83 ec 04             	sub    $0x4,%esp
+     d99:	6a 01                	push   $0x1
+     d9b:	8d 45 ef             	lea    -0x11(%ebp),%eax
+     d9e:	50                   	push   %eax
+     d9f:	6a 00                	push   $0x0
+     da1:	e8 47 01 00 00       	call   eed <read>
+     da6:	83 c4 10             	add    $0x10,%esp
+     da9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+     dac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+     db0:	7e 33                	jle    de5 <gets+0x5e>
+      break;
+    buf[i++] = c;
+     db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     db5:	8d 50 01             	lea    0x1(%eax),%edx
+     db8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+     dbb:	89 c2                	mov    %eax,%edx
+     dbd:	8b 45 08             	mov    0x8(%ebp),%eax
+     dc0:	01 c2                	add    %eax,%edx
+     dc2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+     dc6:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+     dc8:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+     dcc:	3c 0a                	cmp    $0xa,%al
+     dce:	74 16                	je     de6 <gets+0x5f>
+     dd0:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+     dd4:	3c 0d                	cmp    $0xd,%al
+     dd6:	74 0e                	je     de6 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     ddb:	83 c0 01             	add    $0x1,%eax
+     dde:	3b 45 0c             	cmp    0xc(%ebp),%eax
+     de1:	7c b3                	jl     d96 <gets+0xf>
+     de3:	eb 01                	jmp    de6 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+     de5:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+     de6:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     de9:	8b 45 08             	mov    0x8(%ebp),%eax
+     dec:	01 d0                	add    %edx,%eax
+     dee:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+     df1:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+     df4:	c9                   	leave  
+     df5:	c3                   	ret    
+
+00000df6 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+     df6:	55                   	push   %ebp
+     df7:	89 e5                	mov    %esp,%ebp
+     df9:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     dfc:	83 ec 08             	sub    $0x8,%esp
+     dff:	6a 00                	push   $0x0
+     e01:	ff 75 08             	pushl  0x8(%ebp)
+     e04:	e8 0c 01 00 00       	call   f15 <open>
+     e09:	83 c4 10             	add    $0x10,%esp
+     e0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+     e0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     e13:	79 07                	jns    e1c <stat+0x26>
+    return -1;
+     e15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+     e1a:	eb 25                	jmp    e41 <stat+0x4b>
+  r = fstat(fd, st);
+     e1c:	83 ec 08             	sub    $0x8,%esp
+     e1f:	ff 75 0c             	pushl  0xc(%ebp)
+     e22:	ff 75 f4             	pushl  -0xc(%ebp)
+     e25:	e8 03 01 00 00       	call   f2d <fstat>
+     e2a:	83 c4 10             	add    $0x10,%esp
+     e2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+     e30:	83 ec 0c             	sub    $0xc,%esp
+     e33:	ff 75 f4             	pushl  -0xc(%ebp)
+     e36:	e8 c2 00 00 00       	call   efd <close>
+     e3b:	83 c4 10             	add    $0x10,%esp
+  return r;
+     e3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+     e41:	c9                   	leave  
+     e42:	c3                   	ret    
+
+00000e43 <atoi>:
+
+int
+atoi(const char *s)
+{
+     e43:	55                   	push   %ebp
+     e44:	89 e5                	mov    %esp,%ebp
+     e46:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+     e49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+     e50:	eb 25                	jmp    e77 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+     e52:	8b 55 fc             	mov    -0x4(%ebp),%edx
+     e55:	89 d0                	mov    %edx,%eax
+     e57:	c1 e0 02             	shl    $0x2,%eax
+     e5a:	01 d0                	add    %edx,%eax
+     e5c:	01 c0                	add    %eax,%eax
+     e5e:	89 c1                	mov    %eax,%ecx
+     e60:	8b 45 08             	mov    0x8(%ebp),%eax
+     e63:	8d 50 01             	lea    0x1(%eax),%edx
+     e66:	89 55 08             	mov    %edx,0x8(%ebp)
+     e69:	0f b6 00             	movzbl (%eax),%eax
+     e6c:	0f be c0             	movsbl %al,%eax
+     e6f:	01 c8                	add    %ecx,%eax
+     e71:	83 e8 30             	sub    $0x30,%eax
+     e74:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     e77:	8b 45 08             	mov    0x8(%ebp),%eax
+     e7a:	0f b6 00             	movzbl (%eax),%eax
+     e7d:	3c 2f                	cmp    $0x2f,%al
+     e7f:	7e 0a                	jle    e8b <atoi+0x48>
+     e81:	8b 45 08             	mov    0x8(%ebp),%eax
+     e84:	0f b6 00             	movzbl (%eax),%eax
+     e87:	3c 39                	cmp    $0x39,%al
+     e89:	7e c7                	jle    e52 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+     e8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+     e8e:	c9                   	leave  
+     e8f:	c3                   	ret    
+
+00000e90 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+     e90:	55                   	push   %ebp
+     e91:	89 e5                	mov    %esp,%ebp
+     e93:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+     e96:	8b 45 08             	mov    0x8(%ebp),%eax
+     e99:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+     e9c:	8b 45 0c             	mov    0xc(%ebp),%eax
+     e9f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+     ea2:	eb 17                	jmp    ebb <memmove+0x2b>
+    *dst++ = *src++;
+     ea4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+     ea7:	8d 50 01             	lea    0x1(%eax),%edx
+     eaa:	89 55 fc             	mov    %edx,-0x4(%ebp)
+     ead:	8b 55 f8             	mov    -0x8(%ebp),%edx
+     eb0:	8d 4a 01             	lea    0x1(%edx),%ecx
+     eb3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+     eb6:	0f b6 12             	movzbl (%edx),%edx
+     eb9:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     ebb:	8b 45 10             	mov    0x10(%ebp),%eax
+     ebe:	8d 50 ff             	lea    -0x1(%eax),%edx
+     ec1:	89 55 10             	mov    %edx,0x10(%ebp)
+     ec4:	85 c0                	test   %eax,%eax
+     ec6:	7f dc                	jg     ea4 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+     ec8:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+     ecb:	c9                   	leave  
+     ecc:	c3                   	ret    
+
+00000ecd <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     ecd:	b8 01 00 00 00       	mov    $0x1,%eax
+     ed2:	cd 40                	int    $0x40
+     ed4:	c3                   	ret    
+
+00000ed5 <exit>:
+SYSCALL(exit)
+     ed5:	b8 02 00 00 00       	mov    $0x2,%eax
+     eda:	cd 40                	int    $0x40
+     edc:	c3                   	ret    
+
+00000edd <wait>:
+SYSCALL(wait)
+     edd:	b8 03 00 00 00       	mov    $0x3,%eax
+     ee2:	cd 40                	int    $0x40
+     ee4:	c3                   	ret    
+
+00000ee5 <pipe>:
+SYSCALL(pipe)
+     ee5:	b8 04 00 00 00       	mov    $0x4,%eax
+     eea:	cd 40                	int    $0x40
+     eec:	c3                   	ret    
+
+00000eed <read>:
+SYSCALL(read)
+     eed:	b8 05 00 00 00       	mov    $0x5,%eax
+     ef2:	cd 40                	int    $0x40
+     ef4:	c3                   	ret    
+
+00000ef5 <write>:
+SYSCALL(write)
+     ef5:	b8 10 00 00 00       	mov    $0x10,%eax
+     efa:	cd 40                	int    $0x40
+     efc:	c3                   	ret    
+
+00000efd <close>:
+SYSCALL(close)
+     efd:	b8 15 00 00 00       	mov    $0x15,%eax
+     f02:	cd 40                	int    $0x40
+     f04:	c3                   	ret    
+
+00000f05 <kill>:
+SYSCALL(kill)
+     f05:	b8 06 00 00 00       	mov    $0x6,%eax
+     f0a:	cd 40                	int    $0x40
+     f0c:	c3                   	ret    
+
+00000f0d <exec>:
+SYSCALL(exec)
+     f0d:	b8 07 00 00 00       	mov    $0x7,%eax
+     f12:	cd 40                	int    $0x40
+     f14:	c3                   	ret    
+
+00000f15 <open>:
+SYSCALL(open)
+     f15:	b8 0f 00 00 00       	mov    $0xf,%eax
+     f1a:	cd 40                	int    $0x40
+     f1c:	c3                   	ret    
+
+00000f1d <mknod>:
+SYSCALL(mknod)
+     f1d:	b8 11 00 00 00       	mov    $0x11,%eax
+     f22:	cd 40                	int    $0x40
+     f24:	c3                   	ret    
+
+00000f25 <unlink>:
+SYSCALL(unlink)
+     f25:	b8 12 00 00 00       	mov    $0x12,%eax
+     f2a:	cd 40                	int    $0x40
+     f2c:	c3                   	ret    
+
+00000f2d <fstat>:
+SYSCALL(fstat)
+     f2d:	b8 08 00 00 00       	mov    $0x8,%eax
+     f32:	cd 40                	int    $0x40
+     f34:	c3                   	ret    
+
+00000f35 <link>:
+SYSCALL(link)
+     f35:	b8 13 00 00 00       	mov    $0x13,%eax
+     f3a:	cd 40                	int    $0x40
+     f3c:	c3                   	ret    
+
+00000f3d <mkdir>:
+SYSCALL(mkdir)
+     f3d:	b8 14 00 00 00       	mov    $0x14,%eax
+     f42:	cd 40                	int    $0x40
+     f44:	c3                   	ret    
+
+00000f45 <chdir>:
+SYSCALL(chdir)
+     f45:	b8 09 00 00 00       	mov    $0x9,%eax
+     f4a:	cd 40                	int    $0x40
+     f4c:	c3                   	ret    
+
+00000f4d <dup>:
+SYSCALL(dup)
+     f4d:	b8 0a 00 00 00       	mov    $0xa,%eax
+     f52:	cd 40                	int    $0x40
+     f54:	c3                   	ret    
+
+00000f55 <getpid>:
+SYSCALL(getpid)
+     f55:	b8 0b 00 00 00       	mov    $0xb,%eax
+     f5a:	cd 40                	int    $0x40
+     f5c:	c3                   	ret    
+
+00000f5d <sbrk>:
+SYSCALL(sbrk)
+     f5d:	b8 0c 00 00 00       	mov    $0xc,%eax
+     f62:	cd 40                	int    $0x40
+     f64:	c3                   	ret    
+
+00000f65 <sleep>:
+SYSCALL(sleep)
+     f65:	b8 0d 00 00 00       	mov    $0xd,%eax
+     f6a:	cd 40                	int    $0x40
+     f6c:	c3                   	ret    
+
+00000f6d <uptime>:
+SYSCALL(uptime)
+     f6d:	b8 0e 00 00 00       	mov    $0xe,%eax
+     f72:	cd 40                	int    $0x40
+     f74:	c3                   	ret    
+
+00000f75 <procstat>:
+SYSCALL(procstat) 
+     f75:	b8 16 00 00 00       	mov    $0x16,%eax
+     f7a:	cd 40                	int    $0x40
+     f7c:	c3                   	ret    
+
+00000f7d <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+     f7d:	55                   	push   %ebp
+     f7e:	89 e5                	mov    %esp,%ebp
+     f80:	83 ec 18             	sub    $0x18,%esp
+     f83:	8b 45 0c             	mov    0xc(%ebp),%eax
+     f86:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+     f89:	83 ec 04             	sub    $0x4,%esp
+     f8c:	6a 01                	push   $0x1
+     f8e:	8d 45 f4             	lea    -0xc(%ebp),%eax
+     f91:	50                   	push   %eax
+     f92:	ff 75 08             	pushl  0x8(%ebp)
+     f95:	e8 5b ff ff ff       	call   ef5 <write>
+     f9a:	83 c4 10             	add    $0x10,%esp
+}
+     f9d:	90                   	nop
+     f9e:	c9                   	leave  
+     f9f:	c3                   	ret    
+
+00000fa0 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     fa0:	55                   	push   %ebp
+     fa1:	89 e5                	mov    %esp,%ebp
+     fa3:	53                   	push   %ebx
+     fa4:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+     fa7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+     fae:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+     fb2:	74 17                	je     fcb <printint+0x2b>
+     fb4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+     fb8:	79 11                	jns    fcb <printint+0x2b>
+    neg = 1;
+     fba:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+     fc1:	8b 45 0c             	mov    0xc(%ebp),%eax
+     fc4:	f7 d8                	neg    %eax
+     fc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+     fc9:	eb 06                	jmp    fd1 <printint+0x31>
+  } else {
+    x = xx;
+     fcb:	8b 45 0c             	mov    0xc(%ebp),%eax
+     fce:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+     fd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+     fd8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+     fdb:	8d 41 01             	lea    0x1(%ecx),%eax
+     fde:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     fe1:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     fe4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     fe7:	ba 00 00 00 00       	mov    $0x0,%edx
+     fec:	f7 f3                	div    %ebx
+     fee:	89 d0                	mov    %edx,%eax
+     ff0:	0f b6 80 98 19 00 00 	movzbl 0x1998(%eax),%eax
+     ff7:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+     ffb:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     ffe:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    1001:	ba 00 00 00 00       	mov    $0x0,%edx
+    1006:	f7 f3                	div    %ebx
+    1008:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    100b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    100f:	75 c7                	jne    fd8 <printint+0x38>
+  if(neg)
+    1011:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    1015:	74 2d                	je     1044 <printint+0xa4>
+    buf[i++] = '-';
+    1017:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    101a:	8d 50 01             	lea    0x1(%eax),%edx
+    101d:	89 55 f4             	mov    %edx,-0xc(%ebp)
+    1020:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+    1025:	eb 1d                	jmp    1044 <printint+0xa4>
+    putc(fd, buf[i]);
+    1027:	8d 55 dc             	lea    -0x24(%ebp),%edx
+    102a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    102d:	01 d0                	add    %edx,%eax
+    102f:	0f b6 00             	movzbl (%eax),%eax
+    1032:	0f be c0             	movsbl %al,%eax
+    1035:	83 ec 08             	sub    $0x8,%esp
+    1038:	50                   	push   %eax
+    1039:	ff 75 08             	pushl  0x8(%ebp)
+    103c:	e8 3c ff ff ff       	call   f7d <putc>
+    1041:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+    1044:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+    1048:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    104c:	79 d9                	jns    1027 <printint+0x87>
+    putc(fd, buf[i]);
+}
+    104e:	90                   	nop
+    104f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1052:	c9                   	leave  
+    1053:	c3                   	ret    
+
+00001054 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+    1054:	55                   	push   %ebp
+    1055:	89 e5                	mov    %esp,%ebp
+    1057:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+    105a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+    1061:	8d 45 0c             	lea    0xc(%ebp),%eax
+    1064:	83 c0 04             	add    $0x4,%eax
+    1067:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+    106a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    1071:	e9 59 01 00 00       	jmp    11cf <printf+0x17b>
+    c = fmt[i] & 0xff;
+    1076:	8b 55 0c             	mov    0xc(%ebp),%edx
+    1079:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    107c:	01 d0                	add    %edx,%eax
+    107e:	0f b6 00             	movzbl (%eax),%eax
+    1081:	0f be c0             	movsbl %al,%eax
+    1084:	25 ff 00 00 00       	and    $0xff,%eax
+    1089:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+    108c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1090:	75 2c                	jne    10be <printf+0x6a>
+      if(c == '%'){
+    1092:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+    1096:	75 0c                	jne    10a4 <printf+0x50>
+        state = '%';
+    1098:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+    109f:	e9 27 01 00 00       	jmp    11cb <printf+0x177>
+      } else {
+        putc(fd, c);
+    10a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    10a7:	0f be c0             	movsbl %al,%eax
+    10aa:	83 ec 08             	sub    $0x8,%esp
+    10ad:	50                   	push   %eax
+    10ae:	ff 75 08             	pushl  0x8(%ebp)
+    10b1:	e8 c7 fe ff ff       	call   f7d <putc>
+    10b6:	83 c4 10             	add    $0x10,%esp
+    10b9:	e9 0d 01 00 00       	jmp    11cb <printf+0x177>
+      }
+    } else if(state == '%'){
+    10be:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+    10c2:	0f 85 03 01 00 00    	jne    11cb <printf+0x177>
+      if(c == 'd'){
+    10c8:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+    10cc:	75 1e                	jne    10ec <printf+0x98>
+        printint(fd, *ap, 10, 1);
+    10ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    10d1:	8b 00                	mov    (%eax),%eax
+    10d3:	6a 01                	push   $0x1
+    10d5:	6a 0a                	push   $0xa
+    10d7:	50                   	push   %eax
+    10d8:	ff 75 08             	pushl  0x8(%ebp)
+    10db:	e8 c0 fe ff ff       	call   fa0 <printint>
+    10e0:	83 c4 10             	add    $0x10,%esp
+        ap++;
+    10e3:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+    10e7:	e9 d8 00 00 00       	jmp    11c4 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+    10ec:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+    10f0:	74 06                	je     10f8 <printf+0xa4>
+    10f2:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+    10f6:	75 1e                	jne    1116 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+    10f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    10fb:	8b 00                	mov    (%eax),%eax
+    10fd:	6a 00                	push   $0x0
+    10ff:	6a 10                	push   $0x10
+    1101:	50                   	push   %eax
+    1102:	ff 75 08             	pushl  0x8(%ebp)
+    1105:	e8 96 fe ff ff       	call   fa0 <printint>
+    110a:	83 c4 10             	add    $0x10,%esp
+        ap++;
+    110d:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+    1111:	e9 ae 00 00 00       	jmp    11c4 <printf+0x170>
+      } else if(c == 's'){
+    1116:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+    111a:	75 43                	jne    115f <printf+0x10b>
+        s = (char*)*ap;
+    111c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    111f:	8b 00                	mov    (%eax),%eax
+    1121:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+    1124:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+    1128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    112c:	75 25                	jne    1153 <printf+0xff>
+          s = "(null)";
+    112e:	c7 45 f4 fc 14 00 00 	movl   $0x14fc,-0xc(%ebp)
+        while(*s != 0){
+    1135:	eb 1c                	jmp    1153 <printf+0xff>
+          putc(fd, *s);
+    1137:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    113a:	0f b6 00             	movzbl (%eax),%eax
+    113d:	0f be c0             	movsbl %al,%eax
+    1140:	83 ec 08             	sub    $0x8,%esp
+    1143:	50                   	push   %eax
+    1144:	ff 75 08             	pushl  0x8(%ebp)
+    1147:	e8 31 fe ff ff       	call   f7d <putc>
+    114c:	83 c4 10             	add    $0x10,%esp
+          s++;
+    114f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+    1153:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1156:	0f b6 00             	movzbl (%eax),%eax
+    1159:	84 c0                	test   %al,%al
+    115b:	75 da                	jne    1137 <printf+0xe3>
+    115d:	eb 65                	jmp    11c4 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    115f:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+    1163:	75 1d                	jne    1182 <printf+0x12e>
+        putc(fd, *ap);
+    1165:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    1168:	8b 00                	mov    (%eax),%eax
+    116a:	0f be c0             	movsbl %al,%eax
+    116d:	83 ec 08             	sub    $0x8,%esp
+    1170:	50                   	push   %eax
+    1171:	ff 75 08             	pushl  0x8(%ebp)
+    1174:	e8 04 fe ff ff       	call   f7d <putc>
+    1179:	83 c4 10             	add    $0x10,%esp
+        ap++;
+    117c:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+    1180:	eb 42                	jmp    11c4 <printf+0x170>
+      } else if(c == '%'){
+    1182:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+    1186:	75 17                	jne    119f <printf+0x14b>
+        putc(fd, c);
+    1188:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    118b:	0f be c0             	movsbl %al,%eax
+    118e:	83 ec 08             	sub    $0x8,%esp
+    1191:	50                   	push   %eax
+    1192:	ff 75 08             	pushl  0x8(%ebp)
+    1195:	e8 e3 fd ff ff       	call   f7d <putc>
+    119a:	83 c4 10             	add    $0x10,%esp
+    119d:	eb 25                	jmp    11c4 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+    119f:	83 ec 08             	sub    $0x8,%esp
+    11a2:	6a 25                	push   $0x25
+    11a4:	ff 75 08             	pushl  0x8(%ebp)
+    11a7:	e8 d1 fd ff ff       	call   f7d <putc>
+    11ac:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+    11af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    11b2:	0f be c0             	movsbl %al,%eax
+    11b5:	83 ec 08             	sub    $0x8,%esp
+    11b8:	50                   	push   %eax
+    11b9:	ff 75 08             	pushl  0x8(%ebp)
+    11bc:	e8 bc fd ff ff       	call   f7d <putc>
+    11c1:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    11c4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    11cb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    11cf:	8b 55 0c             	mov    0xc(%ebp),%edx
+    11d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    11d5:	01 d0                	add    %edx,%eax
+    11d7:	0f b6 00             	movzbl (%eax),%eax
+    11da:	84 c0                	test   %al,%al
+    11dc:	0f 85 94 fe ff ff    	jne    1076 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+    11e2:	90                   	nop
+    11e3:	c9                   	leave  
+    11e4:	c3                   	ret    
+
+000011e5 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    11e5:	55                   	push   %ebp
+    11e6:	89 e5                	mov    %esp,%ebp
+    11e8:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    11eb:	8b 45 08             	mov    0x8(%ebp),%eax
+    11ee:	83 e8 08             	sub    $0x8,%eax
+    11f1:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11f4:	a1 2c 1a 00 00       	mov    0x1a2c,%eax
+    11f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    11fc:	eb 24                	jmp    1222 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    11fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    1201:	8b 00                	mov    (%eax),%eax
+    1203:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+    1206:	77 12                	ja     121a <free+0x35>
+    1208:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    120b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+    120e:	77 24                	ja     1234 <free+0x4f>
+    1210:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    1213:	8b 00                	mov    (%eax),%eax
+    1215:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+    1218:	77 1a                	ja     1234 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    121a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    121d:	8b 00                	mov    (%eax),%eax
+    121f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    1222:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    1225:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+    1228:	76 d4                	jbe    11fe <free+0x19>
+    122a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    122d:	8b 00                	mov    (%eax),%eax
+    122f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+    1232:	76 ca                	jbe    11fe <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    1234:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    1237:	8b 40 04             	mov    0x4(%eax),%eax
+    123a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+    1241:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    1244:	01 c2                	add    %eax,%edx
+    1246:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    1249:	8b 00                	mov    (%eax),%eax
+    124b:	39 c2                	cmp    %eax,%edx
+    124d:	75 24                	jne    1273 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+    124f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    1252:	8b 50 04             	mov    0x4(%eax),%edx
+    1255:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    1258:	8b 00                	mov    (%eax),%eax
+    125a:	8b 40 04             	mov    0x4(%eax),%eax
+    125d:	01 c2                	add    %eax,%edx
+    125f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    1262:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1265:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    1268:	8b 00                	mov    (%eax),%eax
+    126a:	8b 10                	mov    (%eax),%edx
+    126c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    126f:	89 10                	mov    %edx,(%eax)
+    1271:	eb 0a                	jmp    127d <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+    1273:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    1276:	8b 10                	mov    (%eax),%edx
+    1278:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    127b:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+    127d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    1280:	8b 40 04             	mov    0x4(%eax),%eax
+    1283:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+    128a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    128d:	01 d0                	add    %edx,%eax
+    128f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+    1292:	75 20                	jne    12b4 <free+0xcf>
+    p->s.size += bp->s.size;
+    1294:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    1297:	8b 50 04             	mov    0x4(%eax),%edx
+    129a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    129d:	8b 40 04             	mov    0x4(%eax),%eax
+    12a0:	01 c2                	add    %eax,%edx
+    12a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    12a5:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    12a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    12ab:	8b 10                	mov    (%eax),%edx
+    12ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    12b0:	89 10                	mov    %edx,(%eax)
+    12b2:	eb 08                	jmp    12bc <free+0xd7>
+  } else
+    p->s.ptr = bp;
+    12b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    12b7:	8b 55 f8             	mov    -0x8(%ebp),%edx
+    12ba:	89 10                	mov    %edx,(%eax)
+  freep = p;
+    12bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    12bf:	a3 2c 1a 00 00       	mov    %eax,0x1a2c
+}
+    12c4:	90                   	nop
+    12c5:	c9                   	leave  
+    12c6:	c3                   	ret    
+
+000012c7 <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+    12c7:	55                   	push   %ebp
+    12c8:	89 e5                	mov    %esp,%ebp
+    12ca:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    12cd:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+    12d4:	77 07                	ja     12dd <morecore+0x16>
+    nu = 4096;
+    12d6:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+    12dd:	8b 45 08             	mov    0x8(%ebp),%eax
+    12e0:	c1 e0 03             	shl    $0x3,%eax
+    12e3:	83 ec 0c             	sub    $0xc,%esp
+    12e6:	50                   	push   %eax
+    12e7:	e8 71 fc ff ff       	call   f5d <sbrk>
+    12ec:	83 c4 10             	add    $0x10,%esp
+    12ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+    12f2:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+    12f6:	75 07                	jne    12ff <morecore+0x38>
+    return 0;
+    12f8:	b8 00 00 00 00       	mov    $0x0,%eax
+    12fd:	eb 26                	jmp    1325 <morecore+0x5e>
+  hp = (Header*)p;
+    12ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1302:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+    1305:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    1308:	8b 55 08             	mov    0x8(%ebp),%edx
+    130b:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+    130e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    1311:	83 c0 08             	add    $0x8,%eax
+    1314:	83 ec 0c             	sub    $0xc,%esp
+    1317:	50                   	push   %eax
+    1318:	e8 c8 fe ff ff       	call   11e5 <free>
+    131d:	83 c4 10             	add    $0x10,%esp
+  return freep;
+    1320:	a1 2c 1a 00 00       	mov    0x1a2c,%eax
+}
+    1325:	c9                   	leave  
+    1326:	c3                   	ret    
+
+00001327 <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+    1327:	55                   	push   %ebp
+    1328:	89 e5                	mov    %esp,%ebp
+    132a:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    132d:	8b 45 08             	mov    0x8(%ebp),%eax
+    1330:	83 c0 07             	add    $0x7,%eax
+    1333:	c1 e8 03             	shr    $0x3,%eax
+    1336:	83 c0 01             	add    $0x1,%eax
+    1339:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+    133c:	a1 2c 1a 00 00       	mov    0x1a2c,%eax
+    1341:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    1344:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    1348:	75 23                	jne    136d <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+    134a:	c7 45 f0 24 1a 00 00 	movl   $0x1a24,-0x10(%ebp)
+    1351:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    1354:	a3 2c 1a 00 00       	mov    %eax,0x1a2c
+    1359:	a1 2c 1a 00 00       	mov    0x1a2c,%eax
+    135e:	a3 24 1a 00 00       	mov    %eax,0x1a24
+    base.s.size = 0;
+    1363:	c7 05 28 1a 00 00 00 	movl   $0x0,0x1a28
+    136a:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    136d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    1370:	8b 00                	mov    (%eax),%eax
+    1372:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+    1375:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1378:	8b 40 04             	mov    0x4(%eax),%eax
+    137b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+    137e:	72 4d                	jb     13cd <malloc+0xa6>
+      if(p->s.size == nunits)
+    1380:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1383:	8b 40 04             	mov    0x4(%eax),%eax
+    1386:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+    1389:	75 0c                	jne    1397 <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+    138b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    138e:	8b 10                	mov    (%eax),%edx
+    1390:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    1393:	89 10                	mov    %edx,(%eax)
+    1395:	eb 26                	jmp    13bd <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+    1397:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    139a:	8b 40 04             	mov    0x4(%eax),%eax
+    139d:	2b 45 ec             	sub    -0x14(%ebp),%eax
+    13a0:	89 c2                	mov    %eax,%edx
+    13a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    13a5:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+    13a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    13ab:	8b 40 04             	mov    0x4(%eax),%eax
+    13ae:	c1 e0 03             	shl    $0x3,%eax
+    13b1:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+    13b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    13b7:	8b 55 ec             	mov    -0x14(%ebp),%edx
+    13ba:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+    13bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    13c0:	a3 2c 1a 00 00       	mov    %eax,0x1a2c
+      return (void*)(p + 1);
+    13c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    13c8:	83 c0 08             	add    $0x8,%eax
+    13cb:	eb 3b                	jmp    1408 <malloc+0xe1>
+    }
+    if(p == freep)
+    13cd:	a1 2c 1a 00 00       	mov    0x1a2c,%eax
+    13d2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+    13d5:	75 1e                	jne    13f5 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+    13d7:	83 ec 0c             	sub    $0xc,%esp
+    13da:	ff 75 ec             	pushl  -0x14(%ebp)
+    13dd:	e8 e5 fe ff ff       	call   12c7 <morecore>
+    13e2:	83 c4 10             	add    $0x10,%esp
+    13e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    13e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    13ec:	75 07                	jne    13f5 <malloc+0xce>
+        return 0;
+    13ee:	b8 00 00 00 00       	mov    $0x0,%eax
+    13f3:	eb 13                	jmp    1408 <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    13f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    13f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    13fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    13fe:	8b 00                	mov    (%eax),%eax
+    1400:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+    1403:	e9 6d ff ff ff       	jmp    1375 <malloc+0x4e>
+}
+    1408:	c9                   	leave  
+    1409:	c3                   	ret    
Los archivos binarios xv6-unrc/._show1 y xv6-mod/._show1 son distintos
diff -rupN xv6-unrc/sh.sym xv6-mod/sh.sym
--- xv6-unrc/sh.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/sh.sym	2018-04-04 14:53:55.187465696 -0300
@@ -0,0 +1,82 @@
+00000000 .text
+0000140c .rodata
+00001504 .eh_frame
+00001988 .data
+000019c0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 sh.c
+000019c0 buf.1147
+00000000 ulib.c
+00000c7e stosb
+00000000 printf.c
+00000f7d putc
+00000fa0 printint
+00001998 digits.1109
+00000000 umalloc.c
+00001a24 base
+00001a2c freep
+000012c7 morecore
+00000ca4 strcpy
+00001054 printf
+00000e90 memmove
+00000f1d mknod
+000003e5 execcmd
+00000d87 gets
+00000f55 getpid
+0000084f parsepipe
+00000714 parsecmd
+0000050e backcmd
+0000069e peek
+000008bd parseredirs
+0000054d gettoken
+00001327 malloc
+00000f75 procstat
+00000f65 sleep
+00001988 whitespace
+000003bc fork1
+00000b82 nulterminate
+00000ee5 pipe
+0000024b getcmd
+00000ef5 write
+00000f2d fstat
+00000f05 kill
+00000f45 chdir
+000007a2 parseline
+00000000 runcmd
+000009a1 parseblock
+00000f0d exec
+00000edd wait
+00001990 symbols
+00000eed read
+00000a4f parseexec
+00000f25 unlink
+0000039c panic
+00000ecd fork
+00000f5d sbrk
+00000f6d uptime
+000019a9 __bss_start
+00000d3a memset
+000002a0 main
+00000cd4 strcmp
+00000f4d dup
+0000047e pipecmd
+0000041b redircmd
+00000df6 stat
+000019a9 _edata
+00001a30 _end
+00000f35 link
+00000ed5 exit
+00000e43 atoi
+00000d13 strlen
+00000f15 open
+00000d54 strchr
+00000f3d mkdir
+00000efd close
+000004c6 listcmd
+000011e5 free
Los archivos binarios xv6-unrc/._sign.pl y xv6-mod/._sign.pl son distintos
Los archivos binarios xv6-unrc/._sleep1.p y xv6-mod/._sleep1.p son distintos
Los archivos binarios xv6-unrc/._spinlock.c y xv6-mod/._spinlock.c son distintos
diff -rupN xv6-unrc/spinlock.d xv6-mod/spinlock.d
--- xv6-unrc/spinlock.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/spinlock.d	2018-04-04 14:54:02.207536105 -0300
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Los archivos binarios xv6-unrc/._spinlock.h y xv6-mod/._spinlock.h son distintos
Los archivos binarios xv6-unrc/spinlock.o y xv6-mod/spinlock.o son distintos
Los archivos binarios xv6-unrc/._spinp y xv6-mod/._spinp son distintos
Los archivos binarios xv6-unrc/._stat.h y xv6-mod/._stat.h son distintos
Los archivos binarios xv6-unrc/_stressfs y xv6-mod/_stressfs son distintos
diff -rupN xv6-unrc/stressfs.asm xv6-mod/stressfs.asm
--- xv6-unrc/stressfs.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/stressfs.asm	2018-04-04 14:53:55.435468183 -0300
@@ -0,0 +1,1301 @@
+
+_stressfs:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	81 ec 24 02 00 00    	sub    $0x224,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+  14:	c7 45 e6 73 74 72 65 	movl   $0x65727473,-0x1a(%ebp)
+  1b:	c7 45 ea 73 73 66 73 	movl   $0x73667373,-0x16(%ebp)
+  22:	66 c7 45 ee 30 00    	movw   $0x30,-0x12(%ebp)
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  28:	83 ec 08             	sub    $0x8,%esp
+  2b:	68 de 08 00 00       	push   $0x8de
+  30:	6a 01                	push   $0x1
+  32:	e8 f1 04 00 00       	call   528 <printf>
+  37:	83 c4 10             	add    $0x10,%esp
+  memset(data, 'a', sizeof(data));
+  3a:	83 ec 04             	sub    $0x4,%esp
+  3d:	68 00 02 00 00       	push   $0x200
+  42:	6a 61                	push   $0x61
+  44:	8d 85 e6 fd ff ff    	lea    -0x21a(%ebp),%eax
+  4a:	50                   	push   %eax
+  4b:	e8 be 01 00 00       	call   20e <memset>
+  50:	83 c4 10             	add    $0x10,%esp
+
+  for(i = 0; i < 4; i++)
+  53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  5a:	eb 0d                	jmp    69 <main+0x69>
+    if(fork() > 0)
+  5c:	e8 40 03 00 00       	call   3a1 <fork>
+  61:	85 c0                	test   %eax,%eax
+  63:	7f 0c                	jg     71 <main+0x71>
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+
+  for(i = 0; i < 4; i++)
+  65:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  69:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
+  6d:	7e ed                	jle    5c <main+0x5c>
+  6f:	eb 01                	jmp    72 <main+0x72>
+    if(fork() > 0)
+      break;
+  71:	90                   	nop
+
+  printf(1, "write %d\n", i);
+  72:	83 ec 04             	sub    $0x4,%esp
+  75:	ff 75 f4             	pushl  -0xc(%ebp)
+  78:	68 f1 08 00 00       	push   $0x8f1
+  7d:	6a 01                	push   $0x1
+  7f:	e8 a4 04 00 00       	call   528 <printf>
+  84:	83 c4 10             	add    $0x10,%esp
+
+  path[8] += i;
+  87:	0f b6 45 ee          	movzbl -0x12(%ebp),%eax
+  8b:	89 c2                	mov    %eax,%edx
+  8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  90:	01 d0                	add    %edx,%eax
+  92:	88 45 ee             	mov    %al,-0x12(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  95:	83 ec 08             	sub    $0x8,%esp
+  98:	68 02 02 00 00       	push   $0x202
+  9d:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+  a0:	50                   	push   %eax
+  a1:	e8 43 03 00 00       	call   3e9 <open>
+  a6:	83 c4 10             	add    $0x10,%esp
+  a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  for(i = 0; i < 20; i++)
+  ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  b3:	eb 1e                	jmp    d3 <main+0xd3>
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b5:	83 ec 04             	sub    $0x4,%esp
+  b8:	68 00 02 00 00       	push   $0x200
+  bd:	8d 85 e6 fd ff ff    	lea    -0x21a(%ebp),%eax
+  c3:	50                   	push   %eax
+  c4:	ff 75 f0             	pushl  -0x10(%ebp)
+  c7:	e8 fd 02 00 00       	call   3c9 <write>
+  cc:	83 c4 10             	add    $0x10,%esp
+
+  printf(1, "write %d\n", i);
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  for(i = 0; i < 20; i++)
+  cf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  d3:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
+  d7:	7e dc                	jle    b5 <main+0xb5>
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  close(fd);
+  d9:	83 ec 0c             	sub    $0xc,%esp
+  dc:	ff 75 f0             	pushl  -0x10(%ebp)
+  df:	e8 ed 02 00 00       	call   3d1 <close>
+  e4:	83 c4 10             	add    $0x10,%esp
+
+  printf(1, "read\n");
+  e7:	83 ec 08             	sub    $0x8,%esp
+  ea:	68 fb 08 00 00       	push   $0x8fb
+  ef:	6a 01                	push   $0x1
+  f1:	e8 32 04 00 00       	call   528 <printf>
+  f6:	83 c4 10             	add    $0x10,%esp
+
+  fd = open(path, O_RDONLY);
+  f9:	83 ec 08             	sub    $0x8,%esp
+  fc:	6a 00                	push   $0x0
+  fe:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 101:	50                   	push   %eax
+ 102:	e8 e2 02 00 00       	call   3e9 <open>
+ 107:	83 c4 10             	add    $0x10,%esp
+ 10a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  for (i = 0; i < 20; i++)
+ 10d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 114:	eb 1e                	jmp    134 <main+0x134>
+    read(fd, data, sizeof(data));
+ 116:	83 ec 04             	sub    $0x4,%esp
+ 119:	68 00 02 00 00       	push   $0x200
+ 11e:	8d 85 e6 fd ff ff    	lea    -0x21a(%ebp),%eax
+ 124:	50                   	push   %eax
+ 125:	ff 75 f0             	pushl  -0x10(%ebp)
+ 128:	e8 94 02 00 00       	call   3c1 <read>
+ 12d:	83 c4 10             	add    $0x10,%esp
+  close(fd);
+
+  printf(1, "read\n");
+
+  fd = open(path, O_RDONLY);
+  for (i = 0; i < 20; i++)
+ 130:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+ 134:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
+ 138:	7e dc                	jle    116 <main+0x116>
+    read(fd, data, sizeof(data));
+  close(fd);
+ 13a:	83 ec 0c             	sub    $0xc,%esp
+ 13d:	ff 75 f0             	pushl  -0x10(%ebp)
+ 140:	e8 8c 02 00 00       	call   3d1 <close>
+ 145:	83 c4 10             	add    $0x10,%esp
+
+  wait();
+ 148:	e8 64 02 00 00       	call   3b1 <wait>
+  
+  exit();
+ 14d:	e8 57 02 00 00       	call   3a9 <exit>
+
+00000152 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+ 152:	55                   	push   %ebp
+ 153:	89 e5                	mov    %esp,%ebp
+ 155:	57                   	push   %edi
+ 156:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+ 157:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 15a:	8b 55 10             	mov    0x10(%ebp),%edx
+ 15d:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 160:	89 cb                	mov    %ecx,%ebx
+ 162:	89 df                	mov    %ebx,%edi
+ 164:	89 d1                	mov    %edx,%ecx
+ 166:	fc                   	cld    
+ 167:	f3 aa                	rep stos %al,%es:(%edi)
+ 169:	89 ca                	mov    %ecx,%edx
+ 16b:	89 fb                	mov    %edi,%ebx
+ 16d:	89 5d 08             	mov    %ebx,0x8(%ebp)
+ 170:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+ 173:	90                   	nop
+ 174:	5b                   	pop    %ebx
+ 175:	5f                   	pop    %edi
+ 176:	5d                   	pop    %ebp
+ 177:	c3                   	ret    
+
+00000178 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+ 178:	55                   	push   %ebp
+ 179:	89 e5                	mov    %esp,%ebp
+ 17b:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+ 17e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 181:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+ 184:	90                   	nop
+ 185:	8b 45 08             	mov    0x8(%ebp),%eax
+ 188:	8d 50 01             	lea    0x1(%eax),%edx
+ 18b:	89 55 08             	mov    %edx,0x8(%ebp)
+ 18e:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 191:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 194:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+ 197:	0f b6 12             	movzbl (%edx),%edx
+ 19a:	88 10                	mov    %dl,(%eax)
+ 19c:	0f b6 00             	movzbl (%eax),%eax
+ 19f:	84 c0                	test   %al,%al
+ 1a1:	75 e2                	jne    185 <strcpy+0xd>
+    ;
+  return os;
+ 1a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 1a6:	c9                   	leave  
+ 1a7:	c3                   	ret    
+
+000001a8 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1a8:	55                   	push   %ebp
+ 1a9:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+ 1ab:	eb 08                	jmp    1b5 <strcmp+0xd>
+    p++, q++;
+ 1ad:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 1b1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 1b5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b8:	0f b6 00             	movzbl (%eax),%eax
+ 1bb:	84 c0                	test   %al,%al
+ 1bd:	74 10                	je     1cf <strcmp+0x27>
+ 1bf:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c2:	0f b6 10             	movzbl (%eax),%edx
+ 1c5:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1c8:	0f b6 00             	movzbl (%eax),%eax
+ 1cb:	38 c2                	cmp    %al,%dl
+ 1cd:	74 de                	je     1ad <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 1cf:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d2:	0f b6 00             	movzbl (%eax),%eax
+ 1d5:	0f b6 d0             	movzbl %al,%edx
+ 1d8:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1db:	0f b6 00             	movzbl (%eax),%eax
+ 1de:	0f b6 c0             	movzbl %al,%eax
+ 1e1:	29 c2                	sub    %eax,%edx
+ 1e3:	89 d0                	mov    %edx,%eax
+}
+ 1e5:	5d                   	pop    %ebp
+ 1e6:	c3                   	ret    
+
+000001e7 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 1e7:	55                   	push   %ebp
+ 1e8:	89 e5                	mov    %esp,%ebp
+ 1ea:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 1f4:	eb 04                	jmp    1fa <strlen+0x13>
+ 1f6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 1fa:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 1fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 200:	01 d0                	add    %edx,%eax
+ 202:	0f b6 00             	movzbl (%eax),%eax
+ 205:	84 c0                	test   %al,%al
+ 207:	75 ed                	jne    1f6 <strlen+0xf>
+    ;
+  return n;
+ 209:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 20c:	c9                   	leave  
+ 20d:	c3                   	ret    
+
+0000020e <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 20e:	55                   	push   %ebp
+ 20f:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 211:	8b 45 10             	mov    0x10(%ebp),%eax
+ 214:	50                   	push   %eax
+ 215:	ff 75 0c             	pushl  0xc(%ebp)
+ 218:	ff 75 08             	pushl  0x8(%ebp)
+ 21b:	e8 32 ff ff ff       	call   152 <stosb>
+ 220:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 223:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 226:	c9                   	leave  
+ 227:	c3                   	ret    
+
+00000228 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 228:	55                   	push   %ebp
+ 229:	89 e5                	mov    %esp,%ebp
+ 22b:	83 ec 04             	sub    $0x4,%esp
+ 22e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 231:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 234:	eb 14                	jmp    24a <strchr+0x22>
+    if(*s == c)
+ 236:	8b 45 08             	mov    0x8(%ebp),%eax
+ 239:	0f b6 00             	movzbl (%eax),%eax
+ 23c:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 23f:	75 05                	jne    246 <strchr+0x1e>
+      return (char*)s;
+ 241:	8b 45 08             	mov    0x8(%ebp),%eax
+ 244:	eb 13                	jmp    259 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 246:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 24a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 24d:	0f b6 00             	movzbl (%eax),%eax
+ 250:	84 c0                	test   %al,%al
+ 252:	75 e2                	jne    236 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 254:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 259:	c9                   	leave  
+ 25a:	c3                   	ret    
+
+0000025b <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 25b:	55                   	push   %ebp
+ 25c:	89 e5                	mov    %esp,%ebp
+ 25e:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 261:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 268:	eb 42                	jmp    2ac <gets+0x51>
+    cc = read(0, &c, 1);
+ 26a:	83 ec 04             	sub    $0x4,%esp
+ 26d:	6a 01                	push   $0x1
+ 26f:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 272:	50                   	push   %eax
+ 273:	6a 00                	push   $0x0
+ 275:	e8 47 01 00 00       	call   3c1 <read>
+ 27a:	83 c4 10             	add    $0x10,%esp
+ 27d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 280:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 284:	7e 33                	jle    2b9 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 286:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 289:	8d 50 01             	lea    0x1(%eax),%edx
+ 28c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 28f:	89 c2                	mov    %eax,%edx
+ 291:	8b 45 08             	mov    0x8(%ebp),%eax
+ 294:	01 c2                	add    %eax,%edx
+ 296:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 29a:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 29c:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 2a0:	3c 0a                	cmp    $0xa,%al
+ 2a2:	74 16                	je     2ba <gets+0x5f>
+ 2a4:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 2a8:	3c 0d                	cmp    $0xd,%al
+ 2aa:	74 0e                	je     2ba <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 2af:	83 c0 01             	add    $0x1,%eax
+ 2b2:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 2b5:	7c b3                	jl     26a <gets+0xf>
+ 2b7:	eb 01                	jmp    2ba <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 2b9:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 2bd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2c0:	01 d0                	add    %edx,%eax
+ 2c2:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 2c5:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 2c8:	c9                   	leave  
+ 2c9:	c3                   	ret    
+
+000002ca <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 2ca:	55                   	push   %ebp
+ 2cb:	89 e5                	mov    %esp,%ebp
+ 2cd:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d0:	83 ec 08             	sub    $0x8,%esp
+ 2d3:	6a 00                	push   $0x0
+ 2d5:	ff 75 08             	pushl  0x8(%ebp)
+ 2d8:	e8 0c 01 00 00       	call   3e9 <open>
+ 2dd:	83 c4 10             	add    $0x10,%esp
+ 2e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 2e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 2e7:	79 07                	jns    2f0 <stat+0x26>
+    return -1;
+ 2e9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 2ee:	eb 25                	jmp    315 <stat+0x4b>
+  r = fstat(fd, st);
+ 2f0:	83 ec 08             	sub    $0x8,%esp
+ 2f3:	ff 75 0c             	pushl  0xc(%ebp)
+ 2f6:	ff 75 f4             	pushl  -0xc(%ebp)
+ 2f9:	e8 03 01 00 00       	call   401 <fstat>
+ 2fe:	83 c4 10             	add    $0x10,%esp
+ 301:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 304:	83 ec 0c             	sub    $0xc,%esp
+ 307:	ff 75 f4             	pushl  -0xc(%ebp)
+ 30a:	e8 c2 00 00 00       	call   3d1 <close>
+ 30f:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 312:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 315:	c9                   	leave  
+ 316:	c3                   	ret    
+
+00000317 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 317:	55                   	push   %ebp
+ 318:	89 e5                	mov    %esp,%ebp
+ 31a:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 31d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 324:	eb 25                	jmp    34b <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 326:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 329:	89 d0                	mov    %edx,%eax
+ 32b:	c1 e0 02             	shl    $0x2,%eax
+ 32e:	01 d0                	add    %edx,%eax
+ 330:	01 c0                	add    %eax,%eax
+ 332:	89 c1                	mov    %eax,%ecx
+ 334:	8b 45 08             	mov    0x8(%ebp),%eax
+ 337:	8d 50 01             	lea    0x1(%eax),%edx
+ 33a:	89 55 08             	mov    %edx,0x8(%ebp)
+ 33d:	0f b6 00             	movzbl (%eax),%eax
+ 340:	0f be c0             	movsbl %al,%eax
+ 343:	01 c8                	add    %ecx,%eax
+ 345:	83 e8 30             	sub    $0x30,%eax
+ 348:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 34b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 34e:	0f b6 00             	movzbl (%eax),%eax
+ 351:	3c 2f                	cmp    $0x2f,%al
+ 353:	7e 0a                	jle    35f <atoi+0x48>
+ 355:	8b 45 08             	mov    0x8(%ebp),%eax
+ 358:	0f b6 00             	movzbl (%eax),%eax
+ 35b:	3c 39                	cmp    $0x39,%al
+ 35d:	7e c7                	jle    326 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 35f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 362:	c9                   	leave  
+ 363:	c3                   	ret    
+
+00000364 <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 364:	55                   	push   %ebp
+ 365:	89 e5                	mov    %esp,%ebp
+ 367:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 36a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 36d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 370:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 373:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 376:	eb 17                	jmp    38f <memmove+0x2b>
+    *dst++ = *src++;
+ 378:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 37b:	8d 50 01             	lea    0x1(%eax),%edx
+ 37e:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 381:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 384:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 387:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 38a:	0f b6 12             	movzbl (%edx),%edx
+ 38d:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 38f:	8b 45 10             	mov    0x10(%ebp),%eax
+ 392:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 395:	89 55 10             	mov    %edx,0x10(%ebp)
+ 398:	85 c0                	test   %eax,%eax
+ 39a:	7f dc                	jg     378 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 39c:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 39f:	c9                   	leave  
+ 3a0:	c3                   	ret    
+
+000003a1 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3a1:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3a6:	cd 40                	int    $0x40
+ 3a8:	c3                   	ret    
+
+000003a9 <exit>:
+SYSCALL(exit)
+ 3a9:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3ae:	cd 40                	int    $0x40
+ 3b0:	c3                   	ret    
+
+000003b1 <wait>:
+SYSCALL(wait)
+ 3b1:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3b6:	cd 40                	int    $0x40
+ 3b8:	c3                   	ret    
+
+000003b9 <pipe>:
+SYSCALL(pipe)
+ 3b9:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3be:	cd 40                	int    $0x40
+ 3c0:	c3                   	ret    
+
+000003c1 <read>:
+SYSCALL(read)
+ 3c1:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3c6:	cd 40                	int    $0x40
+ 3c8:	c3                   	ret    
+
+000003c9 <write>:
+SYSCALL(write)
+ 3c9:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3ce:	cd 40                	int    $0x40
+ 3d0:	c3                   	ret    
+
+000003d1 <close>:
+SYSCALL(close)
+ 3d1:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3d6:	cd 40                	int    $0x40
+ 3d8:	c3                   	ret    
+
+000003d9 <kill>:
+SYSCALL(kill)
+ 3d9:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3de:	cd 40                	int    $0x40
+ 3e0:	c3                   	ret    
+
+000003e1 <exec>:
+SYSCALL(exec)
+ 3e1:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3e6:	cd 40                	int    $0x40
+ 3e8:	c3                   	ret    
+
+000003e9 <open>:
+SYSCALL(open)
+ 3e9:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3ee:	cd 40                	int    $0x40
+ 3f0:	c3                   	ret    
+
+000003f1 <mknod>:
+SYSCALL(mknod)
+ 3f1:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3f6:	cd 40                	int    $0x40
+ 3f8:	c3                   	ret    
+
+000003f9 <unlink>:
+SYSCALL(unlink)
+ 3f9:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3fe:	cd 40                	int    $0x40
+ 400:	c3                   	ret    
+
+00000401 <fstat>:
+SYSCALL(fstat)
+ 401:	b8 08 00 00 00       	mov    $0x8,%eax
+ 406:	cd 40                	int    $0x40
+ 408:	c3                   	ret    
+
+00000409 <link>:
+SYSCALL(link)
+ 409:	b8 13 00 00 00       	mov    $0x13,%eax
+ 40e:	cd 40                	int    $0x40
+ 410:	c3                   	ret    
+
+00000411 <mkdir>:
+SYSCALL(mkdir)
+ 411:	b8 14 00 00 00       	mov    $0x14,%eax
+ 416:	cd 40                	int    $0x40
+ 418:	c3                   	ret    
+
+00000419 <chdir>:
+SYSCALL(chdir)
+ 419:	b8 09 00 00 00       	mov    $0x9,%eax
+ 41e:	cd 40                	int    $0x40
+ 420:	c3                   	ret    
+
+00000421 <dup>:
+SYSCALL(dup)
+ 421:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 426:	cd 40                	int    $0x40
+ 428:	c3                   	ret    
+
+00000429 <getpid>:
+SYSCALL(getpid)
+ 429:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 42e:	cd 40                	int    $0x40
+ 430:	c3                   	ret    
+
+00000431 <sbrk>:
+SYSCALL(sbrk)
+ 431:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 436:	cd 40                	int    $0x40
+ 438:	c3                   	ret    
+
+00000439 <sleep>:
+SYSCALL(sleep)
+ 439:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 43e:	cd 40                	int    $0x40
+ 440:	c3                   	ret    
+
+00000441 <uptime>:
+SYSCALL(uptime)
+ 441:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 446:	cd 40                	int    $0x40
+ 448:	c3                   	ret    
+
+00000449 <procstat>:
+SYSCALL(procstat) 
+ 449:	b8 16 00 00 00       	mov    $0x16,%eax
+ 44e:	cd 40                	int    $0x40
+ 450:	c3                   	ret    
+
+00000451 <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 451:	55                   	push   %ebp
+ 452:	89 e5                	mov    %esp,%ebp
+ 454:	83 ec 18             	sub    $0x18,%esp
+ 457:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 45a:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	6a 01                	push   $0x1
+ 462:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 465:	50                   	push   %eax
+ 466:	ff 75 08             	pushl  0x8(%ebp)
+ 469:	e8 5b ff ff ff       	call   3c9 <write>
+ 46e:	83 c4 10             	add    $0x10,%esp
+}
+ 471:	90                   	nop
+ 472:	c9                   	leave  
+ 473:	c3                   	ret    
+
+00000474 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	53                   	push   %ebx
+ 478:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 47b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 482:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 486:	74 17                	je     49f <printint+0x2b>
+ 488:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 48c:	79 11                	jns    49f <printint+0x2b>
+    neg = 1;
+ 48e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 495:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 498:	f7 d8                	neg    %eax
+ 49a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 49d:	eb 06                	jmp    4a5 <printint+0x31>
+  } else {
+    x = xx;
+ 49f:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 4a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 4a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 4ac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 4af:	8d 41 01             	lea    0x1(%ecx),%eax
+ 4b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 4b5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 4b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 4bb:	ba 00 00 00 00       	mov    $0x0,%edx
+ 4c0:	f7 f3                	div    %ebx
+ 4c2:	89 d0                	mov    %edx,%eax
+ 4c4:	0f b6 80 50 0b 00 00 	movzbl 0xb50(%eax),%eax
+ 4cb:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 4cf:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 4d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 4d5:	ba 00 00 00 00       	mov    $0x0,%edx
+ 4da:	f7 f3                	div    %ebx
+ 4dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 4df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 4e3:	75 c7                	jne    4ac <printint+0x38>
+  if(neg)
+ 4e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 4e9:	74 2d                	je     518 <printint+0xa4>
+    buf[i++] = '-';
+ 4eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 4ee:	8d 50 01             	lea    0x1(%eax),%edx
+ 4f1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 4f4:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 4f9:	eb 1d                	jmp    518 <printint+0xa4>
+    putc(fd, buf[i]);
+ 4fb:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 4fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 501:	01 d0                	add    %edx,%eax
+ 503:	0f b6 00             	movzbl (%eax),%eax
+ 506:	0f be c0             	movsbl %al,%eax
+ 509:	83 ec 08             	sub    $0x8,%esp
+ 50c:	50                   	push   %eax
+ 50d:	ff 75 08             	pushl  0x8(%ebp)
+ 510:	e8 3c ff ff ff       	call   451 <putc>
+ 515:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 518:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 51c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 520:	79 d9                	jns    4fb <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 522:	90                   	nop
+ 523:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 526:	c9                   	leave  
+ 527:	c3                   	ret    
+
+00000528 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 528:	55                   	push   %ebp
+ 529:	89 e5                	mov    %esp,%ebp
+ 52b:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 52e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 535:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 538:	83 c0 04             	add    $0x4,%eax
+ 53b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 53e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 545:	e9 59 01 00 00       	jmp    6a3 <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 54a:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 54d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 550:	01 d0                	add    %edx,%eax
+ 552:	0f b6 00             	movzbl (%eax),%eax
+ 555:	0f be c0             	movsbl %al,%eax
+ 558:	25 ff 00 00 00       	and    $0xff,%eax
+ 55d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 560:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 564:	75 2c                	jne    592 <printf+0x6a>
+      if(c == '%'){
+ 566:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 56a:	75 0c                	jne    578 <printf+0x50>
+        state = '%';
+ 56c:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 573:	e9 27 01 00 00       	jmp    69f <printf+0x177>
+      } else {
+        putc(fd, c);
+ 578:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 57b:	0f be c0             	movsbl %al,%eax
+ 57e:	83 ec 08             	sub    $0x8,%esp
+ 581:	50                   	push   %eax
+ 582:	ff 75 08             	pushl  0x8(%ebp)
+ 585:	e8 c7 fe ff ff       	call   451 <putc>
+ 58a:	83 c4 10             	add    $0x10,%esp
+ 58d:	e9 0d 01 00 00       	jmp    69f <printf+0x177>
+      }
+    } else if(state == '%'){
+ 592:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 596:	0f 85 03 01 00 00    	jne    69f <printf+0x177>
+      if(c == 'd'){
+ 59c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 5a0:	75 1e                	jne    5c0 <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 5a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 5a5:	8b 00                	mov    (%eax),%eax
+ 5a7:	6a 01                	push   $0x1
+ 5a9:	6a 0a                	push   $0xa
+ 5ab:	50                   	push   %eax
+ 5ac:	ff 75 08             	pushl  0x8(%ebp)
+ 5af:	e8 c0 fe ff ff       	call   474 <printint>
+ 5b4:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 5b7:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 5bb:	e9 d8 00 00 00       	jmp    698 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 5c0:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 5c4:	74 06                	je     5cc <printf+0xa4>
+ 5c6:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 5ca:	75 1e                	jne    5ea <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 5cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 5cf:	8b 00                	mov    (%eax),%eax
+ 5d1:	6a 00                	push   $0x0
+ 5d3:	6a 10                	push   $0x10
+ 5d5:	50                   	push   %eax
+ 5d6:	ff 75 08             	pushl  0x8(%ebp)
+ 5d9:	e8 96 fe ff ff       	call   474 <printint>
+ 5de:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 5e1:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 5e5:	e9 ae 00 00 00       	jmp    698 <printf+0x170>
+      } else if(c == 's'){
+ 5ea:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 5ee:	75 43                	jne    633 <printf+0x10b>
+        s = (char*)*ap;
+ 5f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 5f3:	8b 00                	mov    (%eax),%eax
+ 5f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 5f8:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 5fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 600:	75 25                	jne    627 <printf+0xff>
+          s = "(null)";
+ 602:	c7 45 f4 01 09 00 00 	movl   $0x901,-0xc(%ebp)
+        while(*s != 0){
+ 609:	eb 1c                	jmp    627 <printf+0xff>
+          putc(fd, *s);
+ 60b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 60e:	0f b6 00             	movzbl (%eax),%eax
+ 611:	0f be c0             	movsbl %al,%eax
+ 614:	83 ec 08             	sub    $0x8,%esp
+ 617:	50                   	push   %eax
+ 618:	ff 75 08             	pushl  0x8(%ebp)
+ 61b:	e8 31 fe ff ff       	call   451 <putc>
+ 620:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 623:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 627:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 62a:	0f b6 00             	movzbl (%eax),%eax
+ 62d:	84 c0                	test   %al,%al
+ 62f:	75 da                	jne    60b <printf+0xe3>
+ 631:	eb 65                	jmp    698 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 633:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 637:	75 1d                	jne    656 <printf+0x12e>
+        putc(fd, *ap);
+ 639:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 63c:	8b 00                	mov    (%eax),%eax
+ 63e:	0f be c0             	movsbl %al,%eax
+ 641:	83 ec 08             	sub    $0x8,%esp
+ 644:	50                   	push   %eax
+ 645:	ff 75 08             	pushl  0x8(%ebp)
+ 648:	e8 04 fe ff ff       	call   451 <putc>
+ 64d:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 650:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 654:	eb 42                	jmp    698 <printf+0x170>
+      } else if(c == '%'){
+ 656:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 65a:	75 17                	jne    673 <printf+0x14b>
+        putc(fd, c);
+ 65c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 65f:	0f be c0             	movsbl %al,%eax
+ 662:	83 ec 08             	sub    $0x8,%esp
+ 665:	50                   	push   %eax
+ 666:	ff 75 08             	pushl  0x8(%ebp)
+ 669:	e8 e3 fd ff ff       	call   451 <putc>
+ 66e:	83 c4 10             	add    $0x10,%esp
+ 671:	eb 25                	jmp    698 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 673:	83 ec 08             	sub    $0x8,%esp
+ 676:	6a 25                	push   $0x25
+ 678:	ff 75 08             	pushl  0x8(%ebp)
+ 67b:	e8 d1 fd ff ff       	call   451 <putc>
+ 680:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 683:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 686:	0f be c0             	movsbl %al,%eax
+ 689:	83 ec 08             	sub    $0x8,%esp
+ 68c:	50                   	push   %eax
+ 68d:	ff 75 08             	pushl  0x8(%ebp)
+ 690:	e8 bc fd ff ff       	call   451 <putc>
+ 695:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 698:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 69f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 6a3:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 6a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 6a9:	01 d0                	add    %edx,%eax
+ 6ab:	0f b6 00             	movzbl (%eax),%eax
+ 6ae:	84 c0                	test   %al,%al
+ 6b0:	0f 85 94 fe ff ff    	jne    54a <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 6b6:	90                   	nop
+ 6b7:	c9                   	leave  
+ 6b8:	c3                   	ret    
+
+000006b9 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6b9:	55                   	push   %ebp
+ 6ba:	89 e5                	mov    %esp,%ebp
+ 6bc:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6bf:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6c2:	83 e8 08             	sub    $0x8,%eax
+ 6c5:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c8:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+ 6cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 6d0:	eb 24                	jmp    6f6 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6d5:	8b 00                	mov    (%eax),%eax
+ 6d7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 6da:	77 12                	ja     6ee <free+0x35>
+ 6dc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6df:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 6e2:	77 24                	ja     708 <free+0x4f>
+ 6e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6e7:	8b 00                	mov    (%eax),%eax
+ 6e9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 6ec:	77 1a                	ja     708 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 6f1:	8b 00                	mov    (%eax),%eax
+ 6f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 6f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 6f9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 6fc:	76 d4                	jbe    6d2 <free+0x19>
+ 6fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 701:	8b 00                	mov    (%eax),%eax
+ 703:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 706:	76 ca                	jbe    6d2 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 708:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 70b:	8b 40 04             	mov    0x4(%eax),%eax
+ 70e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 715:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 718:	01 c2                	add    %eax,%edx
+ 71a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 71d:	8b 00                	mov    (%eax),%eax
+ 71f:	39 c2                	cmp    %eax,%edx
+ 721:	75 24                	jne    747 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 723:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 726:	8b 50 04             	mov    0x4(%eax),%edx
+ 729:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 72c:	8b 00                	mov    (%eax),%eax
+ 72e:	8b 40 04             	mov    0x4(%eax),%eax
+ 731:	01 c2                	add    %eax,%edx
+ 733:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 736:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 739:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 73c:	8b 00                	mov    (%eax),%eax
+ 73e:	8b 10                	mov    (%eax),%edx
+ 740:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 743:	89 10                	mov    %edx,(%eax)
+ 745:	eb 0a                	jmp    751 <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 747:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 74a:	8b 10                	mov    (%eax),%edx
+ 74c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 74f:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 751:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 754:	8b 40 04             	mov    0x4(%eax),%eax
+ 757:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 75e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 761:	01 d0                	add    %edx,%eax
+ 763:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 766:	75 20                	jne    788 <free+0xcf>
+    p->s.size += bp->s.size;
+ 768:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 76b:	8b 50 04             	mov    0x4(%eax),%edx
+ 76e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 771:	8b 40 04             	mov    0x4(%eax),%eax
+ 774:	01 c2                	add    %eax,%edx
+ 776:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 779:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 77c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 77f:	8b 10                	mov    (%eax),%edx
+ 781:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 784:	89 10                	mov    %edx,(%eax)
+ 786:	eb 08                	jmp    790 <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 788:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 78b:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 78e:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 790:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 793:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+}
+ 798:	90                   	nop
+ 799:	c9                   	leave  
+ 79a:	c3                   	ret    
+
+0000079b <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 79b:	55                   	push   %ebp
+ 79c:	89 e5                	mov    %esp,%ebp
+ 79e:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 7a1:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 7a8:	77 07                	ja     7b1 <morecore+0x16>
+    nu = 4096;
+ 7aa:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 7b1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7b4:	c1 e0 03             	shl    $0x3,%eax
+ 7b7:	83 ec 0c             	sub    $0xc,%esp
+ 7ba:	50                   	push   %eax
+ 7bb:	e8 71 fc ff ff       	call   431 <sbrk>
+ 7c0:	83 c4 10             	add    $0x10,%esp
+ 7c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 7c6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 7ca:	75 07                	jne    7d3 <morecore+0x38>
+    return 0;
+ 7cc:	b8 00 00 00 00       	mov    $0x0,%eax
+ 7d1:	eb 26                	jmp    7f9 <morecore+0x5e>
+  hp = (Header*)p;
+ 7d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 7d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7dc:	8b 55 08             	mov    0x8(%ebp),%edx
+ 7df:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 7e5:	83 c0 08             	add    $0x8,%eax
+ 7e8:	83 ec 0c             	sub    $0xc,%esp
+ 7eb:	50                   	push   %eax
+ 7ec:	e8 c8 fe ff ff       	call   6b9 <free>
+ 7f1:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 7f4:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+}
+ 7f9:	c9                   	leave  
+ 7fa:	c3                   	ret    
+
+000007fb <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 7fb:	55                   	push   %ebp
+ 7fc:	89 e5                	mov    %esp,%ebp
+ 7fe:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 801:	8b 45 08             	mov    0x8(%ebp),%eax
+ 804:	83 c0 07             	add    $0x7,%eax
+ 807:	c1 e8 03             	shr    $0x3,%eax
+ 80a:	83 c0 01             	add    $0x1,%eax
+ 80d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 810:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+ 815:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 818:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 81c:	75 23                	jne    841 <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 81e:	c7 45 f0 64 0b 00 00 	movl   $0xb64,-0x10(%ebp)
+ 825:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 828:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+ 82d:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+ 832:	a3 64 0b 00 00       	mov    %eax,0xb64
+    base.s.size = 0;
+ 837:	c7 05 68 0b 00 00 00 	movl   $0x0,0xb68
+ 83e:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 841:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 844:	8b 00                	mov    (%eax),%eax
+ 846:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 849:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 84c:	8b 40 04             	mov    0x4(%eax),%eax
+ 84f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 852:	72 4d                	jb     8a1 <malloc+0xa6>
+      if(p->s.size == nunits)
+ 854:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 857:	8b 40 04             	mov    0x4(%eax),%eax
+ 85a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 85d:	75 0c                	jne    86b <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 85f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 862:	8b 10                	mov    (%eax),%edx
+ 864:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 867:	89 10                	mov    %edx,(%eax)
+ 869:	eb 26                	jmp    891 <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 86b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 86e:	8b 40 04             	mov    0x4(%eax),%eax
+ 871:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 874:	89 c2                	mov    %eax,%edx
+ 876:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 879:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 87c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 87f:	8b 40 04             	mov    0x4(%eax),%eax
+ 882:	c1 e0 03             	shl    $0x3,%eax
+ 885:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 888:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 88b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 88e:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 891:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 894:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+      return (void*)(p + 1);
+ 899:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 89c:	83 c0 08             	add    $0x8,%eax
+ 89f:	eb 3b                	jmp    8dc <malloc+0xe1>
+    }
+    if(p == freep)
+ 8a1:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+ 8a6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 8a9:	75 1e                	jne    8c9 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 8ab:	83 ec 0c             	sub    $0xc,%esp
+ 8ae:	ff 75 ec             	pushl  -0x14(%ebp)
+ 8b1:	e8 e5 fe ff ff       	call   79b <morecore>
+ 8b6:	83 c4 10             	add    $0x10,%esp
+ 8b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 8bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 8c0:	75 07                	jne    8c9 <malloc+0xce>
+        return 0;
+ 8c2:	b8 00 00 00 00       	mov    $0x0,%eax
+ 8c7:	eb 13                	jmp    8dc <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 8cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8d2:	8b 00                	mov    (%eax),%eax
+ 8d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 8d7:	e9 6d ff ff ff       	jmp    849 <malloc+0x4e>
+}
+ 8dc:	c9                   	leave  
+ 8dd:	c3                   	ret    
diff -rupN xv6-unrc/stressfs.sym xv6-mod/stressfs.sym
--- xv6-unrc/stressfs.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/stressfs.sym	2018-04-04 14:53:55.455468383 -0300
@@ -0,0 +1,61 @@
+00000000 .text
+000008de .rodata
+00000908 .eh_frame
+00000b50 .data
+00000b64 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 stressfs.c
+00000000 ulib.c
+00000152 stosb
+00000000 printf.c
+00000451 putc
+00000474 printint
+00000b50 digits.1109
+00000000 umalloc.c
+00000b64 base
+00000b6c freep
+0000079b morecore
+00000178 strcpy
+00000528 printf
+00000364 memmove
+000003f1 mknod
+0000025b gets
+00000429 getpid
+000007fb malloc
+00000449 procstat
+00000439 sleep
+000003b9 pipe
+000003c9 write
+00000401 fstat
+000003d9 kill
+00000419 chdir
+000003e1 exec
+000003b1 wait
+000003c1 read
+000003f9 unlink
+000003a1 fork
+00000431 sbrk
+00000441 uptime
+00000b61 __bss_start
+0000020e memset
+00000000 main
+000001a8 strcmp
+00000421 dup
+000002ca stat
+00000b61 _edata
+00000b70 _end
+00000409 link
+000003a9 exit
+00000317 atoi
+000001e7 strlen
+000003e9 open
+00000228 strchr
+00000411 mkdir
+000003d1 close
+000006b9 free
Los archivos binarios xv6-unrc/._string.c y xv6-mod/._string.c son distintos
diff -rupN xv6-unrc/string.d xv6-mod/string.d
--- xv6-unrc/string.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/string.d	2018-04-04 14:54:02.419538231 -0300
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Los archivos binarios xv6-unrc/string.o y xv6-mod/string.o son distintos
Los archivos binarios xv6-unrc/swtch.o y xv6-mod/swtch.o son distintos
Los archivos binarios xv6-unrc/._swtch.S y xv6-mod/._swtch.S son distintos
Los archivos binarios xv6-unrc/._symlink.patch y xv6-mod/._symlink.patch son distintos
Los archivos binarios xv6-unrc/._syscall.c y xv6-mod/._syscall.c son distintos
diff -rupN xv6-unrc/syscall.c xv6-mod/syscall.c
--- xv6-unrc/syscall.c	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/syscall.c	2018-04-04 14:48:29.748201638 -0300
@@ -98,6 +98,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_procstat(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +122,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_procstat] sys_procstat,
 };
 
 void
diff -rupN xv6-unrc/syscall.d xv6-mod/syscall.d
--- xv6-unrc/syscall.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/syscall.d	2018-04-04 14:54:02.687540919 -0300
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h
Los archivos binarios xv6-unrc/._syscall.h y xv6-mod/._syscall.h son distintos
diff -rupN xv6-unrc/syscall.h xv6-mod/syscall.h
--- xv6-unrc/syscall.h	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/syscall.h	2018-04-04 14:39:38.946877861 -0300
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_procstat  22
Los archivos binarios xv6-unrc/syscall.o y xv6-mod/syscall.o son distintos
Los archivos binarios xv6-unrc/._sysfile.c y xv6-mod/._sysfile.c son distintos
diff -rupN xv6-unrc/sysfile.d xv6-mod/sysfile.d
--- xv6-unrc/sysfile.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/sysfile.d	2018-04-04 14:54:03.079544851 -0300
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h file.h fcntl.h
Los archivos binarios xv6-unrc/sysfile.o y xv6-mod/sysfile.o son distintos
Los archivos binarios xv6-unrc/._sysproc.c y xv6-mod/._sysproc.c son distintos
diff -rupN xv6-unrc/sysproc.c xv6-mod/sysproc.c
--- xv6-unrc/sysproc.c	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/sysproc.c	2018-04-04 15:18:36.626324081 -0300
@@ -89,3 +89,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//
+int
+sys_procstat(void)
+{
+  cprintf("SE EJECUTA EL SYS_PROCSTAT\n");
+  procdump();// ejecutamos la funcion procdump definida en proc.c
+  return 0;
+}
diff -rupN xv6-unrc/sysproc.d xv6-mod/sysproc.d
--- xv6-unrc/sysproc.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/sysproc.d	2018-04-04 15:21:49.444257987 -0300
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h
Los archivos binarios xv6-unrc/sysproc.o y xv6-mod/sysproc.o son distintos
Los archivos binarios xv6-unrc/._timer.c y xv6-mod/._timer.c son distintos
diff -rupN xv6-unrc/timer.d xv6-mod/timer.d
--- xv6-unrc/timer.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/timer.d	2018-04-04 14:54:48.760003012 -0300
@@ -0,0 +1 @@
+timer.o: timer.c /usr/include/stdc-predef.h types.h defs.h traps.h x86.h
Los archivos binarios xv6-unrc/timer.o y xv6-mod/timer.o son distintos
Los archivos binarios xv6-unrc/._toc.ftr y xv6-mod/._toc.ftr son distintos
Los archivos binarios xv6-unrc/._toc.hdr y xv6-mod/._toc.hdr son distintos
Los archivos binarios xv6-unrc/trapasm.o y xv6-mod/trapasm.o son distintos
Los archivos binarios xv6-unrc/._trapasm.S y xv6-mod/._trapasm.S son distintos
Los archivos binarios xv6-unrc/._trap.c y xv6-mod/._trap.c son distintos
diff -rupN xv6-unrc/trap.c xv6-mod/trap.c
--- xv6-unrc/trap.c	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/trap.c	2018-04-04 14:44:00.037496523 -0300
@@ -102,9 +102,14 @@ trap(struct trapframe *tf)
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
-
+  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
+    proc->ticks++;
+    if(proc->ticks % TIMESLICE==0){
+      //cprintf("proceso pid=%d ejecuta el yield en el tick %d \n",proc->pid,proc->ticks);
+      proc->ticks=0;
+      yield();
+    }
+  }
   // Check if the process has been killed since we yielded
   if(proc && proc->killed && (tf->cs&3) == DPL_USER)
     exit();
diff -rupN xv6-unrc/trap.d xv6-mod/trap.d
--- xv6-unrc/trap.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/trap.d	2018-04-04 14:54:49.048005901 -0300
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Los archivos binarios xv6-unrc/trap.o y xv6-mod/trap.o son distintos
Los archivos binarios xv6-unrc/._traps.h y xv6-mod/._traps.h son distintos
Los archivos binarios xv6-unrc/._TRICKS y xv6-mod/._TRICKS son distintos
Los archivos binarios xv6-unrc/._types.h y xv6-mod/._types.h son distintos
Los archivos binarios xv6-unrc/._uart.c y xv6-mod/._uart.c son distintos
diff -rupN xv6-unrc/uart.d xv6-mod/uart.d
--- xv6-unrc/uart.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/uart.d	2018-04-04 14:54:49.276008187 -0300
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h fs.h file.h mmu.h proc.h x86.h
Los archivos binarios xv6-unrc/uart.o y xv6-mod/uart.o son distintos
diff -rupN xv6-unrc/user/cat.d xv6-mod/user/cat.d
--- xv6-unrc/user/cat.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/cat.d	2018-04-04 14:53:51.671430430 -0300
@@ -0,0 +1,2 @@
+user/cat.o: user/cat.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h
Los archivos binarios xv6-unrc/user/cat.o y xv6-mod/user/cat.o son distintos
diff -rupN xv6-unrc/user/echo.d xv6-mod/user/echo.d
--- xv6-unrc/user/echo.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/echo.d	2018-04-04 14:53:51.971433439 -0300
@@ -0,0 +1,2 @@
+user/echo.o: user/echo.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h
Los archivos binarios xv6-unrc/user/echo.o y xv6-mod/user/echo.o son distintos
diff -rupN xv6-unrc/user/forktest.c xv6-mod/user/forktest.c
--- xv6-unrc/user/forktest.c	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/user/forktest.c	2018-04-04 15:27:34.663720435 -0300
@@ -21,11 +21,14 @@ forktest(void)
   printf(1, "fork test\n");
 
   for(n=0; n<N; n++){
+    if(n==5){     //en la sexta iteracion del ciclo, se ejecuta procstat
+      procstat();
+    }
     pid = fork();
     if(pid < 0)
       break;
     if(pid == 0)
-      exit();
+     exit();
   }
   
   if(n == N){
diff -rupN xv6-unrc/user/forktest.d xv6-mod/user/forktest.d
--- xv6-unrc/user/forktest.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/forktest.d	2018-04-04 15:15:42.628578937 -0300
@@ -0,0 +1,2 @@
+user/forktest.o: user/forktest.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h
Los archivos binarios xv6-unrc/user/forktest.o y xv6-mod/user/forktest.o son distintos
diff -rupN xv6-unrc/user/grep.d xv6-mod/user/grep.d
--- xv6-unrc/user/grep.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/grep.d	2018-04-04 14:53:52.603439778 -0300
@@ -0,0 +1,2 @@
+user/grep.o: user/grep.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h
Los archivos binarios xv6-unrc/user/grep.o y xv6-mod/user/grep.o son distintos
diff -rupN xv6-unrc/user/init.d xv6-mod/user/init.d
--- xv6-unrc/user/init.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/init.d	2018-04-04 14:53:52.935443108 -0300
@@ -0,0 +1,2 @@
+user/init.o: user/init.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h user/fcntl.h
Los archivos binarios xv6-unrc/user/init.o y xv6-mod/user/init.o son distintos
diff -rupN xv6-unrc/user/kill.d xv6-mod/user/kill.d
--- xv6-unrc/user/kill.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/kill.d	2018-04-04 14:53:53.215445917 -0300
@@ -0,0 +1,2 @@
+user/kill.o: user/kill.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h
Los archivos binarios xv6-unrc/user/kill.o y xv6-mod/user/kill.o son distintos
diff -rupN xv6-unrc/user/ln.d xv6-mod/user/ln.d
--- xv6-unrc/user/ln.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/ln.d	2018-04-04 14:53:53.491448685 -0300
@@ -0,0 +1,2 @@
+user/ln.o: user/ln.c /usr/include/stdc-predef.h user/types.h user/stat.h \
+ user/user.h
Los archivos binarios xv6-unrc/user/ln.o y xv6-mod/user/ln.o son distintos
diff -rupN xv6-unrc/user/ls.d xv6-mod/user/ls.d
--- xv6-unrc/user/ls.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/ls.d	2018-04-04 14:53:53.807451855 -0300
@@ -0,0 +1,2 @@
+user/ls.o: user/ls.c /usr/include/stdc-predef.h user/types.h user/stat.h \
+ user/user.h user/fs.h
Los archivos binarios xv6-unrc/user/ls.o y xv6-mod/user/ls.o son distintos
diff -rupN xv6-unrc/user/mkdir.d xv6-mod/user/mkdir.d
--- xv6-unrc/user/mkdir.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/mkdir.d	2018-04-04 14:53:54.127455064 -0300
@@ -0,0 +1,2 @@
+user/mkdir.o: user/mkdir.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h
Los archivos binarios xv6-unrc/user/mkdir.o y xv6-mod/user/mkdir.o son distintos
diff -rupN xv6-unrc/user/param.h xv6-mod/user/param.h
--- xv6-unrc/user/param.h	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/user/param.h	2018-03-31 17:16:49.576199968 -0300
@@ -10,4 +10,4 @@
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data sectors in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-
+#define TIMESLICE    3  //amount of ticks per burst of execution
diff -rupN xv6-unrc/user/printf.d xv6-mod/user/printf.d
--- xv6-unrc/user/printf.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/printf.d	2018-04-04 14:53:51.287426579 -0300
@@ -0,0 +1,2 @@
+user/printf.o: user/printf.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h
Los archivos binarios xv6-unrc/user/printf.o y xv6-mod/user/printf.o son distintos
diff -rupN xv6-unrc/user/rm.d xv6-mod/user/rm.d
--- xv6-unrc/user/rm.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/rm.d	2018-04-04 14:53:54.415457953 -0300
@@ -0,0 +1,2 @@
+user/rm.o: user/rm.c /usr/include/stdc-predef.h user/types.h user/stat.h \
+ user/user.h
Los archivos binarios xv6-unrc/user/rm.o y xv6-mod/user/rm.o son distintos
diff -rupN xv6-unrc/user/sh.d xv6-mod/user/sh.d
--- xv6-unrc/user/sh.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/sh.d	2018-04-04 14:53:54.991463729 -0300
@@ -0,0 +1,2 @@
+user/sh.o: user/sh.c /usr/include/stdc-predef.h user/types.h user/user.h \
+ user/fcntl.h
Los archivos binarios xv6-unrc/user/sh.o y xv6-mod/user/sh.o son distintos
diff -rupN xv6-unrc/user/stressfs.d xv6-mod/user/stressfs.d
--- xv6-unrc/user/stressfs.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/stressfs.d	2018-04-04 14:53:55.323467059 -0300
@@ -0,0 +1,2 @@
+user/stressfs.o: user/stressfs.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h user/fs.h user/fcntl.h
Los archivos binarios xv6-unrc/user/stressfs.o y xv6-mod/user/stressfs.o son distintos
diff -rupN xv6-unrc/user/syscall.h xv6-mod/user/syscall.h
--- xv6-unrc/user/syscall.h	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/user/syscall.h	2018-04-04 14:39:38.946877861 -0300
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_procstat  22
diff -rupN xv6-unrc/user/ulib.d xv6-mod/user/ulib.d
--- xv6-unrc/user/ulib.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/ulib.d	2018-04-04 14:53:51.015423851 -0300
@@ -0,0 +1,2 @@
+user/ulib.o: user/ulib.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/fcntl.h user/user.h user/x86.h
Los archivos binarios xv6-unrc/user/ulib.o y xv6-mod/user/ulib.o son distintos
diff -rupN xv6-unrc/user/umalloc.d xv6-mod/user/umalloc.d
--- xv6-unrc/user/umalloc.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/umalloc.d	2018-04-04 14:53:51.471428425 -0300
@@ -0,0 +1,2 @@
+user/umalloc.o: user/umalloc.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h user/param.h
Los archivos binarios xv6-unrc/user/umalloc.o y xv6-mod/user/umalloc.o son distintos
diff -rupN xv6-unrc/user/user.h xv6-mod/user/user.h
--- xv6-unrc/user/user.h	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/user/user.h	2018-04-04 14:49:52.385030460 -0300
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int procstat(void);
 
 // ulib.c
 int stat(char*, struct stat*);
diff -rupN xv6-unrc/user/usertests.d xv6-mod/user/usertests.d
--- xv6-unrc/user/usertests.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/usertests.d	2018-04-04 14:53:56.463478494 -0300
@@ -0,0 +1,3 @@
+user/usertests.o: user/usertests.c /usr/include/stdc-predef.h \
+ user/param.h user/types.h user/stat.h user/user.h user/fs.h user/fcntl.h \
+ user/syscall.h user/traps.h user/memlayout.h
Los archivos binarios xv6-unrc/user/usertests.o y xv6-mod/user/usertests.o son distintos
Los archivos binarios xv6-unrc/user/usys.o y xv6-mod/user/usys.o son distintos
diff -rupN xv6-unrc/user/usys.S xv6-mod/user/usys.S
--- xv6-unrc/user/usys.S	2015-04-08 15:02:06.000000000 -0300
+++ xv6-mod/user/usys.S	2018-04-04 14:39:14.038628038 -0300
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(procstat) 
diff -rupN xv6-unrc/user/wc.d xv6-mod/user/wc.d
--- xv6-unrc/user/wc.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/wc.d	2018-04-04 14:53:56.975483629 -0300
@@ -0,0 +1,2 @@
+user/wc.o: user/wc.c /usr/include/stdc-predef.h user/types.h user/stat.h \
+ user/user.h
Los archivos binarios xv6-unrc/user/wc.o y xv6-mod/user/wc.o son distintos
diff -rupN xv6-unrc/user/zombie.d xv6-mod/user/zombie.d
--- xv6-unrc/user/zombie.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/user/zombie.d	2018-04-04 14:53:57.271486598 -0300
@@ -0,0 +1,2 @@
+user/zombie.o: user/zombie.c /usr/include/stdc-predef.h user/types.h \
+ user/stat.h user/user.h
Los archivos binarios xv6-unrc/user/zombie.o y xv6-mod/user/zombie.o son distintos
Los archivos binarios xv6-unrc/._user y xv6-mod/._user son distintos
Los archivos binarios xv6-unrc/_usertests y xv6-mod/_usertests son distintos
diff -rupN xv6-unrc/usertests.asm xv6-mod/usertests.asm
--- xv6-unrc/usertests.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/usertests.asm	2018-04-04 14:53:56.831482185 -0300
@@ -0,0 +1,7944 @@
+
+_usertests:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <iputtest>:
+int stdout = 1;
+
+// does chdir() call iput(p->cwd) in a transaction?
+void
+iputtest(void)
+{
+       0:	55                   	push   %ebp
+       1:	89 e5                	mov    %esp,%ebp
+       3:	83 ec 08             	sub    $0x8,%esp
+  printf(stdout, "iput test\n");
+       6:	a1 c0 62 00 00       	mov    0x62c0,%eax
+       b:	83 ec 08             	sub    $0x8,%esp
+       e:	68 1a 44 00 00       	push   $0x441a
+      13:	50                   	push   %eax
+      14:	e8 35 40 00 00       	call   404e <printf>
+      19:	83 c4 10             	add    $0x10,%esp
+
+  if(mkdir("iputdir") < 0){
+      1c:	83 ec 0c             	sub    $0xc,%esp
+      1f:	68 25 44 00 00       	push   $0x4425
+      24:	e8 0e 3f 00 00       	call   3f37 <mkdir>
+      29:	83 c4 10             	add    $0x10,%esp
+      2c:	85 c0                	test   %eax,%eax
+      2e:	79 1b                	jns    4b <iputtest+0x4b>
+    printf(stdout, "mkdir failed\n");
+      30:	a1 c0 62 00 00       	mov    0x62c0,%eax
+      35:	83 ec 08             	sub    $0x8,%esp
+      38:	68 2d 44 00 00       	push   $0x442d
+      3d:	50                   	push   %eax
+      3e:	e8 0b 40 00 00       	call   404e <printf>
+      43:	83 c4 10             	add    $0x10,%esp
+    exit();
+      46:	e8 84 3e 00 00       	call   3ecf <exit>
+  }
+  if(chdir("iputdir") < 0){
+      4b:	83 ec 0c             	sub    $0xc,%esp
+      4e:	68 25 44 00 00       	push   $0x4425
+      53:	e8 e7 3e 00 00       	call   3f3f <chdir>
+      58:	83 c4 10             	add    $0x10,%esp
+      5b:	85 c0                	test   %eax,%eax
+      5d:	79 1b                	jns    7a <iputtest+0x7a>
+    printf(stdout, "chdir iputdir failed\n");
+      5f:	a1 c0 62 00 00       	mov    0x62c0,%eax
+      64:	83 ec 08             	sub    $0x8,%esp
+      67:	68 3b 44 00 00       	push   $0x443b
+      6c:	50                   	push   %eax
+      6d:	e8 dc 3f 00 00       	call   404e <printf>
+      72:	83 c4 10             	add    $0x10,%esp
+    exit();
+      75:	e8 55 3e 00 00       	call   3ecf <exit>
+  }
+  if(unlink("../iputdir") < 0){
+      7a:	83 ec 0c             	sub    $0xc,%esp
+      7d:	68 51 44 00 00       	push   $0x4451
+      82:	e8 98 3e 00 00       	call   3f1f <unlink>
+      87:	83 c4 10             	add    $0x10,%esp
+      8a:	85 c0                	test   %eax,%eax
+      8c:	79 1b                	jns    a9 <iputtest+0xa9>
+    printf(stdout, "unlink ../iputdir failed\n");
+      8e:	a1 c0 62 00 00       	mov    0x62c0,%eax
+      93:	83 ec 08             	sub    $0x8,%esp
+      96:	68 5c 44 00 00       	push   $0x445c
+      9b:	50                   	push   %eax
+      9c:	e8 ad 3f 00 00       	call   404e <printf>
+      a1:	83 c4 10             	add    $0x10,%esp
+    exit();
+      a4:	e8 26 3e 00 00       	call   3ecf <exit>
+  }
+  if(chdir("/") < 0){
+      a9:	83 ec 0c             	sub    $0xc,%esp
+      ac:	68 76 44 00 00       	push   $0x4476
+      b1:	e8 89 3e 00 00       	call   3f3f <chdir>
+      b6:	83 c4 10             	add    $0x10,%esp
+      b9:	85 c0                	test   %eax,%eax
+      bb:	79 1b                	jns    d8 <iputtest+0xd8>
+    printf(stdout, "chdir / failed\n");
+      bd:	a1 c0 62 00 00       	mov    0x62c0,%eax
+      c2:	83 ec 08             	sub    $0x8,%esp
+      c5:	68 78 44 00 00       	push   $0x4478
+      ca:	50                   	push   %eax
+      cb:	e8 7e 3f 00 00       	call   404e <printf>
+      d0:	83 c4 10             	add    $0x10,%esp
+    exit();
+      d3:	e8 f7 3d 00 00       	call   3ecf <exit>
+  }
+  printf(stdout, "iput test ok\n");
+      d8:	a1 c0 62 00 00       	mov    0x62c0,%eax
+      dd:	83 ec 08             	sub    $0x8,%esp
+      e0:	68 88 44 00 00       	push   $0x4488
+      e5:	50                   	push   %eax
+      e6:	e8 63 3f 00 00       	call   404e <printf>
+      eb:	83 c4 10             	add    $0x10,%esp
+}
+      ee:	90                   	nop
+      ef:	c9                   	leave  
+      f0:	c3                   	ret    
+
+000000f1 <exitiputtest>:
+
+// does exit() call iput(p->cwd) in a transaction?
+void
+exitiputtest(void)
+{
+      f1:	55                   	push   %ebp
+      f2:	89 e5                	mov    %esp,%ebp
+      f4:	83 ec 18             	sub    $0x18,%esp
+  int pid;
+
+  printf(stdout, "exitiput test\n");
+      f7:	a1 c0 62 00 00       	mov    0x62c0,%eax
+      fc:	83 ec 08             	sub    $0x8,%esp
+      ff:	68 96 44 00 00       	push   $0x4496
+     104:	50                   	push   %eax
+     105:	e8 44 3f 00 00       	call   404e <printf>
+     10a:	83 c4 10             	add    $0x10,%esp
+
+  pid = fork();
+     10d:	e8 b5 3d 00 00       	call   3ec7 <fork>
+     112:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(pid < 0){
+     115:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     119:	79 1b                	jns    136 <exitiputtest+0x45>
+    printf(stdout, "fork failed\n");
+     11b:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     120:	83 ec 08             	sub    $0x8,%esp
+     123:	68 a5 44 00 00       	push   $0x44a5
+     128:	50                   	push   %eax
+     129:	e8 20 3f 00 00       	call   404e <printf>
+     12e:	83 c4 10             	add    $0x10,%esp
+    exit();
+     131:	e8 99 3d 00 00       	call   3ecf <exit>
+  }
+  if(pid == 0){
+     136:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     13a:	0f 85 92 00 00 00    	jne    1d2 <exitiputtest+0xe1>
+    if(mkdir("iputdir") < 0){
+     140:	83 ec 0c             	sub    $0xc,%esp
+     143:	68 25 44 00 00       	push   $0x4425
+     148:	e8 ea 3d 00 00       	call   3f37 <mkdir>
+     14d:	83 c4 10             	add    $0x10,%esp
+     150:	85 c0                	test   %eax,%eax
+     152:	79 1b                	jns    16f <exitiputtest+0x7e>
+      printf(stdout, "mkdir failed\n");
+     154:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     159:	83 ec 08             	sub    $0x8,%esp
+     15c:	68 2d 44 00 00       	push   $0x442d
+     161:	50                   	push   %eax
+     162:	e8 e7 3e 00 00       	call   404e <printf>
+     167:	83 c4 10             	add    $0x10,%esp
+      exit();
+     16a:	e8 60 3d 00 00       	call   3ecf <exit>
+    }
+    if(chdir("iputdir") < 0){
+     16f:	83 ec 0c             	sub    $0xc,%esp
+     172:	68 25 44 00 00       	push   $0x4425
+     177:	e8 c3 3d 00 00       	call   3f3f <chdir>
+     17c:	83 c4 10             	add    $0x10,%esp
+     17f:	85 c0                	test   %eax,%eax
+     181:	79 1b                	jns    19e <exitiputtest+0xad>
+      printf(stdout, "child chdir failed\n");
+     183:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     188:	83 ec 08             	sub    $0x8,%esp
+     18b:	68 b2 44 00 00       	push   $0x44b2
+     190:	50                   	push   %eax
+     191:	e8 b8 3e 00 00       	call   404e <printf>
+     196:	83 c4 10             	add    $0x10,%esp
+      exit();
+     199:	e8 31 3d 00 00       	call   3ecf <exit>
+    }
+    if(unlink("../iputdir") < 0){
+     19e:	83 ec 0c             	sub    $0xc,%esp
+     1a1:	68 51 44 00 00       	push   $0x4451
+     1a6:	e8 74 3d 00 00       	call   3f1f <unlink>
+     1ab:	83 c4 10             	add    $0x10,%esp
+     1ae:	85 c0                	test   %eax,%eax
+     1b0:	79 1b                	jns    1cd <exitiputtest+0xdc>
+      printf(stdout, "unlink ../iputdir failed\n");
+     1b2:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     1b7:	83 ec 08             	sub    $0x8,%esp
+     1ba:	68 5c 44 00 00       	push   $0x445c
+     1bf:	50                   	push   %eax
+     1c0:	e8 89 3e 00 00       	call   404e <printf>
+     1c5:	83 c4 10             	add    $0x10,%esp
+      exit();
+     1c8:	e8 02 3d 00 00       	call   3ecf <exit>
+    }
+    exit();
+     1cd:	e8 fd 3c 00 00       	call   3ecf <exit>
+  }
+  wait();
+     1d2:	e8 00 3d 00 00       	call   3ed7 <wait>
+  printf(stdout, "exitiput test ok\n");
+     1d7:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     1dc:	83 ec 08             	sub    $0x8,%esp
+     1df:	68 c6 44 00 00       	push   $0x44c6
+     1e4:	50                   	push   %eax
+     1e5:	e8 64 3e 00 00       	call   404e <printf>
+     1ea:	83 c4 10             	add    $0x10,%esp
+}
+     1ed:	90                   	nop
+     1ee:	c9                   	leave  
+     1ef:	c3                   	ret    
+
+000001f0 <openiputtest>:
+//      for(i = 0; i < 10000; i++)
+//        yield();
+//    }
+void
+openiputtest(void)
+{
+     1f0:	55                   	push   %ebp
+     1f1:	89 e5                	mov    %esp,%ebp
+     1f3:	83 ec 18             	sub    $0x18,%esp
+  int pid;
+
+  printf(stdout, "openiput test\n");
+     1f6:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     1fb:	83 ec 08             	sub    $0x8,%esp
+     1fe:	68 d8 44 00 00       	push   $0x44d8
+     203:	50                   	push   %eax
+     204:	e8 45 3e 00 00       	call   404e <printf>
+     209:	83 c4 10             	add    $0x10,%esp
+  if(mkdir("oidir") < 0){
+     20c:	83 ec 0c             	sub    $0xc,%esp
+     20f:	68 e7 44 00 00       	push   $0x44e7
+     214:	e8 1e 3d 00 00       	call   3f37 <mkdir>
+     219:	83 c4 10             	add    $0x10,%esp
+     21c:	85 c0                	test   %eax,%eax
+     21e:	79 1b                	jns    23b <openiputtest+0x4b>
+    printf(stdout, "mkdir oidir failed\n");
+     220:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     225:	83 ec 08             	sub    $0x8,%esp
+     228:	68 ed 44 00 00       	push   $0x44ed
+     22d:	50                   	push   %eax
+     22e:	e8 1b 3e 00 00       	call   404e <printf>
+     233:	83 c4 10             	add    $0x10,%esp
+    exit();
+     236:	e8 94 3c 00 00       	call   3ecf <exit>
+  }
+  pid = fork();
+     23b:	e8 87 3c 00 00       	call   3ec7 <fork>
+     240:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(pid < 0){
+     243:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     247:	79 1b                	jns    264 <openiputtest+0x74>
+    printf(stdout, "fork failed\n");
+     249:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     24e:	83 ec 08             	sub    $0x8,%esp
+     251:	68 a5 44 00 00       	push   $0x44a5
+     256:	50                   	push   %eax
+     257:	e8 f2 3d 00 00       	call   404e <printf>
+     25c:	83 c4 10             	add    $0x10,%esp
+    exit();
+     25f:	e8 6b 3c 00 00       	call   3ecf <exit>
+  }
+  if(pid == 0){
+     264:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     268:	75 3b                	jne    2a5 <openiputtest+0xb5>
+    int fd = open("oidir", O_RDWR);
+     26a:	83 ec 08             	sub    $0x8,%esp
+     26d:	6a 02                	push   $0x2
+     26f:	68 e7 44 00 00       	push   $0x44e7
+     274:	e8 96 3c 00 00       	call   3f0f <open>
+     279:	83 c4 10             	add    $0x10,%esp
+     27c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(fd >= 0){
+     27f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+     283:	78 1b                	js     2a0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     285:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     28a:	83 ec 08             	sub    $0x8,%esp
+     28d:	68 04 45 00 00       	push   $0x4504
+     292:	50                   	push   %eax
+     293:	e8 b6 3d 00 00       	call   404e <printf>
+     298:	83 c4 10             	add    $0x10,%esp
+      exit();
+     29b:	e8 2f 3c 00 00       	call   3ecf <exit>
+    }
+    exit();
+     2a0:	e8 2a 3c 00 00       	call   3ecf <exit>
+  }
+  sleep(1);
+     2a5:	83 ec 0c             	sub    $0xc,%esp
+     2a8:	6a 01                	push   $0x1
+     2aa:	e8 b0 3c 00 00       	call   3f5f <sleep>
+     2af:	83 c4 10             	add    $0x10,%esp
+  if(unlink("oidir") != 0){
+     2b2:	83 ec 0c             	sub    $0xc,%esp
+     2b5:	68 e7 44 00 00       	push   $0x44e7
+     2ba:	e8 60 3c 00 00       	call   3f1f <unlink>
+     2bf:	83 c4 10             	add    $0x10,%esp
+     2c2:	85 c0                	test   %eax,%eax
+     2c4:	74 1b                	je     2e1 <openiputtest+0xf1>
+    printf(stdout, "unlink failed\n");
+     2c6:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     2cb:	83 ec 08             	sub    $0x8,%esp
+     2ce:	68 28 45 00 00       	push   $0x4528
+     2d3:	50                   	push   %eax
+     2d4:	e8 75 3d 00 00       	call   404e <printf>
+     2d9:	83 c4 10             	add    $0x10,%esp
+    exit();
+     2dc:	e8 ee 3b 00 00       	call   3ecf <exit>
+  }
+  wait();
+     2e1:	e8 f1 3b 00 00       	call   3ed7 <wait>
+  printf(stdout, "openiput test ok\n");
+     2e6:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     2eb:	83 ec 08             	sub    $0x8,%esp
+     2ee:	68 37 45 00 00       	push   $0x4537
+     2f3:	50                   	push   %eax
+     2f4:	e8 55 3d 00 00       	call   404e <printf>
+     2f9:	83 c4 10             	add    $0x10,%esp
+}
+     2fc:	90                   	nop
+     2fd:	c9                   	leave  
+     2fe:	c3                   	ret    
+
+000002ff <opentest>:
+
+// simple file system tests
+
+void
+opentest(void)
+{
+     2ff:	55                   	push   %ebp
+     300:	89 e5                	mov    %esp,%ebp
+     302:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+
+  printf(stdout, "open test\n");
+     305:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     30a:	83 ec 08             	sub    $0x8,%esp
+     30d:	68 49 45 00 00       	push   $0x4549
+     312:	50                   	push   %eax
+     313:	e8 36 3d 00 00       	call   404e <printf>
+     318:	83 c4 10             	add    $0x10,%esp
+  fd = open("echo", 0);
+     31b:	83 ec 08             	sub    $0x8,%esp
+     31e:	6a 00                	push   $0x0
+     320:	68 04 44 00 00       	push   $0x4404
+     325:	e8 e5 3b 00 00       	call   3f0f <open>
+     32a:	83 c4 10             	add    $0x10,%esp
+     32d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+     330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     334:	79 1b                	jns    351 <opentest+0x52>
+    printf(stdout, "open echo failed!\n");
+     336:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     33b:	83 ec 08             	sub    $0x8,%esp
+     33e:	68 54 45 00 00       	push   $0x4554
+     343:	50                   	push   %eax
+     344:	e8 05 3d 00 00       	call   404e <printf>
+     349:	83 c4 10             	add    $0x10,%esp
+    exit();
+     34c:	e8 7e 3b 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+     351:	83 ec 0c             	sub    $0xc,%esp
+     354:	ff 75 f4             	pushl  -0xc(%ebp)
+     357:	e8 9b 3b 00 00       	call   3ef7 <close>
+     35c:	83 c4 10             	add    $0x10,%esp
+  fd = open("doesnotexist", 0);
+     35f:	83 ec 08             	sub    $0x8,%esp
+     362:	6a 00                	push   $0x0
+     364:	68 67 45 00 00       	push   $0x4567
+     369:	e8 a1 3b 00 00       	call   3f0f <open>
+     36e:	83 c4 10             	add    $0x10,%esp
+     371:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd >= 0){
+     374:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     378:	78 1b                	js     395 <opentest+0x96>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     37a:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     37f:	83 ec 08             	sub    $0x8,%esp
+     382:	68 74 45 00 00       	push   $0x4574
+     387:	50                   	push   %eax
+     388:	e8 c1 3c 00 00       	call   404e <printf>
+     38d:	83 c4 10             	add    $0x10,%esp
+    exit();
+     390:	e8 3a 3b 00 00       	call   3ecf <exit>
+  }
+  printf(stdout, "open test ok\n");
+     395:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     39a:	83 ec 08             	sub    $0x8,%esp
+     39d:	68 92 45 00 00       	push   $0x4592
+     3a2:	50                   	push   %eax
+     3a3:	e8 a6 3c 00 00       	call   404e <printf>
+     3a8:	83 c4 10             	add    $0x10,%esp
+}
+     3ab:	90                   	nop
+     3ac:	c9                   	leave  
+     3ad:	c3                   	ret    
+
+000003ae <writetest>:
+
+void
+writetest(void)
+{
+     3ae:	55                   	push   %ebp
+     3af:	89 e5                	mov    %esp,%ebp
+     3b1:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int i;
+
+  printf(stdout, "small file test\n");
+     3b4:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     3b9:	83 ec 08             	sub    $0x8,%esp
+     3bc:	68 a0 45 00 00       	push   $0x45a0
+     3c1:	50                   	push   %eax
+     3c2:	e8 87 3c 00 00       	call   404e <printf>
+     3c7:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_CREATE|O_RDWR);
+     3ca:	83 ec 08             	sub    $0x8,%esp
+     3cd:	68 02 02 00 00       	push   $0x202
+     3d2:	68 b1 45 00 00       	push   $0x45b1
+     3d7:	e8 33 3b 00 00       	call   3f0f <open>
+     3dc:	83 c4 10             	add    $0x10,%esp
+     3df:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(fd >= 0){
+     3e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+     3e6:	78 22                	js     40a <writetest+0x5c>
+    printf(stdout, "creat small succeeded; ok\n");
+     3e8:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     3ed:	83 ec 08             	sub    $0x8,%esp
+     3f0:	68 b7 45 00 00       	push   $0x45b7
+     3f5:	50                   	push   %eax
+     3f6:	e8 53 3c 00 00       	call   404e <printf>
+     3fb:	83 c4 10             	add    $0x10,%esp
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+    exit();
+  }
+  for(i = 0; i < 100; i++){
+     3fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     405:	e9 8f 00 00 00       	jmp    499 <writetest+0xeb>
+  printf(stdout, "small file test\n");
+  fd = open("small", O_CREATE|O_RDWR);
+  if(fd >= 0){
+    printf(stdout, "creat small succeeded; ok\n");
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+     40a:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     40f:	83 ec 08             	sub    $0x8,%esp
+     412:	68 d2 45 00 00       	push   $0x45d2
+     417:	50                   	push   %eax
+     418:	e8 31 3c 00 00       	call   404e <printf>
+     41d:	83 c4 10             	add    $0x10,%esp
+    exit();
+     420:	e8 aa 3a 00 00       	call   3ecf <exit>
+  }
+  for(i = 0; i < 100; i++){
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     425:	83 ec 04             	sub    $0x4,%esp
+     428:	6a 0a                	push   $0xa
+     42a:	68 ee 45 00 00       	push   $0x45ee
+     42f:	ff 75 f0             	pushl  -0x10(%ebp)
+     432:	e8 b8 3a 00 00       	call   3eef <write>
+     437:	83 c4 10             	add    $0x10,%esp
+     43a:	83 f8 0a             	cmp    $0xa,%eax
+     43d:	74 1e                	je     45d <writetest+0xaf>
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     43f:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     444:	83 ec 04             	sub    $0x4,%esp
+     447:	ff 75 f4             	pushl  -0xc(%ebp)
+     44a:	68 fc 45 00 00       	push   $0x45fc
+     44f:	50                   	push   %eax
+     450:	e8 f9 3b 00 00       	call   404e <printf>
+     455:	83 c4 10             	add    $0x10,%esp
+      exit();
+     458:	e8 72 3a 00 00       	call   3ecf <exit>
+    }
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     45d:	83 ec 04             	sub    $0x4,%esp
+     460:	6a 0a                	push   $0xa
+     462:	68 20 46 00 00       	push   $0x4620
+     467:	ff 75 f0             	pushl  -0x10(%ebp)
+     46a:	e8 80 3a 00 00       	call   3eef <write>
+     46f:	83 c4 10             	add    $0x10,%esp
+     472:	83 f8 0a             	cmp    $0xa,%eax
+     475:	74 1e                	je     495 <writetest+0xe7>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     477:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     47c:	83 ec 04             	sub    $0x4,%esp
+     47f:	ff 75 f4             	pushl  -0xc(%ebp)
+     482:	68 2c 46 00 00       	push   $0x462c
+     487:	50                   	push   %eax
+     488:	e8 c1 3b 00 00       	call   404e <printf>
+     48d:	83 c4 10             	add    $0x10,%esp
+      exit();
+     490:	e8 3a 3a 00 00       	call   3ecf <exit>
+    printf(stdout, "creat small succeeded; ok\n");
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+    exit();
+  }
+  for(i = 0; i < 100; i++){
+     495:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+     499:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+     49d:	7e 86                	jle    425 <writetest+0x77>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+      printf(stdout, "error: write bb %d new file failed\n", i);
+      exit();
+    }
+  }
+  printf(stdout, "writes ok\n");
+     49f:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     4a4:	83 ec 08             	sub    $0x8,%esp
+     4a7:	68 50 46 00 00       	push   $0x4650
+     4ac:	50                   	push   %eax
+     4ad:	e8 9c 3b 00 00       	call   404e <printf>
+     4b2:	83 c4 10             	add    $0x10,%esp
+  close(fd);
+     4b5:	83 ec 0c             	sub    $0xc,%esp
+     4b8:	ff 75 f0             	pushl  -0x10(%ebp)
+     4bb:	e8 37 3a 00 00       	call   3ef7 <close>
+     4c0:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_RDONLY);
+     4c3:	83 ec 08             	sub    $0x8,%esp
+     4c6:	6a 00                	push   $0x0
+     4c8:	68 b1 45 00 00       	push   $0x45b1
+     4cd:	e8 3d 3a 00 00       	call   3f0f <open>
+     4d2:	83 c4 10             	add    $0x10,%esp
+     4d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(fd >= 0){
+     4d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+     4dc:	78 3c                	js     51a <writetest+0x16c>
+    printf(stdout, "open small succeeded ok\n");
+     4de:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     4e3:	83 ec 08             	sub    $0x8,%esp
+     4e6:	68 5b 46 00 00       	push   $0x465b
+     4eb:	50                   	push   %eax
+     4ec:	e8 5d 3b 00 00       	call   404e <printf>
+     4f1:	83 c4 10             	add    $0x10,%esp
+  } else {
+    printf(stdout, "error: open small failed!\n");
+    exit();
+  }
+  i = read(fd, buf, 2000);
+     4f4:	83 ec 04             	sub    $0x4,%esp
+     4f7:	68 d0 07 00 00       	push   $0x7d0
+     4fc:	68 a0 8a 00 00       	push   $0x8aa0
+     501:	ff 75 f0             	pushl  -0x10(%ebp)
+     504:	e8 de 39 00 00       	call   3ee7 <read>
+     509:	83 c4 10             	add    $0x10,%esp
+     50c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(i == 2000){
+     50f:	81 7d f4 d0 07 00 00 	cmpl   $0x7d0,-0xc(%ebp)
+     516:	75 57                	jne    56f <writetest+0x1c1>
+     518:	eb 1b                	jmp    535 <writetest+0x187>
+  close(fd);
+  fd = open("small", O_RDONLY);
+  if(fd >= 0){
+    printf(stdout, "open small succeeded ok\n");
+  } else {
+    printf(stdout, "error: open small failed!\n");
+     51a:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     51f:	83 ec 08             	sub    $0x8,%esp
+     522:	68 74 46 00 00       	push   $0x4674
+     527:	50                   	push   %eax
+     528:	e8 21 3b 00 00       	call   404e <printf>
+     52d:	83 c4 10             	add    $0x10,%esp
+    exit();
+     530:	e8 9a 39 00 00       	call   3ecf <exit>
+  }
+  i = read(fd, buf, 2000);
+  if(i == 2000){
+    printf(stdout, "read succeeded ok\n");
+     535:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     53a:	83 ec 08             	sub    $0x8,%esp
+     53d:	68 8f 46 00 00       	push   $0x468f
+     542:	50                   	push   %eax
+     543:	e8 06 3b 00 00       	call   404e <printf>
+     548:	83 c4 10             	add    $0x10,%esp
+  } else {
+    printf(stdout, "read failed\n");
+    exit();
+  }
+  close(fd);
+     54b:	83 ec 0c             	sub    $0xc,%esp
+     54e:	ff 75 f0             	pushl  -0x10(%ebp)
+     551:	e8 a1 39 00 00       	call   3ef7 <close>
+     556:	83 c4 10             	add    $0x10,%esp
+
+  if(unlink("small") < 0){
+     559:	83 ec 0c             	sub    $0xc,%esp
+     55c:	68 b1 45 00 00       	push   $0x45b1
+     561:	e8 b9 39 00 00       	call   3f1f <unlink>
+     566:	83 c4 10             	add    $0x10,%esp
+     569:	85 c0                	test   %eax,%eax
+     56b:	79 38                	jns    5a5 <writetest+0x1f7>
+     56d:	eb 1b                	jmp    58a <writetest+0x1dc>
+  }
+  i = read(fd, buf, 2000);
+  if(i == 2000){
+    printf(stdout, "read succeeded ok\n");
+  } else {
+    printf(stdout, "read failed\n");
+     56f:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     574:	83 ec 08             	sub    $0x8,%esp
+     577:	68 a2 46 00 00       	push   $0x46a2
+     57c:	50                   	push   %eax
+     57d:	e8 cc 3a 00 00       	call   404e <printf>
+     582:	83 c4 10             	add    $0x10,%esp
+    exit();
+     585:	e8 45 39 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+
+  if(unlink("small") < 0){
+    printf(stdout, "unlink small failed\n");
+     58a:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     58f:	83 ec 08             	sub    $0x8,%esp
+     592:	68 af 46 00 00       	push   $0x46af
+     597:	50                   	push   %eax
+     598:	e8 b1 3a 00 00       	call   404e <printf>
+     59d:	83 c4 10             	add    $0x10,%esp
+    exit();
+     5a0:	e8 2a 39 00 00       	call   3ecf <exit>
+  }
+  printf(stdout, "small file test ok\n");
+     5a5:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     5aa:	83 ec 08             	sub    $0x8,%esp
+     5ad:	68 c4 46 00 00       	push   $0x46c4
+     5b2:	50                   	push   %eax
+     5b3:	e8 96 3a 00 00       	call   404e <printf>
+     5b8:	83 c4 10             	add    $0x10,%esp
+}
+     5bb:	90                   	nop
+     5bc:	c9                   	leave  
+     5bd:	c3                   	ret    
+
+000005be <writetest1>:
+
+void
+writetest1(void)
+{
+     5be:	55                   	push   %ebp
+     5bf:	89 e5                	mov    %esp,%ebp
+     5c1:	83 ec 18             	sub    $0x18,%esp
+  int i, fd, n;
+
+  printf(stdout, "big files test\n");
+     5c4:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     5c9:	83 ec 08             	sub    $0x8,%esp
+     5cc:	68 d8 46 00 00       	push   $0x46d8
+     5d1:	50                   	push   %eax
+     5d2:	e8 77 3a 00 00       	call   404e <printf>
+     5d7:	83 c4 10             	add    $0x10,%esp
+
+  fd = open("big", O_CREATE|O_RDWR);
+     5da:	83 ec 08             	sub    $0x8,%esp
+     5dd:	68 02 02 00 00       	push   $0x202
+     5e2:	68 e8 46 00 00       	push   $0x46e8
+     5e7:	e8 23 39 00 00       	call   3f0f <open>
+     5ec:	83 c4 10             	add    $0x10,%esp
+     5ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if(fd < 0){
+     5f2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+     5f6:	79 1b                	jns    613 <writetest1+0x55>
+    printf(stdout, "error: creat big failed!\n");
+     5f8:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     5fd:	83 ec 08             	sub    $0x8,%esp
+     600:	68 ec 46 00 00       	push   $0x46ec
+     605:	50                   	push   %eax
+     606:	e8 43 3a 00 00       	call   404e <printf>
+     60b:	83 c4 10             	add    $0x10,%esp
+    exit();
+     60e:	e8 bc 38 00 00       	call   3ecf <exit>
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+     613:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     61a:	eb 4b                	jmp    667 <writetest1+0xa9>
+    ((int*)buf)[0] = i;
+     61c:	ba a0 8a 00 00       	mov    $0x8aa0,%edx
+     621:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     624:	89 02                	mov    %eax,(%edx)
+    if(write(fd, buf, 512) != 512){
+     626:	83 ec 04             	sub    $0x4,%esp
+     629:	68 00 02 00 00       	push   $0x200
+     62e:	68 a0 8a 00 00       	push   $0x8aa0
+     633:	ff 75 ec             	pushl  -0x14(%ebp)
+     636:	e8 b4 38 00 00       	call   3eef <write>
+     63b:	83 c4 10             	add    $0x10,%esp
+     63e:	3d 00 02 00 00       	cmp    $0x200,%eax
+     643:	74 1e                	je     663 <writetest1+0xa5>
+      printf(stdout, "error: write big file failed\n", i);
+     645:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     64a:	83 ec 04             	sub    $0x4,%esp
+     64d:	ff 75 f4             	pushl  -0xc(%ebp)
+     650:	68 06 47 00 00       	push   $0x4706
+     655:	50                   	push   %eax
+     656:	e8 f3 39 00 00       	call   404e <printf>
+     65b:	83 c4 10             	add    $0x10,%esp
+      exit();
+     65e:	e8 6c 38 00 00       	call   3ecf <exit>
+  if(fd < 0){
+    printf(stdout, "error: creat big failed!\n");
+    exit();
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+     663:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+     667:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     66a:	3d 8b 00 00 00       	cmp    $0x8b,%eax
+     66f:	76 ab                	jbe    61c <writetest1+0x5e>
+      printf(stdout, "error: write big file failed\n", i);
+      exit();
+    }
+  }
+
+  close(fd);
+     671:	83 ec 0c             	sub    $0xc,%esp
+     674:	ff 75 ec             	pushl  -0x14(%ebp)
+     677:	e8 7b 38 00 00       	call   3ef7 <close>
+     67c:	83 c4 10             	add    $0x10,%esp
+
+  fd = open("big", O_RDONLY);
+     67f:	83 ec 08             	sub    $0x8,%esp
+     682:	6a 00                	push   $0x0
+     684:	68 e8 46 00 00       	push   $0x46e8
+     689:	e8 81 38 00 00       	call   3f0f <open>
+     68e:	83 c4 10             	add    $0x10,%esp
+     691:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if(fd < 0){
+     694:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+     698:	79 1b                	jns    6b5 <writetest1+0xf7>
+    printf(stdout, "error: open big failed!\n");
+     69a:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     69f:	83 ec 08             	sub    $0x8,%esp
+     6a2:	68 24 47 00 00       	push   $0x4724
+     6a7:	50                   	push   %eax
+     6a8:	e8 a1 39 00 00       	call   404e <printf>
+     6ad:	83 c4 10             	add    $0x10,%esp
+    exit();
+     6b0:	e8 1a 38 00 00       	call   3ecf <exit>
+  }
+
+  n = 0;
+     6b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  for(;;){
+    i = read(fd, buf, 512);
+     6bc:	83 ec 04             	sub    $0x4,%esp
+     6bf:	68 00 02 00 00       	push   $0x200
+     6c4:	68 a0 8a 00 00       	push   $0x8aa0
+     6c9:	ff 75 ec             	pushl  -0x14(%ebp)
+     6cc:	e8 16 38 00 00       	call   3ee7 <read>
+     6d1:	83 c4 10             	add    $0x10,%esp
+     6d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(i == 0){
+     6d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     6db:	75 27                	jne    704 <writetest1+0x146>
+      if(n == MAXFILE - 1){
+     6dd:	81 7d f0 8b 00 00 00 	cmpl   $0x8b,-0x10(%ebp)
+     6e4:	75 7d                	jne    763 <writetest1+0x1a5>
+        printf(stdout, "read only %d blocks from big", n);
+     6e6:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     6eb:	83 ec 04             	sub    $0x4,%esp
+     6ee:	ff 75 f0             	pushl  -0x10(%ebp)
+     6f1:	68 3d 47 00 00       	push   $0x473d
+     6f6:	50                   	push   %eax
+     6f7:	e8 52 39 00 00       	call   404e <printf>
+     6fc:	83 c4 10             	add    $0x10,%esp
+        exit();
+     6ff:	e8 cb 37 00 00       	call   3ecf <exit>
+      }
+      break;
+    } else if(i != 512){
+     704:	81 7d f4 00 02 00 00 	cmpl   $0x200,-0xc(%ebp)
+     70b:	74 1e                	je     72b <writetest1+0x16d>
+      printf(stdout, "read failed %d\n", i);
+     70d:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     712:	83 ec 04             	sub    $0x4,%esp
+     715:	ff 75 f4             	pushl  -0xc(%ebp)
+     718:	68 5a 47 00 00       	push   $0x475a
+     71d:	50                   	push   %eax
+     71e:	e8 2b 39 00 00       	call   404e <printf>
+     723:	83 c4 10             	add    $0x10,%esp
+      exit();
+     726:	e8 a4 37 00 00       	call   3ecf <exit>
+    }
+    if(((int*)buf)[0] != n){
+     72b:	b8 a0 8a 00 00       	mov    $0x8aa0,%eax
+     730:	8b 00                	mov    (%eax),%eax
+     732:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+     735:	74 23                	je     75a <writetest1+0x19c>
+      printf(stdout, "read content of block %d is %d\n",
+             n, ((int*)buf)[0]);
+     737:	b8 a0 8a 00 00       	mov    $0x8aa0,%eax
+    } else if(i != 512){
+      printf(stdout, "read failed %d\n", i);
+      exit();
+    }
+    if(((int*)buf)[0] != n){
+      printf(stdout, "read content of block %d is %d\n",
+     73c:	8b 10                	mov    (%eax),%edx
+     73e:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     743:	52                   	push   %edx
+     744:	ff 75 f0             	pushl  -0x10(%ebp)
+     747:	68 6c 47 00 00       	push   $0x476c
+     74c:	50                   	push   %eax
+     74d:	e8 fc 38 00 00       	call   404e <printf>
+     752:	83 c4 10             	add    $0x10,%esp
+             n, ((int*)buf)[0]);
+      exit();
+     755:	e8 75 37 00 00       	call   3ecf <exit>
+    }
+    n++;
+     75a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  }
+     75e:	e9 59 ff ff ff       	jmp    6bc <writetest1+0xfe>
+    if(i == 0){
+      if(n == MAXFILE - 1){
+        printf(stdout, "read only %d blocks from big", n);
+        exit();
+      }
+      break;
+     763:	90                   	nop
+             n, ((int*)buf)[0]);
+      exit();
+    }
+    n++;
+  }
+  close(fd);
+     764:	83 ec 0c             	sub    $0xc,%esp
+     767:	ff 75 ec             	pushl  -0x14(%ebp)
+     76a:	e8 88 37 00 00       	call   3ef7 <close>
+     76f:	83 c4 10             	add    $0x10,%esp
+  if(unlink("big") < 0){
+     772:	83 ec 0c             	sub    $0xc,%esp
+     775:	68 e8 46 00 00       	push   $0x46e8
+     77a:	e8 a0 37 00 00       	call   3f1f <unlink>
+     77f:	83 c4 10             	add    $0x10,%esp
+     782:	85 c0                	test   %eax,%eax
+     784:	79 1b                	jns    7a1 <writetest1+0x1e3>
+    printf(stdout, "unlink big failed\n");
+     786:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     78b:	83 ec 08             	sub    $0x8,%esp
+     78e:	68 8c 47 00 00       	push   $0x478c
+     793:	50                   	push   %eax
+     794:	e8 b5 38 00 00       	call   404e <printf>
+     799:	83 c4 10             	add    $0x10,%esp
+    exit();
+     79c:	e8 2e 37 00 00       	call   3ecf <exit>
+  }
+  printf(stdout, "big files ok\n");
+     7a1:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     7a6:	83 ec 08             	sub    $0x8,%esp
+     7a9:	68 9f 47 00 00       	push   $0x479f
+     7ae:	50                   	push   %eax
+     7af:	e8 9a 38 00 00       	call   404e <printf>
+     7b4:	83 c4 10             	add    $0x10,%esp
+}
+     7b7:	90                   	nop
+     7b8:	c9                   	leave  
+     7b9:	c3                   	ret    
+
+000007ba <createtest>:
+
+void
+createtest(void)
+{
+     7ba:	55                   	push   %ebp
+     7bb:	89 e5                	mov    %esp,%ebp
+     7bd:	83 ec 18             	sub    $0x18,%esp
+  int i, fd;
+
+  printf(stdout, "many creates, followed by unlink test\n");
+     7c0:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     7c5:	83 ec 08             	sub    $0x8,%esp
+     7c8:	68 b0 47 00 00       	push   $0x47b0
+     7cd:	50                   	push   %eax
+     7ce:	e8 7b 38 00 00       	call   404e <printf>
+     7d3:	83 c4 10             	add    $0x10,%esp
+
+  name[0] = 'a';
+     7d6:	c6 05 a0 aa 00 00 61 	movb   $0x61,0xaaa0
+  name[2] = '\0';
+     7dd:	c6 05 a2 aa 00 00 00 	movb   $0x0,0xaaa2
+  for(i = 0; i < 52; i++){
+     7e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     7eb:	eb 35                	jmp    822 <createtest+0x68>
+    name[1] = '0' + i;
+     7ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     7f0:	83 c0 30             	add    $0x30,%eax
+     7f3:	a2 a1 aa 00 00       	mov    %al,0xaaa1
+    fd = open(name, O_CREATE|O_RDWR);
+     7f8:	83 ec 08             	sub    $0x8,%esp
+     7fb:	68 02 02 00 00       	push   $0x202
+     800:	68 a0 aa 00 00       	push   $0xaaa0
+     805:	e8 05 37 00 00       	call   3f0f <open>
+     80a:	83 c4 10             	add    $0x10,%esp
+     80d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    close(fd);
+     810:	83 ec 0c             	sub    $0xc,%esp
+     813:	ff 75 f0             	pushl  -0x10(%ebp)
+     816:	e8 dc 36 00 00       	call   3ef7 <close>
+     81b:	83 c4 10             	add    $0x10,%esp
+
+  printf(stdout, "many creates, followed by unlink test\n");
+
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+     81e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+     822:	83 7d f4 33          	cmpl   $0x33,-0xc(%ebp)
+     826:	7e c5                	jle    7ed <createtest+0x33>
+    name[1] = '0' + i;
+    fd = open(name, O_CREATE|O_RDWR);
+    close(fd);
+  }
+  name[0] = 'a';
+     828:	c6 05 a0 aa 00 00 61 	movb   $0x61,0xaaa0
+  name[2] = '\0';
+     82f:	c6 05 a2 aa 00 00 00 	movb   $0x0,0xaaa2
+  for(i = 0; i < 52; i++){
+     836:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     83d:	eb 1f                	jmp    85e <createtest+0xa4>
+    name[1] = '0' + i;
+     83f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     842:	83 c0 30             	add    $0x30,%eax
+     845:	a2 a1 aa 00 00       	mov    %al,0xaaa1
+    unlink(name);
+     84a:	83 ec 0c             	sub    $0xc,%esp
+     84d:	68 a0 aa 00 00       	push   $0xaaa0
+     852:	e8 c8 36 00 00       	call   3f1f <unlink>
+     857:	83 c4 10             	add    $0x10,%esp
+    fd = open(name, O_CREATE|O_RDWR);
+    close(fd);
+  }
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+     85a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+     85e:	83 7d f4 33          	cmpl   $0x33,-0xc(%ebp)
+     862:	7e db                	jle    83f <createtest+0x85>
+    name[1] = '0' + i;
+    unlink(name);
+  }
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     864:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     869:	83 ec 08             	sub    $0x8,%esp
+     86c:	68 d8 47 00 00       	push   $0x47d8
+     871:	50                   	push   %eax
+     872:	e8 d7 37 00 00       	call   404e <printf>
+     877:	83 c4 10             	add    $0x10,%esp
+}
+     87a:	90                   	nop
+     87b:	c9                   	leave  
+     87c:	c3                   	ret    
+
+0000087d <dirtest>:
+
+void dirtest(void)
+{
+     87d:	55                   	push   %ebp
+     87e:	89 e5                	mov    %esp,%ebp
+     880:	83 ec 08             	sub    $0x8,%esp
+  printf(stdout, "mkdir test\n");
+     883:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     888:	83 ec 08             	sub    $0x8,%esp
+     88b:	68 fe 47 00 00       	push   $0x47fe
+     890:	50                   	push   %eax
+     891:	e8 b8 37 00 00       	call   404e <printf>
+     896:	83 c4 10             	add    $0x10,%esp
+
+  if(mkdir("dir0") < 0){
+     899:	83 ec 0c             	sub    $0xc,%esp
+     89c:	68 0a 48 00 00       	push   $0x480a
+     8a1:	e8 91 36 00 00       	call   3f37 <mkdir>
+     8a6:	83 c4 10             	add    $0x10,%esp
+     8a9:	85 c0                	test   %eax,%eax
+     8ab:	79 1b                	jns    8c8 <dirtest+0x4b>
+    printf(stdout, "mkdir failed\n");
+     8ad:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     8b2:	83 ec 08             	sub    $0x8,%esp
+     8b5:	68 2d 44 00 00       	push   $0x442d
+     8ba:	50                   	push   %eax
+     8bb:	e8 8e 37 00 00       	call   404e <printf>
+     8c0:	83 c4 10             	add    $0x10,%esp
+    exit();
+     8c3:	e8 07 36 00 00       	call   3ecf <exit>
+  }
+
+  if(chdir("dir0") < 0){
+     8c8:	83 ec 0c             	sub    $0xc,%esp
+     8cb:	68 0a 48 00 00       	push   $0x480a
+     8d0:	e8 6a 36 00 00       	call   3f3f <chdir>
+     8d5:	83 c4 10             	add    $0x10,%esp
+     8d8:	85 c0                	test   %eax,%eax
+     8da:	79 1b                	jns    8f7 <dirtest+0x7a>
+    printf(stdout, "chdir dir0 failed\n");
+     8dc:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     8e1:	83 ec 08             	sub    $0x8,%esp
+     8e4:	68 0f 48 00 00       	push   $0x480f
+     8e9:	50                   	push   %eax
+     8ea:	e8 5f 37 00 00       	call   404e <printf>
+     8ef:	83 c4 10             	add    $0x10,%esp
+    exit();
+     8f2:	e8 d8 35 00 00       	call   3ecf <exit>
+  }
+
+  if(chdir("..") < 0){
+     8f7:	83 ec 0c             	sub    $0xc,%esp
+     8fa:	68 22 48 00 00       	push   $0x4822
+     8ff:	e8 3b 36 00 00       	call   3f3f <chdir>
+     904:	83 c4 10             	add    $0x10,%esp
+     907:	85 c0                	test   %eax,%eax
+     909:	79 1b                	jns    926 <dirtest+0xa9>
+    printf(stdout, "chdir .. failed\n");
+     90b:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     910:	83 ec 08             	sub    $0x8,%esp
+     913:	68 25 48 00 00       	push   $0x4825
+     918:	50                   	push   %eax
+     919:	e8 30 37 00 00       	call   404e <printf>
+     91e:	83 c4 10             	add    $0x10,%esp
+    exit();
+     921:	e8 a9 35 00 00       	call   3ecf <exit>
+  }
+
+  if(unlink("dir0") < 0){
+     926:	83 ec 0c             	sub    $0xc,%esp
+     929:	68 0a 48 00 00       	push   $0x480a
+     92e:	e8 ec 35 00 00       	call   3f1f <unlink>
+     933:	83 c4 10             	add    $0x10,%esp
+     936:	85 c0                	test   %eax,%eax
+     938:	79 1b                	jns    955 <dirtest+0xd8>
+    printf(stdout, "unlink dir0 failed\n");
+     93a:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     93f:	83 ec 08             	sub    $0x8,%esp
+     942:	68 36 48 00 00       	push   $0x4836
+     947:	50                   	push   %eax
+     948:	e8 01 37 00 00       	call   404e <printf>
+     94d:	83 c4 10             	add    $0x10,%esp
+    exit();
+     950:	e8 7a 35 00 00       	call   3ecf <exit>
+  }
+  printf(stdout, "mkdir test ok\n");
+     955:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     95a:	83 ec 08             	sub    $0x8,%esp
+     95d:	68 4a 48 00 00       	push   $0x484a
+     962:	50                   	push   %eax
+     963:	e8 e6 36 00 00       	call   404e <printf>
+     968:	83 c4 10             	add    $0x10,%esp
+}
+     96b:	90                   	nop
+     96c:	c9                   	leave  
+     96d:	c3                   	ret    
+
+0000096e <exectest>:
+
+void
+exectest(void)
+{
+     96e:	55                   	push   %ebp
+     96f:	89 e5                	mov    %esp,%ebp
+     971:	83 ec 08             	sub    $0x8,%esp
+  printf(stdout, "exec test\n");
+     974:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     979:	83 ec 08             	sub    $0x8,%esp
+     97c:	68 59 48 00 00       	push   $0x4859
+     981:	50                   	push   %eax
+     982:	e8 c7 36 00 00       	call   404e <printf>
+     987:	83 c4 10             	add    $0x10,%esp
+  if(exec("echo", echoargv) < 0){
+     98a:	83 ec 08             	sub    $0x8,%esp
+     98d:	68 ac 62 00 00       	push   $0x62ac
+     992:	68 04 44 00 00       	push   $0x4404
+     997:	e8 6b 35 00 00       	call   3f07 <exec>
+     99c:	83 c4 10             	add    $0x10,%esp
+     99f:	85 c0                	test   %eax,%eax
+     9a1:	79 1b                	jns    9be <exectest+0x50>
+    printf(stdout, "exec echo failed\n");
+     9a3:	a1 c0 62 00 00       	mov    0x62c0,%eax
+     9a8:	83 ec 08             	sub    $0x8,%esp
+     9ab:	68 64 48 00 00       	push   $0x4864
+     9b0:	50                   	push   %eax
+     9b1:	e8 98 36 00 00       	call   404e <printf>
+     9b6:	83 c4 10             	add    $0x10,%esp
+    exit();
+     9b9:	e8 11 35 00 00       	call   3ecf <exit>
+  }
+}
+     9be:	90                   	nop
+     9bf:	c9                   	leave  
+     9c0:	c3                   	ret    
+
+000009c1 <pipe1>:
+
+// simple fork and pipe read/write
+
+void
+pipe1(void)
+{
+     9c1:	55                   	push   %ebp
+     9c2:	89 e5                	mov    %esp,%ebp
+     9c4:	83 ec 28             	sub    $0x28,%esp
+  int fds[2], pid;
+  int seq, i, n, cc, total;
+
+  if(pipe(fds) != 0){
+     9c7:	83 ec 0c             	sub    $0xc,%esp
+     9ca:	8d 45 d8             	lea    -0x28(%ebp),%eax
+     9cd:	50                   	push   %eax
+     9ce:	e8 0c 35 00 00       	call   3edf <pipe>
+     9d3:	83 c4 10             	add    $0x10,%esp
+     9d6:	85 c0                	test   %eax,%eax
+     9d8:	74 17                	je     9f1 <pipe1+0x30>
+    printf(1, "pipe() failed\n");
+     9da:	83 ec 08             	sub    $0x8,%esp
+     9dd:	68 76 48 00 00       	push   $0x4876
+     9e2:	6a 01                	push   $0x1
+     9e4:	e8 65 36 00 00       	call   404e <printf>
+     9e9:	83 c4 10             	add    $0x10,%esp
+    exit();
+     9ec:	e8 de 34 00 00       	call   3ecf <exit>
+  }
+  pid = fork();
+     9f1:	e8 d1 34 00 00       	call   3ec7 <fork>
+     9f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  seq = 0;
+     9f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  if(pid == 0){
+     a00:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+     a04:	0f 85 89 00 00 00    	jne    a93 <pipe1+0xd2>
+    close(fds[0]);
+     a0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+     a0d:	83 ec 0c             	sub    $0xc,%esp
+     a10:	50                   	push   %eax
+     a11:	e8 e1 34 00 00       	call   3ef7 <close>
+     a16:	83 c4 10             	add    $0x10,%esp
+    for(n = 0; n < 5; n++){
+     a19:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+     a20:	eb 66                	jmp    a88 <pipe1+0xc7>
+      for(i = 0; i < 1033; i++)
+     a22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     a29:	eb 19                	jmp    a44 <pipe1+0x83>
+        buf[i] = seq++;
+     a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     a2e:	8d 50 01             	lea    0x1(%eax),%edx
+     a31:	89 55 f4             	mov    %edx,-0xc(%ebp)
+     a34:	89 c2                	mov    %eax,%edx
+     a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     a39:	05 a0 8a 00 00       	add    $0x8aa0,%eax
+     a3e:	88 10                	mov    %dl,(%eax)
+  pid = fork();
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+    for(n = 0; n < 5; n++){
+      for(i = 0; i < 1033; i++)
+     a40:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+     a44:	81 7d f0 08 04 00 00 	cmpl   $0x408,-0x10(%ebp)
+     a4b:	7e de                	jle    a2b <pipe1+0x6a>
+        buf[i] = seq++;
+      if(write(fds[1], buf, 1033) != 1033){
+     a4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+     a50:	83 ec 04             	sub    $0x4,%esp
+     a53:	68 09 04 00 00       	push   $0x409
+     a58:	68 a0 8a 00 00       	push   $0x8aa0
+     a5d:	50                   	push   %eax
+     a5e:	e8 8c 34 00 00       	call   3eef <write>
+     a63:	83 c4 10             	add    $0x10,%esp
+     a66:	3d 09 04 00 00       	cmp    $0x409,%eax
+     a6b:	74 17                	je     a84 <pipe1+0xc3>
+        printf(1, "pipe1 oops 1\n");
+     a6d:	83 ec 08             	sub    $0x8,%esp
+     a70:	68 85 48 00 00       	push   $0x4885
+     a75:	6a 01                	push   $0x1
+     a77:	e8 d2 35 00 00       	call   404e <printf>
+     a7c:	83 c4 10             	add    $0x10,%esp
+        exit();
+     a7f:	e8 4b 34 00 00       	call   3ecf <exit>
+  }
+  pid = fork();
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+    for(n = 0; n < 5; n++){
+     a84:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+     a88:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
+     a8c:	7e 94                	jle    a22 <pipe1+0x61>
+      if(write(fds[1], buf, 1033) != 1033){
+        printf(1, "pipe1 oops 1\n");
+        exit();
+      }
+    }
+    exit();
+     a8e:	e8 3c 34 00 00       	call   3ecf <exit>
+  } else if(pid > 0){
+     a93:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+     a97:	0f 8e f4 00 00 00    	jle    b91 <pipe1+0x1d0>
+    close(fds[1]);
+     a9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+     aa0:	83 ec 0c             	sub    $0xc,%esp
+     aa3:	50                   	push   %eax
+     aa4:	e8 4e 34 00 00       	call   3ef7 <close>
+     aa9:	83 c4 10             	add    $0x10,%esp
+    total = 0;
+     aac:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    cc = 1;
+     ab3:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     aba:	eb 66                	jmp    b22 <pipe1+0x161>
+      for(i = 0; i < n; i++){
+     abc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     ac3:	eb 3b                	jmp    b00 <pipe1+0x13f>
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     ac8:	05 a0 8a 00 00       	add    $0x8aa0,%eax
+     acd:	0f b6 00             	movzbl (%eax),%eax
+     ad0:	0f be c8             	movsbl %al,%ecx
+     ad3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     ad6:	8d 50 01             	lea    0x1(%eax),%edx
+     ad9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+     adc:	31 c8                	xor    %ecx,%eax
+     ade:	0f b6 c0             	movzbl %al,%eax
+     ae1:	85 c0                	test   %eax,%eax
+     ae3:	74 17                	je     afc <pipe1+0x13b>
+          printf(1, "pipe1 oops 2\n");
+     ae5:	83 ec 08             	sub    $0x8,%esp
+     ae8:	68 93 48 00 00       	push   $0x4893
+     aed:	6a 01                	push   $0x1
+     aef:	e8 5a 35 00 00       	call   404e <printf>
+     af4:	83 c4 10             	add    $0x10,%esp
+     af7:	e9 ac 00 00 00       	jmp    ba8 <pipe1+0x1e7>
+  } else if(pid > 0){
+    close(fds[1]);
+    total = 0;
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+      for(i = 0; i < n; i++){
+     afc:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+     b00:	8b 45 f0             	mov    -0x10(%ebp),%eax
+     b03:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+     b06:	7c bd                	jl     ac5 <pipe1+0x104>
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+          printf(1, "pipe1 oops 2\n");
+          return;
+        }
+      }
+      total += n;
+     b08:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     b0b:	01 45 e4             	add    %eax,-0x1c(%ebp)
+      cc = cc * 2;
+     b0e:	d1 65 e8             	shll   -0x18(%ebp)
+      if(cc > sizeof(buf))
+     b11:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     b14:	3d 00 20 00 00       	cmp    $0x2000,%eax
+     b19:	76 07                	jbe    b22 <pipe1+0x161>
+        cc = sizeof(buf);
+     b1b:	c7 45 e8 00 20 00 00 	movl   $0x2000,-0x18(%ebp)
+    exit();
+  } else if(pid > 0){
+    close(fds[1]);
+    total = 0;
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+     b22:	8b 45 d8             	mov    -0x28(%ebp),%eax
+     b25:	83 ec 04             	sub    $0x4,%esp
+     b28:	ff 75 e8             	pushl  -0x18(%ebp)
+     b2b:	68 a0 8a 00 00       	push   $0x8aa0
+     b30:	50                   	push   %eax
+     b31:	e8 b1 33 00 00       	call   3ee7 <read>
+     b36:	83 c4 10             	add    $0x10,%esp
+     b39:	89 45 ec             	mov    %eax,-0x14(%ebp)
+     b3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+     b40:	0f 8f 76 ff ff ff    	jg     abc <pipe1+0xfb>
+      total += n;
+      cc = cc * 2;
+      if(cc > sizeof(buf))
+        cc = sizeof(buf);
+    }
+    if(total != 5 * 1033){
+     b46:	81 7d e4 2d 14 00 00 	cmpl   $0x142d,-0x1c(%ebp)
+     b4d:	74 1a                	je     b69 <pipe1+0x1a8>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     b4f:	83 ec 04             	sub    $0x4,%esp
+     b52:	ff 75 e4             	pushl  -0x1c(%ebp)
+     b55:	68 a1 48 00 00       	push   $0x48a1
+     b5a:	6a 01                	push   $0x1
+     b5c:	e8 ed 34 00 00       	call   404e <printf>
+     b61:	83 c4 10             	add    $0x10,%esp
+      exit();
+     b64:	e8 66 33 00 00       	call   3ecf <exit>
+    }
+    close(fds[0]);
+     b69:	8b 45 d8             	mov    -0x28(%ebp),%eax
+     b6c:	83 ec 0c             	sub    $0xc,%esp
+     b6f:	50                   	push   %eax
+     b70:	e8 82 33 00 00       	call   3ef7 <close>
+     b75:	83 c4 10             	add    $0x10,%esp
+    wait();
+     b78:	e8 5a 33 00 00       	call   3ed7 <wait>
+  } else {
+    printf(1, "fork() failed\n");
+    exit();
+  }
+  printf(1, "pipe1 ok\n");
+     b7d:	83 ec 08             	sub    $0x8,%esp
+     b80:	68 c7 48 00 00       	push   $0x48c7
+     b85:	6a 01                	push   $0x1
+     b87:	e8 c2 34 00 00       	call   404e <printf>
+     b8c:	83 c4 10             	add    $0x10,%esp
+     b8f:	eb 17                	jmp    ba8 <pipe1+0x1e7>
+      exit();
+    }
+    close(fds[0]);
+    wait();
+  } else {
+    printf(1, "fork() failed\n");
+     b91:	83 ec 08             	sub    $0x8,%esp
+     b94:	68 b8 48 00 00       	push   $0x48b8
+     b99:	6a 01                	push   $0x1
+     b9b:	e8 ae 34 00 00       	call   404e <printf>
+     ba0:	83 c4 10             	add    $0x10,%esp
+    exit();
+     ba3:	e8 27 33 00 00       	call   3ecf <exit>
+  }
+  printf(1, "pipe1 ok\n");
+}
+     ba8:	c9                   	leave  
+     ba9:	c3                   	ret    
+
+00000baa <preempt>:
+
+// meant to be run w/ at most two CPUs
+void
+preempt(void)
+{
+     baa:	55                   	push   %ebp
+     bab:	89 e5                	mov    %esp,%ebp
+     bad:	83 ec 28             	sub    $0x28,%esp
+  int pid1, pid2, pid3;
+  int pfds[2];
+
+  printf(1, "preempt: ");
+     bb0:	83 ec 08             	sub    $0x8,%esp
+     bb3:	68 d1 48 00 00       	push   $0x48d1
+     bb8:	6a 01                	push   $0x1
+     bba:	e8 8f 34 00 00       	call   404e <printf>
+     bbf:	83 c4 10             	add    $0x10,%esp
+  pid1 = fork();
+     bc2:	e8 00 33 00 00       	call   3ec7 <fork>
+     bc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(pid1 == 0)
+     bca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     bce:	75 02                	jne    bd2 <preempt+0x28>
+    for(;;)
+      ;
+     bd0:	eb fe                	jmp    bd0 <preempt+0x26>
+
+  pid2 = fork();
+     bd2:	e8 f0 32 00 00       	call   3ec7 <fork>
+     bd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(pid2 == 0)
+     bda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+     bde:	75 02                	jne    be2 <preempt+0x38>
+    for(;;)
+      ;
+     be0:	eb fe                	jmp    be0 <preempt+0x36>
+
+  pipe(pfds);
+     be2:	83 ec 0c             	sub    $0xc,%esp
+     be5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     be8:	50                   	push   %eax
+     be9:	e8 f1 32 00 00       	call   3edf <pipe>
+     bee:	83 c4 10             	add    $0x10,%esp
+  pid3 = fork();
+     bf1:	e8 d1 32 00 00       	call   3ec7 <fork>
+     bf6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if(pid3 == 0){
+     bf9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+     bfd:	75 4d                	jne    c4c <preempt+0xa2>
+    close(pfds[0]);
+     bff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     c02:	83 ec 0c             	sub    $0xc,%esp
+     c05:	50                   	push   %eax
+     c06:	e8 ec 32 00 00       	call   3ef7 <close>
+     c0b:	83 c4 10             	add    $0x10,%esp
+    if(write(pfds[1], "x", 1) != 1)
+     c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     c11:	83 ec 04             	sub    $0x4,%esp
+     c14:	6a 01                	push   $0x1
+     c16:	68 db 48 00 00       	push   $0x48db
+     c1b:	50                   	push   %eax
+     c1c:	e8 ce 32 00 00       	call   3eef <write>
+     c21:	83 c4 10             	add    $0x10,%esp
+     c24:	83 f8 01             	cmp    $0x1,%eax
+     c27:	74 12                	je     c3b <preempt+0x91>
+      printf(1, "preempt write error");
+     c29:	83 ec 08             	sub    $0x8,%esp
+     c2c:	68 dd 48 00 00       	push   $0x48dd
+     c31:	6a 01                	push   $0x1
+     c33:	e8 16 34 00 00       	call   404e <printf>
+     c38:	83 c4 10             	add    $0x10,%esp
+    close(pfds[1]);
+     c3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     c3e:	83 ec 0c             	sub    $0xc,%esp
+     c41:	50                   	push   %eax
+     c42:	e8 b0 32 00 00       	call   3ef7 <close>
+     c47:	83 c4 10             	add    $0x10,%esp
+    for(;;)
+      ;
+     c4a:	eb fe                	jmp    c4a <preempt+0xa0>
+  }
+
+  close(pfds[1]);
+     c4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     c4f:	83 ec 0c             	sub    $0xc,%esp
+     c52:	50                   	push   %eax
+     c53:	e8 9f 32 00 00       	call   3ef7 <close>
+     c58:	83 c4 10             	add    $0x10,%esp
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     c5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     c5e:	83 ec 04             	sub    $0x4,%esp
+     c61:	68 00 20 00 00       	push   $0x2000
+     c66:	68 a0 8a 00 00       	push   $0x8aa0
+     c6b:	50                   	push   %eax
+     c6c:	e8 76 32 00 00       	call   3ee7 <read>
+     c71:	83 c4 10             	add    $0x10,%esp
+     c74:	83 f8 01             	cmp    $0x1,%eax
+     c77:	74 14                	je     c8d <preempt+0xe3>
+    printf(1, "preempt read error");
+     c79:	83 ec 08             	sub    $0x8,%esp
+     c7c:	68 f1 48 00 00       	push   $0x48f1
+     c81:	6a 01                	push   $0x1
+     c83:	e8 c6 33 00 00       	call   404e <printf>
+     c88:	83 c4 10             	add    $0x10,%esp
+     c8b:	eb 7e                	jmp    d0b <preempt+0x161>
+    return;
+  }
+  close(pfds[0]);
+     c8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     c90:	83 ec 0c             	sub    $0xc,%esp
+     c93:	50                   	push   %eax
+     c94:	e8 5e 32 00 00       	call   3ef7 <close>
+     c99:	83 c4 10             	add    $0x10,%esp
+  printf(1, "kill... ");
+     c9c:	83 ec 08             	sub    $0x8,%esp
+     c9f:	68 04 49 00 00       	push   $0x4904
+     ca4:	6a 01                	push   $0x1
+     ca6:	e8 a3 33 00 00       	call   404e <printf>
+     cab:	83 c4 10             	add    $0x10,%esp
+  kill(pid1);
+     cae:	83 ec 0c             	sub    $0xc,%esp
+     cb1:	ff 75 f4             	pushl  -0xc(%ebp)
+     cb4:	e8 46 32 00 00       	call   3eff <kill>
+     cb9:	83 c4 10             	add    $0x10,%esp
+  kill(pid2);
+     cbc:	83 ec 0c             	sub    $0xc,%esp
+     cbf:	ff 75 f0             	pushl  -0x10(%ebp)
+     cc2:	e8 38 32 00 00       	call   3eff <kill>
+     cc7:	83 c4 10             	add    $0x10,%esp
+  kill(pid3);
+     cca:	83 ec 0c             	sub    $0xc,%esp
+     ccd:	ff 75 ec             	pushl  -0x14(%ebp)
+     cd0:	e8 2a 32 00 00       	call   3eff <kill>
+     cd5:	83 c4 10             	add    $0x10,%esp
+  printf(1, "wait... ");
+     cd8:	83 ec 08             	sub    $0x8,%esp
+     cdb:	68 0d 49 00 00       	push   $0x490d
+     ce0:	6a 01                	push   $0x1
+     ce2:	e8 67 33 00 00       	call   404e <printf>
+     ce7:	83 c4 10             	add    $0x10,%esp
+  wait();
+     cea:	e8 e8 31 00 00       	call   3ed7 <wait>
+  wait();
+     cef:	e8 e3 31 00 00       	call   3ed7 <wait>
+  wait();
+     cf4:	e8 de 31 00 00       	call   3ed7 <wait>
+  printf(1, "preempt ok\n");
+     cf9:	83 ec 08             	sub    $0x8,%esp
+     cfc:	68 16 49 00 00       	push   $0x4916
+     d01:	6a 01                	push   $0x1
+     d03:	e8 46 33 00 00       	call   404e <printf>
+     d08:	83 c4 10             	add    $0x10,%esp
+}
+     d0b:	c9                   	leave  
+     d0c:	c3                   	ret    
+
+00000d0d <exitwait>:
+
+// try to find any races between exit and wait
+void
+exitwait(void)
+{
+     d0d:	55                   	push   %ebp
+     d0e:	89 e5                	mov    %esp,%ebp
+     d10:	83 ec 18             	sub    $0x18,%esp
+  int i, pid;
+
+  for(i = 0; i < 100; i++){
+     d13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     d1a:	eb 4f                	jmp    d6b <exitwait+0x5e>
+    pid = fork();
+     d1c:	e8 a6 31 00 00       	call   3ec7 <fork>
+     d21:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(pid < 0){
+     d24:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+     d28:	79 14                	jns    d3e <exitwait+0x31>
+      printf(1, "fork failed\n");
+     d2a:	83 ec 08             	sub    $0x8,%esp
+     d2d:	68 a5 44 00 00       	push   $0x44a5
+     d32:	6a 01                	push   $0x1
+     d34:	e8 15 33 00 00       	call   404e <printf>
+     d39:	83 c4 10             	add    $0x10,%esp
+      return;
+     d3c:	eb 45                	jmp    d83 <exitwait+0x76>
+    }
+    if(pid){
+     d3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+     d42:	74 1e                	je     d62 <exitwait+0x55>
+      if(wait() != pid){
+     d44:	e8 8e 31 00 00       	call   3ed7 <wait>
+     d49:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+     d4c:	74 19                	je     d67 <exitwait+0x5a>
+        printf(1, "wait wrong pid\n");
+     d4e:	83 ec 08             	sub    $0x8,%esp
+     d51:	68 22 49 00 00       	push   $0x4922
+     d56:	6a 01                	push   $0x1
+     d58:	e8 f1 32 00 00       	call   404e <printf>
+     d5d:	83 c4 10             	add    $0x10,%esp
+        return;
+     d60:	eb 21                	jmp    d83 <exitwait+0x76>
+      }
+    } else {
+      exit();
+     d62:	e8 68 31 00 00       	call   3ecf <exit>
+void
+exitwait(void)
+{
+  int i, pid;
+
+  for(i = 0; i < 100; i++){
+     d67:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+     d6b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+     d6f:	7e ab                	jle    d1c <exitwait+0xf>
+      }
+    } else {
+      exit();
+    }
+  }
+  printf(1, "exitwait ok\n");
+     d71:	83 ec 08             	sub    $0x8,%esp
+     d74:	68 32 49 00 00       	push   $0x4932
+     d79:	6a 01                	push   $0x1
+     d7b:	e8 ce 32 00 00       	call   404e <printf>
+     d80:	83 c4 10             	add    $0x10,%esp
+}
+     d83:	c9                   	leave  
+     d84:	c3                   	ret    
+
+00000d85 <mem>:
+
+void
+mem(void)
+{
+     d85:	55                   	push   %ebp
+     d86:	89 e5                	mov    %esp,%ebp
+     d88:	83 ec 18             	sub    $0x18,%esp
+  void *m1, *m2;
+  int pid, ppid;
+
+  printf(1, "mem test\n");
+     d8b:	83 ec 08             	sub    $0x8,%esp
+     d8e:	68 3f 49 00 00       	push   $0x493f
+     d93:	6a 01                	push   $0x1
+     d95:	e8 b4 32 00 00       	call   404e <printf>
+     d9a:	83 c4 10             	add    $0x10,%esp
+  ppid = getpid();
+     d9d:	e8 ad 31 00 00       	call   3f4f <getpid>
+     da2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if((pid = fork()) == 0){
+     da5:	e8 1d 31 00 00       	call   3ec7 <fork>
+     daa:	89 45 ec             	mov    %eax,-0x14(%ebp)
+     dad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+     db1:	0f 85 b7 00 00 00    	jne    e6e <mem+0xe9>
+    m1 = 0;
+     db7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while((m2 = malloc(10001)) != 0){
+     dbe:	eb 0e                	jmp    dce <mem+0x49>
+      *(char**)m2 = m1;
+     dc0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     dc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+     dc6:	89 10                	mov    %edx,(%eax)
+      m1 = m2;
+     dc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+  printf(1, "mem test\n");
+  ppid = getpid();
+  if((pid = fork()) == 0){
+    m1 = 0;
+    while((m2 = malloc(10001)) != 0){
+     dce:	83 ec 0c             	sub    $0xc,%esp
+     dd1:	68 11 27 00 00       	push   $0x2711
+     dd6:	e8 46 35 00 00       	call   4321 <malloc>
+     ddb:	83 c4 10             	add    $0x10,%esp
+     dde:	89 45 e8             	mov    %eax,-0x18(%ebp)
+     de1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+     de5:	75 d9                	jne    dc0 <mem+0x3b>
+      *(char**)m2 = m1;
+      m1 = m2;
+    }
+    while(m1){
+     de7:	eb 1c                	jmp    e05 <mem+0x80>
+      m2 = *(char**)m1;
+     de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     dec:	8b 00                	mov    (%eax),%eax
+     dee:	89 45 e8             	mov    %eax,-0x18(%ebp)
+      free(m1);
+     df1:	83 ec 0c             	sub    $0xc,%esp
+     df4:	ff 75 f4             	pushl  -0xc(%ebp)
+     df7:	e8 e3 33 00 00       	call   41df <free>
+     dfc:	83 c4 10             	add    $0x10,%esp
+      m1 = m2;
+     dff:	8b 45 e8             	mov    -0x18(%ebp),%eax
+     e02:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    m1 = 0;
+    while((m2 = malloc(10001)) != 0){
+      *(char**)m2 = m1;
+      m1 = m2;
+    }
+    while(m1){
+     e05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     e09:	75 de                	jne    de9 <mem+0x64>
+      m2 = *(char**)m1;
+      free(m1);
+      m1 = m2;
+    }
+    m1 = malloc(1024*20);
+     e0b:	83 ec 0c             	sub    $0xc,%esp
+     e0e:	68 00 50 00 00       	push   $0x5000
+     e13:	e8 09 35 00 00       	call   4321 <malloc>
+     e18:	83 c4 10             	add    $0x10,%esp
+     e1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(m1 == 0){
+     e1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+     e22:	75 25                	jne    e49 <mem+0xc4>
+      printf(1, "couldn't allocate mem?!!\n");
+     e24:	83 ec 08             	sub    $0x8,%esp
+     e27:	68 49 49 00 00       	push   $0x4949
+     e2c:	6a 01                	push   $0x1
+     e2e:	e8 1b 32 00 00       	call   404e <printf>
+     e33:	83 c4 10             	add    $0x10,%esp
+      kill(ppid);
+     e36:	83 ec 0c             	sub    $0xc,%esp
+     e39:	ff 75 f0             	pushl  -0x10(%ebp)
+     e3c:	e8 be 30 00 00       	call   3eff <kill>
+     e41:	83 c4 10             	add    $0x10,%esp
+      exit();
+     e44:	e8 86 30 00 00       	call   3ecf <exit>
+    }
+    free(m1);
+     e49:	83 ec 0c             	sub    $0xc,%esp
+     e4c:	ff 75 f4             	pushl  -0xc(%ebp)
+     e4f:	e8 8b 33 00 00       	call   41df <free>
+     e54:	83 c4 10             	add    $0x10,%esp
+    printf(1, "mem ok\n");
+     e57:	83 ec 08             	sub    $0x8,%esp
+     e5a:	68 63 49 00 00       	push   $0x4963
+     e5f:	6a 01                	push   $0x1
+     e61:	e8 e8 31 00 00       	call   404e <printf>
+     e66:	83 c4 10             	add    $0x10,%esp
+    exit();
+     e69:	e8 61 30 00 00       	call   3ecf <exit>
+  } else {
+    wait();
+     e6e:	e8 64 30 00 00       	call   3ed7 <wait>
+  }
+}
+     e73:	90                   	nop
+     e74:	c9                   	leave  
+     e75:	c3                   	ret    
+
+00000e76 <sharedfd>:
+
+// two processes write to the same file descriptor
+// is the offset shared? does inode locking work?
+void
+sharedfd(void)
+{
+     e76:	55                   	push   %ebp
+     e77:	89 e5                	mov    %esp,%ebp
+     e79:	83 ec 38             	sub    $0x38,%esp
+  int fd, pid, i, n, nc, np;
+  char buf[10];
+
+  printf(1, "sharedfd test\n");
+     e7c:	83 ec 08             	sub    $0x8,%esp
+     e7f:	68 6b 49 00 00       	push   $0x496b
+     e84:	6a 01                	push   $0x1
+     e86:	e8 c3 31 00 00       	call   404e <printf>
+     e8b:	83 c4 10             	add    $0x10,%esp
+
+  unlink("sharedfd");
+     e8e:	83 ec 0c             	sub    $0xc,%esp
+     e91:	68 7a 49 00 00       	push   $0x497a
+     e96:	e8 84 30 00 00       	call   3f1f <unlink>
+     e9b:	83 c4 10             	add    $0x10,%esp
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     e9e:	83 ec 08             	sub    $0x8,%esp
+     ea1:	68 02 02 00 00       	push   $0x202
+     ea6:	68 7a 49 00 00       	push   $0x497a
+     eab:	e8 5f 30 00 00       	call   3f0f <open>
+     eb0:	83 c4 10             	add    $0x10,%esp
+     eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  if(fd < 0){
+     eb6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+     eba:	79 17                	jns    ed3 <sharedfd+0x5d>
+    printf(1, "fstests: cannot open sharedfd for writing");
+     ebc:	83 ec 08             	sub    $0x8,%esp
+     ebf:	68 84 49 00 00       	push   $0x4984
+     ec4:	6a 01                	push   $0x1
+     ec6:	e8 83 31 00 00       	call   404e <printf>
+     ecb:	83 c4 10             	add    $0x10,%esp
+    return;
+     ece:	e9 84 01 00 00       	jmp    1057 <sharedfd+0x1e1>
+  }
+  pid = fork();
+     ed3:	e8 ef 2f 00 00       	call   3ec7 <fork>
+     ed8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     edb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+     edf:	75 07                	jne    ee8 <sharedfd+0x72>
+     ee1:	b8 63 00 00 00       	mov    $0x63,%eax
+     ee6:	eb 05                	jmp    eed <sharedfd+0x77>
+     ee8:	b8 70 00 00 00       	mov    $0x70,%eax
+     eed:	83 ec 04             	sub    $0x4,%esp
+     ef0:	6a 0a                	push   $0xa
+     ef2:	50                   	push   %eax
+     ef3:	8d 45 d6             	lea    -0x2a(%ebp),%eax
+     ef6:	50                   	push   %eax
+     ef7:	e8 38 2e 00 00       	call   3d34 <memset>
+     efc:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 1000; i++){
+     eff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     f06:	eb 31                	jmp    f39 <sharedfd+0xc3>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     f08:	83 ec 04             	sub    $0x4,%esp
+     f0b:	6a 0a                	push   $0xa
+     f0d:	8d 45 d6             	lea    -0x2a(%ebp),%eax
+     f10:	50                   	push   %eax
+     f11:	ff 75 e8             	pushl  -0x18(%ebp)
+     f14:	e8 d6 2f 00 00       	call   3eef <write>
+     f19:	83 c4 10             	add    $0x10,%esp
+     f1c:	83 f8 0a             	cmp    $0xa,%eax
+     f1f:	74 14                	je     f35 <sharedfd+0xbf>
+      printf(1, "fstests: write sharedfd failed\n");
+     f21:	83 ec 08             	sub    $0x8,%esp
+     f24:	68 b0 49 00 00       	push   $0x49b0
+     f29:	6a 01                	push   $0x1
+     f2b:	e8 1e 31 00 00       	call   404e <printf>
+     f30:	83 c4 10             	add    $0x10,%esp
+      break;
+     f33:	eb 0d                	jmp    f42 <sharedfd+0xcc>
+    printf(1, "fstests: cannot open sharedfd for writing");
+    return;
+  }
+  pid = fork();
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+  for(i = 0; i < 1000; i++){
+     f35:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+     f39:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
+     f40:	7e c6                	jle    f08 <sharedfd+0x92>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+      printf(1, "fstests: write sharedfd failed\n");
+      break;
+    }
+  }
+  if(pid == 0)
+     f42:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+     f46:	75 05                	jne    f4d <sharedfd+0xd7>
+    exit();
+     f48:	e8 82 2f 00 00       	call   3ecf <exit>
+  else
+    wait();
+     f4d:	e8 85 2f 00 00       	call   3ed7 <wait>
+  close(fd);
+     f52:	83 ec 0c             	sub    $0xc,%esp
+     f55:	ff 75 e8             	pushl  -0x18(%ebp)
+     f58:	e8 9a 2f 00 00       	call   3ef7 <close>
+     f5d:	83 c4 10             	add    $0x10,%esp
+  fd = open("sharedfd", 0);
+     f60:	83 ec 08             	sub    $0x8,%esp
+     f63:	6a 00                	push   $0x0
+     f65:	68 7a 49 00 00       	push   $0x497a
+     f6a:	e8 a0 2f 00 00       	call   3f0f <open>
+     f6f:	83 c4 10             	add    $0x10,%esp
+     f72:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  if(fd < 0){
+     f75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+     f79:	79 17                	jns    f92 <sharedfd+0x11c>
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+     f7b:	83 ec 08             	sub    $0x8,%esp
+     f7e:	68 d0 49 00 00       	push   $0x49d0
+     f83:	6a 01                	push   $0x1
+     f85:	e8 c4 30 00 00       	call   404e <printf>
+     f8a:	83 c4 10             	add    $0x10,%esp
+    return;
+     f8d:	e9 c5 00 00 00       	jmp    1057 <sharedfd+0x1e1>
+  }
+  nc = np = 0;
+     f92:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+     f99:	8b 45 ec             	mov    -0x14(%ebp),%eax
+     f9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f9f:	eb 3b                	jmp    fdc <sharedfd+0x166>
+    for(i = 0; i < sizeof(buf); i++){
+     fa1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+     fa8:	eb 2a                	jmp    fd4 <sharedfd+0x15e>
+      if(buf[i] == 'c')
+     faa:	8d 55 d6             	lea    -0x2a(%ebp),%edx
+     fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     fb0:	01 d0                	add    %edx,%eax
+     fb2:	0f b6 00             	movzbl (%eax),%eax
+     fb5:	3c 63                	cmp    $0x63,%al
+     fb7:	75 04                	jne    fbd <sharedfd+0x147>
+        nc++;
+     fb9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+      if(buf[i] == 'p')
+     fbd:	8d 55 d6             	lea    -0x2a(%ebp),%edx
+     fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     fc3:	01 d0                	add    %edx,%eax
+     fc5:	0f b6 00             	movzbl (%eax),%eax
+     fc8:	3c 70                	cmp    $0x70,%al
+     fca:	75 04                	jne    fd0 <sharedfd+0x15a>
+        np++;
+     fcc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    return;
+  }
+  nc = np = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i = 0; i < sizeof(buf); i++){
+     fd0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+     fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+     fd7:	83 f8 09             	cmp    $0x9,%eax
+     fda:	76 ce                	jbe    faa <sharedfd+0x134>
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    return;
+  }
+  nc = np = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     fdc:	83 ec 04             	sub    $0x4,%esp
+     fdf:	6a 0a                	push   $0xa
+     fe1:	8d 45 d6             	lea    -0x2a(%ebp),%eax
+     fe4:	50                   	push   %eax
+     fe5:	ff 75 e8             	pushl  -0x18(%ebp)
+     fe8:	e8 fa 2e 00 00       	call   3ee7 <read>
+     fed:	83 c4 10             	add    $0x10,%esp
+     ff0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+     ff3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+     ff7:	7f a8                	jg     fa1 <sharedfd+0x12b>
+        nc++;
+      if(buf[i] == 'p')
+        np++;
+    }
+  }
+  close(fd);
+     ff9:	83 ec 0c             	sub    $0xc,%esp
+     ffc:	ff 75 e8             	pushl  -0x18(%ebp)
+     fff:	e8 f3 2e 00 00       	call   3ef7 <close>
+    1004:	83 c4 10             	add    $0x10,%esp
+  unlink("sharedfd");
+    1007:	83 ec 0c             	sub    $0xc,%esp
+    100a:	68 7a 49 00 00       	push   $0x497a
+    100f:	e8 0b 2f 00 00       	call   3f1f <unlink>
+    1014:	83 c4 10             	add    $0x10,%esp
+  if(nc == 10000 && np == 10000){
+    1017:	81 7d f0 10 27 00 00 	cmpl   $0x2710,-0x10(%ebp)
+    101e:	75 1d                	jne    103d <sharedfd+0x1c7>
+    1020:	81 7d ec 10 27 00 00 	cmpl   $0x2710,-0x14(%ebp)
+    1027:	75 14                	jne    103d <sharedfd+0x1c7>
+    printf(1, "sharedfd ok\n");
+    1029:	83 ec 08             	sub    $0x8,%esp
+    102c:	68 fb 49 00 00       	push   $0x49fb
+    1031:	6a 01                	push   $0x1
+    1033:	e8 16 30 00 00       	call   404e <printf>
+    1038:	83 c4 10             	add    $0x10,%esp
+    103b:	eb 1a                	jmp    1057 <sharedfd+0x1e1>
+  } else {
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    103d:	ff 75 ec             	pushl  -0x14(%ebp)
+    1040:	ff 75 f0             	pushl  -0x10(%ebp)
+    1043:	68 08 4a 00 00       	push   $0x4a08
+    1048:	6a 01                	push   $0x1
+    104a:	e8 ff 2f 00 00       	call   404e <printf>
+    104f:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1052:	e8 78 2e 00 00       	call   3ecf <exit>
+  }
+}
+    1057:	c9                   	leave  
+    1058:	c3                   	ret    
+
+00001059 <fourfiles>:
+
+// four processes write different files at the same
+// time, to test block allocation.
+void
+fourfiles(void)
+{
+    1059:	55                   	push   %ebp
+    105a:	89 e5                	mov    %esp,%ebp
+    105c:	83 ec 38             	sub    $0x38,%esp
+  int fd, pid, i, j, n, total, pi;
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    105f:	c7 45 c8 1d 4a 00 00 	movl   $0x4a1d,-0x38(%ebp)
+    1066:	c7 45 cc 20 4a 00 00 	movl   $0x4a20,-0x34(%ebp)
+    106d:	c7 45 d0 23 4a 00 00 	movl   $0x4a23,-0x30(%ebp)
+    1074:	c7 45 d4 26 4a 00 00 	movl   $0x4a26,-0x2c(%ebp)
+  char *fname;
+
+  printf(1, "fourfiles test\n");
+    107b:	83 ec 08             	sub    $0x8,%esp
+    107e:	68 29 4a 00 00       	push   $0x4a29
+    1083:	6a 01                	push   $0x1
+    1085:	e8 c4 2f 00 00       	call   404e <printf>
+    108a:	83 c4 10             	add    $0x10,%esp
+
+  for(pi = 0; pi < 4; pi++){
+    108d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+    1094:	e9 f0 00 00 00       	jmp    1189 <fourfiles+0x130>
+    fname = names[pi];
+    1099:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    109c:	8b 44 85 c8          	mov    -0x38(%ebp,%eax,4),%eax
+    10a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    unlink(fname);
+    10a3:	83 ec 0c             	sub    $0xc,%esp
+    10a6:	ff 75 e4             	pushl  -0x1c(%ebp)
+    10a9:	e8 71 2e 00 00       	call   3f1f <unlink>
+    10ae:	83 c4 10             	add    $0x10,%esp
+
+    pid = fork();
+    10b1:	e8 11 2e 00 00       	call   3ec7 <fork>
+    10b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    if(pid < 0){
+    10b9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+    10bd:	79 17                	jns    10d6 <fourfiles+0x7d>
+      printf(1, "fork failed\n");
+    10bf:	83 ec 08             	sub    $0x8,%esp
+    10c2:	68 a5 44 00 00       	push   $0x44a5
+    10c7:	6a 01                	push   $0x1
+    10c9:	e8 80 2f 00 00       	call   404e <printf>
+    10ce:	83 c4 10             	add    $0x10,%esp
+      exit();
+    10d1:	e8 f9 2d 00 00       	call   3ecf <exit>
+    }
+
+    if(pid == 0){
+    10d6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+    10da:	0f 85 a5 00 00 00    	jne    1185 <fourfiles+0x12c>
+      fd = open(fname, O_CREATE | O_RDWR);
+    10e0:	83 ec 08             	sub    $0x8,%esp
+    10e3:	68 02 02 00 00       	push   $0x202
+    10e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    10eb:	e8 1f 2e 00 00       	call   3f0f <open>
+    10f0:	83 c4 10             	add    $0x10,%esp
+    10f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+      if(fd < 0){
+    10f6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+    10fa:	79 17                	jns    1113 <fourfiles+0xba>
+        printf(1, "create failed\n");
+    10fc:	83 ec 08             	sub    $0x8,%esp
+    10ff:	68 39 4a 00 00       	push   $0x4a39
+    1104:	6a 01                	push   $0x1
+    1106:	e8 43 2f 00 00       	call   404e <printf>
+    110b:	83 c4 10             	add    $0x10,%esp
+        exit();
+    110e:	e8 bc 2d 00 00       	call   3ecf <exit>
+      }
+      
+      memset(buf, '0'+pi, 512);
+    1113:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    1116:	83 c0 30             	add    $0x30,%eax
+    1119:	83 ec 04             	sub    $0x4,%esp
+    111c:	68 00 02 00 00       	push   $0x200
+    1121:	50                   	push   %eax
+    1122:	68 a0 8a 00 00       	push   $0x8aa0
+    1127:	e8 08 2c 00 00       	call   3d34 <memset>
+    112c:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 12; i++){
+    112f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    1136:	eb 42                	jmp    117a <fourfiles+0x121>
+        if((n = write(fd, buf, 500)) != 500){
+    1138:	83 ec 04             	sub    $0x4,%esp
+    113b:	68 f4 01 00 00       	push   $0x1f4
+    1140:	68 a0 8a 00 00       	push   $0x8aa0
+    1145:	ff 75 dc             	pushl  -0x24(%ebp)
+    1148:	e8 a2 2d 00 00       	call   3eef <write>
+    114d:	83 c4 10             	add    $0x10,%esp
+    1150:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    1153:	81 7d d8 f4 01 00 00 	cmpl   $0x1f4,-0x28(%ebp)
+    115a:	74 1a                	je     1176 <fourfiles+0x11d>
+          printf(1, "write failed %d\n", n);
+    115c:	83 ec 04             	sub    $0x4,%esp
+    115f:	ff 75 d8             	pushl  -0x28(%ebp)
+    1162:	68 48 4a 00 00       	push   $0x4a48
+    1167:	6a 01                	push   $0x1
+    1169:	e8 e0 2e 00 00       	call   404e <printf>
+    116e:	83 c4 10             	add    $0x10,%esp
+          exit();
+    1171:	e8 59 2d 00 00       	call   3ecf <exit>
+        printf(1, "create failed\n");
+        exit();
+      }
+      
+      memset(buf, '0'+pi, 512);
+      for(i = 0; i < 12; i++){
+    1176:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    117a:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
+    117e:	7e b8                	jle    1138 <fourfiles+0xdf>
+        if((n = write(fd, buf, 500)) != 500){
+          printf(1, "write failed %d\n", n);
+          exit();
+        }
+      }
+      exit();
+    1180:	e8 4a 2d 00 00       	call   3ecf <exit>
+  char *names[] = { "f0", "f1", "f2", "f3" };
+  char *fname;
+
+  printf(1, "fourfiles test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    1185:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
+    1189:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
+    118d:	0f 8e 06 ff ff ff    	jle    1099 <fourfiles+0x40>
+      }
+      exit();
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    1193:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+    119a:	eb 09                	jmp    11a5 <fourfiles+0x14c>
+    wait();
+    119c:	e8 36 2d 00 00       	call   3ed7 <wait>
+      }
+      exit();
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    11a1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
+    11a5:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
+    11a9:	7e f1                	jle    119c <fourfiles+0x143>
+    wait();
+  }
+
+  for(i = 0; i < 2; i++){
+    11ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    11b2:	e9 d4 00 00 00       	jmp    128b <fourfiles+0x232>
+    fname = names[i];
+    11b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    11ba:	8b 44 85 c8          	mov    -0x38(%ebp,%eax,4),%eax
+    11be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    fd = open(fname, 0);
+    11c1:	83 ec 08             	sub    $0x8,%esp
+    11c4:	6a 00                	push   $0x0
+    11c6:	ff 75 e4             	pushl  -0x1c(%ebp)
+    11c9:	e8 41 2d 00 00       	call   3f0f <open>
+    11ce:	83 c4 10             	add    $0x10,%esp
+    11d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    total = 0;
+    11d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    11db:	eb 4a                	jmp    1227 <fourfiles+0x1ce>
+      for(j = 0; j < n; j++){
+    11dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    11e4:	eb 33                	jmp    1219 <fourfiles+0x1c0>
+        if(buf[j] != '0'+i){
+    11e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    11e9:	05 a0 8a 00 00       	add    $0x8aa0,%eax
+    11ee:	0f b6 00             	movzbl (%eax),%eax
+    11f1:	0f be c0             	movsbl %al,%eax
+    11f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+    11f7:	83 c2 30             	add    $0x30,%edx
+    11fa:	39 d0                	cmp    %edx,%eax
+    11fc:	74 17                	je     1215 <fourfiles+0x1bc>
+          printf(1, "wrong char\n");
+    11fe:	83 ec 08             	sub    $0x8,%esp
+    1201:	68 59 4a 00 00       	push   $0x4a59
+    1206:	6a 01                	push   $0x1
+    1208:	e8 41 2e 00 00       	call   404e <printf>
+    120d:	83 c4 10             	add    $0x10,%esp
+          exit();
+    1210:	e8 ba 2c 00 00       	call   3ecf <exit>
+  for(i = 0; i < 2; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+      for(j = 0; j < n; j++){
+    1215:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    1219:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    121c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
+    121f:	7c c5                	jl     11e6 <fourfiles+0x18d>
+        if(buf[j] != '0'+i){
+          printf(1, "wrong char\n");
+          exit();
+        }
+      }
+      total += n;
+    1221:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    1224:	01 45 ec             	add    %eax,-0x14(%ebp)
+
+  for(i = 0; i < 2; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    1227:	83 ec 04             	sub    $0x4,%esp
+    122a:	68 00 20 00 00       	push   $0x2000
+    122f:	68 a0 8a 00 00       	push   $0x8aa0
+    1234:	ff 75 dc             	pushl  -0x24(%ebp)
+    1237:	e8 ab 2c 00 00       	call   3ee7 <read>
+    123c:	83 c4 10             	add    $0x10,%esp
+    123f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    1242:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+    1246:	7f 95                	jg     11dd <fourfiles+0x184>
+          exit();
+        }
+      }
+      total += n;
+    }
+    close(fd);
+    1248:	83 ec 0c             	sub    $0xc,%esp
+    124b:	ff 75 dc             	pushl  -0x24(%ebp)
+    124e:	e8 a4 2c 00 00       	call   3ef7 <close>
+    1253:	83 c4 10             	add    $0x10,%esp
+    if(total != 12*500){
+    1256:	81 7d ec 70 17 00 00 	cmpl   $0x1770,-0x14(%ebp)
+    125d:	74 1a                	je     1279 <fourfiles+0x220>
+      printf(1, "wrong length %d\n", total);
+    125f:	83 ec 04             	sub    $0x4,%esp
+    1262:	ff 75 ec             	pushl  -0x14(%ebp)
+    1265:	68 65 4a 00 00       	push   $0x4a65
+    126a:	6a 01                	push   $0x1
+    126c:	e8 dd 2d 00 00       	call   404e <printf>
+    1271:	83 c4 10             	add    $0x10,%esp
+      exit();
+    1274:	e8 56 2c 00 00       	call   3ecf <exit>
+    }
+    unlink(fname);
+    1279:	83 ec 0c             	sub    $0xc,%esp
+    127c:	ff 75 e4             	pushl  -0x1c(%ebp)
+    127f:	e8 9b 2c 00 00       	call   3f1f <unlink>
+    1284:	83 c4 10             	add    $0x10,%esp
+
+  for(pi = 0; pi < 4; pi++){
+    wait();
+  }
+
+  for(i = 0; i < 2; i++){
+    1287:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    128b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
+    128f:	0f 8e 22 ff ff ff    	jle    11b7 <fourfiles+0x15e>
+      exit();
+    }
+    unlink(fname);
+  }
+
+  printf(1, "fourfiles ok\n");
+    1295:	83 ec 08             	sub    $0x8,%esp
+    1298:	68 76 4a 00 00       	push   $0x4a76
+    129d:	6a 01                	push   $0x1
+    129f:	e8 aa 2d 00 00       	call   404e <printf>
+    12a4:	83 c4 10             	add    $0x10,%esp
+}
+    12a7:	90                   	nop
+    12a8:	c9                   	leave  
+    12a9:	c3                   	ret    
+
+000012aa <createdelete>:
+
+// four processes create and delete different files in same directory
+void
+createdelete(void)
+{
+    12aa:	55                   	push   %ebp
+    12ab:	89 e5                	mov    %esp,%ebp
+    12ad:	83 ec 38             	sub    $0x38,%esp
+  enum { N = 20 };
+  int pid, i, fd, pi;
+  char name[32];
+
+  printf(1, "createdelete test\n");
+    12b0:	83 ec 08             	sub    $0x8,%esp
+    12b3:	68 84 4a 00 00       	push   $0x4a84
+    12b8:	6a 01                	push   $0x1
+    12ba:	e8 8f 2d 00 00       	call   404e <printf>
+    12bf:	83 c4 10             	add    $0x10,%esp
+
+  for(pi = 0; pi < 4; pi++){
+    12c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    12c9:	e9 f6 00 00 00       	jmp    13c4 <createdelete+0x11a>
+    pid = fork();
+    12ce:	e8 f4 2b 00 00       	call   3ec7 <fork>
+    12d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if(pid < 0){
+    12d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    12da:	79 17                	jns    12f3 <createdelete+0x49>
+      printf(1, "fork failed\n");
+    12dc:	83 ec 08             	sub    $0x8,%esp
+    12df:	68 a5 44 00 00       	push   $0x44a5
+    12e4:	6a 01                	push   $0x1
+    12e6:	e8 63 2d 00 00       	call   404e <printf>
+    12eb:	83 c4 10             	add    $0x10,%esp
+      exit();
+    12ee:	e8 dc 2b 00 00       	call   3ecf <exit>
+    }
+
+    if(pid == 0){
+    12f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    12f7:	0f 85 c3 00 00 00    	jne    13c0 <createdelete+0x116>
+      name[0] = 'p' + pi;
+    12fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    1300:	83 c0 70             	add    $0x70,%eax
+    1303:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[2] = '\0';
+    1306:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+      for(i = 0; i < N; i++){
+    130a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    1311:	e9 9b 00 00 00       	jmp    13b1 <createdelete+0x107>
+        name[1] = '0' + i;
+    1316:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1319:	83 c0 30             	add    $0x30,%eax
+    131c:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    131f:	83 ec 08             	sub    $0x8,%esp
+    1322:	68 02 02 00 00       	push   $0x202
+    1327:	8d 45 c8             	lea    -0x38(%ebp),%eax
+    132a:	50                   	push   %eax
+    132b:	e8 df 2b 00 00       	call   3f0f <open>
+    1330:	83 c4 10             	add    $0x10,%esp
+    1333:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if(fd < 0){
+    1336:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+    133a:	79 17                	jns    1353 <createdelete+0xa9>
+          printf(1, "create failed\n");
+    133c:	83 ec 08             	sub    $0x8,%esp
+    133f:	68 39 4a 00 00       	push   $0x4a39
+    1344:	6a 01                	push   $0x1
+    1346:	e8 03 2d 00 00       	call   404e <printf>
+    134b:	83 c4 10             	add    $0x10,%esp
+          exit();
+    134e:	e8 7c 2b 00 00       	call   3ecf <exit>
+        }
+        close(fd);
+    1353:	83 ec 0c             	sub    $0xc,%esp
+    1356:	ff 75 e8             	pushl  -0x18(%ebp)
+    1359:	e8 99 2b 00 00       	call   3ef7 <close>
+    135e:	83 c4 10             	add    $0x10,%esp
+        if(i > 0 && (i % 2 ) == 0){
+    1361:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    1365:	7e 46                	jle    13ad <createdelete+0x103>
+    1367:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    136a:	83 e0 01             	and    $0x1,%eax
+    136d:	85 c0                	test   %eax,%eax
+    136f:	75 3c                	jne    13ad <createdelete+0x103>
+          name[1] = '0' + (i / 2);
+    1371:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1374:	89 c2                	mov    %eax,%edx
+    1376:	c1 ea 1f             	shr    $0x1f,%edx
+    1379:	01 d0                	add    %edx,%eax
+    137b:	d1 f8                	sar    %eax
+    137d:	83 c0 30             	add    $0x30,%eax
+    1380:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    1383:	83 ec 0c             	sub    $0xc,%esp
+    1386:	8d 45 c8             	lea    -0x38(%ebp),%eax
+    1389:	50                   	push   %eax
+    138a:	e8 90 2b 00 00       	call   3f1f <unlink>
+    138f:	83 c4 10             	add    $0x10,%esp
+    1392:	85 c0                	test   %eax,%eax
+    1394:	79 17                	jns    13ad <createdelete+0x103>
+            printf(1, "unlink failed\n");
+    1396:	83 ec 08             	sub    $0x8,%esp
+    1399:	68 28 45 00 00       	push   $0x4528
+    139e:	6a 01                	push   $0x1
+    13a0:	e8 a9 2c 00 00       	call   404e <printf>
+    13a5:	83 c4 10             	add    $0x10,%esp
+            exit();
+    13a8:	e8 22 2b 00 00       	call   3ecf <exit>
+    }
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+      name[2] = '\0';
+      for(i = 0; i < N; i++){
+    13ad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    13b1:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
+    13b5:	0f 8e 5b ff ff ff    	jle    1316 <createdelete+0x6c>
+            printf(1, "unlink failed\n");
+            exit();
+          }
+        }
+      }
+      exit();
+    13bb:	e8 0f 2b 00 00       	call   3ecf <exit>
+  int pid, i, fd, pi;
+  char name[32];
+
+  printf(1, "createdelete test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    13c0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    13c4:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
+    13c8:	0f 8e 00 ff ff ff    	jle    12ce <createdelete+0x24>
+      }
+      exit();
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    13ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    13d5:	eb 09                	jmp    13e0 <createdelete+0x136>
+    wait();
+    13d7:	e8 fb 2a 00 00       	call   3ed7 <wait>
+      }
+      exit();
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    13dc:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    13e0:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
+    13e4:	7e f1                	jle    13d7 <createdelete+0x12d>
+    wait();
+  }
+
+  name[0] = name[1] = name[2] = 0;
+    13e6:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    13ea:	0f b6 45 ca          	movzbl -0x36(%ebp),%eax
+    13ee:	88 45 c9             	mov    %al,-0x37(%ebp)
+    13f1:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+    13f5:	88 45 c8             	mov    %al,-0x38(%ebp)
+  for(i = 0; i < N; i++){
+    13f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    13ff:	e9 b2 00 00 00       	jmp    14b6 <createdelete+0x20c>
+    for(pi = 0; pi < 4; pi++){
+    1404:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    140b:	e9 98 00 00 00       	jmp    14a8 <createdelete+0x1fe>
+      name[0] = 'p' + pi;
+    1410:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    1413:	83 c0 70             	add    $0x70,%eax
+    1416:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    1419:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    141c:	83 c0 30             	add    $0x30,%eax
+    141f:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1422:	83 ec 08             	sub    $0x8,%esp
+    1425:	6a 00                	push   $0x0
+    1427:	8d 45 c8             	lea    -0x38(%ebp),%eax
+    142a:	50                   	push   %eax
+    142b:	e8 df 2a 00 00       	call   3f0f <open>
+    1430:	83 c4 10             	add    $0x10,%esp
+    1433:	89 45 e8             	mov    %eax,-0x18(%ebp)
+      if((i == 0 || i >= N/2) && fd < 0){
+    1436:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    143a:	74 06                	je     1442 <createdelete+0x198>
+    143c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+    1440:	7e 21                	jle    1463 <createdelete+0x1b9>
+    1442:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+    1446:	79 1b                	jns    1463 <createdelete+0x1b9>
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    1448:	83 ec 04             	sub    $0x4,%esp
+    144b:	8d 45 c8             	lea    -0x38(%ebp),%eax
+    144e:	50                   	push   %eax
+    144f:	68 98 4a 00 00       	push   $0x4a98
+    1454:	6a 01                	push   $0x1
+    1456:	e8 f3 2b 00 00       	call   404e <printf>
+    145b:	83 c4 10             	add    $0x10,%esp
+        exit();
+    145e:	e8 6c 2a 00 00       	call   3ecf <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1463:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    1467:	7e 27                	jle    1490 <createdelete+0x1e6>
+    1469:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+    146d:	7f 21                	jg     1490 <createdelete+0x1e6>
+    146f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+    1473:	78 1b                	js     1490 <createdelete+0x1e6>
+        printf(1, "oops createdelete %s did exist\n", name);
+    1475:	83 ec 04             	sub    $0x4,%esp
+    1478:	8d 45 c8             	lea    -0x38(%ebp),%eax
+    147b:	50                   	push   %eax
+    147c:	68 bc 4a 00 00       	push   $0x4abc
+    1481:	6a 01                	push   $0x1
+    1483:	e8 c6 2b 00 00       	call   404e <printf>
+    1488:	83 c4 10             	add    $0x10,%esp
+        exit();
+    148b:	e8 3f 2a 00 00       	call   3ecf <exit>
+      }
+      if(fd >= 0)
+    1490:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+    1494:	78 0e                	js     14a4 <createdelete+0x1fa>
+        close(fd);
+    1496:	83 ec 0c             	sub    $0xc,%esp
+    1499:	ff 75 e8             	pushl  -0x18(%ebp)
+    149c:	e8 56 2a 00 00       	call   3ef7 <close>
+    14a1:	83 c4 10             	add    $0x10,%esp
+    wait();
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+    14a4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    14a8:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
+    14ac:	0f 8e 5e ff ff ff    	jle    1410 <createdelete+0x166>
+  for(pi = 0; pi < 4; pi++){
+    wait();
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    14b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    14b6:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
+    14ba:	0f 8e 44 ff ff ff    	jle    1404 <createdelete+0x15a>
+      if(fd >= 0)
+        close(fd);
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    14c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    14c7:	eb 38                	jmp    1501 <createdelete+0x257>
+    for(pi = 0; pi < 4; pi++){
+    14c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    14d0:	eb 25                	jmp    14f7 <createdelete+0x24d>
+      name[0] = 'p' + i;
+    14d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    14d5:	83 c0 70             	add    $0x70,%eax
+    14d8:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    14db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    14de:	83 c0 30             	add    $0x30,%eax
+    14e1:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    14e4:	83 ec 0c             	sub    $0xc,%esp
+    14e7:	8d 45 c8             	lea    -0x38(%ebp),%eax
+    14ea:	50                   	push   %eax
+    14eb:	e8 2f 2a 00 00       	call   3f1f <unlink>
+    14f0:	83 c4 10             	add    $0x10,%esp
+        close(fd);
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+    14f3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    14f7:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
+    14fb:	7e d5                	jle    14d2 <createdelete+0x228>
+      if(fd >= 0)
+        close(fd);
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    14fd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    1501:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
+    1505:	7e c2                	jle    14c9 <createdelete+0x21f>
+      name[1] = '0' + i;
+      unlink(name);
+    }
+  }
+
+  printf(1, "createdelete ok\n");
+    1507:	83 ec 08             	sub    $0x8,%esp
+    150a:	68 dc 4a 00 00       	push   $0x4adc
+    150f:	6a 01                	push   $0x1
+    1511:	e8 38 2b 00 00       	call   404e <printf>
+    1516:	83 c4 10             	add    $0x10,%esp
+}
+    1519:	90                   	nop
+    151a:	c9                   	leave  
+    151b:	c3                   	ret    
+
+0000151c <unlinkread>:
+
+// can I unlink a file and still read it?
+void
+unlinkread(void)
+{
+    151c:	55                   	push   %ebp
+    151d:	89 e5                	mov    %esp,%ebp
+    151f:	83 ec 18             	sub    $0x18,%esp
+  int fd, fd1;
+
+  printf(1, "unlinkread test\n");
+    1522:	83 ec 08             	sub    $0x8,%esp
+    1525:	68 ed 4a 00 00       	push   $0x4aed
+    152a:	6a 01                	push   $0x1
+    152c:	e8 1d 2b 00 00       	call   404e <printf>
+    1531:	83 c4 10             	add    $0x10,%esp
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    1534:	83 ec 08             	sub    $0x8,%esp
+    1537:	68 02 02 00 00       	push   $0x202
+    153c:	68 fe 4a 00 00       	push   $0x4afe
+    1541:	e8 c9 29 00 00       	call   3f0f <open>
+    1546:	83 c4 10             	add    $0x10,%esp
+    1549:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    154c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    1550:	79 17                	jns    1569 <unlinkread+0x4d>
+    printf(1, "create unlinkread failed\n");
+    1552:	83 ec 08             	sub    $0x8,%esp
+    1555:	68 09 4b 00 00       	push   $0x4b09
+    155a:	6a 01                	push   $0x1
+    155c:	e8 ed 2a 00 00       	call   404e <printf>
+    1561:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1564:	e8 66 29 00 00       	call   3ecf <exit>
+  }
+  write(fd, "hello", 5);
+    1569:	83 ec 04             	sub    $0x4,%esp
+    156c:	6a 05                	push   $0x5
+    156e:	68 23 4b 00 00       	push   $0x4b23
+    1573:	ff 75 f4             	pushl  -0xc(%ebp)
+    1576:	e8 74 29 00 00       	call   3eef <write>
+    157b:	83 c4 10             	add    $0x10,%esp
+  close(fd);
+    157e:	83 ec 0c             	sub    $0xc,%esp
+    1581:	ff 75 f4             	pushl  -0xc(%ebp)
+    1584:	e8 6e 29 00 00       	call   3ef7 <close>
+    1589:	83 c4 10             	add    $0x10,%esp
+
+  fd = open("unlinkread", O_RDWR);
+    158c:	83 ec 08             	sub    $0x8,%esp
+    158f:	6a 02                	push   $0x2
+    1591:	68 fe 4a 00 00       	push   $0x4afe
+    1596:	e8 74 29 00 00       	call   3f0f <open>
+    159b:	83 c4 10             	add    $0x10,%esp
+    159e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    15a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    15a5:	79 17                	jns    15be <unlinkread+0xa2>
+    printf(1, "open unlinkread failed\n");
+    15a7:	83 ec 08             	sub    $0x8,%esp
+    15aa:	68 29 4b 00 00       	push   $0x4b29
+    15af:	6a 01                	push   $0x1
+    15b1:	e8 98 2a 00 00       	call   404e <printf>
+    15b6:	83 c4 10             	add    $0x10,%esp
+    exit();
+    15b9:	e8 11 29 00 00       	call   3ecf <exit>
+  }
+  if(unlink("unlinkread") != 0){
+    15be:	83 ec 0c             	sub    $0xc,%esp
+    15c1:	68 fe 4a 00 00       	push   $0x4afe
+    15c6:	e8 54 29 00 00       	call   3f1f <unlink>
+    15cb:	83 c4 10             	add    $0x10,%esp
+    15ce:	85 c0                	test   %eax,%eax
+    15d0:	74 17                	je     15e9 <unlinkread+0xcd>
+    printf(1, "unlink unlinkread failed\n");
+    15d2:	83 ec 08             	sub    $0x8,%esp
+    15d5:	68 41 4b 00 00       	push   $0x4b41
+    15da:	6a 01                	push   $0x1
+    15dc:	e8 6d 2a 00 00       	call   404e <printf>
+    15e1:	83 c4 10             	add    $0x10,%esp
+    exit();
+    15e4:	e8 e6 28 00 00       	call   3ecf <exit>
+  }
+
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    15e9:	83 ec 08             	sub    $0x8,%esp
+    15ec:	68 02 02 00 00       	push   $0x202
+    15f1:	68 fe 4a 00 00       	push   $0x4afe
+    15f6:	e8 14 29 00 00       	call   3f0f <open>
+    15fb:	83 c4 10             	add    $0x10,%esp
+    15fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  write(fd1, "yyy", 3);
+    1601:	83 ec 04             	sub    $0x4,%esp
+    1604:	6a 03                	push   $0x3
+    1606:	68 5b 4b 00 00       	push   $0x4b5b
+    160b:	ff 75 f0             	pushl  -0x10(%ebp)
+    160e:	e8 dc 28 00 00       	call   3eef <write>
+    1613:	83 c4 10             	add    $0x10,%esp
+  close(fd1);
+    1616:	83 ec 0c             	sub    $0xc,%esp
+    1619:	ff 75 f0             	pushl  -0x10(%ebp)
+    161c:	e8 d6 28 00 00       	call   3ef7 <close>
+    1621:	83 c4 10             	add    $0x10,%esp
+
+  if(read(fd, buf, sizeof(buf)) != 5){
+    1624:	83 ec 04             	sub    $0x4,%esp
+    1627:	68 00 20 00 00       	push   $0x2000
+    162c:	68 a0 8a 00 00       	push   $0x8aa0
+    1631:	ff 75 f4             	pushl  -0xc(%ebp)
+    1634:	e8 ae 28 00 00       	call   3ee7 <read>
+    1639:	83 c4 10             	add    $0x10,%esp
+    163c:	83 f8 05             	cmp    $0x5,%eax
+    163f:	74 17                	je     1658 <unlinkread+0x13c>
+    printf(1, "unlinkread read failed");
+    1641:	83 ec 08             	sub    $0x8,%esp
+    1644:	68 5f 4b 00 00       	push   $0x4b5f
+    1649:	6a 01                	push   $0x1
+    164b:	e8 fe 29 00 00       	call   404e <printf>
+    1650:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1653:	e8 77 28 00 00       	call   3ecf <exit>
+  }
+  if(buf[0] != 'h'){
+    1658:	0f b6 05 a0 8a 00 00 	movzbl 0x8aa0,%eax
+    165f:	3c 68                	cmp    $0x68,%al
+    1661:	74 17                	je     167a <unlinkread+0x15e>
+    printf(1, "unlinkread wrong data\n");
+    1663:	83 ec 08             	sub    $0x8,%esp
+    1666:	68 76 4b 00 00       	push   $0x4b76
+    166b:	6a 01                	push   $0x1
+    166d:	e8 dc 29 00 00       	call   404e <printf>
+    1672:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1675:	e8 55 28 00 00       	call   3ecf <exit>
+  }
+  if(write(fd, buf, 10) != 10){
+    167a:	83 ec 04             	sub    $0x4,%esp
+    167d:	6a 0a                	push   $0xa
+    167f:	68 a0 8a 00 00       	push   $0x8aa0
+    1684:	ff 75 f4             	pushl  -0xc(%ebp)
+    1687:	e8 63 28 00 00       	call   3eef <write>
+    168c:	83 c4 10             	add    $0x10,%esp
+    168f:	83 f8 0a             	cmp    $0xa,%eax
+    1692:	74 17                	je     16ab <unlinkread+0x18f>
+    printf(1, "unlinkread write failed\n");
+    1694:	83 ec 08             	sub    $0x8,%esp
+    1697:	68 8d 4b 00 00       	push   $0x4b8d
+    169c:	6a 01                	push   $0x1
+    169e:	e8 ab 29 00 00       	call   404e <printf>
+    16a3:	83 c4 10             	add    $0x10,%esp
+    exit();
+    16a6:	e8 24 28 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    16ab:	83 ec 0c             	sub    $0xc,%esp
+    16ae:	ff 75 f4             	pushl  -0xc(%ebp)
+    16b1:	e8 41 28 00 00       	call   3ef7 <close>
+    16b6:	83 c4 10             	add    $0x10,%esp
+  unlink("unlinkread");
+    16b9:	83 ec 0c             	sub    $0xc,%esp
+    16bc:	68 fe 4a 00 00       	push   $0x4afe
+    16c1:	e8 59 28 00 00       	call   3f1f <unlink>
+    16c6:	83 c4 10             	add    $0x10,%esp
+  printf(1, "unlinkread ok\n");
+    16c9:	83 ec 08             	sub    $0x8,%esp
+    16cc:	68 a6 4b 00 00       	push   $0x4ba6
+    16d1:	6a 01                	push   $0x1
+    16d3:	e8 76 29 00 00       	call   404e <printf>
+    16d8:	83 c4 10             	add    $0x10,%esp
+}
+    16db:	90                   	nop
+    16dc:	c9                   	leave  
+    16dd:	c3                   	ret    
+
+000016de <linktest>:
+
+void
+linktest(void)
+{
+    16de:	55                   	push   %ebp
+    16df:	89 e5                	mov    %esp,%ebp
+    16e1:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+
+  printf(1, "linktest\n");
+    16e4:	83 ec 08             	sub    $0x8,%esp
+    16e7:	68 b5 4b 00 00       	push   $0x4bb5
+    16ec:	6a 01                	push   $0x1
+    16ee:	e8 5b 29 00 00       	call   404e <printf>
+    16f3:	83 c4 10             	add    $0x10,%esp
+
+  unlink("lf1");
+    16f6:	83 ec 0c             	sub    $0xc,%esp
+    16f9:	68 bf 4b 00 00       	push   $0x4bbf
+    16fe:	e8 1c 28 00 00       	call   3f1f <unlink>
+    1703:	83 c4 10             	add    $0x10,%esp
+  unlink("lf2");
+    1706:	83 ec 0c             	sub    $0xc,%esp
+    1709:	68 c3 4b 00 00       	push   $0x4bc3
+    170e:	e8 0c 28 00 00       	call   3f1f <unlink>
+    1713:	83 c4 10             	add    $0x10,%esp
+
+  fd = open("lf1", O_CREATE|O_RDWR);
+    1716:	83 ec 08             	sub    $0x8,%esp
+    1719:	68 02 02 00 00       	push   $0x202
+    171e:	68 bf 4b 00 00       	push   $0x4bbf
+    1723:	e8 e7 27 00 00       	call   3f0f <open>
+    1728:	83 c4 10             	add    $0x10,%esp
+    172b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    172e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    1732:	79 17                	jns    174b <linktest+0x6d>
+    printf(1, "create lf1 failed\n");
+    1734:	83 ec 08             	sub    $0x8,%esp
+    1737:	68 c7 4b 00 00       	push   $0x4bc7
+    173c:	6a 01                	push   $0x1
+    173e:	e8 0b 29 00 00       	call   404e <printf>
+    1743:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1746:	e8 84 27 00 00       	call   3ecf <exit>
+  }
+  if(write(fd, "hello", 5) != 5){
+    174b:	83 ec 04             	sub    $0x4,%esp
+    174e:	6a 05                	push   $0x5
+    1750:	68 23 4b 00 00       	push   $0x4b23
+    1755:	ff 75 f4             	pushl  -0xc(%ebp)
+    1758:	e8 92 27 00 00       	call   3eef <write>
+    175d:	83 c4 10             	add    $0x10,%esp
+    1760:	83 f8 05             	cmp    $0x5,%eax
+    1763:	74 17                	je     177c <linktest+0x9e>
+    printf(1, "write lf1 failed\n");
+    1765:	83 ec 08             	sub    $0x8,%esp
+    1768:	68 da 4b 00 00       	push   $0x4bda
+    176d:	6a 01                	push   $0x1
+    176f:	e8 da 28 00 00       	call   404e <printf>
+    1774:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1777:	e8 53 27 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    177c:	83 ec 0c             	sub    $0xc,%esp
+    177f:	ff 75 f4             	pushl  -0xc(%ebp)
+    1782:	e8 70 27 00 00       	call   3ef7 <close>
+    1787:	83 c4 10             	add    $0x10,%esp
+
+  if(link("lf1", "lf2") < 0){
+    178a:	83 ec 08             	sub    $0x8,%esp
+    178d:	68 c3 4b 00 00       	push   $0x4bc3
+    1792:	68 bf 4b 00 00       	push   $0x4bbf
+    1797:	e8 93 27 00 00       	call   3f2f <link>
+    179c:	83 c4 10             	add    $0x10,%esp
+    179f:	85 c0                	test   %eax,%eax
+    17a1:	79 17                	jns    17ba <linktest+0xdc>
+    printf(1, "link lf1 lf2 failed\n");
+    17a3:	83 ec 08             	sub    $0x8,%esp
+    17a6:	68 ec 4b 00 00       	push   $0x4bec
+    17ab:	6a 01                	push   $0x1
+    17ad:	e8 9c 28 00 00       	call   404e <printf>
+    17b2:	83 c4 10             	add    $0x10,%esp
+    exit();
+    17b5:	e8 15 27 00 00       	call   3ecf <exit>
+  }
+  unlink("lf1");
+    17ba:	83 ec 0c             	sub    $0xc,%esp
+    17bd:	68 bf 4b 00 00       	push   $0x4bbf
+    17c2:	e8 58 27 00 00       	call   3f1f <unlink>
+    17c7:	83 c4 10             	add    $0x10,%esp
+
+  if(open("lf1", 0) >= 0){
+    17ca:	83 ec 08             	sub    $0x8,%esp
+    17cd:	6a 00                	push   $0x0
+    17cf:	68 bf 4b 00 00       	push   $0x4bbf
+    17d4:	e8 36 27 00 00       	call   3f0f <open>
+    17d9:	83 c4 10             	add    $0x10,%esp
+    17dc:	85 c0                	test   %eax,%eax
+    17de:	78 17                	js     17f7 <linktest+0x119>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    17e0:	83 ec 08             	sub    $0x8,%esp
+    17e3:	68 04 4c 00 00       	push   $0x4c04
+    17e8:	6a 01                	push   $0x1
+    17ea:	e8 5f 28 00 00       	call   404e <printf>
+    17ef:	83 c4 10             	add    $0x10,%esp
+    exit();
+    17f2:	e8 d8 26 00 00       	call   3ecf <exit>
+  }
+
+  fd = open("lf2", 0);
+    17f7:	83 ec 08             	sub    $0x8,%esp
+    17fa:	6a 00                	push   $0x0
+    17fc:	68 c3 4b 00 00       	push   $0x4bc3
+    1801:	e8 09 27 00 00       	call   3f0f <open>
+    1806:	83 c4 10             	add    $0x10,%esp
+    1809:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    180c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    1810:	79 17                	jns    1829 <linktest+0x14b>
+    printf(1, "open lf2 failed\n");
+    1812:	83 ec 08             	sub    $0x8,%esp
+    1815:	68 29 4c 00 00       	push   $0x4c29
+    181a:	6a 01                	push   $0x1
+    181c:	e8 2d 28 00 00       	call   404e <printf>
+    1821:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1824:	e8 a6 26 00 00       	call   3ecf <exit>
+  }
+  if(read(fd, buf, sizeof(buf)) != 5){
+    1829:	83 ec 04             	sub    $0x4,%esp
+    182c:	68 00 20 00 00       	push   $0x2000
+    1831:	68 a0 8a 00 00       	push   $0x8aa0
+    1836:	ff 75 f4             	pushl  -0xc(%ebp)
+    1839:	e8 a9 26 00 00       	call   3ee7 <read>
+    183e:	83 c4 10             	add    $0x10,%esp
+    1841:	83 f8 05             	cmp    $0x5,%eax
+    1844:	74 17                	je     185d <linktest+0x17f>
+    printf(1, "read lf2 failed\n");
+    1846:	83 ec 08             	sub    $0x8,%esp
+    1849:	68 3a 4c 00 00       	push   $0x4c3a
+    184e:	6a 01                	push   $0x1
+    1850:	e8 f9 27 00 00       	call   404e <printf>
+    1855:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1858:	e8 72 26 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    185d:	83 ec 0c             	sub    $0xc,%esp
+    1860:	ff 75 f4             	pushl  -0xc(%ebp)
+    1863:	e8 8f 26 00 00       	call   3ef7 <close>
+    1868:	83 c4 10             	add    $0x10,%esp
+
+  if(link("lf2", "lf2") >= 0){
+    186b:	83 ec 08             	sub    $0x8,%esp
+    186e:	68 c3 4b 00 00       	push   $0x4bc3
+    1873:	68 c3 4b 00 00       	push   $0x4bc3
+    1878:	e8 b2 26 00 00       	call   3f2f <link>
+    187d:	83 c4 10             	add    $0x10,%esp
+    1880:	85 c0                	test   %eax,%eax
+    1882:	78 17                	js     189b <linktest+0x1bd>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    1884:	83 ec 08             	sub    $0x8,%esp
+    1887:	68 4b 4c 00 00       	push   $0x4c4b
+    188c:	6a 01                	push   $0x1
+    188e:	e8 bb 27 00 00       	call   404e <printf>
+    1893:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1896:	e8 34 26 00 00       	call   3ecf <exit>
+  }
+
+  unlink("lf2");
+    189b:	83 ec 0c             	sub    $0xc,%esp
+    189e:	68 c3 4b 00 00       	push   $0x4bc3
+    18a3:	e8 77 26 00 00       	call   3f1f <unlink>
+    18a8:	83 c4 10             	add    $0x10,%esp
+  if(link("lf2", "lf1") >= 0){
+    18ab:	83 ec 08             	sub    $0x8,%esp
+    18ae:	68 bf 4b 00 00       	push   $0x4bbf
+    18b3:	68 c3 4b 00 00       	push   $0x4bc3
+    18b8:	e8 72 26 00 00       	call   3f2f <link>
+    18bd:	83 c4 10             	add    $0x10,%esp
+    18c0:	85 c0                	test   %eax,%eax
+    18c2:	78 17                	js     18db <linktest+0x1fd>
+    printf(1, "link non-existant succeeded! oops\n");
+    18c4:	83 ec 08             	sub    $0x8,%esp
+    18c7:	68 6c 4c 00 00       	push   $0x4c6c
+    18cc:	6a 01                	push   $0x1
+    18ce:	e8 7b 27 00 00       	call   404e <printf>
+    18d3:	83 c4 10             	add    $0x10,%esp
+    exit();
+    18d6:	e8 f4 25 00 00       	call   3ecf <exit>
+  }
+
+  if(link(".", "lf1") >= 0){
+    18db:	83 ec 08             	sub    $0x8,%esp
+    18de:	68 bf 4b 00 00       	push   $0x4bbf
+    18e3:	68 8f 4c 00 00       	push   $0x4c8f
+    18e8:	e8 42 26 00 00       	call   3f2f <link>
+    18ed:	83 c4 10             	add    $0x10,%esp
+    18f0:	85 c0                	test   %eax,%eax
+    18f2:	78 17                	js     190b <linktest+0x22d>
+    printf(1, "link . lf1 succeeded! oops\n");
+    18f4:	83 ec 08             	sub    $0x8,%esp
+    18f7:	68 91 4c 00 00       	push   $0x4c91
+    18fc:	6a 01                	push   $0x1
+    18fe:	e8 4b 27 00 00       	call   404e <printf>
+    1903:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1906:	e8 c4 25 00 00       	call   3ecf <exit>
+  }
+
+  printf(1, "linktest ok\n");
+    190b:	83 ec 08             	sub    $0x8,%esp
+    190e:	68 ad 4c 00 00       	push   $0x4cad
+    1913:	6a 01                	push   $0x1
+    1915:	e8 34 27 00 00       	call   404e <printf>
+    191a:	83 c4 10             	add    $0x10,%esp
+}
+    191d:	90                   	nop
+    191e:	c9                   	leave  
+    191f:	c3                   	ret    
+
+00001920 <concreate>:
+
+// test concurrent create/link/unlink of the same file
+void
+concreate(void)
+{
+    1920:	55                   	push   %ebp
+    1921:	89 e5                	mov    %esp,%ebp
+    1923:	83 ec 58             	sub    $0x58,%esp
+  struct {
+    ushort inum;
+    char name[14];
+  } de;
+
+  printf(1, "concreate test\n");
+    1926:	83 ec 08             	sub    $0x8,%esp
+    1929:	68 ba 4c 00 00       	push   $0x4cba
+    192e:	6a 01                	push   $0x1
+    1930:	e8 19 27 00 00       	call   404e <printf>
+    1935:	83 c4 10             	add    $0x10,%esp
+  file[0] = 'C';
+    1938:	c6 45 e5 43          	movb   $0x43,-0x1b(%ebp)
+  file[2] = '\0';
+    193c:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
+  for(i = 0; i < 40; i++){
+    1940:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    1947:	e9 fc 00 00 00       	jmp    1a48 <concreate+0x128>
+    file[1] = '0' + i;
+    194c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    194f:	83 c0 30             	add    $0x30,%eax
+    1952:	88 45 e6             	mov    %al,-0x1a(%ebp)
+    unlink(file);
+    1955:	83 ec 0c             	sub    $0xc,%esp
+    1958:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    195b:	50                   	push   %eax
+    195c:	e8 be 25 00 00       	call   3f1f <unlink>
+    1961:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    1964:	e8 5e 25 00 00       	call   3ec7 <fork>
+    1969:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if(pid && (i % 3) == 1){
+    196c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1970:	74 3b                	je     19ad <concreate+0x8d>
+    1972:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    1975:	ba 56 55 55 55       	mov    $0x55555556,%edx
+    197a:	89 c8                	mov    %ecx,%eax
+    197c:	f7 ea                	imul   %edx
+    197e:	89 c8                	mov    %ecx,%eax
+    1980:	c1 f8 1f             	sar    $0x1f,%eax
+    1983:	29 c2                	sub    %eax,%edx
+    1985:	89 d0                	mov    %edx,%eax
+    1987:	01 c0                	add    %eax,%eax
+    1989:	01 d0                	add    %edx,%eax
+    198b:	29 c1                	sub    %eax,%ecx
+    198d:	89 ca                	mov    %ecx,%edx
+    198f:	83 fa 01             	cmp    $0x1,%edx
+    1992:	75 19                	jne    19ad <concreate+0x8d>
+      link("C0", file);
+    1994:	83 ec 08             	sub    $0x8,%esp
+    1997:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    199a:	50                   	push   %eax
+    199b:	68 ca 4c 00 00       	push   $0x4cca
+    19a0:	e8 8a 25 00 00       	call   3f2f <link>
+    19a5:	83 c4 10             	add    $0x10,%esp
+    19a8:	e9 87 00 00 00       	jmp    1a34 <concreate+0x114>
+    } else if(pid == 0 && (i % 5) == 1){
+    19ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    19b1:	75 3b                	jne    19ee <concreate+0xce>
+    19b3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    19b6:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    19bb:	89 c8                	mov    %ecx,%eax
+    19bd:	f7 ea                	imul   %edx
+    19bf:	d1 fa                	sar    %edx
+    19c1:	89 c8                	mov    %ecx,%eax
+    19c3:	c1 f8 1f             	sar    $0x1f,%eax
+    19c6:	29 c2                	sub    %eax,%edx
+    19c8:	89 d0                	mov    %edx,%eax
+    19ca:	c1 e0 02             	shl    $0x2,%eax
+    19cd:	01 d0                	add    %edx,%eax
+    19cf:	29 c1                	sub    %eax,%ecx
+    19d1:	89 ca                	mov    %ecx,%edx
+    19d3:	83 fa 01             	cmp    $0x1,%edx
+    19d6:	75 16                	jne    19ee <concreate+0xce>
+      link("C0", file);
+    19d8:	83 ec 08             	sub    $0x8,%esp
+    19db:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    19de:	50                   	push   %eax
+    19df:	68 ca 4c 00 00       	push   $0x4cca
+    19e4:	e8 46 25 00 00       	call   3f2f <link>
+    19e9:	83 c4 10             	add    $0x10,%esp
+    19ec:	eb 46                	jmp    1a34 <concreate+0x114>
+    } else {
+      fd = open(file, O_CREATE | O_RDWR);
+    19ee:	83 ec 08             	sub    $0x8,%esp
+    19f1:	68 02 02 00 00       	push   $0x202
+    19f6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    19f9:	50                   	push   %eax
+    19fa:	e8 10 25 00 00       	call   3f0f <open>
+    19ff:	83 c4 10             	add    $0x10,%esp
+    1a02:	89 45 e8             	mov    %eax,-0x18(%ebp)
+      if(fd < 0){
+    1a05:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+    1a09:	79 1b                	jns    1a26 <concreate+0x106>
+        printf(1, "concreate create %s failed\n", file);
+    1a0b:	83 ec 04             	sub    $0x4,%esp
+    1a0e:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1a11:	50                   	push   %eax
+    1a12:	68 cd 4c 00 00       	push   $0x4ccd
+    1a17:	6a 01                	push   $0x1
+    1a19:	e8 30 26 00 00       	call   404e <printf>
+    1a1e:	83 c4 10             	add    $0x10,%esp
+        exit();
+    1a21:	e8 a9 24 00 00       	call   3ecf <exit>
+      }
+      close(fd);
+    1a26:	83 ec 0c             	sub    $0xc,%esp
+    1a29:	ff 75 e8             	pushl  -0x18(%ebp)
+    1a2c:	e8 c6 24 00 00       	call   3ef7 <close>
+    1a31:	83 c4 10             	add    $0x10,%esp
+    }
+    if(pid == 0)
+    1a34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1a38:	75 05                	jne    1a3f <concreate+0x11f>
+      exit();
+    1a3a:	e8 90 24 00 00       	call   3ecf <exit>
+    else
+      wait();
+    1a3f:	e8 93 24 00 00       	call   3ed7 <wait>
+  } de;
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    1a44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    1a48:	83 7d f4 27          	cmpl   $0x27,-0xc(%ebp)
+    1a4c:	0f 8e fa fe ff ff    	jle    194c <concreate+0x2c>
+      exit();
+    else
+      wait();
+  }
+
+  memset(fa, 0, sizeof(fa));
+    1a52:	83 ec 04             	sub    $0x4,%esp
+    1a55:	6a 28                	push   $0x28
+    1a57:	6a 00                	push   $0x0
+    1a59:	8d 45 bd             	lea    -0x43(%ebp),%eax
+    1a5c:	50                   	push   %eax
+    1a5d:	e8 d2 22 00 00       	call   3d34 <memset>
+    1a62:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    1a65:	83 ec 08             	sub    $0x8,%esp
+    1a68:	6a 00                	push   $0x0
+    1a6a:	68 8f 4c 00 00       	push   $0x4c8f
+    1a6f:	e8 9b 24 00 00       	call   3f0f <open>
+    1a74:	83 c4 10             	add    $0x10,%esp
+    1a77:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  n = 0;
+    1a7a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  while(read(fd, &de, sizeof(de)) > 0){
+    1a81:	e9 93 00 00 00       	jmp    1b19 <concreate+0x1f9>
+    if(de.inum == 0)
+    1a86:	0f b7 45 ac          	movzwl -0x54(%ebp),%eax
+    1a8a:	66 85 c0             	test   %ax,%ax
+    1a8d:	75 05                	jne    1a94 <concreate+0x174>
+      continue;
+    1a8f:	e9 85 00 00 00       	jmp    1b19 <concreate+0x1f9>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    1a94:	0f b6 45 ae          	movzbl -0x52(%ebp),%eax
+    1a98:	3c 43                	cmp    $0x43,%al
+    1a9a:	75 7d                	jne    1b19 <concreate+0x1f9>
+    1a9c:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
+    1aa0:	84 c0                	test   %al,%al
+    1aa2:	75 75                	jne    1b19 <concreate+0x1f9>
+      i = de.name[1] - '0';
+    1aa4:	0f b6 45 af          	movzbl -0x51(%ebp),%eax
+    1aa8:	0f be c0             	movsbl %al,%eax
+    1aab:	83 e8 30             	sub    $0x30,%eax
+    1aae:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      if(i < 0 || i >= sizeof(fa)){
+    1ab1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    1ab5:	78 08                	js     1abf <concreate+0x19f>
+    1ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1aba:	83 f8 27             	cmp    $0x27,%eax
+    1abd:	76 1e                	jbe    1add <concreate+0x1bd>
+        printf(1, "concreate weird file %s\n", de.name);
+    1abf:	83 ec 04             	sub    $0x4,%esp
+    1ac2:	8d 45 ac             	lea    -0x54(%ebp),%eax
+    1ac5:	83 c0 02             	add    $0x2,%eax
+    1ac8:	50                   	push   %eax
+    1ac9:	68 e9 4c 00 00       	push   $0x4ce9
+    1ace:	6a 01                	push   $0x1
+    1ad0:	e8 79 25 00 00       	call   404e <printf>
+    1ad5:	83 c4 10             	add    $0x10,%esp
+        exit();
+    1ad8:	e8 f2 23 00 00       	call   3ecf <exit>
+      }
+      if(fa[i]){
+    1add:	8d 55 bd             	lea    -0x43(%ebp),%edx
+    1ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1ae3:	01 d0                	add    %edx,%eax
+    1ae5:	0f b6 00             	movzbl (%eax),%eax
+    1ae8:	84 c0                	test   %al,%al
+    1aea:	74 1e                	je     1b0a <concreate+0x1ea>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1aec:	83 ec 04             	sub    $0x4,%esp
+    1aef:	8d 45 ac             	lea    -0x54(%ebp),%eax
+    1af2:	83 c0 02             	add    $0x2,%eax
+    1af5:	50                   	push   %eax
+    1af6:	68 02 4d 00 00       	push   $0x4d02
+    1afb:	6a 01                	push   $0x1
+    1afd:	e8 4c 25 00 00       	call   404e <printf>
+    1b02:	83 c4 10             	add    $0x10,%esp
+        exit();
+    1b05:	e8 c5 23 00 00       	call   3ecf <exit>
+      }
+      fa[i] = 1;
+    1b0a:	8d 55 bd             	lea    -0x43(%ebp),%edx
+    1b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1b10:	01 d0                	add    %edx,%eax
+    1b12:	c6 00 01             	movb   $0x1,(%eax)
+      n++;
+    1b15:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  }
+
+  memset(fa, 0, sizeof(fa));
+  fd = open(".", 0);
+  n = 0;
+  while(read(fd, &de, sizeof(de)) > 0){
+    1b19:	83 ec 04             	sub    $0x4,%esp
+    1b1c:	6a 10                	push   $0x10
+    1b1e:	8d 45 ac             	lea    -0x54(%ebp),%eax
+    1b21:	50                   	push   %eax
+    1b22:	ff 75 e8             	pushl  -0x18(%ebp)
+    1b25:	e8 bd 23 00 00       	call   3ee7 <read>
+    1b2a:	83 c4 10             	add    $0x10,%esp
+    1b2d:	85 c0                	test   %eax,%eax
+    1b2f:	0f 8f 51 ff ff ff    	jg     1a86 <concreate+0x166>
+      }
+      fa[i] = 1;
+      n++;
+    }
+  }
+  close(fd);
+    1b35:	83 ec 0c             	sub    $0xc,%esp
+    1b38:	ff 75 e8             	pushl  -0x18(%ebp)
+    1b3b:	e8 b7 23 00 00       	call   3ef7 <close>
+    1b40:	83 c4 10             	add    $0x10,%esp
+
+  if(n != 40){
+    1b43:	83 7d f0 28          	cmpl   $0x28,-0x10(%ebp)
+    1b47:	74 17                	je     1b60 <concreate+0x240>
+    printf(1, "concreate not enough files in directory listing\n");
+    1b49:	83 ec 08             	sub    $0x8,%esp
+    1b4c:	68 20 4d 00 00       	push   $0x4d20
+    1b51:	6a 01                	push   $0x1
+    1b53:	e8 f6 24 00 00       	call   404e <printf>
+    1b58:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1b5b:	e8 6f 23 00 00       	call   3ecf <exit>
+  }
+
+  for(i = 0; i < 40; i++){
+    1b60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    1b67:	e9 45 01 00 00       	jmp    1cb1 <concreate+0x391>
+    file[1] = '0' + i;
+    1b6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1b6f:	83 c0 30             	add    $0x30,%eax
+    1b72:	88 45 e6             	mov    %al,-0x1a(%ebp)
+    pid = fork();
+    1b75:	e8 4d 23 00 00       	call   3ec7 <fork>
+    1b7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if(pid < 0){
+    1b7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1b81:	79 17                	jns    1b9a <concreate+0x27a>
+      printf(1, "fork failed\n");
+    1b83:	83 ec 08             	sub    $0x8,%esp
+    1b86:	68 a5 44 00 00       	push   $0x44a5
+    1b8b:	6a 01                	push   $0x1
+    1b8d:	e8 bc 24 00 00       	call   404e <printf>
+    1b92:	83 c4 10             	add    $0x10,%esp
+      exit();
+    1b95:	e8 35 23 00 00       	call   3ecf <exit>
+    }
+    if(((i % 3) == 0 && pid == 0) ||
+    1b9a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    1b9d:	ba 56 55 55 55       	mov    $0x55555556,%edx
+    1ba2:	89 c8                	mov    %ecx,%eax
+    1ba4:	f7 ea                	imul   %edx
+    1ba6:	89 c8                	mov    %ecx,%eax
+    1ba8:	c1 f8 1f             	sar    $0x1f,%eax
+    1bab:	29 c2                	sub    %eax,%edx
+    1bad:	89 d0                	mov    %edx,%eax
+    1baf:	89 c2                	mov    %eax,%edx
+    1bb1:	01 d2                	add    %edx,%edx
+    1bb3:	01 c2                	add    %eax,%edx
+    1bb5:	89 c8                	mov    %ecx,%eax
+    1bb7:	29 d0                	sub    %edx,%eax
+    1bb9:	85 c0                	test   %eax,%eax
+    1bbb:	75 06                	jne    1bc3 <concreate+0x2a3>
+    1bbd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1bc1:	74 28                	je     1beb <concreate+0x2cb>
+       ((i % 3) == 1 && pid != 0)){
+    1bc3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    1bc6:	ba 56 55 55 55       	mov    $0x55555556,%edx
+    1bcb:	89 c8                	mov    %ecx,%eax
+    1bcd:	f7 ea                	imul   %edx
+    1bcf:	89 c8                	mov    %ecx,%eax
+    1bd1:	c1 f8 1f             	sar    $0x1f,%eax
+    1bd4:	29 c2                	sub    %eax,%edx
+    1bd6:	89 d0                	mov    %edx,%eax
+    1bd8:	01 c0                	add    %eax,%eax
+    1bda:	01 d0                	add    %edx,%eax
+    1bdc:	29 c1                	sub    %eax,%ecx
+    1bde:	89 ca                	mov    %ecx,%edx
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit();
+    }
+    if(((i % 3) == 0 && pid == 0) ||
+    1be0:	83 fa 01             	cmp    $0x1,%edx
+    1be3:	75 7c                	jne    1c61 <concreate+0x341>
+       ((i % 3) == 1 && pid != 0)){
+    1be5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1be9:	74 76                	je     1c61 <concreate+0x341>
+      close(open(file, 0));
+    1beb:	83 ec 08             	sub    $0x8,%esp
+    1bee:	6a 00                	push   $0x0
+    1bf0:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1bf3:	50                   	push   %eax
+    1bf4:	e8 16 23 00 00       	call   3f0f <open>
+    1bf9:	83 c4 10             	add    $0x10,%esp
+    1bfc:	83 ec 0c             	sub    $0xc,%esp
+    1bff:	50                   	push   %eax
+    1c00:	e8 f2 22 00 00       	call   3ef7 <close>
+    1c05:	83 c4 10             	add    $0x10,%esp
+      close(open(file, 0));
+    1c08:	83 ec 08             	sub    $0x8,%esp
+    1c0b:	6a 00                	push   $0x0
+    1c0d:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1c10:	50                   	push   %eax
+    1c11:	e8 f9 22 00 00       	call   3f0f <open>
+    1c16:	83 c4 10             	add    $0x10,%esp
+    1c19:	83 ec 0c             	sub    $0xc,%esp
+    1c1c:	50                   	push   %eax
+    1c1d:	e8 d5 22 00 00       	call   3ef7 <close>
+    1c22:	83 c4 10             	add    $0x10,%esp
+      close(open(file, 0));
+    1c25:	83 ec 08             	sub    $0x8,%esp
+    1c28:	6a 00                	push   $0x0
+    1c2a:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1c2d:	50                   	push   %eax
+    1c2e:	e8 dc 22 00 00       	call   3f0f <open>
+    1c33:	83 c4 10             	add    $0x10,%esp
+    1c36:	83 ec 0c             	sub    $0xc,%esp
+    1c39:	50                   	push   %eax
+    1c3a:	e8 b8 22 00 00       	call   3ef7 <close>
+    1c3f:	83 c4 10             	add    $0x10,%esp
+      close(open(file, 0));
+    1c42:	83 ec 08             	sub    $0x8,%esp
+    1c45:	6a 00                	push   $0x0
+    1c47:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1c4a:	50                   	push   %eax
+    1c4b:	e8 bf 22 00 00       	call   3f0f <open>
+    1c50:	83 c4 10             	add    $0x10,%esp
+    1c53:	83 ec 0c             	sub    $0xc,%esp
+    1c56:	50                   	push   %eax
+    1c57:	e8 9b 22 00 00       	call   3ef7 <close>
+    1c5c:	83 c4 10             	add    $0x10,%esp
+    1c5f:	eb 3c                	jmp    1c9d <concreate+0x37d>
+    } else {
+      unlink(file);
+    1c61:	83 ec 0c             	sub    $0xc,%esp
+    1c64:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1c67:	50                   	push   %eax
+    1c68:	e8 b2 22 00 00       	call   3f1f <unlink>
+    1c6d:	83 c4 10             	add    $0x10,%esp
+      unlink(file);
+    1c70:	83 ec 0c             	sub    $0xc,%esp
+    1c73:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1c76:	50                   	push   %eax
+    1c77:	e8 a3 22 00 00       	call   3f1f <unlink>
+    1c7c:	83 c4 10             	add    $0x10,%esp
+      unlink(file);
+    1c7f:	83 ec 0c             	sub    $0xc,%esp
+    1c82:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1c85:	50                   	push   %eax
+    1c86:	e8 94 22 00 00       	call   3f1f <unlink>
+    1c8b:	83 c4 10             	add    $0x10,%esp
+      unlink(file);
+    1c8e:	83 ec 0c             	sub    $0xc,%esp
+    1c91:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1c94:	50                   	push   %eax
+    1c95:	e8 85 22 00 00       	call   3f1f <unlink>
+    1c9a:	83 c4 10             	add    $0x10,%esp
+    }
+    if(pid == 0)
+    1c9d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1ca1:	75 05                	jne    1ca8 <concreate+0x388>
+      exit();
+    1ca3:	e8 27 22 00 00       	call   3ecf <exit>
+    else
+      wait();
+    1ca8:	e8 2a 22 00 00       	call   3ed7 <wait>
+  if(n != 40){
+    printf(1, "concreate not enough files in directory listing\n");
+    exit();
+  }
+
+  for(i = 0; i < 40; i++){
+    1cad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    1cb1:	83 7d f4 27          	cmpl   $0x27,-0xc(%ebp)
+    1cb5:	0f 8e b1 fe ff ff    	jle    1b6c <concreate+0x24c>
+      exit();
+    else
+      wait();
+  }
+
+  printf(1, "concreate ok\n");
+    1cbb:	83 ec 08             	sub    $0x8,%esp
+    1cbe:	68 51 4d 00 00       	push   $0x4d51
+    1cc3:	6a 01                	push   $0x1
+    1cc5:	e8 84 23 00 00       	call   404e <printf>
+    1cca:	83 c4 10             	add    $0x10,%esp
+}
+    1ccd:	90                   	nop
+    1cce:	c9                   	leave  
+    1ccf:	c3                   	ret    
+
+00001cd0 <linkunlink>:
+
+// another concurrent link/unlink/create test,
+// to look for deadlocks.
+void
+linkunlink()
+{
+    1cd0:	55                   	push   %ebp
+    1cd1:	89 e5                	mov    %esp,%ebp
+    1cd3:	83 ec 18             	sub    $0x18,%esp
+  int pid, i;
+
+  printf(1, "linkunlink test\n");
+    1cd6:	83 ec 08             	sub    $0x8,%esp
+    1cd9:	68 5f 4d 00 00       	push   $0x4d5f
+    1cde:	6a 01                	push   $0x1
+    1ce0:	e8 69 23 00 00       	call   404e <printf>
+    1ce5:	83 c4 10             	add    $0x10,%esp
+
+  unlink("x");
+    1ce8:	83 ec 0c             	sub    $0xc,%esp
+    1ceb:	68 db 48 00 00       	push   $0x48db
+    1cf0:	e8 2a 22 00 00       	call   3f1f <unlink>
+    1cf5:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    1cf8:	e8 ca 21 00 00       	call   3ec7 <fork>
+    1cfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if(pid < 0){
+    1d00:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1d04:	79 17                	jns    1d1d <linkunlink+0x4d>
+    printf(1, "fork failed\n");
+    1d06:	83 ec 08             	sub    $0x8,%esp
+    1d09:	68 a5 44 00 00       	push   $0x44a5
+    1d0e:	6a 01                	push   $0x1
+    1d10:	e8 39 23 00 00       	call   404e <printf>
+    1d15:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1d18:	e8 b2 21 00 00       	call   3ecf <exit>
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+    1d1d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1d21:	74 07                	je     1d2a <linkunlink+0x5a>
+    1d23:	b8 01 00 00 00       	mov    $0x1,%eax
+    1d28:	eb 05                	jmp    1d2f <linkunlink+0x5f>
+    1d2a:	b8 61 00 00 00       	mov    $0x61,%eax
+    1d2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  for(i = 0; i < 100; i++){
+    1d32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    1d39:	e9 9a 00 00 00       	jmp    1dd8 <linkunlink+0x108>
+    x = x * 1103515245 + 12345;
+    1d3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    1d41:	69 c0 6d 4e c6 41    	imul   $0x41c64e6d,%eax,%eax
+    1d47:	05 39 30 00 00       	add    $0x3039,%eax
+    1d4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if((x % 3) == 0){
+    1d4f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+    1d52:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
+    1d57:	89 c8                	mov    %ecx,%eax
+    1d59:	f7 e2                	mul    %edx
+    1d5b:	89 d0                	mov    %edx,%eax
+    1d5d:	d1 e8                	shr    %eax
+    1d5f:	89 c2                	mov    %eax,%edx
+    1d61:	01 d2                	add    %edx,%edx
+    1d63:	01 c2                	add    %eax,%edx
+    1d65:	89 c8                	mov    %ecx,%eax
+    1d67:	29 d0                	sub    %edx,%eax
+    1d69:	85 c0                	test   %eax,%eax
+    1d6b:	75 23                	jne    1d90 <linkunlink+0xc0>
+      close(open("x", O_RDWR | O_CREATE));
+    1d6d:	83 ec 08             	sub    $0x8,%esp
+    1d70:	68 02 02 00 00       	push   $0x202
+    1d75:	68 db 48 00 00       	push   $0x48db
+    1d7a:	e8 90 21 00 00       	call   3f0f <open>
+    1d7f:	83 c4 10             	add    $0x10,%esp
+    1d82:	83 ec 0c             	sub    $0xc,%esp
+    1d85:	50                   	push   %eax
+    1d86:	e8 6c 21 00 00       	call   3ef7 <close>
+    1d8b:	83 c4 10             	add    $0x10,%esp
+    1d8e:	eb 44                	jmp    1dd4 <linkunlink+0x104>
+    } else if((x % 3) == 1){
+    1d90:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+    1d93:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
+    1d98:	89 c8                	mov    %ecx,%eax
+    1d9a:	f7 e2                	mul    %edx
+    1d9c:	d1 ea                	shr    %edx
+    1d9e:	89 d0                	mov    %edx,%eax
+    1da0:	01 c0                	add    %eax,%eax
+    1da2:	01 d0                	add    %edx,%eax
+    1da4:	29 c1                	sub    %eax,%ecx
+    1da6:	89 ca                	mov    %ecx,%edx
+    1da8:	83 fa 01             	cmp    $0x1,%edx
+    1dab:	75 17                	jne    1dc4 <linkunlink+0xf4>
+      link("cat", "x");
+    1dad:	83 ec 08             	sub    $0x8,%esp
+    1db0:	68 db 48 00 00       	push   $0x48db
+    1db5:	68 70 4d 00 00       	push   $0x4d70
+    1dba:	e8 70 21 00 00       	call   3f2f <link>
+    1dbf:	83 c4 10             	add    $0x10,%esp
+    1dc2:	eb 10                	jmp    1dd4 <linkunlink+0x104>
+    } else {
+      unlink("x");
+    1dc4:	83 ec 0c             	sub    $0xc,%esp
+    1dc7:	68 db 48 00 00       	push   $0x48db
+    1dcc:	e8 4e 21 00 00       	call   3f1f <unlink>
+    1dd1:	83 c4 10             	add    $0x10,%esp
+    printf(1, "fork failed\n");
+    exit();
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+  for(i = 0; i < 100; i++){
+    1dd4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    1dd8:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+    1ddc:	0f 8e 5c ff ff ff    	jle    1d3e <linkunlink+0x6e>
+    } else {
+      unlink("x");
+    }
+  }
+
+  if(pid)
+    1de2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    1de6:	74 07                	je     1def <linkunlink+0x11f>
+    wait();
+    1de8:	e8 ea 20 00 00       	call   3ed7 <wait>
+    1ded:	eb 05                	jmp    1df4 <linkunlink+0x124>
+  else 
+    exit();
+    1def:	e8 db 20 00 00       	call   3ecf <exit>
+
+  printf(1, "linkunlink ok\n");
+    1df4:	83 ec 08             	sub    $0x8,%esp
+    1df7:	68 74 4d 00 00       	push   $0x4d74
+    1dfc:	6a 01                	push   $0x1
+    1dfe:	e8 4b 22 00 00       	call   404e <printf>
+    1e03:	83 c4 10             	add    $0x10,%esp
+}
+    1e06:	90                   	nop
+    1e07:	c9                   	leave  
+    1e08:	c3                   	ret    
+
+00001e09 <bigdir>:
+
+// directory that uses indirect blocks
+void
+bigdir(void)
+{
+    1e09:	55                   	push   %ebp
+    1e0a:	89 e5                	mov    %esp,%ebp
+    1e0c:	83 ec 28             	sub    $0x28,%esp
+  int i, fd;
+  char name[10];
+
+  printf(1, "bigdir test\n");
+    1e0f:	83 ec 08             	sub    $0x8,%esp
+    1e12:	68 83 4d 00 00       	push   $0x4d83
+    1e17:	6a 01                	push   $0x1
+    1e19:	e8 30 22 00 00       	call   404e <printf>
+    1e1e:	83 c4 10             	add    $0x10,%esp
+  unlink("bd");
+    1e21:	83 ec 0c             	sub    $0xc,%esp
+    1e24:	68 90 4d 00 00       	push   $0x4d90
+    1e29:	e8 f1 20 00 00       	call   3f1f <unlink>
+    1e2e:	83 c4 10             	add    $0x10,%esp
+
+  fd = open("bd", O_CREATE);
+    1e31:	83 ec 08             	sub    $0x8,%esp
+    1e34:	68 00 02 00 00       	push   $0x200
+    1e39:	68 90 4d 00 00       	push   $0x4d90
+    1e3e:	e8 cc 20 00 00       	call   3f0f <open>
+    1e43:	83 c4 10             	add    $0x10,%esp
+    1e46:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(fd < 0){
+    1e49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    1e4d:	79 17                	jns    1e66 <bigdir+0x5d>
+    printf(1, "bigdir create failed\n");
+    1e4f:	83 ec 08             	sub    $0x8,%esp
+    1e52:	68 93 4d 00 00       	push   $0x4d93
+    1e57:	6a 01                	push   $0x1
+    1e59:	e8 f0 21 00 00       	call   404e <printf>
+    1e5e:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1e61:	e8 69 20 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    1e66:	83 ec 0c             	sub    $0xc,%esp
+    1e69:	ff 75 f0             	pushl  -0x10(%ebp)
+    1e6c:	e8 86 20 00 00       	call   3ef7 <close>
+    1e71:	83 c4 10             	add    $0x10,%esp
+
+  for(i = 0; i < 500; i++){
+    1e74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    1e7b:	eb 63                	jmp    1ee0 <bigdir+0xd7>
+    name[0] = 'x';
+    1e7d:	c6 45 e6 78          	movb   $0x78,-0x1a(%ebp)
+    name[1] = '0' + (i / 64);
+    1e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1e84:	8d 50 3f             	lea    0x3f(%eax),%edx
+    1e87:	85 c0                	test   %eax,%eax
+    1e89:	0f 48 c2             	cmovs  %edx,%eax
+    1e8c:	c1 f8 06             	sar    $0x6,%eax
+    1e8f:	83 c0 30             	add    $0x30,%eax
+    1e92:	88 45 e7             	mov    %al,-0x19(%ebp)
+    name[2] = '0' + (i % 64);
+    1e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1e98:	99                   	cltd   
+    1e99:	c1 ea 1a             	shr    $0x1a,%edx
+    1e9c:	01 d0                	add    %edx,%eax
+    1e9e:	83 e0 3f             	and    $0x3f,%eax
+    1ea1:	29 d0                	sub    %edx,%eax
+    1ea3:	83 c0 30             	add    $0x30,%eax
+    1ea6:	88 45 e8             	mov    %al,-0x18(%ebp)
+    name[3] = '\0';
+    1ea9:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
+    if(link("bd", name) != 0){
+    1ead:	83 ec 08             	sub    $0x8,%esp
+    1eb0:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+    1eb3:	50                   	push   %eax
+    1eb4:	68 90 4d 00 00       	push   $0x4d90
+    1eb9:	e8 71 20 00 00       	call   3f2f <link>
+    1ebe:	83 c4 10             	add    $0x10,%esp
+    1ec1:	85 c0                	test   %eax,%eax
+    1ec3:	74 17                	je     1edc <bigdir+0xd3>
+      printf(1, "bigdir link failed\n");
+    1ec5:	83 ec 08             	sub    $0x8,%esp
+    1ec8:	68 a9 4d 00 00       	push   $0x4da9
+    1ecd:	6a 01                	push   $0x1
+    1ecf:	e8 7a 21 00 00       	call   404e <printf>
+    1ed4:	83 c4 10             	add    $0x10,%esp
+      exit();
+    1ed7:	e8 f3 1f 00 00       	call   3ecf <exit>
+    printf(1, "bigdir create failed\n");
+    exit();
+  }
+  close(fd);
+
+  for(i = 0; i < 500; i++){
+    1edc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    1ee0:	81 7d f4 f3 01 00 00 	cmpl   $0x1f3,-0xc(%ebp)
+    1ee7:	7e 94                	jle    1e7d <bigdir+0x74>
+      printf(1, "bigdir link failed\n");
+      exit();
+    }
+  }
+
+  unlink("bd");
+    1ee9:	83 ec 0c             	sub    $0xc,%esp
+    1eec:	68 90 4d 00 00       	push   $0x4d90
+    1ef1:	e8 29 20 00 00       	call   3f1f <unlink>
+    1ef6:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 500; i++){
+    1ef9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    1f00:	eb 5e                	jmp    1f60 <bigdir+0x157>
+    name[0] = 'x';
+    1f02:	c6 45 e6 78          	movb   $0x78,-0x1a(%ebp)
+    name[1] = '0' + (i / 64);
+    1f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1f09:	8d 50 3f             	lea    0x3f(%eax),%edx
+    1f0c:	85 c0                	test   %eax,%eax
+    1f0e:	0f 48 c2             	cmovs  %edx,%eax
+    1f11:	c1 f8 06             	sar    $0x6,%eax
+    1f14:	83 c0 30             	add    $0x30,%eax
+    1f17:	88 45 e7             	mov    %al,-0x19(%ebp)
+    name[2] = '0' + (i % 64);
+    1f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    1f1d:	99                   	cltd   
+    1f1e:	c1 ea 1a             	shr    $0x1a,%edx
+    1f21:	01 d0                	add    %edx,%eax
+    1f23:	83 e0 3f             	and    $0x3f,%eax
+    1f26:	29 d0                	sub    %edx,%eax
+    1f28:	83 c0 30             	add    $0x30,%eax
+    1f2b:	88 45 e8             	mov    %al,-0x18(%ebp)
+    name[3] = '\0';
+    1f2e:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
+    if(unlink(name) != 0){
+    1f32:	83 ec 0c             	sub    $0xc,%esp
+    1f35:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+    1f38:	50                   	push   %eax
+    1f39:	e8 e1 1f 00 00       	call   3f1f <unlink>
+    1f3e:	83 c4 10             	add    $0x10,%esp
+    1f41:	85 c0                	test   %eax,%eax
+    1f43:	74 17                	je     1f5c <bigdir+0x153>
+      printf(1, "bigdir unlink failed");
+    1f45:	83 ec 08             	sub    $0x8,%esp
+    1f48:	68 bd 4d 00 00       	push   $0x4dbd
+    1f4d:	6a 01                	push   $0x1
+    1f4f:	e8 fa 20 00 00       	call   404e <printf>
+    1f54:	83 c4 10             	add    $0x10,%esp
+      exit();
+    1f57:	e8 73 1f 00 00       	call   3ecf <exit>
+      exit();
+    }
+  }
+
+  unlink("bd");
+  for(i = 0; i < 500; i++){
+    1f5c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    1f60:	81 7d f4 f3 01 00 00 	cmpl   $0x1f3,-0xc(%ebp)
+    1f67:	7e 99                	jle    1f02 <bigdir+0xf9>
+      printf(1, "bigdir unlink failed");
+      exit();
+    }
+  }
+
+  printf(1, "bigdir ok\n");
+    1f69:	83 ec 08             	sub    $0x8,%esp
+    1f6c:	68 d2 4d 00 00       	push   $0x4dd2
+    1f71:	6a 01                	push   $0x1
+    1f73:	e8 d6 20 00 00       	call   404e <printf>
+    1f78:	83 c4 10             	add    $0x10,%esp
+}
+    1f7b:	90                   	nop
+    1f7c:	c9                   	leave  
+    1f7d:	c3                   	ret    
+
+00001f7e <subdir>:
+
+void
+subdir(void)
+{
+    1f7e:	55                   	push   %ebp
+    1f7f:	89 e5                	mov    %esp,%ebp
+    1f81:	83 ec 18             	sub    $0x18,%esp
+  int fd, cc;
+
+  printf(1, "subdir test\n");
+    1f84:	83 ec 08             	sub    $0x8,%esp
+    1f87:	68 dd 4d 00 00       	push   $0x4ddd
+    1f8c:	6a 01                	push   $0x1
+    1f8e:	e8 bb 20 00 00       	call   404e <printf>
+    1f93:	83 c4 10             	add    $0x10,%esp
+
+  unlink("ff");
+    1f96:	83 ec 0c             	sub    $0xc,%esp
+    1f99:	68 ea 4d 00 00       	push   $0x4dea
+    1f9e:	e8 7c 1f 00 00       	call   3f1f <unlink>
+    1fa3:	83 c4 10             	add    $0x10,%esp
+  if(mkdir("dd") != 0){
+    1fa6:	83 ec 0c             	sub    $0xc,%esp
+    1fa9:	68 ed 4d 00 00       	push   $0x4ded
+    1fae:	e8 84 1f 00 00       	call   3f37 <mkdir>
+    1fb3:	83 c4 10             	add    $0x10,%esp
+    1fb6:	85 c0                	test   %eax,%eax
+    1fb8:	74 17                	je     1fd1 <subdir+0x53>
+    printf(1, "subdir mkdir dd failed\n");
+    1fba:	83 ec 08             	sub    $0x8,%esp
+    1fbd:	68 f0 4d 00 00       	push   $0x4df0
+    1fc2:	6a 01                	push   $0x1
+    1fc4:	e8 85 20 00 00       	call   404e <printf>
+    1fc9:	83 c4 10             	add    $0x10,%esp
+    exit();
+    1fcc:	e8 fe 1e 00 00       	call   3ecf <exit>
+  }
+
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1fd1:	83 ec 08             	sub    $0x8,%esp
+    1fd4:	68 02 02 00 00       	push   $0x202
+    1fd9:	68 08 4e 00 00       	push   $0x4e08
+    1fde:	e8 2c 1f 00 00       	call   3f0f <open>
+    1fe3:	83 c4 10             	add    $0x10,%esp
+    1fe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    1fe9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    1fed:	79 17                	jns    2006 <subdir+0x88>
+    printf(1, "create dd/ff failed\n");
+    1fef:	83 ec 08             	sub    $0x8,%esp
+    1ff2:	68 0e 4e 00 00       	push   $0x4e0e
+    1ff7:	6a 01                	push   $0x1
+    1ff9:	e8 50 20 00 00       	call   404e <printf>
+    1ffe:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2001:	e8 c9 1e 00 00       	call   3ecf <exit>
+  }
+  write(fd, "ff", 2);
+    2006:	83 ec 04             	sub    $0x4,%esp
+    2009:	6a 02                	push   $0x2
+    200b:	68 ea 4d 00 00       	push   $0x4dea
+    2010:	ff 75 f4             	pushl  -0xc(%ebp)
+    2013:	e8 d7 1e 00 00       	call   3eef <write>
+    2018:	83 c4 10             	add    $0x10,%esp
+  close(fd);
+    201b:	83 ec 0c             	sub    $0xc,%esp
+    201e:	ff 75 f4             	pushl  -0xc(%ebp)
+    2021:	e8 d1 1e 00 00       	call   3ef7 <close>
+    2026:	83 c4 10             	add    $0x10,%esp
+  
+  if(unlink("dd") >= 0){
+    2029:	83 ec 0c             	sub    $0xc,%esp
+    202c:	68 ed 4d 00 00       	push   $0x4ded
+    2031:	e8 e9 1e 00 00       	call   3f1f <unlink>
+    2036:	83 c4 10             	add    $0x10,%esp
+    2039:	85 c0                	test   %eax,%eax
+    203b:	78 17                	js     2054 <subdir+0xd6>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    203d:	83 ec 08             	sub    $0x8,%esp
+    2040:	68 24 4e 00 00       	push   $0x4e24
+    2045:	6a 01                	push   $0x1
+    2047:	e8 02 20 00 00       	call   404e <printf>
+    204c:	83 c4 10             	add    $0x10,%esp
+    exit();
+    204f:	e8 7b 1e 00 00       	call   3ecf <exit>
+  }
+
+  if(mkdir("/dd/dd") != 0){
+    2054:	83 ec 0c             	sub    $0xc,%esp
+    2057:	68 4a 4e 00 00       	push   $0x4e4a
+    205c:	e8 d6 1e 00 00       	call   3f37 <mkdir>
+    2061:	83 c4 10             	add    $0x10,%esp
+    2064:	85 c0                	test   %eax,%eax
+    2066:	74 17                	je     207f <subdir+0x101>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    2068:	83 ec 08             	sub    $0x8,%esp
+    206b:	68 51 4e 00 00       	push   $0x4e51
+    2070:	6a 01                	push   $0x1
+    2072:	e8 d7 1f 00 00       	call   404e <printf>
+    2077:	83 c4 10             	add    $0x10,%esp
+    exit();
+    207a:	e8 50 1e 00 00       	call   3ecf <exit>
+  }
+
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    207f:	83 ec 08             	sub    $0x8,%esp
+    2082:	68 02 02 00 00       	push   $0x202
+    2087:	68 6c 4e 00 00       	push   $0x4e6c
+    208c:	e8 7e 1e 00 00       	call   3f0f <open>
+    2091:	83 c4 10             	add    $0x10,%esp
+    2094:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    2097:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    209b:	79 17                	jns    20b4 <subdir+0x136>
+    printf(1, "create dd/dd/ff failed\n");
+    209d:	83 ec 08             	sub    $0x8,%esp
+    20a0:	68 75 4e 00 00       	push   $0x4e75
+    20a5:	6a 01                	push   $0x1
+    20a7:	e8 a2 1f 00 00       	call   404e <printf>
+    20ac:	83 c4 10             	add    $0x10,%esp
+    exit();
+    20af:	e8 1b 1e 00 00       	call   3ecf <exit>
+  }
+  write(fd, "FF", 2);
+    20b4:	83 ec 04             	sub    $0x4,%esp
+    20b7:	6a 02                	push   $0x2
+    20b9:	68 8d 4e 00 00       	push   $0x4e8d
+    20be:	ff 75 f4             	pushl  -0xc(%ebp)
+    20c1:	e8 29 1e 00 00       	call   3eef <write>
+    20c6:	83 c4 10             	add    $0x10,%esp
+  close(fd);
+    20c9:	83 ec 0c             	sub    $0xc,%esp
+    20cc:	ff 75 f4             	pushl  -0xc(%ebp)
+    20cf:	e8 23 1e 00 00       	call   3ef7 <close>
+    20d4:	83 c4 10             	add    $0x10,%esp
+
+  fd = open("dd/dd/../ff", 0);
+    20d7:	83 ec 08             	sub    $0x8,%esp
+    20da:	6a 00                	push   $0x0
+    20dc:	68 90 4e 00 00       	push   $0x4e90
+    20e1:	e8 29 1e 00 00       	call   3f0f <open>
+    20e6:	83 c4 10             	add    $0x10,%esp
+    20e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    20ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    20f0:	79 17                	jns    2109 <subdir+0x18b>
+    printf(1, "open dd/dd/../ff failed\n");
+    20f2:	83 ec 08             	sub    $0x8,%esp
+    20f5:	68 9c 4e 00 00       	push   $0x4e9c
+    20fa:	6a 01                	push   $0x1
+    20fc:	e8 4d 1f 00 00       	call   404e <printf>
+    2101:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2104:	e8 c6 1d 00 00       	call   3ecf <exit>
+  }
+  cc = read(fd, buf, sizeof(buf));
+    2109:	83 ec 04             	sub    $0x4,%esp
+    210c:	68 00 20 00 00       	push   $0x2000
+    2111:	68 a0 8a 00 00       	push   $0x8aa0
+    2116:	ff 75 f4             	pushl  -0xc(%ebp)
+    2119:	e8 c9 1d 00 00       	call   3ee7 <read>
+    211e:	83 c4 10             	add    $0x10,%esp
+    2121:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(cc != 2 || buf[0] != 'f'){
+    2124:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
+    2128:	75 0b                	jne    2135 <subdir+0x1b7>
+    212a:	0f b6 05 a0 8a 00 00 	movzbl 0x8aa0,%eax
+    2131:	3c 66                	cmp    $0x66,%al
+    2133:	74 17                	je     214c <subdir+0x1ce>
+    printf(1, "dd/dd/../ff wrong content\n");
+    2135:	83 ec 08             	sub    $0x8,%esp
+    2138:	68 b5 4e 00 00       	push   $0x4eb5
+    213d:	6a 01                	push   $0x1
+    213f:	e8 0a 1f 00 00       	call   404e <printf>
+    2144:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2147:	e8 83 1d 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    214c:	83 ec 0c             	sub    $0xc,%esp
+    214f:	ff 75 f4             	pushl  -0xc(%ebp)
+    2152:	e8 a0 1d 00 00       	call   3ef7 <close>
+    2157:	83 c4 10             	add    $0x10,%esp
+
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    215a:	83 ec 08             	sub    $0x8,%esp
+    215d:	68 d0 4e 00 00       	push   $0x4ed0
+    2162:	68 6c 4e 00 00       	push   $0x4e6c
+    2167:	e8 c3 1d 00 00       	call   3f2f <link>
+    216c:	83 c4 10             	add    $0x10,%esp
+    216f:	85 c0                	test   %eax,%eax
+    2171:	74 17                	je     218a <subdir+0x20c>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    2173:	83 ec 08             	sub    $0x8,%esp
+    2176:	68 dc 4e 00 00       	push   $0x4edc
+    217b:	6a 01                	push   $0x1
+    217d:	e8 cc 1e 00 00       	call   404e <printf>
+    2182:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2185:	e8 45 1d 00 00       	call   3ecf <exit>
+  }
+
+  if(unlink("dd/dd/ff") != 0){
+    218a:	83 ec 0c             	sub    $0xc,%esp
+    218d:	68 6c 4e 00 00       	push   $0x4e6c
+    2192:	e8 88 1d 00 00       	call   3f1f <unlink>
+    2197:	83 c4 10             	add    $0x10,%esp
+    219a:	85 c0                	test   %eax,%eax
+    219c:	74 17                	je     21b5 <subdir+0x237>
+    printf(1, "unlink dd/dd/ff failed\n");
+    219e:	83 ec 08             	sub    $0x8,%esp
+    21a1:	68 fd 4e 00 00       	push   $0x4efd
+    21a6:	6a 01                	push   $0x1
+    21a8:	e8 a1 1e 00 00       	call   404e <printf>
+    21ad:	83 c4 10             	add    $0x10,%esp
+    exit();
+    21b0:	e8 1a 1d 00 00       	call   3ecf <exit>
+  }
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    21b5:	83 ec 08             	sub    $0x8,%esp
+    21b8:	6a 00                	push   $0x0
+    21ba:	68 6c 4e 00 00       	push   $0x4e6c
+    21bf:	e8 4b 1d 00 00       	call   3f0f <open>
+    21c4:	83 c4 10             	add    $0x10,%esp
+    21c7:	85 c0                	test   %eax,%eax
+    21c9:	78 17                	js     21e2 <subdir+0x264>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    21cb:	83 ec 08             	sub    $0x8,%esp
+    21ce:	68 18 4f 00 00       	push   $0x4f18
+    21d3:	6a 01                	push   $0x1
+    21d5:	e8 74 1e 00 00       	call   404e <printf>
+    21da:	83 c4 10             	add    $0x10,%esp
+    exit();
+    21dd:	e8 ed 1c 00 00       	call   3ecf <exit>
+  }
+
+  if(chdir("dd") != 0){
+    21e2:	83 ec 0c             	sub    $0xc,%esp
+    21e5:	68 ed 4d 00 00       	push   $0x4ded
+    21ea:	e8 50 1d 00 00       	call   3f3f <chdir>
+    21ef:	83 c4 10             	add    $0x10,%esp
+    21f2:	85 c0                	test   %eax,%eax
+    21f4:	74 17                	je     220d <subdir+0x28f>
+    printf(1, "chdir dd failed\n");
+    21f6:	83 ec 08             	sub    $0x8,%esp
+    21f9:	68 3c 4f 00 00       	push   $0x4f3c
+    21fe:	6a 01                	push   $0x1
+    2200:	e8 49 1e 00 00       	call   404e <printf>
+    2205:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2208:	e8 c2 1c 00 00       	call   3ecf <exit>
+  }
+  if(chdir("dd/../../dd") != 0){
+    220d:	83 ec 0c             	sub    $0xc,%esp
+    2210:	68 4d 4f 00 00       	push   $0x4f4d
+    2215:	e8 25 1d 00 00       	call   3f3f <chdir>
+    221a:	83 c4 10             	add    $0x10,%esp
+    221d:	85 c0                	test   %eax,%eax
+    221f:	74 17                	je     2238 <subdir+0x2ba>
+    printf(1, "chdir dd/../../dd failed\n");
+    2221:	83 ec 08             	sub    $0x8,%esp
+    2224:	68 59 4f 00 00       	push   $0x4f59
+    2229:	6a 01                	push   $0x1
+    222b:	e8 1e 1e 00 00       	call   404e <printf>
+    2230:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2233:	e8 97 1c 00 00       	call   3ecf <exit>
+  }
+  if(chdir("dd/../../../dd") != 0){
+    2238:	83 ec 0c             	sub    $0xc,%esp
+    223b:	68 73 4f 00 00       	push   $0x4f73
+    2240:	e8 fa 1c 00 00       	call   3f3f <chdir>
+    2245:	83 c4 10             	add    $0x10,%esp
+    2248:	85 c0                	test   %eax,%eax
+    224a:	74 17                	je     2263 <subdir+0x2e5>
+    printf(1, "chdir dd/../../dd failed\n");
+    224c:	83 ec 08             	sub    $0x8,%esp
+    224f:	68 59 4f 00 00       	push   $0x4f59
+    2254:	6a 01                	push   $0x1
+    2256:	e8 f3 1d 00 00       	call   404e <printf>
+    225b:	83 c4 10             	add    $0x10,%esp
+    exit();
+    225e:	e8 6c 1c 00 00       	call   3ecf <exit>
+  }
+  if(chdir("./..") != 0){
+    2263:	83 ec 0c             	sub    $0xc,%esp
+    2266:	68 82 4f 00 00       	push   $0x4f82
+    226b:	e8 cf 1c 00 00       	call   3f3f <chdir>
+    2270:	83 c4 10             	add    $0x10,%esp
+    2273:	85 c0                	test   %eax,%eax
+    2275:	74 17                	je     228e <subdir+0x310>
+    printf(1, "chdir ./.. failed\n");
+    2277:	83 ec 08             	sub    $0x8,%esp
+    227a:	68 87 4f 00 00       	push   $0x4f87
+    227f:	6a 01                	push   $0x1
+    2281:	e8 c8 1d 00 00       	call   404e <printf>
+    2286:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2289:	e8 41 1c 00 00       	call   3ecf <exit>
+  }
+
+  fd = open("dd/dd/ffff", 0);
+    228e:	83 ec 08             	sub    $0x8,%esp
+    2291:	6a 00                	push   $0x0
+    2293:	68 d0 4e 00 00       	push   $0x4ed0
+    2298:	e8 72 1c 00 00       	call   3f0f <open>
+    229d:	83 c4 10             	add    $0x10,%esp
+    22a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    22a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    22a7:	79 17                	jns    22c0 <subdir+0x342>
+    printf(1, "open dd/dd/ffff failed\n");
+    22a9:	83 ec 08             	sub    $0x8,%esp
+    22ac:	68 9a 4f 00 00       	push   $0x4f9a
+    22b1:	6a 01                	push   $0x1
+    22b3:	e8 96 1d 00 00       	call   404e <printf>
+    22b8:	83 c4 10             	add    $0x10,%esp
+    exit();
+    22bb:	e8 0f 1c 00 00       	call   3ecf <exit>
+  }
+  if(read(fd, buf, sizeof(buf)) != 2){
+    22c0:	83 ec 04             	sub    $0x4,%esp
+    22c3:	68 00 20 00 00       	push   $0x2000
+    22c8:	68 a0 8a 00 00       	push   $0x8aa0
+    22cd:	ff 75 f4             	pushl  -0xc(%ebp)
+    22d0:	e8 12 1c 00 00       	call   3ee7 <read>
+    22d5:	83 c4 10             	add    $0x10,%esp
+    22d8:	83 f8 02             	cmp    $0x2,%eax
+    22db:	74 17                	je     22f4 <subdir+0x376>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    22dd:	83 ec 08             	sub    $0x8,%esp
+    22e0:	68 b2 4f 00 00       	push   $0x4fb2
+    22e5:	6a 01                	push   $0x1
+    22e7:	e8 62 1d 00 00       	call   404e <printf>
+    22ec:	83 c4 10             	add    $0x10,%esp
+    exit();
+    22ef:	e8 db 1b 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    22f4:	83 ec 0c             	sub    $0xc,%esp
+    22f7:	ff 75 f4             	pushl  -0xc(%ebp)
+    22fa:	e8 f8 1b 00 00       	call   3ef7 <close>
+    22ff:	83 c4 10             	add    $0x10,%esp
+
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    2302:	83 ec 08             	sub    $0x8,%esp
+    2305:	6a 00                	push   $0x0
+    2307:	68 6c 4e 00 00       	push   $0x4e6c
+    230c:	e8 fe 1b 00 00       	call   3f0f <open>
+    2311:	83 c4 10             	add    $0x10,%esp
+    2314:	85 c0                	test   %eax,%eax
+    2316:	78 17                	js     232f <subdir+0x3b1>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    2318:	83 ec 08             	sub    $0x8,%esp
+    231b:	68 d0 4f 00 00       	push   $0x4fd0
+    2320:	6a 01                	push   $0x1
+    2322:	e8 27 1d 00 00       	call   404e <printf>
+    2327:	83 c4 10             	add    $0x10,%esp
+    exit();
+    232a:	e8 a0 1b 00 00       	call   3ecf <exit>
+  }
+
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    232f:	83 ec 08             	sub    $0x8,%esp
+    2332:	68 02 02 00 00       	push   $0x202
+    2337:	68 f5 4f 00 00       	push   $0x4ff5
+    233c:	e8 ce 1b 00 00       	call   3f0f <open>
+    2341:	83 c4 10             	add    $0x10,%esp
+    2344:	85 c0                	test   %eax,%eax
+    2346:	78 17                	js     235f <subdir+0x3e1>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2348:	83 ec 08             	sub    $0x8,%esp
+    234b:	68 fe 4f 00 00       	push   $0x4ffe
+    2350:	6a 01                	push   $0x1
+    2352:	e8 f7 1c 00 00       	call   404e <printf>
+    2357:	83 c4 10             	add    $0x10,%esp
+    exit();
+    235a:	e8 70 1b 00 00       	call   3ecf <exit>
+  }
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    235f:	83 ec 08             	sub    $0x8,%esp
+    2362:	68 02 02 00 00       	push   $0x202
+    2367:	68 1a 50 00 00       	push   $0x501a
+    236c:	e8 9e 1b 00 00       	call   3f0f <open>
+    2371:	83 c4 10             	add    $0x10,%esp
+    2374:	85 c0                	test   %eax,%eax
+    2376:	78 17                	js     238f <subdir+0x411>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    2378:	83 ec 08             	sub    $0x8,%esp
+    237b:	68 23 50 00 00       	push   $0x5023
+    2380:	6a 01                	push   $0x1
+    2382:	e8 c7 1c 00 00       	call   404e <printf>
+    2387:	83 c4 10             	add    $0x10,%esp
+    exit();
+    238a:	e8 40 1b 00 00       	call   3ecf <exit>
+  }
+  if(open("dd", O_CREATE) >= 0){
+    238f:	83 ec 08             	sub    $0x8,%esp
+    2392:	68 00 02 00 00       	push   $0x200
+    2397:	68 ed 4d 00 00       	push   $0x4ded
+    239c:	e8 6e 1b 00 00       	call   3f0f <open>
+    23a1:	83 c4 10             	add    $0x10,%esp
+    23a4:	85 c0                	test   %eax,%eax
+    23a6:	78 17                	js     23bf <subdir+0x441>
+    printf(1, "create dd succeeded!\n");
+    23a8:	83 ec 08             	sub    $0x8,%esp
+    23ab:	68 3f 50 00 00       	push   $0x503f
+    23b0:	6a 01                	push   $0x1
+    23b2:	e8 97 1c 00 00       	call   404e <printf>
+    23b7:	83 c4 10             	add    $0x10,%esp
+    exit();
+    23ba:	e8 10 1b 00 00       	call   3ecf <exit>
+  }
+  if(open("dd", O_RDWR) >= 0){
+    23bf:	83 ec 08             	sub    $0x8,%esp
+    23c2:	6a 02                	push   $0x2
+    23c4:	68 ed 4d 00 00       	push   $0x4ded
+    23c9:	e8 41 1b 00 00       	call   3f0f <open>
+    23ce:	83 c4 10             	add    $0x10,%esp
+    23d1:	85 c0                	test   %eax,%eax
+    23d3:	78 17                	js     23ec <subdir+0x46e>
+    printf(1, "open dd rdwr succeeded!\n");
+    23d5:	83 ec 08             	sub    $0x8,%esp
+    23d8:	68 55 50 00 00       	push   $0x5055
+    23dd:	6a 01                	push   $0x1
+    23df:	e8 6a 1c 00 00       	call   404e <printf>
+    23e4:	83 c4 10             	add    $0x10,%esp
+    exit();
+    23e7:	e8 e3 1a 00 00       	call   3ecf <exit>
+  }
+  if(open("dd", O_WRONLY) >= 0){
+    23ec:	83 ec 08             	sub    $0x8,%esp
+    23ef:	6a 01                	push   $0x1
+    23f1:	68 ed 4d 00 00       	push   $0x4ded
+    23f6:	e8 14 1b 00 00       	call   3f0f <open>
+    23fb:	83 c4 10             	add    $0x10,%esp
+    23fe:	85 c0                	test   %eax,%eax
+    2400:	78 17                	js     2419 <subdir+0x49b>
+    printf(1, "open dd wronly succeeded!\n");
+    2402:	83 ec 08             	sub    $0x8,%esp
+    2405:	68 6e 50 00 00       	push   $0x506e
+    240a:	6a 01                	push   $0x1
+    240c:	e8 3d 1c 00 00       	call   404e <printf>
+    2411:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2414:	e8 b6 1a 00 00       	call   3ecf <exit>
+  }
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    2419:	83 ec 08             	sub    $0x8,%esp
+    241c:	68 89 50 00 00       	push   $0x5089
+    2421:	68 f5 4f 00 00       	push   $0x4ff5
+    2426:	e8 04 1b 00 00       	call   3f2f <link>
+    242b:	83 c4 10             	add    $0x10,%esp
+    242e:	85 c0                	test   %eax,%eax
+    2430:	75 17                	jne    2449 <subdir+0x4cb>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    2432:	83 ec 08             	sub    $0x8,%esp
+    2435:	68 94 50 00 00       	push   $0x5094
+    243a:	6a 01                	push   $0x1
+    243c:	e8 0d 1c 00 00       	call   404e <printf>
+    2441:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2444:	e8 86 1a 00 00       	call   3ecf <exit>
+  }
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    2449:	83 ec 08             	sub    $0x8,%esp
+    244c:	68 89 50 00 00       	push   $0x5089
+    2451:	68 1a 50 00 00       	push   $0x501a
+    2456:	e8 d4 1a 00 00       	call   3f2f <link>
+    245b:	83 c4 10             	add    $0x10,%esp
+    245e:	85 c0                	test   %eax,%eax
+    2460:	75 17                	jne    2479 <subdir+0x4fb>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    2462:	83 ec 08             	sub    $0x8,%esp
+    2465:	68 b8 50 00 00       	push   $0x50b8
+    246a:	6a 01                	push   $0x1
+    246c:	e8 dd 1b 00 00       	call   404e <printf>
+    2471:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2474:	e8 56 1a 00 00       	call   3ecf <exit>
+  }
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2479:	83 ec 08             	sub    $0x8,%esp
+    247c:	68 d0 4e 00 00       	push   $0x4ed0
+    2481:	68 08 4e 00 00       	push   $0x4e08
+    2486:	e8 a4 1a 00 00       	call   3f2f <link>
+    248b:	83 c4 10             	add    $0x10,%esp
+    248e:	85 c0                	test   %eax,%eax
+    2490:	75 17                	jne    24a9 <subdir+0x52b>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    2492:	83 ec 08             	sub    $0x8,%esp
+    2495:	68 dc 50 00 00       	push   $0x50dc
+    249a:	6a 01                	push   $0x1
+    249c:	e8 ad 1b 00 00       	call   404e <printf>
+    24a1:	83 c4 10             	add    $0x10,%esp
+    exit();
+    24a4:	e8 26 1a 00 00       	call   3ecf <exit>
+  }
+  if(mkdir("dd/ff/ff") == 0){
+    24a9:	83 ec 0c             	sub    $0xc,%esp
+    24ac:	68 f5 4f 00 00       	push   $0x4ff5
+    24b1:	e8 81 1a 00 00       	call   3f37 <mkdir>
+    24b6:	83 c4 10             	add    $0x10,%esp
+    24b9:	85 c0                	test   %eax,%eax
+    24bb:	75 17                	jne    24d4 <subdir+0x556>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    24bd:	83 ec 08             	sub    $0x8,%esp
+    24c0:	68 fe 50 00 00       	push   $0x50fe
+    24c5:	6a 01                	push   $0x1
+    24c7:	e8 82 1b 00 00       	call   404e <printf>
+    24cc:	83 c4 10             	add    $0x10,%esp
+    exit();
+    24cf:	e8 fb 19 00 00       	call   3ecf <exit>
+  }
+  if(mkdir("dd/xx/ff") == 0){
+    24d4:	83 ec 0c             	sub    $0xc,%esp
+    24d7:	68 1a 50 00 00       	push   $0x501a
+    24dc:	e8 56 1a 00 00       	call   3f37 <mkdir>
+    24e1:	83 c4 10             	add    $0x10,%esp
+    24e4:	85 c0                	test   %eax,%eax
+    24e6:	75 17                	jne    24ff <subdir+0x581>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    24e8:	83 ec 08             	sub    $0x8,%esp
+    24eb:	68 19 51 00 00       	push   $0x5119
+    24f0:	6a 01                	push   $0x1
+    24f2:	e8 57 1b 00 00       	call   404e <printf>
+    24f7:	83 c4 10             	add    $0x10,%esp
+    exit();
+    24fa:	e8 d0 19 00 00       	call   3ecf <exit>
+  }
+  if(mkdir("dd/dd/ffff") == 0){
+    24ff:	83 ec 0c             	sub    $0xc,%esp
+    2502:	68 d0 4e 00 00       	push   $0x4ed0
+    2507:	e8 2b 1a 00 00       	call   3f37 <mkdir>
+    250c:	83 c4 10             	add    $0x10,%esp
+    250f:	85 c0                	test   %eax,%eax
+    2511:	75 17                	jne    252a <subdir+0x5ac>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    2513:	83 ec 08             	sub    $0x8,%esp
+    2516:	68 34 51 00 00       	push   $0x5134
+    251b:	6a 01                	push   $0x1
+    251d:	e8 2c 1b 00 00       	call   404e <printf>
+    2522:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2525:	e8 a5 19 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dd/xx/ff") == 0){
+    252a:	83 ec 0c             	sub    $0xc,%esp
+    252d:	68 1a 50 00 00       	push   $0x501a
+    2532:	e8 e8 19 00 00       	call   3f1f <unlink>
+    2537:	83 c4 10             	add    $0x10,%esp
+    253a:	85 c0                	test   %eax,%eax
+    253c:	75 17                	jne    2555 <subdir+0x5d7>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    253e:	83 ec 08             	sub    $0x8,%esp
+    2541:	68 51 51 00 00       	push   $0x5151
+    2546:	6a 01                	push   $0x1
+    2548:	e8 01 1b 00 00       	call   404e <printf>
+    254d:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2550:	e8 7a 19 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dd/ff/ff") == 0){
+    2555:	83 ec 0c             	sub    $0xc,%esp
+    2558:	68 f5 4f 00 00       	push   $0x4ff5
+    255d:	e8 bd 19 00 00       	call   3f1f <unlink>
+    2562:	83 c4 10             	add    $0x10,%esp
+    2565:	85 c0                	test   %eax,%eax
+    2567:	75 17                	jne    2580 <subdir+0x602>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    2569:	83 ec 08             	sub    $0x8,%esp
+    256c:	68 6d 51 00 00       	push   $0x516d
+    2571:	6a 01                	push   $0x1
+    2573:	e8 d6 1a 00 00       	call   404e <printf>
+    2578:	83 c4 10             	add    $0x10,%esp
+    exit();
+    257b:	e8 4f 19 00 00       	call   3ecf <exit>
+  }
+  if(chdir("dd/ff") == 0){
+    2580:	83 ec 0c             	sub    $0xc,%esp
+    2583:	68 08 4e 00 00       	push   $0x4e08
+    2588:	e8 b2 19 00 00       	call   3f3f <chdir>
+    258d:	83 c4 10             	add    $0x10,%esp
+    2590:	85 c0                	test   %eax,%eax
+    2592:	75 17                	jne    25ab <subdir+0x62d>
+    printf(1, "chdir dd/ff succeeded!\n");
+    2594:	83 ec 08             	sub    $0x8,%esp
+    2597:	68 89 51 00 00       	push   $0x5189
+    259c:	6a 01                	push   $0x1
+    259e:	e8 ab 1a 00 00       	call   404e <printf>
+    25a3:	83 c4 10             	add    $0x10,%esp
+    exit();
+    25a6:	e8 24 19 00 00       	call   3ecf <exit>
+  }
+  if(chdir("dd/xx") == 0){
+    25ab:	83 ec 0c             	sub    $0xc,%esp
+    25ae:	68 a1 51 00 00       	push   $0x51a1
+    25b3:	e8 87 19 00 00       	call   3f3f <chdir>
+    25b8:	83 c4 10             	add    $0x10,%esp
+    25bb:	85 c0                	test   %eax,%eax
+    25bd:	75 17                	jne    25d6 <subdir+0x658>
+    printf(1, "chdir dd/xx succeeded!\n");
+    25bf:	83 ec 08             	sub    $0x8,%esp
+    25c2:	68 a7 51 00 00       	push   $0x51a7
+    25c7:	6a 01                	push   $0x1
+    25c9:	e8 80 1a 00 00       	call   404e <printf>
+    25ce:	83 c4 10             	add    $0x10,%esp
+    exit();
+    25d1:	e8 f9 18 00 00       	call   3ecf <exit>
+  }
+
+  if(unlink("dd/dd/ffff") != 0){
+    25d6:	83 ec 0c             	sub    $0xc,%esp
+    25d9:	68 d0 4e 00 00       	push   $0x4ed0
+    25de:	e8 3c 19 00 00       	call   3f1f <unlink>
+    25e3:	83 c4 10             	add    $0x10,%esp
+    25e6:	85 c0                	test   %eax,%eax
+    25e8:	74 17                	je     2601 <subdir+0x683>
+    printf(1, "unlink dd/dd/ff failed\n");
+    25ea:	83 ec 08             	sub    $0x8,%esp
+    25ed:	68 fd 4e 00 00       	push   $0x4efd
+    25f2:	6a 01                	push   $0x1
+    25f4:	e8 55 1a 00 00       	call   404e <printf>
+    25f9:	83 c4 10             	add    $0x10,%esp
+    exit();
+    25fc:	e8 ce 18 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dd/ff") != 0){
+    2601:	83 ec 0c             	sub    $0xc,%esp
+    2604:	68 08 4e 00 00       	push   $0x4e08
+    2609:	e8 11 19 00 00       	call   3f1f <unlink>
+    260e:	83 c4 10             	add    $0x10,%esp
+    2611:	85 c0                	test   %eax,%eax
+    2613:	74 17                	je     262c <subdir+0x6ae>
+    printf(1, "unlink dd/ff failed\n");
+    2615:	83 ec 08             	sub    $0x8,%esp
+    2618:	68 bf 51 00 00       	push   $0x51bf
+    261d:	6a 01                	push   $0x1
+    261f:	e8 2a 1a 00 00       	call   404e <printf>
+    2624:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2627:	e8 a3 18 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dd") == 0){
+    262c:	83 ec 0c             	sub    $0xc,%esp
+    262f:	68 ed 4d 00 00       	push   $0x4ded
+    2634:	e8 e6 18 00 00       	call   3f1f <unlink>
+    2639:	83 c4 10             	add    $0x10,%esp
+    263c:	85 c0                	test   %eax,%eax
+    263e:	75 17                	jne    2657 <subdir+0x6d9>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    2640:	83 ec 08             	sub    $0x8,%esp
+    2643:	68 d4 51 00 00       	push   $0x51d4
+    2648:	6a 01                	push   $0x1
+    264a:	e8 ff 19 00 00       	call   404e <printf>
+    264f:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2652:	e8 78 18 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dd/dd") < 0){
+    2657:	83 ec 0c             	sub    $0xc,%esp
+    265a:	68 f4 51 00 00       	push   $0x51f4
+    265f:	e8 bb 18 00 00       	call   3f1f <unlink>
+    2664:	83 c4 10             	add    $0x10,%esp
+    2667:	85 c0                	test   %eax,%eax
+    2669:	79 17                	jns    2682 <subdir+0x704>
+    printf(1, "unlink dd/dd failed\n");
+    266b:	83 ec 08             	sub    $0x8,%esp
+    266e:	68 fa 51 00 00       	push   $0x51fa
+    2673:	6a 01                	push   $0x1
+    2675:	e8 d4 19 00 00       	call   404e <printf>
+    267a:	83 c4 10             	add    $0x10,%esp
+    exit();
+    267d:	e8 4d 18 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dd") < 0){
+    2682:	83 ec 0c             	sub    $0xc,%esp
+    2685:	68 ed 4d 00 00       	push   $0x4ded
+    268a:	e8 90 18 00 00       	call   3f1f <unlink>
+    268f:	83 c4 10             	add    $0x10,%esp
+    2692:	85 c0                	test   %eax,%eax
+    2694:	79 17                	jns    26ad <subdir+0x72f>
+    printf(1, "unlink dd failed\n");
+    2696:	83 ec 08             	sub    $0x8,%esp
+    2699:	68 0f 52 00 00       	push   $0x520f
+    269e:	6a 01                	push   $0x1
+    26a0:	e8 a9 19 00 00       	call   404e <printf>
+    26a5:	83 c4 10             	add    $0x10,%esp
+    exit();
+    26a8:	e8 22 18 00 00       	call   3ecf <exit>
+  }
+
+  printf(1, "subdir ok\n");
+    26ad:	83 ec 08             	sub    $0x8,%esp
+    26b0:	68 21 52 00 00       	push   $0x5221
+    26b5:	6a 01                	push   $0x1
+    26b7:	e8 92 19 00 00       	call   404e <printf>
+    26bc:	83 c4 10             	add    $0x10,%esp
+}
+    26bf:	90                   	nop
+    26c0:	c9                   	leave  
+    26c1:	c3                   	ret    
+
+000026c2 <bigwrite>:
+
+// test writes that are larger than the log.
+void
+bigwrite(void)
+{
+    26c2:	55                   	push   %ebp
+    26c3:	89 e5                	mov    %esp,%ebp
+    26c5:	83 ec 18             	sub    $0x18,%esp
+  int fd, sz;
+
+  printf(1, "bigwrite test\n");
+    26c8:	83 ec 08             	sub    $0x8,%esp
+    26cb:	68 2c 52 00 00       	push   $0x522c
+    26d0:	6a 01                	push   $0x1
+    26d2:	e8 77 19 00 00       	call   404e <printf>
+    26d7:	83 c4 10             	add    $0x10,%esp
+
+  unlink("bigwrite");
+    26da:	83 ec 0c             	sub    $0xc,%esp
+    26dd:	68 3b 52 00 00       	push   $0x523b
+    26e2:	e8 38 18 00 00       	call   3f1f <unlink>
+    26e7:	83 c4 10             	add    $0x10,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    26ea:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%ebp)
+    26f1:	e9 a8 00 00 00       	jmp    279e <bigwrite+0xdc>
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    26f6:	83 ec 08             	sub    $0x8,%esp
+    26f9:	68 02 02 00 00       	push   $0x202
+    26fe:	68 3b 52 00 00       	push   $0x523b
+    2703:	e8 07 18 00 00       	call   3f0f <open>
+    2708:	83 c4 10             	add    $0x10,%esp
+    270b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if(fd < 0){
+    270e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    2712:	79 17                	jns    272b <bigwrite+0x69>
+      printf(1, "cannot create bigwrite\n");
+    2714:	83 ec 08             	sub    $0x8,%esp
+    2717:	68 44 52 00 00       	push   $0x5244
+    271c:	6a 01                	push   $0x1
+    271e:	e8 2b 19 00 00       	call   404e <printf>
+    2723:	83 c4 10             	add    $0x10,%esp
+      exit();
+    2726:	e8 a4 17 00 00       	call   3ecf <exit>
+    }
+    int i;
+    for(i = 0; i < 2; i++){
+    272b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    2732:	eb 3f                	jmp    2773 <bigwrite+0xb1>
+      int cc = write(fd, buf, sz);
+    2734:	83 ec 04             	sub    $0x4,%esp
+    2737:	ff 75 f4             	pushl  -0xc(%ebp)
+    273a:	68 a0 8a 00 00       	push   $0x8aa0
+    273f:	ff 75 ec             	pushl  -0x14(%ebp)
+    2742:	e8 a8 17 00 00       	call   3eef <write>
+    2747:	83 c4 10             	add    $0x10,%esp
+    274a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+      if(cc != sz){
+    274d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    2750:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+    2753:	74 1a                	je     276f <bigwrite+0xad>
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    2755:	ff 75 e8             	pushl  -0x18(%ebp)
+    2758:	ff 75 f4             	pushl  -0xc(%ebp)
+    275b:	68 5c 52 00 00       	push   $0x525c
+    2760:	6a 01                	push   $0x1
+    2762:	e8 e7 18 00 00       	call   404e <printf>
+    2767:	83 c4 10             	add    $0x10,%esp
+        exit();
+    276a:	e8 60 17 00 00       	call   3ecf <exit>
+    if(fd < 0){
+      printf(1, "cannot create bigwrite\n");
+      exit();
+    }
+    int i;
+    for(i = 0; i < 2; i++){
+    276f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    2773:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
+    2777:	7e bb                	jle    2734 <bigwrite+0x72>
+      if(cc != sz){
+        printf(1, "write(%d) ret %d\n", sz, cc);
+        exit();
+      }
+    }
+    close(fd);
+    2779:	83 ec 0c             	sub    $0xc,%esp
+    277c:	ff 75 ec             	pushl  -0x14(%ebp)
+    277f:	e8 73 17 00 00       	call   3ef7 <close>
+    2784:	83 c4 10             	add    $0x10,%esp
+    unlink("bigwrite");
+    2787:	83 ec 0c             	sub    $0xc,%esp
+    278a:	68 3b 52 00 00       	push   $0x523b
+    278f:	e8 8b 17 00 00       	call   3f1f <unlink>
+    2794:	83 c4 10             	add    $0x10,%esp
+  int fd, sz;
+
+  printf(1, "bigwrite test\n");
+
+  unlink("bigwrite");
+  for(sz = 499; sz < 12*512; sz += 471){
+    2797:	81 45 f4 d7 01 00 00 	addl   $0x1d7,-0xc(%ebp)
+    279e:	81 7d f4 ff 17 00 00 	cmpl   $0x17ff,-0xc(%ebp)
+    27a5:	0f 8e 4b ff ff ff    	jle    26f6 <bigwrite+0x34>
+    }
+    close(fd);
+    unlink("bigwrite");
+  }
+
+  printf(1, "bigwrite ok\n");
+    27ab:	83 ec 08             	sub    $0x8,%esp
+    27ae:	68 6e 52 00 00       	push   $0x526e
+    27b3:	6a 01                	push   $0x1
+    27b5:	e8 94 18 00 00       	call   404e <printf>
+    27ba:	83 c4 10             	add    $0x10,%esp
+}
+    27bd:	90                   	nop
+    27be:	c9                   	leave  
+    27bf:	c3                   	ret    
+
+000027c0 <bigfile>:
+
+void
+bigfile(void)
+{
+    27c0:	55                   	push   %ebp
+    27c1:	89 e5                	mov    %esp,%ebp
+    27c3:	83 ec 18             	sub    $0x18,%esp
+  int fd, i, total, cc;
+
+  printf(1, "bigfile test\n");
+    27c6:	83 ec 08             	sub    $0x8,%esp
+    27c9:	68 7b 52 00 00       	push   $0x527b
+    27ce:	6a 01                	push   $0x1
+    27d0:	e8 79 18 00 00       	call   404e <printf>
+    27d5:	83 c4 10             	add    $0x10,%esp
+
+  unlink("bigfile");
+    27d8:	83 ec 0c             	sub    $0xc,%esp
+    27db:	68 89 52 00 00       	push   $0x5289
+    27e0:	e8 3a 17 00 00       	call   3f1f <unlink>
+    27e5:	83 c4 10             	add    $0x10,%esp
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    27e8:	83 ec 08             	sub    $0x8,%esp
+    27eb:	68 02 02 00 00       	push   $0x202
+    27f0:	68 89 52 00 00       	push   $0x5289
+    27f5:	e8 15 17 00 00       	call   3f0f <open>
+    27fa:	83 c4 10             	add    $0x10,%esp
+    27fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if(fd < 0){
+    2800:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    2804:	79 17                	jns    281d <bigfile+0x5d>
+    printf(1, "cannot create bigfile");
+    2806:	83 ec 08             	sub    $0x8,%esp
+    2809:	68 91 52 00 00       	push   $0x5291
+    280e:	6a 01                	push   $0x1
+    2810:	e8 39 18 00 00       	call   404e <printf>
+    2815:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2818:	e8 b2 16 00 00       	call   3ecf <exit>
+  }
+  for(i = 0; i < 20; i++){
+    281d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    2824:	eb 52                	jmp    2878 <bigfile+0xb8>
+    memset(buf, i, 600);
+    2826:	83 ec 04             	sub    $0x4,%esp
+    2829:	68 58 02 00 00       	push   $0x258
+    282e:	ff 75 f4             	pushl  -0xc(%ebp)
+    2831:	68 a0 8a 00 00       	push   $0x8aa0
+    2836:	e8 f9 14 00 00       	call   3d34 <memset>
+    283b:	83 c4 10             	add    $0x10,%esp
+    if(write(fd, buf, 600) != 600){
+    283e:	83 ec 04             	sub    $0x4,%esp
+    2841:	68 58 02 00 00       	push   $0x258
+    2846:	68 a0 8a 00 00       	push   $0x8aa0
+    284b:	ff 75 ec             	pushl  -0x14(%ebp)
+    284e:	e8 9c 16 00 00       	call   3eef <write>
+    2853:	83 c4 10             	add    $0x10,%esp
+    2856:	3d 58 02 00 00       	cmp    $0x258,%eax
+    285b:	74 17                	je     2874 <bigfile+0xb4>
+      printf(1, "write bigfile failed\n");
+    285d:	83 ec 08             	sub    $0x8,%esp
+    2860:	68 a7 52 00 00       	push   $0x52a7
+    2865:	6a 01                	push   $0x1
+    2867:	e8 e2 17 00 00       	call   404e <printf>
+    286c:	83 c4 10             	add    $0x10,%esp
+      exit();
+    286f:	e8 5b 16 00 00       	call   3ecf <exit>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "cannot create bigfile");
+    exit();
+  }
+  for(i = 0; i < 20; i++){
+    2874:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    2878:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)
+    287c:	7e a8                	jle    2826 <bigfile+0x66>
+    if(write(fd, buf, 600) != 600){
+      printf(1, "write bigfile failed\n");
+      exit();
+    }
+  }
+  close(fd);
+    287e:	83 ec 0c             	sub    $0xc,%esp
+    2881:	ff 75 ec             	pushl  -0x14(%ebp)
+    2884:	e8 6e 16 00 00       	call   3ef7 <close>
+    2889:	83 c4 10             	add    $0x10,%esp
+
+  fd = open("bigfile", 0);
+    288c:	83 ec 08             	sub    $0x8,%esp
+    288f:	6a 00                	push   $0x0
+    2891:	68 89 52 00 00       	push   $0x5289
+    2896:	e8 74 16 00 00       	call   3f0f <open>
+    289b:	83 c4 10             	add    $0x10,%esp
+    289e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if(fd < 0){
+    28a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    28a5:	79 17                	jns    28be <bigfile+0xfe>
+    printf(1, "cannot open bigfile\n");
+    28a7:	83 ec 08             	sub    $0x8,%esp
+    28aa:	68 bd 52 00 00       	push   $0x52bd
+    28af:	6a 01                	push   $0x1
+    28b1:	e8 98 17 00 00       	call   404e <printf>
+    28b6:	83 c4 10             	add    $0x10,%esp
+    exit();
+    28b9:	e8 11 16 00 00       	call   3ecf <exit>
+  }
+  total = 0;
+    28be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  for(i = 0; ; i++){
+    28c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    cc = read(fd, buf, 300);
+    28cc:	83 ec 04             	sub    $0x4,%esp
+    28cf:	68 2c 01 00 00       	push   $0x12c
+    28d4:	68 a0 8a 00 00       	push   $0x8aa0
+    28d9:	ff 75 ec             	pushl  -0x14(%ebp)
+    28dc:	e8 06 16 00 00       	call   3ee7 <read>
+    28e1:	83 c4 10             	add    $0x10,%esp
+    28e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    if(cc < 0){
+    28e7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+    28eb:	79 17                	jns    2904 <bigfile+0x144>
+      printf(1, "read bigfile failed\n");
+    28ed:	83 ec 08             	sub    $0x8,%esp
+    28f0:	68 d2 52 00 00       	push   $0x52d2
+    28f5:	6a 01                	push   $0x1
+    28f7:	e8 52 17 00 00       	call   404e <printf>
+    28fc:	83 c4 10             	add    $0x10,%esp
+      exit();
+    28ff:	e8 cb 15 00 00       	call   3ecf <exit>
+    }
+    if(cc == 0)
+    2904:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+    2908:	74 7a                	je     2984 <bigfile+0x1c4>
+      break;
+    if(cc != 300){
+    290a:	81 7d e8 2c 01 00 00 	cmpl   $0x12c,-0x18(%ebp)
+    2911:	74 17                	je     292a <bigfile+0x16a>
+      printf(1, "short read bigfile\n");
+    2913:	83 ec 08             	sub    $0x8,%esp
+    2916:	68 e7 52 00 00       	push   $0x52e7
+    291b:	6a 01                	push   $0x1
+    291d:	e8 2c 17 00 00       	call   404e <printf>
+    2922:	83 c4 10             	add    $0x10,%esp
+      exit();
+    2925:	e8 a5 15 00 00       	call   3ecf <exit>
+    }
+    if(buf[0] != i/2 || buf[299] != i/2){
+    292a:	0f b6 05 a0 8a 00 00 	movzbl 0x8aa0,%eax
+    2931:	0f be d0             	movsbl %al,%edx
+    2934:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    2937:	89 c1                	mov    %eax,%ecx
+    2939:	c1 e9 1f             	shr    $0x1f,%ecx
+    293c:	01 c8                	add    %ecx,%eax
+    293e:	d1 f8                	sar    %eax
+    2940:	39 c2                	cmp    %eax,%edx
+    2942:	75 1a                	jne    295e <bigfile+0x19e>
+    2944:	0f b6 05 cb 8b 00 00 	movzbl 0x8bcb,%eax
+    294b:	0f be d0             	movsbl %al,%edx
+    294e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    2951:	89 c1                	mov    %eax,%ecx
+    2953:	c1 e9 1f             	shr    $0x1f,%ecx
+    2956:	01 c8                	add    %ecx,%eax
+    2958:	d1 f8                	sar    %eax
+    295a:	39 c2                	cmp    %eax,%edx
+    295c:	74 17                	je     2975 <bigfile+0x1b5>
+      printf(1, "read bigfile wrong data\n");
+    295e:	83 ec 08             	sub    $0x8,%esp
+    2961:	68 fb 52 00 00       	push   $0x52fb
+    2966:	6a 01                	push   $0x1
+    2968:	e8 e1 16 00 00       	call   404e <printf>
+    296d:	83 c4 10             	add    $0x10,%esp
+      exit();
+    2970:	e8 5a 15 00 00       	call   3ecf <exit>
+    }
+    total += cc;
+    2975:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    2978:	01 45 f0             	add    %eax,-0x10(%ebp)
+  if(fd < 0){
+    printf(1, "cannot open bigfile\n");
+    exit();
+  }
+  total = 0;
+  for(i = 0; ; i++){
+    297b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    if(buf[0] != i/2 || buf[299] != i/2){
+      printf(1, "read bigfile wrong data\n");
+      exit();
+    }
+    total += cc;
+  }
+    297f:	e9 48 ff ff ff       	jmp    28cc <bigfile+0x10c>
+    if(cc < 0){
+      printf(1, "read bigfile failed\n");
+      exit();
+    }
+    if(cc == 0)
+      break;
+    2984:	90                   	nop
+      printf(1, "read bigfile wrong data\n");
+      exit();
+    }
+    total += cc;
+  }
+  close(fd);
+    2985:	83 ec 0c             	sub    $0xc,%esp
+    2988:	ff 75 ec             	pushl  -0x14(%ebp)
+    298b:	e8 67 15 00 00       	call   3ef7 <close>
+    2990:	83 c4 10             	add    $0x10,%esp
+  if(total != 20*600){
+    2993:	81 7d f0 e0 2e 00 00 	cmpl   $0x2ee0,-0x10(%ebp)
+    299a:	74 17                	je     29b3 <bigfile+0x1f3>
+    printf(1, "read bigfile wrong total\n");
+    299c:	83 ec 08             	sub    $0x8,%esp
+    299f:	68 14 53 00 00       	push   $0x5314
+    29a4:	6a 01                	push   $0x1
+    29a6:	e8 a3 16 00 00       	call   404e <printf>
+    29ab:	83 c4 10             	add    $0x10,%esp
+    exit();
+    29ae:	e8 1c 15 00 00       	call   3ecf <exit>
+  }
+  unlink("bigfile");
+    29b3:	83 ec 0c             	sub    $0xc,%esp
+    29b6:	68 89 52 00 00       	push   $0x5289
+    29bb:	e8 5f 15 00 00       	call   3f1f <unlink>
+    29c0:	83 c4 10             	add    $0x10,%esp
+
+  printf(1, "bigfile test ok\n");
+    29c3:	83 ec 08             	sub    $0x8,%esp
+    29c6:	68 2e 53 00 00       	push   $0x532e
+    29cb:	6a 01                	push   $0x1
+    29cd:	e8 7c 16 00 00       	call   404e <printf>
+    29d2:	83 c4 10             	add    $0x10,%esp
+}
+    29d5:	90                   	nop
+    29d6:	c9                   	leave  
+    29d7:	c3                   	ret    
+
+000029d8 <fourteen>:
+
+void
+fourteen(void)
+{
+    29d8:	55                   	push   %ebp
+    29d9:	89 e5                	mov    %esp,%ebp
+    29db:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+
+  // DIRSIZ is 14.
+  printf(1, "fourteen test\n");
+    29de:	83 ec 08             	sub    $0x8,%esp
+    29e1:	68 3f 53 00 00       	push   $0x533f
+    29e6:	6a 01                	push   $0x1
+    29e8:	e8 61 16 00 00       	call   404e <printf>
+    29ed:	83 c4 10             	add    $0x10,%esp
+
+  if(mkdir("12345678901234") != 0){
+    29f0:	83 ec 0c             	sub    $0xc,%esp
+    29f3:	68 4e 53 00 00       	push   $0x534e
+    29f8:	e8 3a 15 00 00       	call   3f37 <mkdir>
+    29fd:	83 c4 10             	add    $0x10,%esp
+    2a00:	85 c0                	test   %eax,%eax
+    2a02:	74 17                	je     2a1b <fourteen+0x43>
+    printf(1, "mkdir 12345678901234 failed\n");
+    2a04:	83 ec 08             	sub    $0x8,%esp
+    2a07:	68 5d 53 00 00       	push   $0x535d
+    2a0c:	6a 01                	push   $0x1
+    2a0e:	e8 3b 16 00 00       	call   404e <printf>
+    2a13:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2a16:	e8 b4 14 00 00       	call   3ecf <exit>
+  }
+  if(mkdir("12345678901234/123456789012345") != 0){
+    2a1b:	83 ec 0c             	sub    $0xc,%esp
+    2a1e:	68 7c 53 00 00       	push   $0x537c
+    2a23:	e8 0f 15 00 00       	call   3f37 <mkdir>
+    2a28:	83 c4 10             	add    $0x10,%esp
+    2a2b:	85 c0                	test   %eax,%eax
+    2a2d:	74 17                	je     2a46 <fourteen+0x6e>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    2a2f:	83 ec 08             	sub    $0x8,%esp
+    2a32:	68 9c 53 00 00       	push   $0x539c
+    2a37:	6a 01                	push   $0x1
+    2a39:	e8 10 16 00 00       	call   404e <printf>
+    2a3e:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2a41:	e8 89 14 00 00       	call   3ecf <exit>
+  }
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    2a46:	83 ec 08             	sub    $0x8,%esp
+    2a49:	68 00 02 00 00       	push   $0x200
+    2a4e:	68 cc 53 00 00       	push   $0x53cc
+    2a53:	e8 b7 14 00 00       	call   3f0f <open>
+    2a58:	83 c4 10             	add    $0x10,%esp
+    2a5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    2a5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    2a62:	79 17                	jns    2a7b <fourteen+0xa3>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    2a64:	83 ec 08             	sub    $0x8,%esp
+    2a67:	68 fc 53 00 00       	push   $0x53fc
+    2a6c:	6a 01                	push   $0x1
+    2a6e:	e8 db 15 00 00       	call   404e <printf>
+    2a73:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2a76:	e8 54 14 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    2a7b:	83 ec 0c             	sub    $0xc,%esp
+    2a7e:	ff 75 f4             	pushl  -0xc(%ebp)
+    2a81:	e8 71 14 00 00       	call   3ef7 <close>
+    2a86:	83 c4 10             	add    $0x10,%esp
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    2a89:	83 ec 08             	sub    $0x8,%esp
+    2a8c:	6a 00                	push   $0x0
+    2a8e:	68 3c 54 00 00       	push   $0x543c
+    2a93:	e8 77 14 00 00       	call   3f0f <open>
+    2a98:	83 c4 10             	add    $0x10,%esp
+    2a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    2a9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    2aa2:	79 17                	jns    2abb <fourteen+0xe3>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    2aa4:	83 ec 08             	sub    $0x8,%esp
+    2aa7:	68 6c 54 00 00       	push   $0x546c
+    2aac:	6a 01                	push   $0x1
+    2aae:	e8 9b 15 00 00       	call   404e <printf>
+    2ab3:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2ab6:	e8 14 14 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    2abb:	83 ec 0c             	sub    $0xc,%esp
+    2abe:	ff 75 f4             	pushl  -0xc(%ebp)
+    2ac1:	e8 31 14 00 00       	call   3ef7 <close>
+    2ac6:	83 c4 10             	add    $0x10,%esp
+
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2ac9:	83 ec 0c             	sub    $0xc,%esp
+    2acc:	68 a6 54 00 00       	push   $0x54a6
+    2ad1:	e8 61 14 00 00       	call   3f37 <mkdir>
+    2ad6:	83 c4 10             	add    $0x10,%esp
+    2ad9:	85 c0                	test   %eax,%eax
+    2adb:	75 17                	jne    2af4 <fourteen+0x11c>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    2add:	83 ec 08             	sub    $0x8,%esp
+    2ae0:	68 c4 54 00 00       	push   $0x54c4
+    2ae5:	6a 01                	push   $0x1
+    2ae7:	e8 62 15 00 00       	call   404e <printf>
+    2aec:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2aef:	e8 db 13 00 00       	call   3ecf <exit>
+  }
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2af4:	83 ec 0c             	sub    $0xc,%esp
+    2af7:	68 f4 54 00 00       	push   $0x54f4
+    2afc:	e8 36 14 00 00       	call   3f37 <mkdir>
+    2b01:	83 c4 10             	add    $0x10,%esp
+    2b04:	85 c0                	test   %eax,%eax
+    2b06:	75 17                	jne    2b1f <fourteen+0x147>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2b08:	83 ec 08             	sub    $0x8,%esp
+    2b0b:	68 14 55 00 00       	push   $0x5514
+    2b10:	6a 01                	push   $0x1
+    2b12:	e8 37 15 00 00       	call   404e <printf>
+    2b17:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2b1a:	e8 b0 13 00 00       	call   3ecf <exit>
+  }
+
+  printf(1, "fourteen ok\n");
+    2b1f:	83 ec 08             	sub    $0x8,%esp
+    2b22:	68 45 55 00 00       	push   $0x5545
+    2b27:	6a 01                	push   $0x1
+    2b29:	e8 20 15 00 00       	call   404e <printf>
+    2b2e:	83 c4 10             	add    $0x10,%esp
+}
+    2b31:	90                   	nop
+    2b32:	c9                   	leave  
+    2b33:	c3                   	ret    
+
+00002b34 <rmdot>:
+
+void
+rmdot(void)
+{
+    2b34:	55                   	push   %ebp
+    2b35:	89 e5                	mov    %esp,%ebp
+    2b37:	83 ec 08             	sub    $0x8,%esp
+  printf(1, "rmdot test\n");
+    2b3a:	83 ec 08             	sub    $0x8,%esp
+    2b3d:	68 52 55 00 00       	push   $0x5552
+    2b42:	6a 01                	push   $0x1
+    2b44:	e8 05 15 00 00       	call   404e <printf>
+    2b49:	83 c4 10             	add    $0x10,%esp
+  if(mkdir("dots") != 0){
+    2b4c:	83 ec 0c             	sub    $0xc,%esp
+    2b4f:	68 5e 55 00 00       	push   $0x555e
+    2b54:	e8 de 13 00 00       	call   3f37 <mkdir>
+    2b59:	83 c4 10             	add    $0x10,%esp
+    2b5c:	85 c0                	test   %eax,%eax
+    2b5e:	74 17                	je     2b77 <rmdot+0x43>
+    printf(1, "mkdir dots failed\n");
+    2b60:	83 ec 08             	sub    $0x8,%esp
+    2b63:	68 63 55 00 00       	push   $0x5563
+    2b68:	6a 01                	push   $0x1
+    2b6a:	e8 df 14 00 00       	call   404e <printf>
+    2b6f:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2b72:	e8 58 13 00 00       	call   3ecf <exit>
+  }
+  if(chdir("dots") != 0){
+    2b77:	83 ec 0c             	sub    $0xc,%esp
+    2b7a:	68 5e 55 00 00       	push   $0x555e
+    2b7f:	e8 bb 13 00 00       	call   3f3f <chdir>
+    2b84:	83 c4 10             	add    $0x10,%esp
+    2b87:	85 c0                	test   %eax,%eax
+    2b89:	74 17                	je     2ba2 <rmdot+0x6e>
+    printf(1, "chdir dots failed\n");
+    2b8b:	83 ec 08             	sub    $0x8,%esp
+    2b8e:	68 76 55 00 00       	push   $0x5576
+    2b93:	6a 01                	push   $0x1
+    2b95:	e8 b4 14 00 00       	call   404e <printf>
+    2b9a:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2b9d:	e8 2d 13 00 00       	call   3ecf <exit>
+  }
+  if(unlink(".") == 0){
+    2ba2:	83 ec 0c             	sub    $0xc,%esp
+    2ba5:	68 8f 4c 00 00       	push   $0x4c8f
+    2baa:	e8 70 13 00 00       	call   3f1f <unlink>
+    2baf:	83 c4 10             	add    $0x10,%esp
+    2bb2:	85 c0                	test   %eax,%eax
+    2bb4:	75 17                	jne    2bcd <rmdot+0x99>
+    printf(1, "rm . worked!\n");
+    2bb6:	83 ec 08             	sub    $0x8,%esp
+    2bb9:	68 89 55 00 00       	push   $0x5589
+    2bbe:	6a 01                	push   $0x1
+    2bc0:	e8 89 14 00 00       	call   404e <printf>
+    2bc5:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2bc8:	e8 02 13 00 00       	call   3ecf <exit>
+  }
+  if(unlink("..") == 0){
+    2bcd:	83 ec 0c             	sub    $0xc,%esp
+    2bd0:	68 22 48 00 00       	push   $0x4822
+    2bd5:	e8 45 13 00 00       	call   3f1f <unlink>
+    2bda:	83 c4 10             	add    $0x10,%esp
+    2bdd:	85 c0                	test   %eax,%eax
+    2bdf:	75 17                	jne    2bf8 <rmdot+0xc4>
+    printf(1, "rm .. worked!\n");
+    2be1:	83 ec 08             	sub    $0x8,%esp
+    2be4:	68 97 55 00 00       	push   $0x5597
+    2be9:	6a 01                	push   $0x1
+    2beb:	e8 5e 14 00 00       	call   404e <printf>
+    2bf0:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2bf3:	e8 d7 12 00 00       	call   3ecf <exit>
+  }
+  if(chdir("/") != 0){
+    2bf8:	83 ec 0c             	sub    $0xc,%esp
+    2bfb:	68 76 44 00 00       	push   $0x4476
+    2c00:	e8 3a 13 00 00       	call   3f3f <chdir>
+    2c05:	83 c4 10             	add    $0x10,%esp
+    2c08:	85 c0                	test   %eax,%eax
+    2c0a:	74 17                	je     2c23 <rmdot+0xef>
+    printf(1, "chdir / failed\n");
+    2c0c:	83 ec 08             	sub    $0x8,%esp
+    2c0f:	68 78 44 00 00       	push   $0x4478
+    2c14:	6a 01                	push   $0x1
+    2c16:	e8 33 14 00 00       	call   404e <printf>
+    2c1b:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2c1e:	e8 ac 12 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dots/.") == 0){
+    2c23:	83 ec 0c             	sub    $0xc,%esp
+    2c26:	68 a6 55 00 00       	push   $0x55a6
+    2c2b:	e8 ef 12 00 00       	call   3f1f <unlink>
+    2c30:	83 c4 10             	add    $0x10,%esp
+    2c33:	85 c0                	test   %eax,%eax
+    2c35:	75 17                	jne    2c4e <rmdot+0x11a>
+    printf(1, "unlink dots/. worked!\n");
+    2c37:	83 ec 08             	sub    $0x8,%esp
+    2c3a:	68 ad 55 00 00       	push   $0x55ad
+    2c3f:	6a 01                	push   $0x1
+    2c41:	e8 08 14 00 00       	call   404e <printf>
+    2c46:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2c49:	e8 81 12 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dots/..") == 0){
+    2c4e:	83 ec 0c             	sub    $0xc,%esp
+    2c51:	68 c4 55 00 00       	push   $0x55c4
+    2c56:	e8 c4 12 00 00       	call   3f1f <unlink>
+    2c5b:	83 c4 10             	add    $0x10,%esp
+    2c5e:	85 c0                	test   %eax,%eax
+    2c60:	75 17                	jne    2c79 <rmdot+0x145>
+    printf(1, "unlink dots/.. worked!\n");
+    2c62:	83 ec 08             	sub    $0x8,%esp
+    2c65:	68 cc 55 00 00       	push   $0x55cc
+    2c6a:	6a 01                	push   $0x1
+    2c6c:	e8 dd 13 00 00       	call   404e <printf>
+    2c71:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2c74:	e8 56 12 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dots") != 0){
+    2c79:	83 ec 0c             	sub    $0xc,%esp
+    2c7c:	68 5e 55 00 00       	push   $0x555e
+    2c81:	e8 99 12 00 00       	call   3f1f <unlink>
+    2c86:	83 c4 10             	add    $0x10,%esp
+    2c89:	85 c0                	test   %eax,%eax
+    2c8b:	74 17                	je     2ca4 <rmdot+0x170>
+    printf(1, "unlink dots failed!\n");
+    2c8d:	83 ec 08             	sub    $0x8,%esp
+    2c90:	68 e4 55 00 00       	push   $0x55e4
+    2c95:	6a 01                	push   $0x1
+    2c97:	e8 b2 13 00 00       	call   404e <printf>
+    2c9c:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2c9f:	e8 2b 12 00 00       	call   3ecf <exit>
+  }
+  printf(1, "rmdot ok\n");
+    2ca4:	83 ec 08             	sub    $0x8,%esp
+    2ca7:	68 f9 55 00 00       	push   $0x55f9
+    2cac:	6a 01                	push   $0x1
+    2cae:	e8 9b 13 00 00       	call   404e <printf>
+    2cb3:	83 c4 10             	add    $0x10,%esp
+}
+    2cb6:	90                   	nop
+    2cb7:	c9                   	leave  
+    2cb8:	c3                   	ret    
+
+00002cb9 <dirfile>:
+
+void
+dirfile(void)
+{
+    2cb9:	55                   	push   %ebp
+    2cba:	89 e5                	mov    %esp,%ebp
+    2cbc:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+
+  printf(1, "dir vs file\n");
+    2cbf:	83 ec 08             	sub    $0x8,%esp
+    2cc2:	68 03 56 00 00       	push   $0x5603
+    2cc7:	6a 01                	push   $0x1
+    2cc9:	e8 80 13 00 00       	call   404e <printf>
+    2cce:	83 c4 10             	add    $0x10,%esp
+
+  fd = open("dirfile", O_CREATE);
+    2cd1:	83 ec 08             	sub    $0x8,%esp
+    2cd4:	68 00 02 00 00       	push   $0x200
+    2cd9:	68 10 56 00 00       	push   $0x5610
+    2cde:	e8 2c 12 00 00       	call   3f0f <open>
+    2ce3:	83 c4 10             	add    $0x10,%esp
+    2ce6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0){
+    2ce9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    2ced:	79 17                	jns    2d06 <dirfile+0x4d>
+    printf(1, "create dirfile failed\n");
+    2cef:	83 ec 08             	sub    $0x8,%esp
+    2cf2:	68 18 56 00 00       	push   $0x5618
+    2cf7:	6a 01                	push   $0x1
+    2cf9:	e8 50 13 00 00       	call   404e <printf>
+    2cfe:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2d01:	e8 c9 11 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    2d06:	83 ec 0c             	sub    $0xc,%esp
+    2d09:	ff 75 f4             	pushl  -0xc(%ebp)
+    2d0c:	e8 e6 11 00 00       	call   3ef7 <close>
+    2d11:	83 c4 10             	add    $0x10,%esp
+  if(chdir("dirfile") == 0){
+    2d14:	83 ec 0c             	sub    $0xc,%esp
+    2d17:	68 10 56 00 00       	push   $0x5610
+    2d1c:	e8 1e 12 00 00       	call   3f3f <chdir>
+    2d21:	83 c4 10             	add    $0x10,%esp
+    2d24:	85 c0                	test   %eax,%eax
+    2d26:	75 17                	jne    2d3f <dirfile+0x86>
+    printf(1, "chdir dirfile succeeded!\n");
+    2d28:	83 ec 08             	sub    $0x8,%esp
+    2d2b:	68 2f 56 00 00       	push   $0x562f
+    2d30:	6a 01                	push   $0x1
+    2d32:	e8 17 13 00 00       	call   404e <printf>
+    2d37:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2d3a:	e8 90 11 00 00       	call   3ecf <exit>
+  }
+  fd = open("dirfile/xx", 0);
+    2d3f:	83 ec 08             	sub    $0x8,%esp
+    2d42:	6a 00                	push   $0x0
+    2d44:	68 49 56 00 00       	push   $0x5649
+    2d49:	e8 c1 11 00 00       	call   3f0f <open>
+    2d4e:	83 c4 10             	add    $0x10,%esp
+    2d51:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd >= 0){
+    2d54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    2d58:	78 17                	js     2d71 <dirfile+0xb8>
+    printf(1, "create dirfile/xx succeeded!\n");
+    2d5a:	83 ec 08             	sub    $0x8,%esp
+    2d5d:	68 54 56 00 00       	push   $0x5654
+    2d62:	6a 01                	push   $0x1
+    2d64:	e8 e5 12 00 00       	call   404e <printf>
+    2d69:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2d6c:	e8 5e 11 00 00       	call   3ecf <exit>
+  }
+  fd = open("dirfile/xx", O_CREATE);
+    2d71:	83 ec 08             	sub    $0x8,%esp
+    2d74:	68 00 02 00 00       	push   $0x200
+    2d79:	68 49 56 00 00       	push   $0x5649
+    2d7e:	e8 8c 11 00 00       	call   3f0f <open>
+    2d83:	83 c4 10             	add    $0x10,%esp
+    2d86:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd >= 0){
+    2d89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    2d8d:	78 17                	js     2da6 <dirfile+0xed>
+    printf(1, "create dirfile/xx succeeded!\n");
+    2d8f:	83 ec 08             	sub    $0x8,%esp
+    2d92:	68 54 56 00 00       	push   $0x5654
+    2d97:	6a 01                	push   $0x1
+    2d99:	e8 b0 12 00 00       	call   404e <printf>
+    2d9e:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2da1:	e8 29 11 00 00       	call   3ecf <exit>
+  }
+  if(mkdir("dirfile/xx") == 0){
+    2da6:	83 ec 0c             	sub    $0xc,%esp
+    2da9:	68 49 56 00 00       	push   $0x5649
+    2dae:	e8 84 11 00 00       	call   3f37 <mkdir>
+    2db3:	83 c4 10             	add    $0x10,%esp
+    2db6:	85 c0                	test   %eax,%eax
+    2db8:	75 17                	jne    2dd1 <dirfile+0x118>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2dba:	83 ec 08             	sub    $0x8,%esp
+    2dbd:	68 72 56 00 00       	push   $0x5672
+    2dc2:	6a 01                	push   $0x1
+    2dc4:	e8 85 12 00 00       	call   404e <printf>
+    2dc9:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2dcc:	e8 fe 10 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dirfile/xx") == 0){
+    2dd1:	83 ec 0c             	sub    $0xc,%esp
+    2dd4:	68 49 56 00 00       	push   $0x5649
+    2dd9:	e8 41 11 00 00       	call   3f1f <unlink>
+    2dde:	83 c4 10             	add    $0x10,%esp
+    2de1:	85 c0                	test   %eax,%eax
+    2de3:	75 17                	jne    2dfc <dirfile+0x143>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2de5:	83 ec 08             	sub    $0x8,%esp
+    2de8:	68 8f 56 00 00       	push   $0x568f
+    2ded:	6a 01                	push   $0x1
+    2def:	e8 5a 12 00 00       	call   404e <printf>
+    2df4:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2df7:	e8 d3 10 00 00       	call   3ecf <exit>
+  }
+  if(link("README", "dirfile/xx") == 0){
+    2dfc:	83 ec 08             	sub    $0x8,%esp
+    2dff:	68 49 56 00 00       	push   $0x5649
+    2e04:	68 ad 56 00 00       	push   $0x56ad
+    2e09:	e8 21 11 00 00       	call   3f2f <link>
+    2e0e:	83 c4 10             	add    $0x10,%esp
+    2e11:	85 c0                	test   %eax,%eax
+    2e13:	75 17                	jne    2e2c <dirfile+0x173>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2e15:	83 ec 08             	sub    $0x8,%esp
+    2e18:	68 b4 56 00 00       	push   $0x56b4
+    2e1d:	6a 01                	push   $0x1
+    2e1f:	e8 2a 12 00 00       	call   404e <printf>
+    2e24:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2e27:	e8 a3 10 00 00       	call   3ecf <exit>
+  }
+  if(unlink("dirfile") != 0){
+    2e2c:	83 ec 0c             	sub    $0xc,%esp
+    2e2f:	68 10 56 00 00       	push   $0x5610
+    2e34:	e8 e6 10 00 00       	call   3f1f <unlink>
+    2e39:	83 c4 10             	add    $0x10,%esp
+    2e3c:	85 c0                	test   %eax,%eax
+    2e3e:	74 17                	je     2e57 <dirfile+0x19e>
+    printf(1, "unlink dirfile failed!\n");
+    2e40:	83 ec 08             	sub    $0x8,%esp
+    2e43:	68 d3 56 00 00       	push   $0x56d3
+    2e48:	6a 01                	push   $0x1
+    2e4a:	e8 ff 11 00 00       	call   404e <printf>
+    2e4f:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2e52:	e8 78 10 00 00       	call   3ecf <exit>
+  }
+
+  fd = open(".", O_RDWR);
+    2e57:	83 ec 08             	sub    $0x8,%esp
+    2e5a:	6a 02                	push   $0x2
+    2e5c:	68 8f 4c 00 00       	push   $0x4c8f
+    2e61:	e8 a9 10 00 00       	call   3f0f <open>
+    2e66:	83 c4 10             	add    $0x10,%esp
+    2e69:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd >= 0){
+    2e6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    2e70:	78 17                	js     2e89 <dirfile+0x1d0>
+    printf(1, "open . for writing succeeded!\n");
+    2e72:	83 ec 08             	sub    $0x8,%esp
+    2e75:	68 ec 56 00 00       	push   $0x56ec
+    2e7a:	6a 01                	push   $0x1
+    2e7c:	e8 cd 11 00 00       	call   404e <printf>
+    2e81:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2e84:	e8 46 10 00 00       	call   3ecf <exit>
+  }
+  fd = open(".", 0);
+    2e89:	83 ec 08             	sub    $0x8,%esp
+    2e8c:	6a 00                	push   $0x0
+    2e8e:	68 8f 4c 00 00       	push   $0x4c8f
+    2e93:	e8 77 10 00 00       	call   3f0f <open>
+    2e98:	83 c4 10             	add    $0x10,%esp
+    2e9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(write(fd, "x", 1) > 0){
+    2e9e:	83 ec 04             	sub    $0x4,%esp
+    2ea1:	6a 01                	push   $0x1
+    2ea3:	68 db 48 00 00       	push   $0x48db
+    2ea8:	ff 75 f4             	pushl  -0xc(%ebp)
+    2eab:	e8 3f 10 00 00       	call   3eef <write>
+    2eb0:	83 c4 10             	add    $0x10,%esp
+    2eb3:	85 c0                	test   %eax,%eax
+    2eb5:	7e 17                	jle    2ece <dirfile+0x215>
+    printf(1, "write . succeeded!\n");
+    2eb7:	83 ec 08             	sub    $0x8,%esp
+    2eba:	68 0b 57 00 00       	push   $0x570b
+    2ebf:	6a 01                	push   $0x1
+    2ec1:	e8 88 11 00 00       	call   404e <printf>
+    2ec6:	83 c4 10             	add    $0x10,%esp
+    exit();
+    2ec9:	e8 01 10 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    2ece:	83 ec 0c             	sub    $0xc,%esp
+    2ed1:	ff 75 f4             	pushl  -0xc(%ebp)
+    2ed4:	e8 1e 10 00 00       	call   3ef7 <close>
+    2ed9:	83 c4 10             	add    $0x10,%esp
+
+  printf(1, "dir vs file OK\n");
+    2edc:	83 ec 08             	sub    $0x8,%esp
+    2edf:	68 1f 57 00 00       	push   $0x571f
+    2ee4:	6a 01                	push   $0x1
+    2ee6:	e8 63 11 00 00       	call   404e <printf>
+    2eeb:	83 c4 10             	add    $0x10,%esp
+}
+    2eee:	90                   	nop
+    2eef:	c9                   	leave  
+    2ef0:	c3                   	ret    
+
+00002ef1 <iref>:
+
+// test that iput() is called at the end of _namei()
+void
+iref(void)
+{
+    2ef1:	55                   	push   %ebp
+    2ef2:	89 e5                	mov    %esp,%ebp
+    2ef4:	83 ec 18             	sub    $0x18,%esp
+  int i, fd;
+
+  printf(1, "empty file name\n");
+    2ef7:	83 ec 08             	sub    $0x8,%esp
+    2efa:	68 2f 57 00 00       	push   $0x572f
+    2eff:	6a 01                	push   $0x1
+    2f01:	e8 48 11 00 00       	call   404e <printf>
+    2f06:	83 c4 10             	add    $0x10,%esp
+
+  // the 50 is NINODE
+  for(i = 0; i < 50 + 1; i++){
+    2f09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    2f10:	e9 e7 00 00 00       	jmp    2ffc <iref+0x10b>
+    if(mkdir("irefd") != 0){
+    2f15:	83 ec 0c             	sub    $0xc,%esp
+    2f18:	68 40 57 00 00       	push   $0x5740
+    2f1d:	e8 15 10 00 00       	call   3f37 <mkdir>
+    2f22:	83 c4 10             	add    $0x10,%esp
+    2f25:	85 c0                	test   %eax,%eax
+    2f27:	74 17                	je     2f40 <iref+0x4f>
+      printf(1, "mkdir irefd failed\n");
+    2f29:	83 ec 08             	sub    $0x8,%esp
+    2f2c:	68 46 57 00 00       	push   $0x5746
+    2f31:	6a 01                	push   $0x1
+    2f33:	e8 16 11 00 00       	call   404e <printf>
+    2f38:	83 c4 10             	add    $0x10,%esp
+      exit();
+    2f3b:	e8 8f 0f 00 00       	call   3ecf <exit>
+    }
+    if(chdir("irefd") != 0){
+    2f40:	83 ec 0c             	sub    $0xc,%esp
+    2f43:	68 40 57 00 00       	push   $0x5740
+    2f48:	e8 f2 0f 00 00       	call   3f3f <chdir>
+    2f4d:	83 c4 10             	add    $0x10,%esp
+    2f50:	85 c0                	test   %eax,%eax
+    2f52:	74 17                	je     2f6b <iref+0x7a>
+      printf(1, "chdir irefd failed\n");
+    2f54:	83 ec 08             	sub    $0x8,%esp
+    2f57:	68 5a 57 00 00       	push   $0x575a
+    2f5c:	6a 01                	push   $0x1
+    2f5e:	e8 eb 10 00 00       	call   404e <printf>
+    2f63:	83 c4 10             	add    $0x10,%esp
+      exit();
+    2f66:	e8 64 0f 00 00       	call   3ecf <exit>
+    }
+
+    mkdir("");
+    2f6b:	83 ec 0c             	sub    $0xc,%esp
+    2f6e:	68 6e 57 00 00       	push   $0x576e
+    2f73:	e8 bf 0f 00 00       	call   3f37 <mkdir>
+    2f78:	83 c4 10             	add    $0x10,%esp
+    link("README", "");
+    2f7b:	83 ec 08             	sub    $0x8,%esp
+    2f7e:	68 6e 57 00 00       	push   $0x576e
+    2f83:	68 ad 56 00 00       	push   $0x56ad
+    2f88:	e8 a2 0f 00 00       	call   3f2f <link>
+    2f8d:	83 c4 10             	add    $0x10,%esp
+    fd = open("", O_CREATE);
+    2f90:	83 ec 08             	sub    $0x8,%esp
+    2f93:	68 00 02 00 00       	push   $0x200
+    2f98:	68 6e 57 00 00       	push   $0x576e
+    2f9d:	e8 6d 0f 00 00       	call   3f0f <open>
+    2fa2:	83 c4 10             	add    $0x10,%esp
+    2fa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(fd >= 0)
+    2fa8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    2fac:	78 0e                	js     2fbc <iref+0xcb>
+      close(fd);
+    2fae:	83 ec 0c             	sub    $0xc,%esp
+    2fb1:	ff 75 f0             	pushl  -0x10(%ebp)
+    2fb4:	e8 3e 0f 00 00       	call   3ef7 <close>
+    2fb9:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2fbc:	83 ec 08             	sub    $0x8,%esp
+    2fbf:	68 00 02 00 00       	push   $0x200
+    2fc4:	68 6f 57 00 00       	push   $0x576f
+    2fc9:	e8 41 0f 00 00       	call   3f0f <open>
+    2fce:	83 c4 10             	add    $0x10,%esp
+    2fd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(fd >= 0)
+    2fd4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    2fd8:	78 0e                	js     2fe8 <iref+0xf7>
+      close(fd);
+    2fda:	83 ec 0c             	sub    $0xc,%esp
+    2fdd:	ff 75 f0             	pushl  -0x10(%ebp)
+    2fe0:	e8 12 0f 00 00       	call   3ef7 <close>
+    2fe5:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2fe8:	83 ec 0c             	sub    $0xc,%esp
+    2feb:	68 6f 57 00 00       	push   $0x576f
+    2ff0:	e8 2a 0f 00 00       	call   3f1f <unlink>
+    2ff5:	83 c4 10             	add    $0x10,%esp
+  int i, fd;
+
+  printf(1, "empty file name\n");
+
+  // the 50 is NINODE
+  for(i = 0; i < 50 + 1; i++){
+    2ff8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    2ffc:	83 7d f4 32          	cmpl   $0x32,-0xc(%ebp)
+    3000:	0f 8e 0f ff ff ff    	jle    2f15 <iref+0x24>
+    if(fd >= 0)
+      close(fd);
+    unlink("xx");
+  }
+
+  chdir("/");
+    3006:	83 ec 0c             	sub    $0xc,%esp
+    3009:	68 76 44 00 00       	push   $0x4476
+    300e:	e8 2c 0f 00 00       	call   3f3f <chdir>
+    3013:	83 c4 10             	add    $0x10,%esp
+  printf(1, "empty file name OK\n");
+    3016:	83 ec 08             	sub    $0x8,%esp
+    3019:	68 72 57 00 00       	push   $0x5772
+    301e:	6a 01                	push   $0x1
+    3020:	e8 29 10 00 00       	call   404e <printf>
+    3025:	83 c4 10             	add    $0x10,%esp
+}
+    3028:	90                   	nop
+    3029:	c9                   	leave  
+    302a:	c3                   	ret    
+
+0000302b <forktest>:
+// test that fork fails gracefully
+// the forktest binary also does this, but it runs out of proc entries first.
+// inside the bigger usertests binary, we run out of memory first.
+void
+forktest(void)
+{
+    302b:	55                   	push   %ebp
+    302c:	89 e5                	mov    %esp,%ebp
+    302e:	83 ec 18             	sub    $0x18,%esp
+  int n, pid;
+
+  printf(1, "fork test\n");
+    3031:	83 ec 08             	sub    $0x8,%esp
+    3034:	68 86 57 00 00       	push   $0x5786
+    3039:	6a 01                	push   $0x1
+    303b:	e8 0e 10 00 00       	call   404e <printf>
+    3040:	83 c4 10             	add    $0x10,%esp
+
+  for(n=0; n<1000; n++){
+    3043:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    304a:	eb 1d                	jmp    3069 <forktest+0x3e>
+    pid = fork();
+    304c:	e8 76 0e 00 00       	call   3ec7 <fork>
+    3051:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(pid < 0)
+    3054:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    3058:	78 1a                	js     3074 <forktest+0x49>
+      break;
+    if(pid == 0)
+    305a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    305e:	75 05                	jne    3065 <forktest+0x3a>
+      exit();
+    3060:	e8 6a 0e 00 00       	call   3ecf <exit>
+{
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<1000; n++){
+    3065:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    3069:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
+    3070:	7e da                	jle    304c <forktest+0x21>
+    3072:	eb 01                	jmp    3075 <forktest+0x4a>
+    pid = fork();
+    if(pid < 0)
+      break;
+    3074:	90                   	nop
+    if(pid == 0)
+      exit();
+  }
+  
+  if(n == 1000){
+    3075:	81 7d f4 e8 03 00 00 	cmpl   $0x3e8,-0xc(%ebp)
+    307c:	75 3b                	jne    30b9 <forktest+0x8e>
+    printf(1, "fork claimed to work 1000 times!\n");
+    307e:	83 ec 08             	sub    $0x8,%esp
+    3081:	68 94 57 00 00       	push   $0x5794
+    3086:	6a 01                	push   $0x1
+    3088:	e8 c1 0f 00 00       	call   404e <printf>
+    308d:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3090:	e8 3a 0e 00 00       	call   3ecf <exit>
+  }
+  
+  for(; n > 0; n--){
+    if(wait() < 0){
+    3095:	e8 3d 0e 00 00       	call   3ed7 <wait>
+    309a:	85 c0                	test   %eax,%eax
+    309c:	79 17                	jns    30b5 <forktest+0x8a>
+      printf(1, "wait stopped early\n");
+    309e:	83 ec 08             	sub    $0x8,%esp
+    30a1:	68 b6 57 00 00       	push   $0x57b6
+    30a6:	6a 01                	push   $0x1
+    30a8:	e8 a1 0f 00 00       	call   404e <printf>
+    30ad:	83 c4 10             	add    $0x10,%esp
+      exit();
+    30b0:	e8 1a 0e 00 00       	call   3ecf <exit>
+  if(n == 1000){
+    printf(1, "fork claimed to work 1000 times!\n");
+    exit();
+  }
+  
+  for(; n > 0; n--){
+    30b5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+    30b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    30bd:	7f d6                	jg     3095 <forktest+0x6a>
+      printf(1, "wait stopped early\n");
+      exit();
+    }
+  }
+  
+  if(wait() != -1){
+    30bf:	e8 13 0e 00 00       	call   3ed7 <wait>
+    30c4:	83 f8 ff             	cmp    $0xffffffff,%eax
+    30c7:	74 17                	je     30e0 <forktest+0xb5>
+    printf(1, "wait got too many\n");
+    30c9:	83 ec 08             	sub    $0x8,%esp
+    30cc:	68 ca 57 00 00       	push   $0x57ca
+    30d1:	6a 01                	push   $0x1
+    30d3:	e8 76 0f 00 00       	call   404e <printf>
+    30d8:	83 c4 10             	add    $0x10,%esp
+    exit();
+    30db:	e8 ef 0d 00 00       	call   3ecf <exit>
+  }
+  
+  printf(1, "fork test OK\n");
+    30e0:	83 ec 08             	sub    $0x8,%esp
+    30e3:	68 dd 57 00 00       	push   $0x57dd
+    30e8:	6a 01                	push   $0x1
+    30ea:	e8 5f 0f 00 00       	call   404e <printf>
+    30ef:	83 c4 10             	add    $0x10,%esp
+}
+    30f2:	90                   	nop
+    30f3:	c9                   	leave  
+    30f4:	c3                   	ret    
+
+000030f5 <sbrktest>:
+
+void
+sbrktest(void)
+{
+    30f5:	55                   	push   %ebp
+    30f6:	89 e5                	mov    %esp,%ebp
+    30f8:	53                   	push   %ebx
+    30f9:	83 ec 64             	sub    $0x64,%esp
+  int fds[2], pid, pids[10], ppid;
+  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
+  uint amt;
+
+  printf(stdout, "sbrk test\n");
+    30fc:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3101:	83 ec 08             	sub    $0x8,%esp
+    3104:	68 eb 57 00 00       	push   $0x57eb
+    3109:	50                   	push   %eax
+    310a:	e8 3f 0f 00 00       	call   404e <printf>
+    310f:	83 c4 10             	add    $0x10,%esp
+  oldbrk = sbrk(0);
+    3112:	83 ec 0c             	sub    $0xc,%esp
+    3115:	6a 00                	push   $0x0
+    3117:	e8 3b 0e 00 00       	call   3f57 <sbrk>
+    311c:	83 c4 10             	add    $0x10,%esp
+    311f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+    3122:	83 ec 0c             	sub    $0xc,%esp
+    3125:	6a 00                	push   $0x0
+    3127:	e8 2b 0e 00 00       	call   3f57 <sbrk>
+    312c:	83 c4 10             	add    $0x10,%esp
+    312f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  int i;
+  for(i = 0; i < 5000; i++){ 
+    3132:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    3139:	eb 4f                	jmp    318a <sbrktest+0x95>
+    b = sbrk(1);
+    313b:	83 ec 0c             	sub    $0xc,%esp
+    313e:	6a 01                	push   $0x1
+    3140:	e8 12 0e 00 00       	call   3f57 <sbrk>
+    3145:	83 c4 10             	add    $0x10,%esp
+    3148:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    if(b != a){
+    314b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    314e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+    3151:	74 24                	je     3177 <sbrktest+0x82>
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    3153:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3158:	83 ec 0c             	sub    $0xc,%esp
+    315b:	ff 75 e8             	pushl  -0x18(%ebp)
+    315e:	ff 75 f4             	pushl  -0xc(%ebp)
+    3161:	ff 75 f0             	pushl  -0x10(%ebp)
+    3164:	68 f6 57 00 00       	push   $0x57f6
+    3169:	50                   	push   %eax
+    316a:	e8 df 0e 00 00       	call   404e <printf>
+    316f:	83 c4 20             	add    $0x20,%esp
+      exit();
+    3172:	e8 58 0d 00 00       	call   3ecf <exit>
+    }
+    *b = 1;
+    3177:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    317a:	c6 00 01             	movb   $0x1,(%eax)
+    a = b + 1;
+    317d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    3180:	83 c0 01             	add    $0x1,%eax
+    3183:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  oldbrk = sbrk(0);
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+  int i;
+  for(i = 0; i < 5000; i++){ 
+    3186:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    318a:	81 7d f0 87 13 00 00 	cmpl   $0x1387,-0x10(%ebp)
+    3191:	7e a8                	jle    313b <sbrktest+0x46>
+      exit();
+    }
+    *b = 1;
+    a = b + 1;
+  }
+  pid = fork();
+    3193:	e8 2f 0d 00 00       	call   3ec7 <fork>
+    3198:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    319b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+    319f:	79 1b                	jns    31bc <sbrktest+0xc7>
+    printf(stdout, "sbrk test fork failed\n");
+    31a1:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    31a6:	83 ec 08             	sub    $0x8,%esp
+    31a9:	68 11 58 00 00       	push   $0x5811
+    31ae:	50                   	push   %eax
+    31af:	e8 9a 0e 00 00       	call   404e <printf>
+    31b4:	83 c4 10             	add    $0x10,%esp
+    exit();
+    31b7:	e8 13 0d 00 00       	call   3ecf <exit>
+  }
+  c = sbrk(1);
+    31bc:	83 ec 0c             	sub    $0xc,%esp
+    31bf:	6a 01                	push   $0x1
+    31c1:	e8 91 0d 00 00       	call   3f57 <sbrk>
+    31c6:	83 c4 10             	add    $0x10,%esp
+    31c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  c = sbrk(1);
+    31cc:	83 ec 0c             	sub    $0xc,%esp
+    31cf:	6a 01                	push   $0x1
+    31d1:	e8 81 0d 00 00       	call   3f57 <sbrk>
+    31d6:	83 c4 10             	add    $0x10,%esp
+    31d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(c != a + 1){
+    31dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    31df:	83 c0 01             	add    $0x1,%eax
+    31e2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+    31e5:	74 1b                	je     3202 <sbrktest+0x10d>
+    printf(stdout, "sbrk test failed post-fork\n");
+    31e7:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    31ec:	83 ec 08             	sub    $0x8,%esp
+    31ef:	68 28 58 00 00       	push   $0x5828
+    31f4:	50                   	push   %eax
+    31f5:	e8 54 0e 00 00       	call   404e <printf>
+    31fa:	83 c4 10             	add    $0x10,%esp
+    exit();
+    31fd:	e8 cd 0c 00 00       	call   3ecf <exit>
+  }
+  if(pid == 0)
+    3202:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+    3206:	75 05                	jne    320d <sbrktest+0x118>
+    exit();
+    3208:	e8 c2 0c 00 00       	call   3ecf <exit>
+  wait();
+    320d:	e8 c5 0c 00 00       	call   3ed7 <wait>
+
+  // can one grow address space to something big?
+#define BIG (100*1024*1024)
+  a = sbrk(0);
+    3212:	83 ec 0c             	sub    $0xc,%esp
+    3215:	6a 00                	push   $0x0
+    3217:	e8 3b 0d 00 00       	call   3f57 <sbrk>
+    321c:	83 c4 10             	add    $0x10,%esp
+    321f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  amt = (BIG) - (uint)a;
+    3222:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    3225:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    322a:	29 c2                	sub    %eax,%edx
+    322c:	89 d0                	mov    %edx,%eax
+    322e:	89 45 dc             	mov    %eax,-0x24(%ebp)
+  p = sbrk(amt);
+    3231:	8b 45 dc             	mov    -0x24(%ebp),%eax
+    3234:	83 ec 0c             	sub    $0xc,%esp
+    3237:	50                   	push   %eax
+    3238:	e8 1a 0d 00 00       	call   3f57 <sbrk>
+    323d:	83 c4 10             	add    $0x10,%esp
+    3240:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  if (p != a) { 
+    3243:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    3246:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+    3249:	74 1b                	je     3266 <sbrktest+0x171>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    324b:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3250:	83 ec 08             	sub    $0x8,%esp
+    3253:	68 44 58 00 00       	push   $0x5844
+    3258:	50                   	push   %eax
+    3259:	e8 f0 0d 00 00       	call   404e <printf>
+    325e:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3261:	e8 69 0c 00 00       	call   3ecf <exit>
+  }
+  lastaddr = (char*) (BIG-1);
+    3266:	c7 45 d4 ff ff 3f 06 	movl   $0x63fffff,-0x2c(%ebp)
+  *lastaddr = 99;
+    326d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    3270:	c6 00 63             	movb   $0x63,(%eax)
+
+  // can one de-allocate?
+  a = sbrk(0);
+    3273:	83 ec 0c             	sub    $0xc,%esp
+    3276:	6a 00                	push   $0x0
+    3278:	e8 da 0c 00 00       	call   3f57 <sbrk>
+    327d:	83 c4 10             	add    $0x10,%esp
+    3280:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  c = sbrk(-4096);
+    3283:	83 ec 0c             	sub    $0xc,%esp
+    3286:	68 00 f0 ff ff       	push   $0xfffff000
+    328b:	e8 c7 0c 00 00       	call   3f57 <sbrk>
+    3290:	83 c4 10             	add    $0x10,%esp
+    3293:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(c == (char*)0xffffffff){
+    3296:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
+    329a:	75 1b                	jne    32b7 <sbrktest+0x1c2>
+    printf(stdout, "sbrk could not deallocate\n");
+    329c:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    32a1:	83 ec 08             	sub    $0x8,%esp
+    32a4:	68 82 58 00 00       	push   $0x5882
+    32a9:	50                   	push   %eax
+    32aa:	e8 9f 0d 00 00       	call   404e <printf>
+    32af:	83 c4 10             	add    $0x10,%esp
+    exit();
+    32b2:	e8 18 0c 00 00       	call   3ecf <exit>
+  }
+  c = sbrk(0);
+    32b7:	83 ec 0c             	sub    $0xc,%esp
+    32ba:	6a 00                	push   $0x0
+    32bc:	e8 96 0c 00 00       	call   3f57 <sbrk>
+    32c1:	83 c4 10             	add    $0x10,%esp
+    32c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(c != a - 4096){
+    32c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    32ca:	2d 00 10 00 00       	sub    $0x1000,%eax
+    32cf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+    32d2:	74 1e                	je     32f2 <sbrktest+0x1fd>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    32d4:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    32d9:	ff 75 e0             	pushl  -0x20(%ebp)
+    32dc:	ff 75 f4             	pushl  -0xc(%ebp)
+    32df:	68 a0 58 00 00       	push   $0x58a0
+    32e4:	50                   	push   %eax
+    32e5:	e8 64 0d 00 00       	call   404e <printf>
+    32ea:	83 c4 10             	add    $0x10,%esp
+    exit();
+    32ed:	e8 dd 0b 00 00       	call   3ecf <exit>
+  }
+
+  // can one re-allocate that page?
+  a = sbrk(0);
+    32f2:	83 ec 0c             	sub    $0xc,%esp
+    32f5:	6a 00                	push   $0x0
+    32f7:	e8 5b 0c 00 00       	call   3f57 <sbrk>
+    32fc:	83 c4 10             	add    $0x10,%esp
+    32ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  c = sbrk(4096);
+    3302:	83 ec 0c             	sub    $0xc,%esp
+    3305:	68 00 10 00 00       	push   $0x1000
+    330a:	e8 48 0c 00 00       	call   3f57 <sbrk>
+    330f:	83 c4 10             	add    $0x10,%esp
+    3312:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(c != a || sbrk(0) != a + 4096){
+    3315:	8b 45 e0             	mov    -0x20(%ebp),%eax
+    3318:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+    331b:	75 1b                	jne    3338 <sbrktest+0x243>
+    331d:	83 ec 0c             	sub    $0xc,%esp
+    3320:	6a 00                	push   $0x0
+    3322:	e8 30 0c 00 00       	call   3f57 <sbrk>
+    3327:	83 c4 10             	add    $0x10,%esp
+    332a:	89 c2                	mov    %eax,%edx
+    332c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    332f:	05 00 10 00 00       	add    $0x1000,%eax
+    3334:	39 c2                	cmp    %eax,%edx
+    3336:	74 1e                	je     3356 <sbrktest+0x261>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    3338:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    333d:	ff 75 e0             	pushl  -0x20(%ebp)
+    3340:	ff 75 f4             	pushl  -0xc(%ebp)
+    3343:	68 d8 58 00 00       	push   $0x58d8
+    3348:	50                   	push   %eax
+    3349:	e8 00 0d 00 00       	call   404e <printf>
+    334e:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3351:	e8 79 0b 00 00       	call   3ecf <exit>
+  }
+  if(*lastaddr == 99){
+    3356:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    3359:	0f b6 00             	movzbl (%eax),%eax
+    335c:	3c 63                	cmp    $0x63,%al
+    335e:	75 1b                	jne    337b <sbrktest+0x286>
+    // should be zero
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    3360:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3365:	83 ec 08             	sub    $0x8,%esp
+    3368:	68 00 59 00 00       	push   $0x5900
+    336d:	50                   	push   %eax
+    336e:	e8 db 0c 00 00       	call   404e <printf>
+    3373:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3376:	e8 54 0b 00 00       	call   3ecf <exit>
+  }
+
+  a = sbrk(0);
+    337b:	83 ec 0c             	sub    $0xc,%esp
+    337e:	6a 00                	push   $0x0
+    3380:	e8 d2 0b 00 00       	call   3f57 <sbrk>
+    3385:	83 c4 10             	add    $0x10,%esp
+    3388:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  c = sbrk(-(sbrk(0) - oldbrk));
+    338b:	8b 5d ec             	mov    -0x14(%ebp),%ebx
+    338e:	83 ec 0c             	sub    $0xc,%esp
+    3391:	6a 00                	push   $0x0
+    3393:	e8 bf 0b 00 00       	call   3f57 <sbrk>
+    3398:	83 c4 10             	add    $0x10,%esp
+    339b:	29 c3                	sub    %eax,%ebx
+    339d:	89 d8                	mov    %ebx,%eax
+    339f:	83 ec 0c             	sub    $0xc,%esp
+    33a2:	50                   	push   %eax
+    33a3:	e8 af 0b 00 00       	call   3f57 <sbrk>
+    33a8:	83 c4 10             	add    $0x10,%esp
+    33ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(c != a){
+    33ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
+    33b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+    33b4:	74 1e                	je     33d4 <sbrktest+0x2df>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    33b6:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    33bb:	ff 75 e0             	pushl  -0x20(%ebp)
+    33be:	ff 75 f4             	pushl  -0xc(%ebp)
+    33c1:	68 30 59 00 00       	push   $0x5930
+    33c6:	50                   	push   %eax
+    33c7:	e8 82 0c 00 00       	call   404e <printf>
+    33cc:	83 c4 10             	add    $0x10,%esp
+    exit();
+    33cf:	e8 fb 0a 00 00       	call   3ecf <exit>
+  }
+  
+  // can we read the kernel's memory?
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    33d4:	c7 45 f4 00 00 00 80 	movl   $0x80000000,-0xc(%ebp)
+    33db:	eb 76                	jmp    3453 <sbrktest+0x35e>
+    ppid = getpid();
+    33dd:	e8 6d 0b 00 00       	call   3f4f <getpid>
+    33e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    pid = fork();
+    33e5:	e8 dd 0a 00 00       	call   3ec7 <fork>
+    33ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(pid < 0){
+    33ed:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+    33f1:	79 1b                	jns    340e <sbrktest+0x319>
+      printf(stdout, "fork failed\n");
+    33f3:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    33f8:	83 ec 08             	sub    $0x8,%esp
+    33fb:	68 a5 44 00 00       	push   $0x44a5
+    3400:	50                   	push   %eax
+    3401:	e8 48 0c 00 00       	call   404e <printf>
+    3406:	83 c4 10             	add    $0x10,%esp
+      exit();
+    3409:	e8 c1 0a 00 00       	call   3ecf <exit>
+    }
+    if(pid == 0){
+    340e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+    3412:	75 33                	jne    3447 <sbrktest+0x352>
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    3414:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    3417:	0f b6 00             	movzbl (%eax),%eax
+    341a:	0f be d0             	movsbl %al,%edx
+    341d:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3422:	52                   	push   %edx
+    3423:	ff 75 f4             	pushl  -0xc(%ebp)
+    3426:	68 51 59 00 00       	push   $0x5951
+    342b:	50                   	push   %eax
+    342c:	e8 1d 0c 00 00       	call   404e <printf>
+    3431:	83 c4 10             	add    $0x10,%esp
+      kill(ppid);
+    3434:	83 ec 0c             	sub    $0xc,%esp
+    3437:	ff 75 d0             	pushl  -0x30(%ebp)
+    343a:	e8 c0 0a 00 00       	call   3eff <kill>
+    343f:	83 c4 10             	add    $0x10,%esp
+      exit();
+    3442:	e8 88 0a 00 00       	call   3ecf <exit>
+    }
+    wait();
+    3447:	e8 8b 0a 00 00       	call   3ed7 <wait>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    exit();
+  }
+  
+  // can we read the kernel's memory?
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    344c:	81 45 f4 50 c3 00 00 	addl   $0xc350,-0xc(%ebp)
+    3453:	81 7d f4 7f 84 1e 80 	cmpl   $0x801e847f,-0xc(%ebp)
+    345a:	76 81                	jbe    33dd <sbrktest+0x2e8>
+    wait();
+  }
+
+  // if we run the system out of memory, does it clean up the last
+  // failed allocation?
+  if(pipe(fds) != 0){
+    345c:	83 ec 0c             	sub    $0xc,%esp
+    345f:	8d 45 c8             	lea    -0x38(%ebp),%eax
+    3462:	50                   	push   %eax
+    3463:	e8 77 0a 00 00       	call   3edf <pipe>
+    3468:	83 c4 10             	add    $0x10,%esp
+    346b:	85 c0                	test   %eax,%eax
+    346d:	74 17                	je     3486 <sbrktest+0x391>
+    printf(1, "pipe() failed\n");
+    346f:	83 ec 08             	sub    $0x8,%esp
+    3472:	68 76 48 00 00       	push   $0x4876
+    3477:	6a 01                	push   $0x1
+    3479:	e8 d0 0b 00 00       	call   404e <printf>
+    347e:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3481:	e8 49 0a 00 00       	call   3ecf <exit>
+  }
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    3486:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    348d:	e9 88 00 00 00       	jmp    351a <sbrktest+0x425>
+    if((pids[i] = fork()) == 0){
+    3492:	e8 30 0a 00 00       	call   3ec7 <fork>
+    3497:	89 c2                	mov    %eax,%edx
+    3499:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    349c:	89 54 85 a0          	mov    %edx,-0x60(%ebp,%eax,4)
+    34a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    34a3:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
+    34a7:	85 c0                	test   %eax,%eax
+    34a9:	75 4a                	jne    34f5 <sbrktest+0x400>
+      // allocate a lot of memory
+      sbrk(BIG - (uint)sbrk(0));
+    34ab:	83 ec 0c             	sub    $0xc,%esp
+    34ae:	6a 00                	push   $0x0
+    34b0:	e8 a2 0a 00 00       	call   3f57 <sbrk>
+    34b5:	83 c4 10             	add    $0x10,%esp
+    34b8:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    34bd:	29 c2                	sub    %eax,%edx
+    34bf:	89 d0                	mov    %edx,%eax
+    34c1:	83 ec 0c             	sub    $0xc,%esp
+    34c4:	50                   	push   %eax
+    34c5:	e8 8d 0a 00 00       	call   3f57 <sbrk>
+    34ca:	83 c4 10             	add    $0x10,%esp
+      write(fds[1], "x", 1);
+    34cd:	8b 45 cc             	mov    -0x34(%ebp),%eax
+    34d0:	83 ec 04             	sub    $0x4,%esp
+    34d3:	6a 01                	push   $0x1
+    34d5:	68 db 48 00 00       	push   $0x48db
+    34da:	50                   	push   %eax
+    34db:	e8 0f 0a 00 00       	call   3eef <write>
+    34e0:	83 c4 10             	add    $0x10,%esp
+      // sit around until killed
+      for(;;) sleep(1000);
+    34e3:	83 ec 0c             	sub    $0xc,%esp
+    34e6:	68 e8 03 00 00       	push   $0x3e8
+    34eb:	e8 6f 0a 00 00       	call   3f5f <sleep>
+    34f0:	83 c4 10             	add    $0x10,%esp
+    34f3:	eb ee                	jmp    34e3 <sbrktest+0x3ee>
+    }
+    if(pids[i] != -1)
+    34f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    34f8:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
+    34fc:	83 f8 ff             	cmp    $0xffffffff,%eax
+    34ff:	74 15                	je     3516 <sbrktest+0x421>
+      read(fds[0], &scratch, 1);
+    3501:	8b 45 c8             	mov    -0x38(%ebp),%eax
+    3504:	83 ec 04             	sub    $0x4,%esp
+    3507:	6a 01                	push   $0x1
+    3509:	8d 55 9f             	lea    -0x61(%ebp),%edx
+    350c:	52                   	push   %edx
+    350d:	50                   	push   %eax
+    350e:	e8 d4 09 00 00       	call   3ee7 <read>
+    3513:	83 c4 10             	add    $0x10,%esp
+  // failed allocation?
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    exit();
+  }
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    3516:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    351a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    351d:	83 f8 09             	cmp    $0x9,%eax
+    3520:	0f 86 6c ff ff ff    	jbe    3492 <sbrktest+0x39d>
+    if(pids[i] != -1)
+      read(fds[0], &scratch, 1);
+  }
+  // if those failed allocations freed up the pages they did allocate,
+  // we'll be able to allocate here
+  c = sbrk(4096);
+    3526:	83 ec 0c             	sub    $0xc,%esp
+    3529:	68 00 10 00 00       	push   $0x1000
+    352e:	e8 24 0a 00 00       	call   3f57 <sbrk>
+    3533:	83 c4 10             	add    $0x10,%esp
+    3536:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    3539:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    3540:	eb 2b                	jmp    356d <sbrktest+0x478>
+    if(pids[i] == -1)
+    3542:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    3545:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
+    3549:	83 f8 ff             	cmp    $0xffffffff,%eax
+    354c:	74 1a                	je     3568 <sbrktest+0x473>
+      continue;
+    kill(pids[i]);
+    354e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    3551:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
+    3555:	83 ec 0c             	sub    $0xc,%esp
+    3558:	50                   	push   %eax
+    3559:	e8 a1 09 00 00       	call   3eff <kill>
+    355e:	83 c4 10             	add    $0x10,%esp
+    wait();
+    3561:	e8 71 09 00 00       	call   3ed7 <wait>
+    3566:	eb 01                	jmp    3569 <sbrktest+0x474>
+  // if those failed allocations freed up the pages they did allocate,
+  // we'll be able to allocate here
+  c = sbrk(4096);
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if(pids[i] == -1)
+      continue;
+    3568:	90                   	nop
+      read(fds[0], &scratch, 1);
+  }
+  // if those failed allocations freed up the pages they did allocate,
+  // we'll be able to allocate here
+  c = sbrk(4096);
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    3569:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    356d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    3570:	83 f8 09             	cmp    $0x9,%eax
+    3573:	76 cd                	jbe    3542 <sbrktest+0x44d>
+    if(pids[i] == -1)
+      continue;
+    kill(pids[i]);
+    wait();
+  }
+  if(c == (char*)0xffffffff){
+    3575:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
+    3579:	75 1b                	jne    3596 <sbrktest+0x4a1>
+    printf(stdout, "failed sbrk leaked memory\n");
+    357b:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3580:	83 ec 08             	sub    $0x8,%esp
+    3583:	68 6a 59 00 00       	push   $0x596a
+    3588:	50                   	push   %eax
+    3589:	e8 c0 0a 00 00       	call   404e <printf>
+    358e:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3591:	e8 39 09 00 00       	call   3ecf <exit>
+  }
+
+  if(sbrk(0) > oldbrk)
+    3596:	83 ec 0c             	sub    $0xc,%esp
+    3599:	6a 00                	push   $0x0
+    359b:	e8 b7 09 00 00       	call   3f57 <sbrk>
+    35a0:	83 c4 10             	add    $0x10,%esp
+    35a3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+    35a6:	76 20                	jbe    35c8 <sbrktest+0x4d3>
+    sbrk(-(sbrk(0) - oldbrk));
+    35a8:	8b 5d ec             	mov    -0x14(%ebp),%ebx
+    35ab:	83 ec 0c             	sub    $0xc,%esp
+    35ae:	6a 00                	push   $0x0
+    35b0:	e8 a2 09 00 00       	call   3f57 <sbrk>
+    35b5:	83 c4 10             	add    $0x10,%esp
+    35b8:	29 c3                	sub    %eax,%ebx
+    35ba:	89 d8                	mov    %ebx,%eax
+    35bc:	83 ec 0c             	sub    $0xc,%esp
+    35bf:	50                   	push   %eax
+    35c0:	e8 92 09 00 00       	call   3f57 <sbrk>
+    35c5:	83 c4 10             	add    $0x10,%esp
+
+  printf(stdout, "sbrk test OK\n");
+    35c8:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    35cd:	83 ec 08             	sub    $0x8,%esp
+    35d0:	68 85 59 00 00       	push   $0x5985
+    35d5:	50                   	push   %eax
+    35d6:	e8 73 0a 00 00       	call   404e <printf>
+    35db:	83 c4 10             	add    $0x10,%esp
+}
+    35de:	90                   	nop
+    35df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    35e2:	c9                   	leave  
+    35e3:	c3                   	ret    
+
+000035e4 <validateint>:
+
+void
+validateint(int *p)
+{
+    35e4:	55                   	push   %ebp
+    35e5:	89 e5                	mov    %esp,%ebp
+    35e7:	53                   	push   %ebx
+    35e8:	83 ec 10             	sub    $0x10,%esp
+  int res;
+  asm("mov %%esp, %%ebx\n\t"
+    35eb:	b8 0d 00 00 00       	mov    $0xd,%eax
+    35f0:	8b 55 08             	mov    0x8(%ebp),%edx
+    35f3:	89 d1                	mov    %edx,%ecx
+    35f5:	89 e3                	mov    %esp,%ebx
+    35f7:	89 cc                	mov    %ecx,%esp
+    35f9:	cd 40                	int    $0x40
+    35fb:	89 dc                	mov    %ebx,%esp
+    35fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
+      "int %2\n\t"
+      "mov %%ebx, %%esp" :
+      "=a" (res) :
+      "a" (SYS_sleep), "n" (T_SYSCALL), "c" (p) :
+      "ebx");
+}
+    3600:	90                   	nop
+    3601:	83 c4 10             	add    $0x10,%esp
+    3604:	5b                   	pop    %ebx
+    3605:	5d                   	pop    %ebp
+    3606:	c3                   	ret    
+
+00003607 <validatetest>:
+
+void
+validatetest(void)
+{
+    3607:	55                   	push   %ebp
+    3608:	89 e5                	mov    %esp,%ebp
+    360a:	83 ec 18             	sub    $0x18,%esp
+  int hi, pid;
+  uint p;
+
+  printf(stdout, "validate test\n");
+    360d:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3612:	83 ec 08             	sub    $0x8,%esp
+    3615:	68 93 59 00 00       	push   $0x5993
+    361a:	50                   	push   %eax
+    361b:	e8 2e 0a 00 00       	call   404e <printf>
+    3620:	83 c4 10             	add    $0x10,%esp
+  hi = 1100*1024;
+    3623:	c7 45 f0 00 30 11 00 	movl   $0x113000,-0x10(%ebp)
+
+  for(p = 0; p <= (uint)hi; p += 4096){
+    362a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    3631:	e9 8a 00 00 00       	jmp    36c0 <validatetest+0xb9>
+    if((pid = fork()) == 0){
+    3636:	e8 8c 08 00 00       	call   3ec7 <fork>
+    363b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    363e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    3642:	75 14                	jne    3658 <validatetest+0x51>
+      // try to crash the kernel by passing in a badly placed integer
+      validateint((int*)p);
+    3644:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    3647:	83 ec 0c             	sub    $0xc,%esp
+    364a:	50                   	push   %eax
+    364b:	e8 94 ff ff ff       	call   35e4 <validateint>
+    3650:	83 c4 10             	add    $0x10,%esp
+      exit();
+    3653:	e8 77 08 00 00       	call   3ecf <exit>
+    }
+    sleep(0);
+    3658:	83 ec 0c             	sub    $0xc,%esp
+    365b:	6a 00                	push   $0x0
+    365d:	e8 fd 08 00 00       	call   3f5f <sleep>
+    3662:	83 c4 10             	add    $0x10,%esp
+    sleep(0);
+    3665:	83 ec 0c             	sub    $0xc,%esp
+    3668:	6a 00                	push   $0x0
+    366a:	e8 f0 08 00 00       	call   3f5f <sleep>
+    366f:	83 c4 10             	add    $0x10,%esp
+    kill(pid);
+    3672:	83 ec 0c             	sub    $0xc,%esp
+    3675:	ff 75 ec             	pushl  -0x14(%ebp)
+    3678:	e8 82 08 00 00       	call   3eff <kill>
+    367d:	83 c4 10             	add    $0x10,%esp
+    wait();
+    3680:	e8 52 08 00 00       	call   3ed7 <wait>
+
+    // try to crash the kernel by passing in a bad string pointer
+    if(link("nosuchfile", (char*)p) != -1){
+    3685:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    3688:	83 ec 08             	sub    $0x8,%esp
+    368b:	50                   	push   %eax
+    368c:	68 a2 59 00 00       	push   $0x59a2
+    3691:	e8 99 08 00 00       	call   3f2f <link>
+    3696:	83 c4 10             	add    $0x10,%esp
+    3699:	83 f8 ff             	cmp    $0xffffffff,%eax
+    369c:	74 1b                	je     36b9 <validatetest+0xb2>
+      printf(stdout, "link should not succeed\n");
+    369e:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    36a3:	83 ec 08             	sub    $0x8,%esp
+    36a6:	68 ad 59 00 00       	push   $0x59ad
+    36ab:	50                   	push   %eax
+    36ac:	e8 9d 09 00 00       	call   404e <printf>
+    36b1:	83 c4 10             	add    $0x10,%esp
+      exit();
+    36b4:	e8 16 08 00 00       	call   3ecf <exit>
+  uint p;
+
+  printf(stdout, "validate test\n");
+  hi = 1100*1024;
+
+  for(p = 0; p <= (uint)hi; p += 4096){
+    36b9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+    36c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    36c3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+    36c6:	0f 86 6a ff ff ff    	jbe    3636 <validatetest+0x2f>
+      printf(stdout, "link should not succeed\n");
+      exit();
+    }
+  }
+
+  printf(stdout, "validate ok\n");
+    36cc:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    36d1:	83 ec 08             	sub    $0x8,%esp
+    36d4:	68 c6 59 00 00       	push   $0x59c6
+    36d9:	50                   	push   %eax
+    36da:	e8 6f 09 00 00       	call   404e <printf>
+    36df:	83 c4 10             	add    $0x10,%esp
+}
+    36e2:	90                   	nop
+    36e3:	c9                   	leave  
+    36e4:	c3                   	ret    
+
+000036e5 <bsstest>:
+
+// does unintialized data start out zero?
+char uninit[10000];
+void
+bsstest(void)
+{
+    36e5:	55                   	push   %ebp
+    36e6:	89 e5                	mov    %esp,%ebp
+    36e8:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  printf(stdout, "bss test\n");
+    36eb:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    36f0:	83 ec 08             	sub    $0x8,%esp
+    36f3:	68 d3 59 00 00       	push   $0x59d3
+    36f8:	50                   	push   %eax
+    36f9:	e8 50 09 00 00       	call   404e <printf>
+    36fe:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(uninit); i++){
+    3701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    3708:	eb 2e                	jmp    3738 <bsstest+0x53>
+    if(uninit[i] != '\0'){
+    370a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    370d:	05 80 63 00 00       	add    $0x6380,%eax
+    3712:	0f b6 00             	movzbl (%eax),%eax
+    3715:	84 c0                	test   %al,%al
+    3717:	74 1b                	je     3734 <bsstest+0x4f>
+      printf(stdout, "bss test failed\n");
+    3719:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    371e:	83 ec 08             	sub    $0x8,%esp
+    3721:	68 dd 59 00 00       	push   $0x59dd
+    3726:	50                   	push   %eax
+    3727:	e8 22 09 00 00       	call   404e <printf>
+    372c:	83 c4 10             	add    $0x10,%esp
+      exit();
+    372f:	e8 9b 07 00 00       	call   3ecf <exit>
+bsstest(void)
+{
+  int i;
+
+  printf(stdout, "bss test\n");
+  for(i = 0; i < sizeof(uninit); i++){
+    3734:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    3738:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    373b:	3d 0f 27 00 00       	cmp    $0x270f,%eax
+    3740:	76 c8                	jbe    370a <bsstest+0x25>
+    if(uninit[i] != '\0'){
+      printf(stdout, "bss test failed\n");
+      exit();
+    }
+  }
+  printf(stdout, "bss test ok\n");
+    3742:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3747:	83 ec 08             	sub    $0x8,%esp
+    374a:	68 ee 59 00 00       	push   $0x59ee
+    374f:	50                   	push   %eax
+    3750:	e8 f9 08 00 00       	call   404e <printf>
+    3755:	83 c4 10             	add    $0x10,%esp
+}
+    3758:	90                   	nop
+    3759:	c9                   	leave  
+    375a:	c3                   	ret    
+
+0000375b <bigargtest>:
+// does exec return an error if the arguments
+// are larger than a page? or does it write
+// below the stack and wreck the instructions/data?
+void
+bigargtest(void)
+{
+    375b:	55                   	push   %ebp
+    375c:	89 e5                	mov    %esp,%ebp
+    375e:	83 ec 18             	sub    $0x18,%esp
+  int pid, fd;
+
+  unlink("bigarg-ok");
+    3761:	83 ec 0c             	sub    $0xc,%esp
+    3764:	68 fb 59 00 00       	push   $0x59fb
+    3769:	e8 b1 07 00 00       	call   3f1f <unlink>
+    376e:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    3771:	e8 51 07 00 00       	call   3ec7 <fork>
+    3776:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  if(pid == 0){
+    3779:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    377d:	0f 85 97 00 00 00    	jne    381a <bigargtest+0xbf>
+    static char *args[MAXARG];
+    int i;
+    for(i = 0; i < MAXARG-1; i++)
+    3783:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    378a:	eb 12                	jmp    379e <bigargtest+0x43>
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    378c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    378f:	c7 04 85 e0 62 00 00 	movl   $0x5a08,0x62e0(,%eax,4)
+    3796:	08 5a 00 00 
+  unlink("bigarg-ok");
+  pid = fork();
+  if(pid == 0){
+    static char *args[MAXARG];
+    int i;
+    for(i = 0; i < MAXARG-1; i++)
+    379a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    379e:	83 7d f4 1e          	cmpl   $0x1e,-0xc(%ebp)
+    37a2:	7e e8                	jle    378c <bigargtest+0x31>
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    args[MAXARG-1] = 0;
+    37a4:	c7 05 5c 63 00 00 00 	movl   $0x0,0x635c
+    37ab:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    37ae:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    37b3:	83 ec 08             	sub    $0x8,%esp
+    37b6:	68 e5 5a 00 00       	push   $0x5ae5
+    37bb:	50                   	push   %eax
+    37bc:	e8 8d 08 00 00       	call   404e <printf>
+    37c1:	83 c4 10             	add    $0x10,%esp
+    exec("echo", args);
+    37c4:	83 ec 08             	sub    $0x8,%esp
+    37c7:	68 e0 62 00 00       	push   $0x62e0
+    37cc:	68 04 44 00 00       	push   $0x4404
+    37d1:	e8 31 07 00 00       	call   3f07 <exec>
+    37d6:	83 c4 10             	add    $0x10,%esp
+    printf(stdout, "bigarg test ok\n");
+    37d9:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    37de:	83 ec 08             	sub    $0x8,%esp
+    37e1:	68 f2 5a 00 00       	push   $0x5af2
+    37e6:	50                   	push   %eax
+    37e7:	e8 62 08 00 00       	call   404e <printf>
+    37ec:	83 c4 10             	add    $0x10,%esp
+    fd = open("bigarg-ok", O_CREATE);
+    37ef:	83 ec 08             	sub    $0x8,%esp
+    37f2:	68 00 02 00 00       	push   $0x200
+    37f7:	68 fb 59 00 00       	push   $0x59fb
+    37fc:	e8 0e 07 00 00       	call   3f0f <open>
+    3801:	83 c4 10             	add    $0x10,%esp
+    3804:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    close(fd);
+    3807:	83 ec 0c             	sub    $0xc,%esp
+    380a:	ff 75 ec             	pushl  -0x14(%ebp)
+    380d:	e8 e5 06 00 00       	call   3ef7 <close>
+    3812:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3815:	e8 b5 06 00 00       	call   3ecf <exit>
+  } else if(pid < 0){
+    381a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    381e:	79 1b                	jns    383b <bigargtest+0xe0>
+    printf(stdout, "bigargtest: fork failed\n");
+    3820:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3825:	83 ec 08             	sub    $0x8,%esp
+    3828:	68 02 5b 00 00       	push   $0x5b02
+    382d:	50                   	push   %eax
+    382e:	e8 1b 08 00 00       	call   404e <printf>
+    3833:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3836:	e8 94 06 00 00       	call   3ecf <exit>
+  }
+  wait();
+    383b:	e8 97 06 00 00       	call   3ed7 <wait>
+  fd = open("bigarg-ok", 0);
+    3840:	83 ec 08             	sub    $0x8,%esp
+    3843:	6a 00                	push   $0x0
+    3845:	68 fb 59 00 00       	push   $0x59fb
+    384a:	e8 c0 06 00 00       	call   3f0f <open>
+    384f:	83 c4 10             	add    $0x10,%esp
+    3852:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if(fd < 0){
+    3855:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    3859:	79 1b                	jns    3876 <bigargtest+0x11b>
+    printf(stdout, "bigarg test failed!\n");
+    385b:	a1 c0 62 00 00       	mov    0x62c0,%eax
+    3860:	83 ec 08             	sub    $0x8,%esp
+    3863:	68 1b 5b 00 00       	push   $0x5b1b
+    3868:	50                   	push   %eax
+    3869:	e8 e0 07 00 00       	call   404e <printf>
+    386e:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3871:	e8 59 06 00 00       	call   3ecf <exit>
+  }
+  close(fd);
+    3876:	83 ec 0c             	sub    $0xc,%esp
+    3879:	ff 75 ec             	pushl  -0x14(%ebp)
+    387c:	e8 76 06 00 00       	call   3ef7 <close>
+    3881:	83 c4 10             	add    $0x10,%esp
+  unlink("bigarg-ok");
+    3884:	83 ec 0c             	sub    $0xc,%esp
+    3887:	68 fb 59 00 00       	push   $0x59fb
+    388c:	e8 8e 06 00 00       	call   3f1f <unlink>
+    3891:	83 c4 10             	add    $0x10,%esp
+}
+    3894:	90                   	nop
+    3895:	c9                   	leave  
+    3896:	c3                   	ret    
+
+00003897 <fsfull>:
+
+// what happens when the file system runs out of blocks?
+// answer: balloc panics, so this test is not useful.
+void
+fsfull()
+{
+    3897:	55                   	push   %ebp
+    3898:	89 e5                	mov    %esp,%ebp
+    389a:	53                   	push   %ebx
+    389b:	83 ec 64             	sub    $0x64,%esp
+  int nfiles;
+  int fsblocks = 0;
+    389e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+
+  printf(1, "fsfull test\n");
+    38a5:	83 ec 08             	sub    $0x8,%esp
+    38a8:	68 30 5b 00 00       	push   $0x5b30
+    38ad:	6a 01                	push   $0x1
+    38af:	e8 9a 07 00 00       	call   404e <printf>
+    38b4:	83 c4 10             	add    $0x10,%esp
+
+  for(nfiles = 0; ; nfiles++){
+    38b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    char name[64];
+    name[0] = 'f';
+    38be:	c6 45 a4 66          	movb   $0x66,-0x5c(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    38c2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    38c5:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+    38ca:	89 c8                	mov    %ecx,%eax
+    38cc:	f7 ea                	imul   %edx
+    38ce:	c1 fa 06             	sar    $0x6,%edx
+    38d1:	89 c8                	mov    %ecx,%eax
+    38d3:	c1 f8 1f             	sar    $0x1f,%eax
+    38d6:	29 c2                	sub    %eax,%edx
+    38d8:	89 d0                	mov    %edx,%eax
+    38da:	83 c0 30             	add    $0x30,%eax
+    38dd:	88 45 a5             	mov    %al,-0x5b(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    38e0:	8b 5d f4             	mov    -0xc(%ebp),%ebx
+    38e3:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+    38e8:	89 d8                	mov    %ebx,%eax
+    38ea:	f7 ea                	imul   %edx
+    38ec:	c1 fa 06             	sar    $0x6,%edx
+    38ef:	89 d8                	mov    %ebx,%eax
+    38f1:	c1 f8 1f             	sar    $0x1f,%eax
+    38f4:	89 d1                	mov    %edx,%ecx
+    38f6:	29 c1                	sub    %eax,%ecx
+    38f8:	69 c1 e8 03 00 00    	imul   $0x3e8,%ecx,%eax
+    38fe:	29 c3                	sub    %eax,%ebx
+    3900:	89 d9                	mov    %ebx,%ecx
+    3902:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
+    3907:	89 c8                	mov    %ecx,%eax
+    3909:	f7 ea                	imul   %edx
+    390b:	c1 fa 05             	sar    $0x5,%edx
+    390e:	89 c8                	mov    %ecx,%eax
+    3910:	c1 f8 1f             	sar    $0x1f,%eax
+    3913:	29 c2                	sub    %eax,%edx
+    3915:	89 d0                	mov    %edx,%eax
+    3917:	83 c0 30             	add    $0x30,%eax
+    391a:	88 45 a6             	mov    %al,-0x5a(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    391d:	8b 5d f4             	mov    -0xc(%ebp),%ebx
+    3920:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
+    3925:	89 d8                	mov    %ebx,%eax
+    3927:	f7 ea                	imul   %edx
+    3929:	c1 fa 05             	sar    $0x5,%edx
+    392c:	89 d8                	mov    %ebx,%eax
+    392e:	c1 f8 1f             	sar    $0x1f,%eax
+    3931:	89 d1                	mov    %edx,%ecx
+    3933:	29 c1                	sub    %eax,%ecx
+    3935:	6b c1 64             	imul   $0x64,%ecx,%eax
+    3938:	29 c3                	sub    %eax,%ebx
+    393a:	89 d9                	mov    %ebx,%ecx
+    393c:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    3941:	89 c8                	mov    %ecx,%eax
+    3943:	f7 ea                	imul   %edx
+    3945:	c1 fa 02             	sar    $0x2,%edx
+    3948:	89 c8                	mov    %ecx,%eax
+    394a:	c1 f8 1f             	sar    $0x1f,%eax
+    394d:	29 c2                	sub    %eax,%edx
+    394f:	89 d0                	mov    %edx,%eax
+    3951:	83 c0 30             	add    $0x30,%eax
+    3954:	88 45 a7             	mov    %al,-0x59(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    3957:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    395a:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    395f:	89 c8                	mov    %ecx,%eax
+    3961:	f7 ea                	imul   %edx
+    3963:	c1 fa 02             	sar    $0x2,%edx
+    3966:	89 c8                	mov    %ecx,%eax
+    3968:	c1 f8 1f             	sar    $0x1f,%eax
+    396b:	29 c2                	sub    %eax,%edx
+    396d:	89 d0                	mov    %edx,%eax
+    396f:	c1 e0 02             	shl    $0x2,%eax
+    3972:	01 d0                	add    %edx,%eax
+    3974:	01 c0                	add    %eax,%eax
+    3976:	29 c1                	sub    %eax,%ecx
+    3978:	89 ca                	mov    %ecx,%edx
+    397a:	89 d0                	mov    %edx,%eax
+    397c:	83 c0 30             	add    $0x30,%eax
+    397f:	88 45 a8             	mov    %al,-0x58(%ebp)
+    name[5] = '\0';
+    3982:	c6 45 a9 00          	movb   $0x0,-0x57(%ebp)
+    printf(1, "writing %s\n", name);
+    3986:	83 ec 04             	sub    $0x4,%esp
+    3989:	8d 45 a4             	lea    -0x5c(%ebp),%eax
+    398c:	50                   	push   %eax
+    398d:	68 3d 5b 00 00       	push   $0x5b3d
+    3992:	6a 01                	push   $0x1
+    3994:	e8 b5 06 00 00       	call   404e <printf>
+    3999:	83 c4 10             	add    $0x10,%esp
+    int fd = open(name, O_CREATE|O_RDWR);
+    399c:	83 ec 08             	sub    $0x8,%esp
+    399f:	68 02 02 00 00       	push   $0x202
+    39a4:	8d 45 a4             	lea    -0x5c(%ebp),%eax
+    39a7:	50                   	push   %eax
+    39a8:	e8 62 05 00 00       	call   3f0f <open>
+    39ad:	83 c4 10             	add    $0x10,%esp
+    39b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    if(fd < 0){
+    39b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+    39b7:	79 18                	jns    39d1 <fsfull+0x13a>
+      printf(1, "open %s failed\n", name);
+    39b9:	83 ec 04             	sub    $0x4,%esp
+    39bc:	8d 45 a4             	lea    -0x5c(%ebp),%eax
+    39bf:	50                   	push   %eax
+    39c0:	68 49 5b 00 00       	push   $0x5b49
+    39c5:	6a 01                	push   $0x1
+    39c7:	e8 82 06 00 00       	call   404e <printf>
+    39cc:	83 c4 10             	add    $0x10,%esp
+      break;
+    39cf:	eb 6b                	jmp    3a3c <fsfull+0x1a5>
+    }
+    int total = 0;
+    39d1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+    while(1){
+      int cc = write(fd, buf, 512);
+    39d8:	83 ec 04             	sub    $0x4,%esp
+    39db:	68 00 02 00 00       	push   $0x200
+    39e0:	68 a0 8a 00 00       	push   $0x8aa0
+    39e5:	ff 75 e8             	pushl  -0x18(%ebp)
+    39e8:	e8 02 05 00 00       	call   3eef <write>
+    39ed:	83 c4 10             	add    $0x10,%esp
+    39f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+      if(cc < 512)
+    39f3:	81 7d e4 ff 01 00 00 	cmpl   $0x1ff,-0x1c(%ebp)
+    39fa:	7e 0c                	jle    3a08 <fsfull+0x171>
+        break;
+      total += cc;
+    39fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    39ff:	01 45 ec             	add    %eax,-0x14(%ebp)
+      fsblocks++;
+    3a02:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    }
+    3a06:	eb d0                	jmp    39d8 <fsfull+0x141>
+    }
+    int total = 0;
+    while(1){
+      int cc = write(fd, buf, 512);
+      if(cc < 512)
+        break;
+    3a08:	90                   	nop
+      total += cc;
+      fsblocks++;
+    }
+    printf(1, "wrote %d bytes\n", total);
+    3a09:	83 ec 04             	sub    $0x4,%esp
+    3a0c:	ff 75 ec             	pushl  -0x14(%ebp)
+    3a0f:	68 59 5b 00 00       	push   $0x5b59
+    3a14:	6a 01                	push   $0x1
+    3a16:	e8 33 06 00 00       	call   404e <printf>
+    3a1b:	83 c4 10             	add    $0x10,%esp
+    close(fd);
+    3a1e:	83 ec 0c             	sub    $0xc,%esp
+    3a21:	ff 75 e8             	pushl  -0x18(%ebp)
+    3a24:	e8 ce 04 00 00       	call   3ef7 <close>
+    3a29:	83 c4 10             	add    $0x10,%esp
+    if(total == 0)
+    3a2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    3a30:	74 09                	je     3a3b <fsfull+0x1a4>
+  int nfiles;
+  int fsblocks = 0;
+
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    3a32:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+    }
+    printf(1, "wrote %d bytes\n", total);
+    close(fd);
+    if(total == 0)
+      break;
+  }
+    3a36:	e9 83 fe ff ff       	jmp    38be <fsfull+0x27>
+      fsblocks++;
+    }
+    printf(1, "wrote %d bytes\n", total);
+    close(fd);
+    if(total == 0)
+      break;
+    3a3b:	90                   	nop
+  }
+
+  while(nfiles >= 0){
+    3a3c:	e9 db 00 00 00       	jmp    3b1c <fsfull+0x285>
+    char name[64];
+    name[0] = 'f';
+    3a41:	c6 45 a4 66          	movb   $0x66,-0x5c(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3a45:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    3a48:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+    3a4d:	89 c8                	mov    %ecx,%eax
+    3a4f:	f7 ea                	imul   %edx
+    3a51:	c1 fa 06             	sar    $0x6,%edx
+    3a54:	89 c8                	mov    %ecx,%eax
+    3a56:	c1 f8 1f             	sar    $0x1f,%eax
+    3a59:	29 c2                	sub    %eax,%edx
+    3a5b:	89 d0                	mov    %edx,%eax
+    3a5d:	83 c0 30             	add    $0x30,%eax
+    3a60:	88 45 a5             	mov    %al,-0x5b(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3a63:	8b 5d f4             	mov    -0xc(%ebp),%ebx
+    3a66:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+    3a6b:	89 d8                	mov    %ebx,%eax
+    3a6d:	f7 ea                	imul   %edx
+    3a6f:	c1 fa 06             	sar    $0x6,%edx
+    3a72:	89 d8                	mov    %ebx,%eax
+    3a74:	c1 f8 1f             	sar    $0x1f,%eax
+    3a77:	89 d1                	mov    %edx,%ecx
+    3a79:	29 c1                	sub    %eax,%ecx
+    3a7b:	69 c1 e8 03 00 00    	imul   $0x3e8,%ecx,%eax
+    3a81:	29 c3                	sub    %eax,%ebx
+    3a83:	89 d9                	mov    %ebx,%ecx
+    3a85:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
+    3a8a:	89 c8                	mov    %ecx,%eax
+    3a8c:	f7 ea                	imul   %edx
+    3a8e:	c1 fa 05             	sar    $0x5,%edx
+    3a91:	89 c8                	mov    %ecx,%eax
+    3a93:	c1 f8 1f             	sar    $0x1f,%eax
+    3a96:	29 c2                	sub    %eax,%edx
+    3a98:	89 d0                	mov    %edx,%eax
+    3a9a:	83 c0 30             	add    $0x30,%eax
+    3a9d:	88 45 a6             	mov    %al,-0x5a(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3aa0:	8b 5d f4             	mov    -0xc(%ebp),%ebx
+    3aa3:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
+    3aa8:	89 d8                	mov    %ebx,%eax
+    3aaa:	f7 ea                	imul   %edx
+    3aac:	c1 fa 05             	sar    $0x5,%edx
+    3aaf:	89 d8                	mov    %ebx,%eax
+    3ab1:	c1 f8 1f             	sar    $0x1f,%eax
+    3ab4:	89 d1                	mov    %edx,%ecx
+    3ab6:	29 c1                	sub    %eax,%ecx
+    3ab8:	6b c1 64             	imul   $0x64,%ecx,%eax
+    3abb:	29 c3                	sub    %eax,%ebx
+    3abd:	89 d9                	mov    %ebx,%ecx
+    3abf:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    3ac4:	89 c8                	mov    %ecx,%eax
+    3ac6:	f7 ea                	imul   %edx
+    3ac8:	c1 fa 02             	sar    $0x2,%edx
+    3acb:	89 c8                	mov    %ecx,%eax
+    3acd:	c1 f8 1f             	sar    $0x1f,%eax
+    3ad0:	29 c2                	sub    %eax,%edx
+    3ad2:	89 d0                	mov    %edx,%eax
+    3ad4:	83 c0 30             	add    $0x30,%eax
+    3ad7:	88 45 a7             	mov    %al,-0x59(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    3ada:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    3add:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    3ae2:	89 c8                	mov    %ecx,%eax
+    3ae4:	f7 ea                	imul   %edx
+    3ae6:	c1 fa 02             	sar    $0x2,%edx
+    3ae9:	89 c8                	mov    %ecx,%eax
+    3aeb:	c1 f8 1f             	sar    $0x1f,%eax
+    3aee:	29 c2                	sub    %eax,%edx
+    3af0:	89 d0                	mov    %edx,%eax
+    3af2:	c1 e0 02             	shl    $0x2,%eax
+    3af5:	01 d0                	add    %edx,%eax
+    3af7:	01 c0                	add    %eax,%eax
+    3af9:	29 c1                	sub    %eax,%ecx
+    3afb:	89 ca                	mov    %ecx,%edx
+    3afd:	89 d0                	mov    %edx,%eax
+    3aff:	83 c0 30             	add    $0x30,%eax
+    3b02:	88 45 a8             	mov    %al,-0x58(%ebp)
+    name[5] = '\0';
+    3b05:	c6 45 a9 00          	movb   $0x0,-0x57(%ebp)
+    unlink(name);
+    3b09:	83 ec 0c             	sub    $0xc,%esp
+    3b0c:	8d 45 a4             	lea    -0x5c(%ebp),%eax
+    3b0f:	50                   	push   %eax
+    3b10:	e8 0a 04 00 00       	call   3f1f <unlink>
+    3b15:	83 c4 10             	add    $0x10,%esp
+    nfiles--;
+    3b18:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+    close(fd);
+    if(total == 0)
+      break;
+  }
+
+  while(nfiles >= 0){
+    3b1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    3b20:	0f 89 1b ff ff ff    	jns    3a41 <fsfull+0x1aa>
+    name[5] = '\0';
+    unlink(name);
+    nfiles--;
+  }
+
+  printf(1, "fsfull test finished\n");
+    3b26:	83 ec 08             	sub    $0x8,%esp
+    3b29:	68 69 5b 00 00       	push   $0x5b69
+    3b2e:	6a 01                	push   $0x1
+    3b30:	e8 19 05 00 00       	call   404e <printf>
+    3b35:	83 c4 10             	add    $0x10,%esp
+}
+    3b38:	90                   	nop
+    3b39:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    3b3c:	c9                   	leave  
+    3b3d:	c3                   	ret    
+
+00003b3e <rand>:
+
+unsigned long randstate = 1;
+unsigned int
+rand()
+{
+    3b3e:	55                   	push   %ebp
+    3b3f:	89 e5                	mov    %esp,%ebp
+  randstate = randstate * 1664525 + 1013904223;
+    3b41:	a1 c4 62 00 00       	mov    0x62c4,%eax
+    3b46:	69 c0 0d 66 19 00    	imul   $0x19660d,%eax,%eax
+    3b4c:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3b51:	a3 c4 62 00 00       	mov    %eax,0x62c4
+  return randstate;
+    3b56:	a1 c4 62 00 00       	mov    0x62c4,%eax
+}
+    3b5b:	5d                   	pop    %ebp
+    3b5c:	c3                   	ret    
+
+00003b5d <main>:
+
+int
+main(int argc, char *argv[])
+{
+    3b5d:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+    3b61:	83 e4 f0             	and    $0xfffffff0,%esp
+    3b64:	ff 71 fc             	pushl  -0x4(%ecx)
+    3b67:	55                   	push   %ebp
+    3b68:	89 e5                	mov    %esp,%ebp
+    3b6a:	51                   	push   %ecx
+    3b6b:	83 ec 04             	sub    $0x4,%esp
+  printf(1, "usertests starting\n");
+    3b6e:	83 ec 08             	sub    $0x8,%esp
+    3b71:	68 7f 5b 00 00       	push   $0x5b7f
+    3b76:	6a 01                	push   $0x1
+    3b78:	e8 d1 04 00 00       	call   404e <printf>
+    3b7d:	83 c4 10             	add    $0x10,%esp
+
+  if(open("usertests.ran", 0) >= 0){
+    3b80:	83 ec 08             	sub    $0x8,%esp
+    3b83:	6a 00                	push   $0x0
+    3b85:	68 93 5b 00 00       	push   $0x5b93
+    3b8a:	e8 80 03 00 00       	call   3f0f <open>
+    3b8f:	83 c4 10             	add    $0x10,%esp
+    3b92:	85 c0                	test   %eax,%eax
+    3b94:	78 17                	js     3bad <main+0x50>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+    3b96:	83 ec 08             	sub    $0x8,%esp
+    3b99:	68 a4 5b 00 00       	push   $0x5ba4
+    3b9e:	6a 01                	push   $0x1
+    3ba0:	e8 a9 04 00 00       	call   404e <printf>
+    3ba5:	83 c4 10             	add    $0x10,%esp
+    exit();
+    3ba8:	e8 22 03 00 00       	call   3ecf <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+    3bad:	83 ec 08             	sub    $0x8,%esp
+    3bb0:	68 00 02 00 00       	push   $0x200
+    3bb5:	68 93 5b 00 00       	push   $0x5b93
+    3bba:	e8 50 03 00 00       	call   3f0f <open>
+    3bbf:	83 c4 10             	add    $0x10,%esp
+    3bc2:	83 ec 0c             	sub    $0xc,%esp
+    3bc5:	50                   	push   %eax
+    3bc6:	e8 2c 03 00 00       	call   3ef7 <close>
+    3bcb:	83 c4 10             	add    $0x10,%esp
+
+  createdelete();
+    3bce:	e8 d7 d6 ff ff       	call   12aa <createdelete>
+  linkunlink();
+    3bd3:	e8 f8 e0 ff ff       	call   1cd0 <linkunlink>
+  concreate();
+    3bd8:	e8 43 dd ff ff       	call   1920 <concreate>
+  fourfiles();
+    3bdd:	e8 77 d4 ff ff       	call   1059 <fourfiles>
+  sharedfd();
+    3be2:	e8 8f d2 ff ff       	call   e76 <sharedfd>
+
+  bigargtest();
+    3be7:	e8 6f fb ff ff       	call   375b <bigargtest>
+  bigwrite();
+    3bec:	e8 d1 ea ff ff       	call   26c2 <bigwrite>
+  bigargtest();
+    3bf1:	e8 65 fb ff ff       	call   375b <bigargtest>
+  bsstest();
+    3bf6:	e8 ea fa ff ff       	call   36e5 <bsstest>
+  sbrktest();
+    3bfb:	e8 f5 f4 ff ff       	call   30f5 <sbrktest>
+  validatetest();
+    3c00:	e8 02 fa ff ff       	call   3607 <validatetest>
+
+  opentest();
+    3c05:	e8 f5 c6 ff ff       	call   2ff <opentest>
+  writetest();
+    3c0a:	e8 9f c7 ff ff       	call   3ae <writetest>
+  writetest1();
+    3c0f:	e8 aa c9 ff ff       	call   5be <writetest1>
+  createtest();
+    3c14:	e8 a1 cb ff ff       	call   7ba <createtest>
+
+  openiputtest();
+    3c19:	e8 d2 c5 ff ff       	call   1f0 <openiputtest>
+  exitiputtest();
+    3c1e:	e8 ce c4 ff ff       	call   f1 <exitiputtest>
+  iputtest();
+    3c23:	e8 d8 c3 ff ff       	call   0 <iputtest>
+
+  mem();
+    3c28:	e8 58 d1 ff ff       	call   d85 <mem>
+  pipe1();
+    3c2d:	e8 8f cd ff ff       	call   9c1 <pipe1>
+  preempt();
+    3c32:	e8 73 cf ff ff       	call   baa <preempt>
+  exitwait();
+    3c37:	e8 d1 d0 ff ff       	call   d0d <exitwait>
+
+  rmdot();
+    3c3c:	e8 f3 ee ff ff       	call   2b34 <rmdot>
+  fourteen();
+    3c41:	e8 92 ed ff ff       	call   29d8 <fourteen>
+  bigfile();
+    3c46:	e8 75 eb ff ff       	call   27c0 <bigfile>
+  subdir();
+    3c4b:	e8 2e e3 ff ff       	call   1f7e <subdir>
+  linktest();
+    3c50:	e8 89 da ff ff       	call   16de <linktest>
+  unlinkread();
+    3c55:	e8 c2 d8 ff ff       	call   151c <unlinkread>
+  dirfile();
+    3c5a:	e8 5a f0 ff ff       	call   2cb9 <dirfile>
+  iref();
+    3c5f:	e8 8d f2 ff ff       	call   2ef1 <iref>
+  forktest();
+    3c64:	e8 c2 f3 ff ff       	call   302b <forktest>
+  bigdir(); // slow
+    3c69:	e8 9b e1 ff ff       	call   1e09 <bigdir>
+  exectest();
+    3c6e:	e8 fb cc ff ff       	call   96e <exectest>
+
+  exit();
+    3c73:	e8 57 02 00 00       	call   3ecf <exit>
+
+00003c78 <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+    3c78:	55                   	push   %ebp
+    3c79:	89 e5                	mov    %esp,%ebp
+    3c7b:	57                   	push   %edi
+    3c7c:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+    3c7d:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    3c80:	8b 55 10             	mov    0x10(%ebp),%edx
+    3c83:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3c86:	89 cb                	mov    %ecx,%ebx
+    3c88:	89 df                	mov    %ebx,%edi
+    3c8a:	89 d1                	mov    %edx,%ecx
+    3c8c:	fc                   	cld    
+    3c8d:	f3 aa                	rep stos %al,%es:(%edi)
+    3c8f:	89 ca                	mov    %ecx,%edx
+    3c91:	89 fb                	mov    %edi,%ebx
+    3c93:	89 5d 08             	mov    %ebx,0x8(%ebp)
+    3c96:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+    3c99:	90                   	nop
+    3c9a:	5b                   	pop    %ebx
+    3c9b:	5f                   	pop    %edi
+    3c9c:	5d                   	pop    %ebp
+    3c9d:	c3                   	ret    
+
+00003c9e <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+    3c9e:	55                   	push   %ebp
+    3c9f:	89 e5                	mov    %esp,%ebp
+    3ca1:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+    3ca4:	8b 45 08             	mov    0x8(%ebp),%eax
+    3ca7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+    3caa:	90                   	nop
+    3cab:	8b 45 08             	mov    0x8(%ebp),%eax
+    3cae:	8d 50 01             	lea    0x1(%eax),%edx
+    3cb1:	89 55 08             	mov    %edx,0x8(%ebp)
+    3cb4:	8b 55 0c             	mov    0xc(%ebp),%edx
+    3cb7:	8d 4a 01             	lea    0x1(%edx),%ecx
+    3cba:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+    3cbd:	0f b6 12             	movzbl (%edx),%edx
+    3cc0:	88 10                	mov    %dl,(%eax)
+    3cc2:	0f b6 00             	movzbl (%eax),%eax
+    3cc5:	84 c0                	test   %al,%al
+    3cc7:	75 e2                	jne    3cab <strcpy+0xd>
+    ;
+  return os;
+    3cc9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+    3ccc:	c9                   	leave  
+    3ccd:	c3                   	ret    
+
+00003cce <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3cce:	55                   	push   %ebp
+    3ccf:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+    3cd1:	eb 08                	jmp    3cdb <strcmp+0xd>
+    p++, q++;
+    3cd3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+    3cd7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+    3cdb:	8b 45 08             	mov    0x8(%ebp),%eax
+    3cde:	0f b6 00             	movzbl (%eax),%eax
+    3ce1:	84 c0                	test   %al,%al
+    3ce3:	74 10                	je     3cf5 <strcmp+0x27>
+    3ce5:	8b 45 08             	mov    0x8(%ebp),%eax
+    3ce8:	0f b6 10             	movzbl (%eax),%edx
+    3ceb:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3cee:	0f b6 00             	movzbl (%eax),%eax
+    3cf1:	38 c2                	cmp    %al,%dl
+    3cf3:	74 de                	je     3cd3 <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+    3cf5:	8b 45 08             	mov    0x8(%ebp),%eax
+    3cf8:	0f b6 00             	movzbl (%eax),%eax
+    3cfb:	0f b6 d0             	movzbl %al,%edx
+    3cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3d01:	0f b6 00             	movzbl (%eax),%eax
+    3d04:	0f b6 c0             	movzbl %al,%eax
+    3d07:	29 c2                	sub    %eax,%edx
+    3d09:	89 d0                	mov    %edx,%eax
+}
+    3d0b:	5d                   	pop    %ebp
+    3d0c:	c3                   	ret    
+
+00003d0d <strlen>:
+
+uint
+strlen(char *s)
+{
+    3d0d:	55                   	push   %ebp
+    3d0e:	89 e5                	mov    %esp,%ebp
+    3d10:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+    3d13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    3d1a:	eb 04                	jmp    3d20 <strlen+0x13>
+    3d1c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+    3d20:	8b 55 fc             	mov    -0x4(%ebp),%edx
+    3d23:	8b 45 08             	mov    0x8(%ebp),%eax
+    3d26:	01 d0                	add    %edx,%eax
+    3d28:	0f b6 00             	movzbl (%eax),%eax
+    3d2b:	84 c0                	test   %al,%al
+    3d2d:	75 ed                	jne    3d1c <strlen+0xf>
+    ;
+  return n;
+    3d2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+    3d32:	c9                   	leave  
+    3d33:	c3                   	ret    
+
+00003d34 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    3d34:	55                   	push   %ebp
+    3d35:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+    3d37:	8b 45 10             	mov    0x10(%ebp),%eax
+    3d3a:	50                   	push   %eax
+    3d3b:	ff 75 0c             	pushl  0xc(%ebp)
+    3d3e:	ff 75 08             	pushl  0x8(%ebp)
+    3d41:	e8 32 ff ff ff       	call   3c78 <stosb>
+    3d46:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+    3d49:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+    3d4c:	c9                   	leave  
+    3d4d:	c3                   	ret    
+
+00003d4e <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3d4e:	55                   	push   %ebp
+    3d4f:	89 e5                	mov    %esp,%ebp
+    3d51:	83 ec 04             	sub    $0x4,%esp
+    3d54:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3d57:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+    3d5a:	eb 14                	jmp    3d70 <strchr+0x22>
+    if(*s == c)
+    3d5c:	8b 45 08             	mov    0x8(%ebp),%eax
+    3d5f:	0f b6 00             	movzbl (%eax),%eax
+    3d62:	3a 45 fc             	cmp    -0x4(%ebp),%al
+    3d65:	75 05                	jne    3d6c <strchr+0x1e>
+      return (char*)s;
+    3d67:	8b 45 08             	mov    0x8(%ebp),%eax
+    3d6a:	eb 13                	jmp    3d7f <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+    3d6c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+    3d70:	8b 45 08             	mov    0x8(%ebp),%eax
+    3d73:	0f b6 00             	movzbl (%eax),%eax
+    3d76:	84 c0                	test   %al,%al
+    3d78:	75 e2                	jne    3d5c <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+    3d7a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+    3d7f:	c9                   	leave  
+    3d80:	c3                   	ret    
+
+00003d81 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3d81:	55                   	push   %ebp
+    3d82:	89 e5                	mov    %esp,%ebp
+    3d84:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3d87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    3d8e:	eb 42                	jmp    3dd2 <gets+0x51>
+    cc = read(0, &c, 1);
+    3d90:	83 ec 04             	sub    $0x4,%esp
+    3d93:	6a 01                	push   $0x1
+    3d95:	8d 45 ef             	lea    -0x11(%ebp),%eax
+    3d98:	50                   	push   %eax
+    3d99:	6a 00                	push   $0x0
+    3d9b:	e8 47 01 00 00       	call   3ee7 <read>
+    3da0:	83 c4 10             	add    $0x10,%esp
+    3da3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+    3da6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    3daa:	7e 33                	jle    3ddf <gets+0x5e>
+      break;
+    buf[i++] = c;
+    3dac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    3daf:	8d 50 01             	lea    0x1(%eax),%edx
+    3db2:	89 55 f4             	mov    %edx,-0xc(%ebp)
+    3db5:	89 c2                	mov    %eax,%edx
+    3db7:	8b 45 08             	mov    0x8(%ebp),%eax
+    3dba:	01 c2                	add    %eax,%edx
+    3dbc:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+    3dc0:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+    3dc2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+    3dc6:	3c 0a                	cmp    $0xa,%al
+    3dc8:	74 16                	je     3de0 <gets+0x5f>
+    3dca:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+    3dce:	3c 0d                	cmp    $0xd,%al
+    3dd0:	74 0e                	je     3de0 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    3dd5:	83 c0 01             	add    $0x1,%eax
+    3dd8:	3b 45 0c             	cmp    0xc(%ebp),%eax
+    3ddb:	7c b3                	jl     3d90 <gets+0xf>
+    3ddd:	eb 01                	jmp    3de0 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    3ddf:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+    3de0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+    3de3:	8b 45 08             	mov    0x8(%ebp),%eax
+    3de6:	01 d0                	add    %edx,%eax
+    3de8:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+    3deb:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+    3dee:	c9                   	leave  
+    3def:	c3                   	ret    
+
+00003df0 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+    3df0:	55                   	push   %ebp
+    3df1:	89 e5                	mov    %esp,%ebp
+    3df3:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    3df6:	83 ec 08             	sub    $0x8,%esp
+    3df9:	6a 00                	push   $0x0
+    3dfb:	ff 75 08             	pushl  0x8(%ebp)
+    3dfe:	e8 0c 01 00 00       	call   3f0f <open>
+    3e03:	83 c4 10             	add    $0x10,%esp
+    3e06:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+    3e09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    3e0d:	79 07                	jns    3e16 <stat+0x26>
+    return -1;
+    3e0f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    3e14:	eb 25                	jmp    3e3b <stat+0x4b>
+  r = fstat(fd, st);
+    3e16:	83 ec 08             	sub    $0x8,%esp
+    3e19:	ff 75 0c             	pushl  0xc(%ebp)
+    3e1c:	ff 75 f4             	pushl  -0xc(%ebp)
+    3e1f:	e8 03 01 00 00       	call   3f27 <fstat>
+    3e24:	83 c4 10             	add    $0x10,%esp
+    3e27:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+    3e2a:	83 ec 0c             	sub    $0xc,%esp
+    3e2d:	ff 75 f4             	pushl  -0xc(%ebp)
+    3e30:	e8 c2 00 00 00       	call   3ef7 <close>
+    3e35:	83 c4 10             	add    $0x10,%esp
+  return r;
+    3e38:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+    3e3b:	c9                   	leave  
+    3e3c:	c3                   	ret    
+
+00003e3d <atoi>:
+
+int
+atoi(const char *s)
+{
+    3e3d:	55                   	push   %ebp
+    3e3e:	89 e5                	mov    %esp,%ebp
+    3e40:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+    3e43:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+    3e4a:	eb 25                	jmp    3e71 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+    3e4c:	8b 55 fc             	mov    -0x4(%ebp),%edx
+    3e4f:	89 d0                	mov    %edx,%eax
+    3e51:	c1 e0 02             	shl    $0x2,%eax
+    3e54:	01 d0                	add    %edx,%eax
+    3e56:	01 c0                	add    %eax,%eax
+    3e58:	89 c1                	mov    %eax,%ecx
+    3e5a:	8b 45 08             	mov    0x8(%ebp),%eax
+    3e5d:	8d 50 01             	lea    0x1(%eax),%edx
+    3e60:	89 55 08             	mov    %edx,0x8(%ebp)
+    3e63:	0f b6 00             	movzbl (%eax),%eax
+    3e66:	0f be c0             	movsbl %al,%eax
+    3e69:	01 c8                	add    %ecx,%eax
+    3e6b:	83 e8 30             	sub    $0x30,%eax
+    3e6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    3e71:	8b 45 08             	mov    0x8(%ebp),%eax
+    3e74:	0f b6 00             	movzbl (%eax),%eax
+    3e77:	3c 2f                	cmp    $0x2f,%al
+    3e79:	7e 0a                	jle    3e85 <atoi+0x48>
+    3e7b:	8b 45 08             	mov    0x8(%ebp),%eax
+    3e7e:	0f b6 00             	movzbl (%eax),%eax
+    3e81:	3c 39                	cmp    $0x39,%al
+    3e83:	7e c7                	jle    3e4c <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+    3e85:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+    3e88:	c9                   	leave  
+    3e89:	c3                   	ret    
+
+00003e8a <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+    3e8a:	55                   	push   %ebp
+    3e8b:	89 e5                	mov    %esp,%ebp
+    3e8d:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+    3e90:	8b 45 08             	mov    0x8(%ebp),%eax
+    3e93:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+    3e96:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3e99:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+    3e9c:	eb 17                	jmp    3eb5 <memmove+0x2b>
+    *dst++ = *src++;
+    3e9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    3ea1:	8d 50 01             	lea    0x1(%eax),%edx
+    3ea4:	89 55 fc             	mov    %edx,-0x4(%ebp)
+    3ea7:	8b 55 f8             	mov    -0x8(%ebp),%edx
+    3eaa:	8d 4a 01             	lea    0x1(%edx),%ecx
+    3ead:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+    3eb0:	0f b6 12             	movzbl (%edx),%edx
+    3eb3:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    3eb5:	8b 45 10             	mov    0x10(%ebp),%eax
+    3eb8:	8d 50 ff             	lea    -0x1(%eax),%edx
+    3ebb:	89 55 10             	mov    %edx,0x10(%ebp)
+    3ebe:	85 c0                	test   %eax,%eax
+    3ec0:	7f dc                	jg     3e9e <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+    3ec2:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+    3ec5:	c9                   	leave  
+    3ec6:	c3                   	ret    
+
+00003ec7 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    3ec7:	b8 01 00 00 00       	mov    $0x1,%eax
+    3ecc:	cd 40                	int    $0x40
+    3ece:	c3                   	ret    
+
+00003ecf <exit>:
+SYSCALL(exit)
+    3ecf:	b8 02 00 00 00       	mov    $0x2,%eax
+    3ed4:	cd 40                	int    $0x40
+    3ed6:	c3                   	ret    
+
+00003ed7 <wait>:
+SYSCALL(wait)
+    3ed7:	b8 03 00 00 00       	mov    $0x3,%eax
+    3edc:	cd 40                	int    $0x40
+    3ede:	c3                   	ret    
+
+00003edf <pipe>:
+SYSCALL(pipe)
+    3edf:	b8 04 00 00 00       	mov    $0x4,%eax
+    3ee4:	cd 40                	int    $0x40
+    3ee6:	c3                   	ret    
+
+00003ee7 <read>:
+SYSCALL(read)
+    3ee7:	b8 05 00 00 00       	mov    $0x5,%eax
+    3eec:	cd 40                	int    $0x40
+    3eee:	c3                   	ret    
+
+00003eef <write>:
+SYSCALL(write)
+    3eef:	b8 10 00 00 00       	mov    $0x10,%eax
+    3ef4:	cd 40                	int    $0x40
+    3ef6:	c3                   	ret    
+
+00003ef7 <close>:
+SYSCALL(close)
+    3ef7:	b8 15 00 00 00       	mov    $0x15,%eax
+    3efc:	cd 40                	int    $0x40
+    3efe:	c3                   	ret    
+
+00003eff <kill>:
+SYSCALL(kill)
+    3eff:	b8 06 00 00 00       	mov    $0x6,%eax
+    3f04:	cd 40                	int    $0x40
+    3f06:	c3                   	ret    
+
+00003f07 <exec>:
+SYSCALL(exec)
+    3f07:	b8 07 00 00 00       	mov    $0x7,%eax
+    3f0c:	cd 40                	int    $0x40
+    3f0e:	c3                   	ret    
+
+00003f0f <open>:
+SYSCALL(open)
+    3f0f:	b8 0f 00 00 00       	mov    $0xf,%eax
+    3f14:	cd 40                	int    $0x40
+    3f16:	c3                   	ret    
+
+00003f17 <mknod>:
+SYSCALL(mknod)
+    3f17:	b8 11 00 00 00       	mov    $0x11,%eax
+    3f1c:	cd 40                	int    $0x40
+    3f1e:	c3                   	ret    
+
+00003f1f <unlink>:
+SYSCALL(unlink)
+    3f1f:	b8 12 00 00 00       	mov    $0x12,%eax
+    3f24:	cd 40                	int    $0x40
+    3f26:	c3                   	ret    
+
+00003f27 <fstat>:
+SYSCALL(fstat)
+    3f27:	b8 08 00 00 00       	mov    $0x8,%eax
+    3f2c:	cd 40                	int    $0x40
+    3f2e:	c3                   	ret    
+
+00003f2f <link>:
+SYSCALL(link)
+    3f2f:	b8 13 00 00 00       	mov    $0x13,%eax
+    3f34:	cd 40                	int    $0x40
+    3f36:	c3                   	ret    
+
+00003f37 <mkdir>:
+SYSCALL(mkdir)
+    3f37:	b8 14 00 00 00       	mov    $0x14,%eax
+    3f3c:	cd 40                	int    $0x40
+    3f3e:	c3                   	ret    
+
+00003f3f <chdir>:
+SYSCALL(chdir)
+    3f3f:	b8 09 00 00 00       	mov    $0x9,%eax
+    3f44:	cd 40                	int    $0x40
+    3f46:	c3                   	ret    
+
+00003f47 <dup>:
+SYSCALL(dup)
+    3f47:	b8 0a 00 00 00       	mov    $0xa,%eax
+    3f4c:	cd 40                	int    $0x40
+    3f4e:	c3                   	ret    
+
+00003f4f <getpid>:
+SYSCALL(getpid)
+    3f4f:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3f54:	cd 40                	int    $0x40
+    3f56:	c3                   	ret    
+
+00003f57 <sbrk>:
+SYSCALL(sbrk)
+    3f57:	b8 0c 00 00 00       	mov    $0xc,%eax
+    3f5c:	cd 40                	int    $0x40
+    3f5e:	c3                   	ret    
+
+00003f5f <sleep>:
+SYSCALL(sleep)
+    3f5f:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3f64:	cd 40                	int    $0x40
+    3f66:	c3                   	ret    
+
+00003f67 <uptime>:
+SYSCALL(uptime)
+    3f67:	b8 0e 00 00 00       	mov    $0xe,%eax
+    3f6c:	cd 40                	int    $0x40
+    3f6e:	c3                   	ret    
+
+00003f6f <procstat>:
+SYSCALL(procstat) 
+    3f6f:	b8 16 00 00 00       	mov    $0x16,%eax
+    3f74:	cd 40                	int    $0x40
+    3f76:	c3                   	ret    
+
+00003f77 <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+    3f77:	55                   	push   %ebp
+    3f78:	89 e5                	mov    %esp,%ebp
+    3f7a:	83 ec 18             	sub    $0x18,%esp
+    3f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3f80:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+    3f83:	83 ec 04             	sub    $0x4,%esp
+    3f86:	6a 01                	push   $0x1
+    3f88:	8d 45 f4             	lea    -0xc(%ebp),%eax
+    3f8b:	50                   	push   %eax
+    3f8c:	ff 75 08             	pushl  0x8(%ebp)
+    3f8f:	e8 5b ff ff ff       	call   3eef <write>
+    3f94:	83 c4 10             	add    $0x10,%esp
+}
+    3f97:	90                   	nop
+    3f98:	c9                   	leave  
+    3f99:	c3                   	ret    
+
+00003f9a <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3f9a:	55                   	push   %ebp
+    3f9b:	89 e5                	mov    %esp,%ebp
+    3f9d:	53                   	push   %ebx
+    3f9e:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+    3fa1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+    3fa8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+    3fac:	74 17                	je     3fc5 <printint+0x2b>
+    3fae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+    3fb2:	79 11                	jns    3fc5 <printint+0x2b>
+    neg = 1;
+    3fb4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+    3fbb:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3fbe:	f7 d8                	neg    %eax
+    3fc0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    3fc3:	eb 06                	jmp    3fcb <printint+0x31>
+  } else {
+    x = xx;
+    3fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
+    3fc8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+    3fcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+    3fd2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+    3fd5:	8d 41 01             	lea    0x1(%ecx),%eax
+    3fd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    3fdb:	8b 5d 10             	mov    0x10(%ebp),%ebx
+    3fde:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    3fe1:	ba 00 00 00 00       	mov    $0x0,%edx
+    3fe6:	f7 f3                	div    %ebx
+    3fe8:	89 d0                	mov    %edx,%eax
+    3fea:	0f b6 80 c8 62 00 00 	movzbl 0x62c8(%eax),%eax
+    3ff1:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+    3ff5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+    3ff8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+    3ffb:	ba 00 00 00 00       	mov    $0x0,%edx
+    4000:	f7 f3                	div    %ebx
+    4002:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    4005:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    4009:	75 c7                	jne    3fd2 <printint+0x38>
+  if(neg)
+    400b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    400f:	74 2d                	je     403e <printint+0xa4>
+    buf[i++] = '-';
+    4011:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    4014:	8d 50 01             	lea    0x1(%eax),%edx
+    4017:	89 55 f4             	mov    %edx,-0xc(%ebp)
+    401a:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+    401f:	eb 1d                	jmp    403e <printint+0xa4>
+    putc(fd, buf[i]);
+    4021:	8d 55 dc             	lea    -0x24(%ebp),%edx
+    4024:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    4027:	01 d0                	add    %edx,%eax
+    4029:	0f b6 00             	movzbl (%eax),%eax
+    402c:	0f be c0             	movsbl %al,%eax
+    402f:	83 ec 08             	sub    $0x8,%esp
+    4032:	50                   	push   %eax
+    4033:	ff 75 08             	pushl  0x8(%ebp)
+    4036:	e8 3c ff ff ff       	call   3f77 <putc>
+    403b:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+    403e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+    4042:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    4046:	79 d9                	jns    4021 <printint+0x87>
+    putc(fd, buf[i]);
+}
+    4048:	90                   	nop
+    4049:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    404c:	c9                   	leave  
+    404d:	c3                   	ret    
+
+0000404e <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+    404e:	55                   	push   %ebp
+    404f:	89 e5                	mov    %esp,%ebp
+    4051:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+    4054:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+    405b:	8d 45 0c             	lea    0xc(%ebp),%eax
+    405e:	83 c0 04             	add    $0x4,%eax
+    4061:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+    4064:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    406b:	e9 59 01 00 00       	jmp    41c9 <printf+0x17b>
+    c = fmt[i] & 0xff;
+    4070:	8b 55 0c             	mov    0xc(%ebp),%edx
+    4073:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    4076:	01 d0                	add    %edx,%eax
+    4078:	0f b6 00             	movzbl (%eax),%eax
+    407b:	0f be c0             	movsbl %al,%eax
+    407e:	25 ff 00 00 00       	and    $0xff,%eax
+    4083:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+    4086:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+    408a:	75 2c                	jne    40b8 <printf+0x6a>
+      if(c == '%'){
+    408c:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+    4090:	75 0c                	jne    409e <printf+0x50>
+        state = '%';
+    4092:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+    4099:	e9 27 01 00 00       	jmp    41c5 <printf+0x177>
+      } else {
+        putc(fd, c);
+    409e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    40a1:	0f be c0             	movsbl %al,%eax
+    40a4:	83 ec 08             	sub    $0x8,%esp
+    40a7:	50                   	push   %eax
+    40a8:	ff 75 08             	pushl  0x8(%ebp)
+    40ab:	e8 c7 fe ff ff       	call   3f77 <putc>
+    40b0:	83 c4 10             	add    $0x10,%esp
+    40b3:	e9 0d 01 00 00       	jmp    41c5 <printf+0x177>
+      }
+    } else if(state == '%'){
+    40b8:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+    40bc:	0f 85 03 01 00 00    	jne    41c5 <printf+0x177>
+      if(c == 'd'){
+    40c2:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+    40c6:	75 1e                	jne    40e6 <printf+0x98>
+        printint(fd, *ap, 10, 1);
+    40c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    40cb:	8b 00                	mov    (%eax),%eax
+    40cd:	6a 01                	push   $0x1
+    40cf:	6a 0a                	push   $0xa
+    40d1:	50                   	push   %eax
+    40d2:	ff 75 08             	pushl  0x8(%ebp)
+    40d5:	e8 c0 fe ff ff       	call   3f9a <printint>
+    40da:	83 c4 10             	add    $0x10,%esp
+        ap++;
+    40dd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+    40e1:	e9 d8 00 00 00       	jmp    41be <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+    40e6:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+    40ea:	74 06                	je     40f2 <printf+0xa4>
+    40ec:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+    40f0:	75 1e                	jne    4110 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+    40f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    40f5:	8b 00                	mov    (%eax),%eax
+    40f7:	6a 00                	push   $0x0
+    40f9:	6a 10                	push   $0x10
+    40fb:	50                   	push   %eax
+    40fc:	ff 75 08             	pushl  0x8(%ebp)
+    40ff:	e8 96 fe ff ff       	call   3f9a <printint>
+    4104:	83 c4 10             	add    $0x10,%esp
+        ap++;
+    4107:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+    410b:	e9 ae 00 00 00       	jmp    41be <printf+0x170>
+      } else if(c == 's'){
+    4110:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+    4114:	75 43                	jne    4159 <printf+0x10b>
+        s = (char*)*ap;
+    4116:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    4119:	8b 00                	mov    (%eax),%eax
+    411b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+    411e:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+    4122:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    4126:	75 25                	jne    414d <printf+0xff>
+          s = "(null)";
+    4128:	c7 45 f4 ce 5b 00 00 	movl   $0x5bce,-0xc(%ebp)
+        while(*s != 0){
+    412f:	eb 1c                	jmp    414d <printf+0xff>
+          putc(fd, *s);
+    4131:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    4134:	0f b6 00             	movzbl (%eax),%eax
+    4137:	0f be c0             	movsbl %al,%eax
+    413a:	83 ec 08             	sub    $0x8,%esp
+    413d:	50                   	push   %eax
+    413e:	ff 75 08             	pushl  0x8(%ebp)
+    4141:	e8 31 fe ff ff       	call   3f77 <putc>
+    4146:	83 c4 10             	add    $0x10,%esp
+          s++;
+    4149:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+    414d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    4150:	0f b6 00             	movzbl (%eax),%eax
+    4153:	84 c0                	test   %al,%al
+    4155:	75 da                	jne    4131 <printf+0xe3>
+    4157:	eb 65                	jmp    41be <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    4159:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+    415d:	75 1d                	jne    417c <printf+0x12e>
+        putc(fd, *ap);
+    415f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+    4162:	8b 00                	mov    (%eax),%eax
+    4164:	0f be c0             	movsbl %al,%eax
+    4167:	83 ec 08             	sub    $0x8,%esp
+    416a:	50                   	push   %eax
+    416b:	ff 75 08             	pushl  0x8(%ebp)
+    416e:	e8 04 fe ff ff       	call   3f77 <putc>
+    4173:	83 c4 10             	add    $0x10,%esp
+        ap++;
+    4176:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+    417a:	eb 42                	jmp    41be <printf+0x170>
+      } else if(c == '%'){
+    417c:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+    4180:	75 17                	jne    4199 <printf+0x14b>
+        putc(fd, c);
+    4182:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    4185:	0f be c0             	movsbl %al,%eax
+    4188:	83 ec 08             	sub    $0x8,%esp
+    418b:	50                   	push   %eax
+    418c:	ff 75 08             	pushl  0x8(%ebp)
+    418f:	e8 e3 fd ff ff       	call   3f77 <putc>
+    4194:	83 c4 10             	add    $0x10,%esp
+    4197:	eb 25                	jmp    41be <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+    4199:	83 ec 08             	sub    $0x8,%esp
+    419c:	6a 25                	push   $0x25
+    419e:	ff 75 08             	pushl  0x8(%ebp)
+    41a1:	e8 d1 fd ff ff       	call   3f77 <putc>
+    41a6:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+    41a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    41ac:	0f be c0             	movsbl %al,%eax
+    41af:	83 ec 08             	sub    $0x8,%esp
+    41b2:	50                   	push   %eax
+    41b3:	ff 75 08             	pushl  0x8(%ebp)
+    41b6:	e8 bc fd ff ff       	call   3f77 <putc>
+    41bb:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    41be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    41c5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+    41c9:	8b 55 0c             	mov    0xc(%ebp),%edx
+    41cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    41cf:	01 d0                	add    %edx,%eax
+    41d1:	0f b6 00             	movzbl (%eax),%eax
+    41d4:	84 c0                	test   %al,%al
+    41d6:	0f 85 94 fe ff ff    	jne    4070 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+    41dc:	90                   	nop
+    41dd:	c9                   	leave  
+    41de:	c3                   	ret    
+
+000041df <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    41df:	55                   	push   %ebp
+    41e0:	89 e5                	mov    %esp,%ebp
+    41e2:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    41e5:	8b 45 08             	mov    0x8(%ebp),%eax
+    41e8:	83 e8 08             	sub    $0x8,%eax
+    41eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    41ee:	a1 68 63 00 00       	mov    0x6368,%eax
+    41f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    41f6:	eb 24                	jmp    421c <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    41f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    41fb:	8b 00                	mov    (%eax),%eax
+    41fd:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+    4200:	77 12                	ja     4214 <free+0x35>
+    4202:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    4205:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+    4208:	77 24                	ja     422e <free+0x4f>
+    420a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    420d:	8b 00                	mov    (%eax),%eax
+    420f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+    4212:	77 1a                	ja     422e <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    4214:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    4217:	8b 00                	mov    (%eax),%eax
+    4219:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    421c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    421f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+    4222:	76 d4                	jbe    41f8 <free+0x19>
+    4224:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    4227:	8b 00                	mov    (%eax),%eax
+    4229:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+    422c:	76 ca                	jbe    41f8 <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    422e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    4231:	8b 40 04             	mov    0x4(%eax),%eax
+    4234:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+    423b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    423e:	01 c2                	add    %eax,%edx
+    4240:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    4243:	8b 00                	mov    (%eax),%eax
+    4245:	39 c2                	cmp    %eax,%edx
+    4247:	75 24                	jne    426d <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+    4249:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    424c:	8b 50 04             	mov    0x4(%eax),%edx
+    424f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    4252:	8b 00                	mov    (%eax),%eax
+    4254:	8b 40 04             	mov    0x4(%eax),%eax
+    4257:	01 c2                	add    %eax,%edx
+    4259:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    425c:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    425f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    4262:	8b 00                	mov    (%eax),%eax
+    4264:	8b 10                	mov    (%eax),%edx
+    4266:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    4269:	89 10                	mov    %edx,(%eax)
+    426b:	eb 0a                	jmp    4277 <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+    426d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    4270:	8b 10                	mov    (%eax),%edx
+    4272:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    4275:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+    4277:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    427a:	8b 40 04             	mov    0x4(%eax),%eax
+    427d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+    4284:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    4287:	01 d0                	add    %edx,%eax
+    4289:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+    428c:	75 20                	jne    42ae <free+0xcf>
+    p->s.size += bp->s.size;
+    428e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    4291:	8b 50 04             	mov    0x4(%eax),%edx
+    4294:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    4297:	8b 40 04             	mov    0x4(%eax),%eax
+    429a:	01 c2                	add    %eax,%edx
+    429c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    429f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    42a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+    42a5:	8b 10                	mov    (%eax),%edx
+    42a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    42aa:	89 10                	mov    %edx,(%eax)
+    42ac:	eb 08                	jmp    42b6 <free+0xd7>
+  } else
+    p->s.ptr = bp;
+    42ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    42b1:	8b 55 f8             	mov    -0x8(%ebp),%edx
+    42b4:	89 10                	mov    %edx,(%eax)
+  freep = p;
+    42b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+    42b9:	a3 68 63 00 00       	mov    %eax,0x6368
+}
+    42be:	90                   	nop
+    42bf:	c9                   	leave  
+    42c0:	c3                   	ret    
+
+000042c1 <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+    42c1:	55                   	push   %ebp
+    42c2:	89 e5                	mov    %esp,%ebp
+    42c4:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    42c7:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+    42ce:	77 07                	ja     42d7 <morecore+0x16>
+    nu = 4096;
+    42d0:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+    42d7:	8b 45 08             	mov    0x8(%ebp),%eax
+    42da:	c1 e0 03             	shl    $0x3,%eax
+    42dd:	83 ec 0c             	sub    $0xc,%esp
+    42e0:	50                   	push   %eax
+    42e1:	e8 71 fc ff ff       	call   3f57 <sbrk>
+    42e6:	83 c4 10             	add    $0x10,%esp
+    42e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+    42ec:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+    42f0:	75 07                	jne    42f9 <morecore+0x38>
+    return 0;
+    42f2:	b8 00 00 00 00       	mov    $0x0,%eax
+    42f7:	eb 26                	jmp    431f <morecore+0x5e>
+  hp = (Header*)p;
+    42f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    42fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+    42ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    4302:	8b 55 08             	mov    0x8(%ebp),%edx
+    4305:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+    4308:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    430b:	83 c0 08             	add    $0x8,%eax
+    430e:	83 ec 0c             	sub    $0xc,%esp
+    4311:	50                   	push   %eax
+    4312:	e8 c8 fe ff ff       	call   41df <free>
+    4317:	83 c4 10             	add    $0x10,%esp
+  return freep;
+    431a:	a1 68 63 00 00       	mov    0x6368,%eax
+}
+    431f:	c9                   	leave  
+    4320:	c3                   	ret    
+
+00004321 <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+    4321:	55                   	push   %ebp
+    4322:	89 e5                	mov    %esp,%ebp
+    4324:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    4327:	8b 45 08             	mov    0x8(%ebp),%eax
+    432a:	83 c0 07             	add    $0x7,%eax
+    432d:	c1 e8 03             	shr    $0x3,%eax
+    4330:	83 c0 01             	add    $0x1,%eax
+    4333:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+    4336:	a1 68 63 00 00       	mov    0x6368,%eax
+    433b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    433e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+    4342:	75 23                	jne    4367 <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+    4344:	c7 45 f0 60 63 00 00 	movl   $0x6360,-0x10(%ebp)
+    434b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    434e:	a3 68 63 00 00       	mov    %eax,0x6368
+    4353:	a1 68 63 00 00       	mov    0x6368,%eax
+    4358:	a3 60 63 00 00       	mov    %eax,0x6360
+    base.s.size = 0;
+    435d:	c7 05 64 63 00 00 00 	movl   $0x0,0x6364
+    4364:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    4367:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    436a:	8b 00                	mov    (%eax),%eax
+    436c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+    436f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    4372:	8b 40 04             	mov    0x4(%eax),%eax
+    4375:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+    4378:	72 4d                	jb     43c7 <malloc+0xa6>
+      if(p->s.size == nunits)
+    437a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    437d:	8b 40 04             	mov    0x4(%eax),%eax
+    4380:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+    4383:	75 0c                	jne    4391 <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+    4385:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    4388:	8b 10                	mov    (%eax),%edx
+    438a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    438d:	89 10                	mov    %edx,(%eax)
+    438f:	eb 26                	jmp    43b7 <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+    4391:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    4394:	8b 40 04             	mov    0x4(%eax),%eax
+    4397:	2b 45 ec             	sub    -0x14(%ebp),%eax
+    439a:	89 c2                	mov    %eax,%edx
+    439c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    439f:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+    43a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    43a5:	8b 40 04             	mov    0x4(%eax),%eax
+    43a8:	c1 e0 03             	shl    $0x3,%eax
+    43ab:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+    43ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    43b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
+    43b4:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+    43b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+    43ba:	a3 68 63 00 00       	mov    %eax,0x6368
+      return (void*)(p + 1);
+    43bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    43c2:	83 c0 08             	add    $0x8,%eax
+    43c5:	eb 3b                	jmp    4402 <malloc+0xe1>
+    }
+    if(p == freep)
+    43c7:	a1 68 63 00 00       	mov    0x6368,%eax
+    43cc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+    43cf:	75 1e                	jne    43ef <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+    43d1:	83 ec 0c             	sub    $0xc,%esp
+    43d4:	ff 75 ec             	pushl  -0x14(%ebp)
+    43d7:	e8 e5 fe ff ff       	call   42c1 <morecore>
+    43dc:	83 c4 10             	add    $0x10,%esp
+    43df:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    43e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+    43e6:	75 07                	jne    43ef <malloc+0xce>
+        return 0;
+    43e8:	b8 00 00 00 00       	mov    $0x0,%eax
+    43ed:	eb 13                	jmp    4402 <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    43ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    43f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    43f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    43f8:	8b 00                	mov    (%eax),%eax
+    43fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+    43fd:	e9 6d ff ff ff       	jmp    436f <malloc+0x4e>
+}
+    4402:	c9                   	leave  
+    4403:	c3                   	ret    
diff -rupN xv6-unrc/usertests.sym xv6-mod/usertests.sym
--- xv6-unrc/usertests.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/usertests.sym	2018-04-04 14:53:56.847482345 -0300
@@ -0,0 +1,105 @@
+00000000 .text
+00004404 .rodata
+00005bd8 .eh_frame
+000062ac .data
+000062e0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+000062e0 args.1476
+00000000 ulib.c
+00003c78 stosb
+00000000 printf.c
+00003f77 putc
+00003f9a printint
+000062c8 digits.1109
+00000000 umalloc.c
+00006360 base
+00006368 freep
+000042c1 morecore
+00003c9e strcpy
+00000d0d exitwait
+0000404e printf
+000062c0 stdout
+0000375b bigargtest
+00003e8a memmove
+000001f0 openiputtest
+00003f17 mknod
+00003d81 gets
+00003f4f getpid
+000009c1 pipe1
+00002ef1 iref
+00004321 malloc
+00003f6f procstat
+00003f5f sleep
+000000f1 exitiputtest
+00003897 fsfull
+00001e09 bigdir
+0000302b forktest
+000005be writetest1
+000026c2 bigwrite
+00000e76 sharedfd
+000062c4 randstate
+00003edf pipe
+00006380 uninit
+00002cb9 dirfile
+00003eef write
+000036e5 bsstest
+000062ac echoargv
+00003f27 fstat
+00003eff kill
+00003607 validatetest
+00002b34 rmdot
+00003f3f chdir
+0000096e exectest
+00003f07 exec
+00003ed7 wait
+00003b3e rand
+00003ee7 read
+00000baa preempt
+00003f1f unlink
+00000d85 mem
+00003ec7 fork
+00003f57 sbrk
+00003f67 uptime
+000062d9 __bss_start
+00003d34 memset
+000007ba createtest
+00003b5d main
+000012aa createdelete
+00003cce strcmp
+000003ae writetest
+00003f47 dup
+000030f5 sbrktest
+000002ff opentest
+00001f7e subdir
+000016de linktest
+00008aa0 buf
+0000087d dirtest
+00000000 iputtest
+00003df0 stat
+000027c0 bigfile
+000062d9 _edata
+0000aaa4 _end
+0000151c unlinkread
+00003f2f link
+00003ecf exit
+00003e3d atoi
+00001cd0 linkunlink
+0000aaa0 name
+00003d0d strlen
+00003f0f open
+00003d4e strchr
+00001920 concreate
+000029d8 fourteen
+000035e4 validateint
+00001059 fourfiles
+00003f37 mkdir
+00003ef7 close
+000041df free
Los archivos binarios xv6-unrc/vectors.o y xv6-mod/vectors.o son distintos
Los archivos binarios xv6-unrc/._vectors.pl y xv6-mod/._vectors.pl son distintos
diff -rupN xv6-unrc/vectors.S xv6-mod/vectors.S
--- xv6-unrc/vectors.S	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/vectors.S	2018-04-04 14:54:49.336008789 -0300
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
Los archivos binarios xv6-unrc/._vm.c y xv6-mod/._vm.c son distintos
diff -rupN xv6-unrc/vm.d xv6-mod/vm.d
--- xv6-unrc/vm.d	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/vm.d	2018-04-04 14:54:49.780013242 -0300
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Los archivos binarios xv6-unrc/vm.o y xv6-mod/vm.o son distintos
Los archivos binarios xv6-unrc/_wc y xv6-mod/_wc son distintos
diff -rupN xv6-unrc/wc.asm xv6-mod/wc.asm
--- xv6-unrc/wc.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/wc.asm	2018-04-04 14:53:57.135485234 -0300
@@ -0,0 +1,1355 @@
+
+_wc:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <wc>:
+
+char buf[512];
+
+void
+wc(int fd, char *name)
+{
+   0:	55                   	push   %ebp
+   1:	89 e5                	mov    %esp,%ebp
+   3:	83 ec 28             	sub    $0x28,%esp
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+   6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+   d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  10:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  13:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  16:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  inword = 0;
+  19:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  20:	eb 69                	jmp    8b <wc+0x8b>
+    for(i=0; i<n; i++){
+  22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  29:	eb 58                	jmp    83 <wc+0x83>
+      c++;
+  2b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
+      if(buf[i] == '\n')
+  2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  32:	05 40 0c 00 00       	add    $0xc40,%eax
+  37:	0f b6 00             	movzbl (%eax),%eax
+  3a:	3c 0a                	cmp    $0xa,%al
+  3c:	75 04                	jne    42 <wc+0x42>
+        l++;
+  3e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+      if(strchr(" \r\t\n\v", buf[i]))
+  42:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  45:	05 40 0c 00 00       	add    $0xc40,%eax
+  4a:	0f b6 00             	movzbl (%eax),%eax
+  4d:	0f be c0             	movsbl %al,%eax
+  50:	83 ec 08             	sub    $0x8,%esp
+  53:	50                   	push   %eax
+  54:	68 49 09 00 00       	push   $0x949
+  59:	e8 35 02 00 00       	call   293 <strchr>
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	85 c0                	test   %eax,%eax
+  63:	74 09                	je     6e <wc+0x6e>
+        inword = 0;
+  65:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  6c:	eb 11                	jmp    7f <wc+0x7f>
+      else if(!inword){
+  6e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  72:	75 0b                	jne    7f <wc+0x7f>
+        w++;
+  74:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+        inword = 1;
+  78:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i=0; i<n; i++){
+  7f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  83:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  86:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+  89:	7c a0                	jl     2b <wc+0x2b>
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  8b:	83 ec 04             	sub    $0x4,%esp
+  8e:	68 00 02 00 00       	push   $0x200
+  93:	68 40 0c 00 00       	push   $0xc40
+  98:	ff 75 08             	pushl  0x8(%ebp)
+  9b:	e8 8c 03 00 00       	call   42c <read>
+  a0:	83 c4 10             	add    $0x10,%esp
+  a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  a6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+  aa:	0f 8f 72 ff ff ff    	jg     22 <wc+0x22>
+        w++;
+        inword = 1;
+      }
+    }
+  }
+  if(n < 0){
+  b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+  b4:	79 17                	jns    cd <wc+0xcd>
+    printf(1, "wc: read error\n");
+  b6:	83 ec 08             	sub    $0x8,%esp
+  b9:	68 4f 09 00 00       	push   $0x94f
+  be:	6a 01                	push   $0x1
+  c0:	e8 ce 04 00 00       	call   593 <printf>
+  c5:	83 c4 10             	add    $0x10,%esp
+    exit();
+  c8:	e8 47 03 00 00       	call   414 <exit>
+  }
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+  cd:	83 ec 08             	sub    $0x8,%esp
+  d0:	ff 75 0c             	pushl  0xc(%ebp)
+  d3:	ff 75 e8             	pushl  -0x18(%ebp)
+  d6:	ff 75 ec             	pushl  -0x14(%ebp)
+  d9:	ff 75 f0             	pushl  -0x10(%ebp)
+  dc:	68 5f 09 00 00       	push   $0x95f
+  e1:	6a 01                	push   $0x1
+  e3:	e8 ab 04 00 00       	call   593 <printf>
+  e8:	83 c4 20             	add    $0x20,%esp
+}
+  eb:	90                   	nop
+  ec:	c9                   	leave  
+  ed:	c3                   	ret    
+
+000000ee <main>:
+
+int
+main(int argc, char *argv[])
+{
+  ee:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  f2:	83 e4 f0             	and    $0xfffffff0,%esp
+  f5:	ff 71 fc             	pushl  -0x4(%ecx)
+  f8:	55                   	push   %ebp
+  f9:	89 e5                	mov    %esp,%ebp
+  fb:	53                   	push   %ebx
+  fc:	51                   	push   %ecx
+  fd:	83 ec 10             	sub    $0x10,%esp
+ 100:	89 cb                	mov    %ecx,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+ 102:	83 3b 01             	cmpl   $0x1,(%ebx)
+ 105:	7f 17                	jg     11e <main+0x30>
+    wc(0, "");
+ 107:	83 ec 08             	sub    $0x8,%esp
+ 10a:	68 6c 09 00 00       	push   $0x96c
+ 10f:	6a 00                	push   $0x0
+ 111:	e8 ea fe ff ff       	call   0 <wc>
+ 116:	83 c4 10             	add    $0x10,%esp
+    exit();
+ 119:	e8 f6 02 00 00       	call   414 <exit>
+  }
+
+  for(i = 1; i < argc; i++){
+ 11e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+ 125:	e9 83 00 00 00       	jmp    1ad <main+0xbf>
+    if((fd = open(argv[i], 0)) < 0){
+ 12a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 12d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+ 134:	8b 43 04             	mov    0x4(%ebx),%eax
+ 137:	01 d0                	add    %edx,%eax
+ 139:	8b 00                	mov    (%eax),%eax
+ 13b:	83 ec 08             	sub    $0x8,%esp
+ 13e:	6a 00                	push   $0x0
+ 140:	50                   	push   %eax
+ 141:	e8 0e 03 00 00       	call   454 <open>
+ 146:	83 c4 10             	add    $0x10,%esp
+ 149:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 14c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 150:	79 29                	jns    17b <main+0x8d>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+ 152:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 155:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+ 15c:	8b 43 04             	mov    0x4(%ebx),%eax
+ 15f:	01 d0                	add    %edx,%eax
+ 161:	8b 00                	mov    (%eax),%eax
+ 163:	83 ec 04             	sub    $0x4,%esp
+ 166:	50                   	push   %eax
+ 167:	68 6d 09 00 00       	push   $0x96d
+ 16c:	6a 01                	push   $0x1
+ 16e:	e8 20 04 00 00       	call   593 <printf>
+ 173:	83 c4 10             	add    $0x10,%esp
+      exit();
+ 176:	e8 99 02 00 00       	call   414 <exit>
+    }
+    wc(fd, argv[i]);
+ 17b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 17e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+ 185:	8b 43 04             	mov    0x4(%ebx),%eax
+ 188:	01 d0                	add    %edx,%eax
+ 18a:	8b 00                	mov    (%eax),%eax
+ 18c:	83 ec 08             	sub    $0x8,%esp
+ 18f:	50                   	push   %eax
+ 190:	ff 75 f0             	pushl  -0x10(%ebp)
+ 193:	e8 68 fe ff ff       	call   0 <wc>
+ 198:	83 c4 10             	add    $0x10,%esp
+    close(fd);
+ 19b:	83 ec 0c             	sub    $0xc,%esp
+ 19e:	ff 75 f0             	pushl  -0x10(%ebp)
+ 1a1:	e8 96 02 00 00       	call   43c <close>
+ 1a6:	83 c4 10             	add    $0x10,%esp
+  if(argc <= 1){
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+ 1a9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+ 1ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 1b0:	3b 03                	cmp    (%ebx),%eax
+ 1b2:	0f 8c 72 ff ff ff    	jl     12a <main+0x3c>
+      exit();
+    }
+    wc(fd, argv[i]);
+    close(fd);
+  }
+  exit();
+ 1b8:	e8 57 02 00 00       	call   414 <exit>
+
+000001bd <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+ 1bd:	55                   	push   %ebp
+ 1be:	89 e5                	mov    %esp,%ebp
+ 1c0:	57                   	push   %edi
+ 1c1:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+ 1c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1c5:	8b 55 10             	mov    0x10(%ebp),%edx
+ 1c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1cb:	89 cb                	mov    %ecx,%ebx
+ 1cd:	89 df                	mov    %ebx,%edi
+ 1cf:	89 d1                	mov    %edx,%ecx
+ 1d1:	fc                   	cld    
+ 1d2:	f3 aa                	rep stos %al,%es:(%edi)
+ 1d4:	89 ca                	mov    %ecx,%edx
+ 1d6:	89 fb                	mov    %edi,%ebx
+ 1d8:	89 5d 08             	mov    %ebx,0x8(%ebp)
+ 1db:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+ 1de:	90                   	nop
+ 1df:	5b                   	pop    %ebx
+ 1e0:	5f                   	pop    %edi
+ 1e1:	5d                   	pop    %ebp
+ 1e2:	c3                   	ret    
+
+000001e3 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+ 1e3:	55                   	push   %ebp
+ 1e4:	89 e5                	mov    %esp,%ebp
+ 1e6:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+ 1e9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+ 1ef:	90                   	nop
+ 1f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f3:	8d 50 01             	lea    0x1(%eax),%edx
+ 1f6:	89 55 08             	mov    %edx,0x8(%ebp)
+ 1f9:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 1fc:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 1ff:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+ 202:	0f b6 12             	movzbl (%edx),%edx
+ 205:	88 10                	mov    %dl,(%eax)
+ 207:	0f b6 00             	movzbl (%eax),%eax
+ 20a:	84 c0                	test   %al,%al
+ 20c:	75 e2                	jne    1f0 <strcpy+0xd>
+    ;
+  return os;
+ 20e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 211:	c9                   	leave  
+ 212:	c3                   	ret    
+
+00000213 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 213:	55                   	push   %ebp
+ 214:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+ 216:	eb 08                	jmp    220 <strcmp+0xd>
+    p++, q++;
+ 218:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 21c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 220:	8b 45 08             	mov    0x8(%ebp),%eax
+ 223:	0f b6 00             	movzbl (%eax),%eax
+ 226:	84 c0                	test   %al,%al
+ 228:	74 10                	je     23a <strcmp+0x27>
+ 22a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 22d:	0f b6 10             	movzbl (%eax),%edx
+ 230:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 233:	0f b6 00             	movzbl (%eax),%eax
+ 236:	38 c2                	cmp    %al,%dl
+ 238:	74 de                	je     218 <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 23a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 23d:	0f b6 00             	movzbl (%eax),%eax
+ 240:	0f b6 d0             	movzbl %al,%edx
+ 243:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 246:	0f b6 00             	movzbl (%eax),%eax
+ 249:	0f b6 c0             	movzbl %al,%eax
+ 24c:	29 c2                	sub    %eax,%edx
+ 24e:	89 d0                	mov    %edx,%eax
+}
+ 250:	5d                   	pop    %ebp
+ 251:	c3                   	ret    
+
+00000252 <strlen>:
+
+uint
+strlen(char *s)
+{
+ 252:	55                   	push   %ebp
+ 253:	89 e5                	mov    %esp,%ebp
+ 255:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 258:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+ 25f:	eb 04                	jmp    265 <strlen+0x13>
+ 261:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ 265:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 268:	8b 45 08             	mov    0x8(%ebp),%eax
+ 26b:	01 d0                	add    %edx,%eax
+ 26d:	0f b6 00             	movzbl (%eax),%eax
+ 270:	84 c0                	test   %al,%al
+ 272:	75 ed                	jne    261 <strlen+0xf>
+    ;
+  return n;
+ 274:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 277:	c9                   	leave  
+ 278:	c3                   	ret    
+
+00000279 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 279:	55                   	push   %ebp
+ 27a:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+ 27c:	8b 45 10             	mov    0x10(%ebp),%eax
+ 27f:	50                   	push   %eax
+ 280:	ff 75 0c             	pushl  0xc(%ebp)
+ 283:	ff 75 08             	pushl  0x8(%ebp)
+ 286:	e8 32 ff ff ff       	call   1bd <stosb>
+ 28b:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+ 28e:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 291:	c9                   	leave  
+ 292:	c3                   	ret    
+
+00000293 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 293:	55                   	push   %ebp
+ 294:	89 e5                	mov    %esp,%ebp
+ 296:	83 ec 04             	sub    $0x4,%esp
+ 299:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 29c:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 29f:	eb 14                	jmp    2b5 <strchr+0x22>
+    if(*s == c)
+ 2a1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2a4:	0f b6 00             	movzbl (%eax),%eax
+ 2a7:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 2aa:	75 05                	jne    2b1 <strchr+0x1e>
+      return (char*)s;
+ 2ac:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2af:	eb 13                	jmp    2c4 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 2b1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 2b5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2b8:	0f b6 00             	movzbl (%eax),%eax
+ 2bb:	84 c0                	test   %al,%al
+ 2bd:	75 e2                	jne    2a1 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 2bf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 2c4:	c9                   	leave  
+ 2c5:	c3                   	ret    
+
+000002c6 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2c6:	55                   	push   %ebp
+ 2c7:	89 e5                	mov    %esp,%ebp
+ 2c9:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 2d3:	eb 42                	jmp    317 <gets+0x51>
+    cc = read(0, &c, 1);
+ 2d5:	83 ec 04             	sub    $0x4,%esp
+ 2d8:	6a 01                	push   $0x1
+ 2da:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 2dd:	50                   	push   %eax
+ 2de:	6a 00                	push   $0x0
+ 2e0:	e8 47 01 00 00       	call   42c <read>
+ 2e5:	83 c4 10             	add    $0x10,%esp
+ 2e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 2eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 2ef:	7e 33                	jle    324 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 2f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 2f4:	8d 50 01             	lea    0x1(%eax),%edx
+ 2f7:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 2fa:	89 c2                	mov    %eax,%edx
+ 2fc:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ff:	01 c2                	add    %eax,%edx
+ 301:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 305:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 307:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 30b:	3c 0a                	cmp    $0xa,%al
+ 30d:	74 16                	je     325 <gets+0x5f>
+ 30f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 313:	3c 0d                	cmp    $0xd,%al
+ 315:	74 0e                	je     325 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 317:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 31a:	83 c0 01             	add    $0x1,%eax
+ 31d:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 320:	7c b3                	jl     2d5 <gets+0xf>
+ 322:	eb 01                	jmp    325 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 324:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 325:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 328:	8b 45 08             	mov    0x8(%ebp),%eax
+ 32b:	01 d0                	add    %edx,%eax
+ 32d:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 330:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 333:	c9                   	leave  
+ 334:	c3                   	ret    
+
+00000335 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 335:	55                   	push   %ebp
+ 336:	89 e5                	mov    %esp,%ebp
+ 338:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 33b:	83 ec 08             	sub    $0x8,%esp
+ 33e:	6a 00                	push   $0x0
+ 340:	ff 75 08             	pushl  0x8(%ebp)
+ 343:	e8 0c 01 00 00       	call   454 <open>
+ 348:	83 c4 10             	add    $0x10,%esp
+ 34b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 34e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 352:	79 07                	jns    35b <stat+0x26>
+    return -1;
+ 354:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 359:	eb 25                	jmp    380 <stat+0x4b>
+  r = fstat(fd, st);
+ 35b:	83 ec 08             	sub    $0x8,%esp
+ 35e:	ff 75 0c             	pushl  0xc(%ebp)
+ 361:	ff 75 f4             	pushl  -0xc(%ebp)
+ 364:	e8 03 01 00 00       	call   46c <fstat>
+ 369:	83 c4 10             	add    $0x10,%esp
+ 36c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 36f:	83 ec 0c             	sub    $0xc,%esp
+ 372:	ff 75 f4             	pushl  -0xc(%ebp)
+ 375:	e8 c2 00 00 00       	call   43c <close>
+ 37a:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 37d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 380:	c9                   	leave  
+ 381:	c3                   	ret    
+
+00000382 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 382:	55                   	push   %ebp
+ 383:	89 e5                	mov    %esp,%ebp
+ 385:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 388:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 38f:	eb 25                	jmp    3b6 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 391:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 394:	89 d0                	mov    %edx,%eax
+ 396:	c1 e0 02             	shl    $0x2,%eax
+ 399:	01 d0                	add    %edx,%eax
+ 39b:	01 c0                	add    %eax,%eax
+ 39d:	89 c1                	mov    %eax,%ecx
+ 39f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3a2:	8d 50 01             	lea    0x1(%eax),%edx
+ 3a5:	89 55 08             	mov    %edx,0x8(%ebp)
+ 3a8:	0f b6 00             	movzbl (%eax),%eax
+ 3ab:	0f be c0             	movsbl %al,%eax
+ 3ae:	01 c8                	add    %ecx,%eax
+ 3b0:	83 e8 30             	sub    $0x30,%eax
+ 3b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 3b6:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3b9:	0f b6 00             	movzbl (%eax),%eax
+ 3bc:	3c 2f                	cmp    $0x2f,%al
+ 3be:	7e 0a                	jle    3ca <atoi+0x48>
+ 3c0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3c3:	0f b6 00             	movzbl (%eax),%eax
+ 3c6:	3c 39                	cmp    $0x39,%al
+ 3c8:	7e c7                	jle    391 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 3ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 3cd:	c9                   	leave  
+ 3ce:	c3                   	ret    
+
+000003cf <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 3cf:	55                   	push   %ebp
+ 3d0:	89 e5                	mov    %esp,%ebp
+ 3d2:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 3d5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 3db:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3de:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 3e1:	eb 17                	jmp    3fa <memmove+0x2b>
+    *dst++ = *src++;
+ 3e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 3e6:	8d 50 01             	lea    0x1(%eax),%edx
+ 3e9:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 3ec:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 3ef:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 3f2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 3f5:	0f b6 12             	movzbl (%edx),%edx
+ 3f8:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3fa:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3fd:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 400:	89 55 10             	mov    %edx,0x10(%ebp)
+ 403:	85 c0                	test   %eax,%eax
+ 405:	7f dc                	jg     3e3 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 407:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 40a:	c9                   	leave  
+ 40b:	c3                   	ret    
+
+0000040c <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 40c:	b8 01 00 00 00       	mov    $0x1,%eax
+ 411:	cd 40                	int    $0x40
+ 413:	c3                   	ret    
+
+00000414 <exit>:
+SYSCALL(exit)
+ 414:	b8 02 00 00 00       	mov    $0x2,%eax
+ 419:	cd 40                	int    $0x40
+ 41b:	c3                   	ret    
+
+0000041c <wait>:
+SYSCALL(wait)
+ 41c:	b8 03 00 00 00       	mov    $0x3,%eax
+ 421:	cd 40                	int    $0x40
+ 423:	c3                   	ret    
+
+00000424 <pipe>:
+SYSCALL(pipe)
+ 424:	b8 04 00 00 00       	mov    $0x4,%eax
+ 429:	cd 40                	int    $0x40
+ 42b:	c3                   	ret    
+
+0000042c <read>:
+SYSCALL(read)
+ 42c:	b8 05 00 00 00       	mov    $0x5,%eax
+ 431:	cd 40                	int    $0x40
+ 433:	c3                   	ret    
+
+00000434 <write>:
+SYSCALL(write)
+ 434:	b8 10 00 00 00       	mov    $0x10,%eax
+ 439:	cd 40                	int    $0x40
+ 43b:	c3                   	ret    
+
+0000043c <close>:
+SYSCALL(close)
+ 43c:	b8 15 00 00 00       	mov    $0x15,%eax
+ 441:	cd 40                	int    $0x40
+ 443:	c3                   	ret    
+
+00000444 <kill>:
+SYSCALL(kill)
+ 444:	b8 06 00 00 00       	mov    $0x6,%eax
+ 449:	cd 40                	int    $0x40
+ 44b:	c3                   	ret    
+
+0000044c <exec>:
+SYSCALL(exec)
+ 44c:	b8 07 00 00 00       	mov    $0x7,%eax
+ 451:	cd 40                	int    $0x40
+ 453:	c3                   	ret    
+
+00000454 <open>:
+SYSCALL(open)
+ 454:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 459:	cd 40                	int    $0x40
+ 45b:	c3                   	ret    
+
+0000045c <mknod>:
+SYSCALL(mknod)
+ 45c:	b8 11 00 00 00       	mov    $0x11,%eax
+ 461:	cd 40                	int    $0x40
+ 463:	c3                   	ret    
+
+00000464 <unlink>:
+SYSCALL(unlink)
+ 464:	b8 12 00 00 00       	mov    $0x12,%eax
+ 469:	cd 40                	int    $0x40
+ 46b:	c3                   	ret    
+
+0000046c <fstat>:
+SYSCALL(fstat)
+ 46c:	b8 08 00 00 00       	mov    $0x8,%eax
+ 471:	cd 40                	int    $0x40
+ 473:	c3                   	ret    
+
+00000474 <link>:
+SYSCALL(link)
+ 474:	b8 13 00 00 00       	mov    $0x13,%eax
+ 479:	cd 40                	int    $0x40
+ 47b:	c3                   	ret    
+
+0000047c <mkdir>:
+SYSCALL(mkdir)
+ 47c:	b8 14 00 00 00       	mov    $0x14,%eax
+ 481:	cd 40                	int    $0x40
+ 483:	c3                   	ret    
+
+00000484 <chdir>:
+SYSCALL(chdir)
+ 484:	b8 09 00 00 00       	mov    $0x9,%eax
+ 489:	cd 40                	int    $0x40
+ 48b:	c3                   	ret    
+
+0000048c <dup>:
+SYSCALL(dup)
+ 48c:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 491:	cd 40                	int    $0x40
+ 493:	c3                   	ret    
+
+00000494 <getpid>:
+SYSCALL(getpid)
+ 494:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 499:	cd 40                	int    $0x40
+ 49b:	c3                   	ret    
+
+0000049c <sbrk>:
+SYSCALL(sbrk)
+ 49c:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 4a1:	cd 40                	int    $0x40
+ 4a3:	c3                   	ret    
+
+000004a4 <sleep>:
+SYSCALL(sleep)
+ 4a4:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 4a9:	cd 40                	int    $0x40
+ 4ab:	c3                   	ret    
+
+000004ac <uptime>:
+SYSCALL(uptime)
+ 4ac:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 4b1:	cd 40                	int    $0x40
+ 4b3:	c3                   	ret    
+
+000004b4 <procstat>:
+SYSCALL(procstat) 
+ 4b4:	b8 16 00 00 00       	mov    $0x16,%eax
+ 4b9:	cd 40                	int    $0x40
+ 4bb:	c3                   	ret    
+
+000004bc <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 4bc:	55                   	push   %ebp
+ 4bd:	89 e5                	mov    %esp,%ebp
+ 4bf:	83 ec 18             	sub    $0x18,%esp
+ 4c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 4c5:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 4c8:	83 ec 04             	sub    $0x4,%esp
+ 4cb:	6a 01                	push   $0x1
+ 4cd:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 4d0:	50                   	push   %eax
+ 4d1:	ff 75 08             	pushl  0x8(%ebp)
+ 4d4:	e8 5b ff ff ff       	call   434 <write>
+ 4d9:	83 c4 10             	add    $0x10,%esp
+}
+ 4dc:	90                   	nop
+ 4dd:	c9                   	leave  
+ 4de:	c3                   	ret    
+
+000004df <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4df:	55                   	push   %ebp
+ 4e0:	89 e5                	mov    %esp,%ebp
+ 4e2:	53                   	push   %ebx
+ 4e3:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 4e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 4ed:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 4f1:	74 17                	je     50a <printint+0x2b>
+ 4f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 4f7:	79 11                	jns    50a <printint+0x2b>
+    neg = 1;
+ 4f9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 500:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 503:	f7 d8                	neg    %eax
+ 505:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 508:	eb 06                	jmp    510 <printint+0x31>
+  } else {
+    x = xx;
+ 50a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 50d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 510:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 517:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 51a:	8d 41 01             	lea    0x1(%ecx),%eax
+ 51d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 520:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 523:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 526:	ba 00 00 00 00       	mov    $0x0,%edx
+ 52b:	f7 f3                	div    %ebx
+ 52d:	89 d0                	mov    %edx,%eax
+ 52f:	0f b6 80 f4 0b 00 00 	movzbl 0xbf4(%eax),%eax
+ 536:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 53a:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 53d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 540:	ba 00 00 00 00       	mov    $0x0,%edx
+ 545:	f7 f3                	div    %ebx
+ 547:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 54a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 54e:	75 c7                	jne    517 <printint+0x38>
+  if(neg)
+ 550:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 554:	74 2d                	je     583 <printint+0xa4>
+    buf[i++] = '-';
+ 556:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 559:	8d 50 01             	lea    0x1(%eax),%edx
+ 55c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 55f:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 564:	eb 1d                	jmp    583 <printint+0xa4>
+    putc(fd, buf[i]);
+ 566:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 569:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 56c:	01 d0                	add    %edx,%eax
+ 56e:	0f b6 00             	movzbl (%eax),%eax
+ 571:	0f be c0             	movsbl %al,%eax
+ 574:	83 ec 08             	sub    $0x8,%esp
+ 577:	50                   	push   %eax
+ 578:	ff 75 08             	pushl  0x8(%ebp)
+ 57b:	e8 3c ff ff ff       	call   4bc <putc>
+ 580:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 583:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 587:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 58b:	79 d9                	jns    566 <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 58d:	90                   	nop
+ 58e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 591:	c9                   	leave  
+ 592:	c3                   	ret    
+
+00000593 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 593:	55                   	push   %ebp
+ 594:	89 e5                	mov    %esp,%ebp
+ 596:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 599:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 5a0:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 5a3:	83 c0 04             	add    $0x4,%eax
+ 5a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 5a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 5b0:	e9 59 01 00 00       	jmp    70e <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 5b5:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 5b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 5bb:	01 d0                	add    %edx,%eax
+ 5bd:	0f b6 00             	movzbl (%eax),%eax
+ 5c0:	0f be c0             	movsbl %al,%eax
+ 5c3:	25 ff 00 00 00       	and    $0xff,%eax
+ 5c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 5cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 5cf:	75 2c                	jne    5fd <printf+0x6a>
+      if(c == '%'){
+ 5d1:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 5d5:	75 0c                	jne    5e3 <printf+0x50>
+        state = '%';
+ 5d7:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 5de:	e9 27 01 00 00       	jmp    70a <printf+0x177>
+      } else {
+        putc(fd, c);
+ 5e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 5e6:	0f be c0             	movsbl %al,%eax
+ 5e9:	83 ec 08             	sub    $0x8,%esp
+ 5ec:	50                   	push   %eax
+ 5ed:	ff 75 08             	pushl  0x8(%ebp)
+ 5f0:	e8 c7 fe ff ff       	call   4bc <putc>
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	e9 0d 01 00 00       	jmp    70a <printf+0x177>
+      }
+    } else if(state == '%'){
+ 5fd:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 601:	0f 85 03 01 00 00    	jne    70a <printf+0x177>
+      if(c == 'd'){
+ 607:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 60b:	75 1e                	jne    62b <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 60d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 610:	8b 00                	mov    (%eax),%eax
+ 612:	6a 01                	push   $0x1
+ 614:	6a 0a                	push   $0xa
+ 616:	50                   	push   %eax
+ 617:	ff 75 08             	pushl  0x8(%ebp)
+ 61a:	e8 c0 fe ff ff       	call   4df <printint>
+ 61f:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 622:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 626:	e9 d8 00 00 00       	jmp    703 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 62b:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 62f:	74 06                	je     637 <printf+0xa4>
+ 631:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 635:	75 1e                	jne    655 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 637:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	6a 00                	push   $0x0
+ 63e:	6a 10                	push   $0x10
+ 640:	50                   	push   %eax
+ 641:	ff 75 08             	pushl  0x8(%ebp)
+ 644:	e8 96 fe ff ff       	call   4df <printint>
+ 649:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 64c:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 650:	e9 ae 00 00 00       	jmp    703 <printf+0x170>
+      } else if(c == 's'){
+ 655:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 659:	75 43                	jne    69e <printf+0x10b>
+        s = (char*)*ap;
+ 65b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 65e:	8b 00                	mov    (%eax),%eax
+ 660:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 663:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 667:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 66b:	75 25                	jne    692 <printf+0xff>
+          s = "(null)";
+ 66d:	c7 45 f4 81 09 00 00 	movl   $0x981,-0xc(%ebp)
+        while(*s != 0){
+ 674:	eb 1c                	jmp    692 <printf+0xff>
+          putc(fd, *s);
+ 676:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 679:	0f b6 00             	movzbl (%eax),%eax
+ 67c:	0f be c0             	movsbl %al,%eax
+ 67f:	83 ec 08             	sub    $0x8,%esp
+ 682:	50                   	push   %eax
+ 683:	ff 75 08             	pushl  0x8(%ebp)
+ 686:	e8 31 fe ff ff       	call   4bc <putc>
+ 68b:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 68e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 692:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 695:	0f b6 00             	movzbl (%eax),%eax
+ 698:	84 c0                	test   %al,%al
+ 69a:	75 da                	jne    676 <printf+0xe3>
+ 69c:	eb 65                	jmp    703 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 69e:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 6a2:	75 1d                	jne    6c1 <printf+0x12e>
+        putc(fd, *ap);
+ 6a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 6a7:	8b 00                	mov    (%eax),%eax
+ 6a9:	0f be c0             	movsbl %al,%eax
+ 6ac:	83 ec 08             	sub    $0x8,%esp
+ 6af:	50                   	push   %eax
+ 6b0:	ff 75 08             	pushl  0x8(%ebp)
+ 6b3:	e8 04 fe ff ff       	call   4bc <putc>
+ 6b8:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 6bb:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 6bf:	eb 42                	jmp    703 <printf+0x170>
+      } else if(c == '%'){
+ 6c1:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 6c5:	75 17                	jne    6de <printf+0x14b>
+        putc(fd, c);
+ 6c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 6ca:	0f be c0             	movsbl %al,%eax
+ 6cd:	83 ec 08             	sub    $0x8,%esp
+ 6d0:	50                   	push   %eax
+ 6d1:	ff 75 08             	pushl  0x8(%ebp)
+ 6d4:	e8 e3 fd ff ff       	call   4bc <putc>
+ 6d9:	83 c4 10             	add    $0x10,%esp
+ 6dc:	eb 25                	jmp    703 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 6de:	83 ec 08             	sub    $0x8,%esp
+ 6e1:	6a 25                	push   $0x25
+ 6e3:	ff 75 08             	pushl  0x8(%ebp)
+ 6e6:	e8 d1 fd ff ff       	call   4bc <putc>
+ 6eb:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 6ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 6f1:	0f be c0             	movsbl %al,%eax
+ 6f4:	83 ec 08             	sub    $0x8,%esp
+ 6f7:	50                   	push   %eax
+ 6f8:	ff 75 08             	pushl  0x8(%ebp)
+ 6fb:	e8 bc fd ff ff       	call   4bc <putc>
+ 700:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 703:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 70a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 70e:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 711:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 714:	01 d0                	add    %edx,%eax
+ 716:	0f b6 00             	movzbl (%eax),%eax
+ 719:	84 c0                	test   %al,%al
+ 71b:	0f 85 94 fe ff ff    	jne    5b5 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 721:	90                   	nop
+ 722:	c9                   	leave  
+ 723:	c3                   	ret    
+
+00000724 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 724:	55                   	push   %ebp
+ 725:	89 e5                	mov    %esp,%ebp
+ 727:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 72a:	8b 45 08             	mov    0x8(%ebp),%eax
+ 72d:	83 e8 08             	sub    $0x8,%eax
+ 730:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 733:	a1 28 0c 00 00       	mov    0xc28,%eax
+ 738:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 73b:	eb 24                	jmp    761 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 73d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 740:	8b 00                	mov    (%eax),%eax
+ 742:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 745:	77 12                	ja     759 <free+0x35>
+ 747:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 74a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 74d:	77 24                	ja     773 <free+0x4f>
+ 74f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 752:	8b 00                	mov    (%eax),%eax
+ 754:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 757:	77 1a                	ja     773 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 759:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 75c:	8b 00                	mov    (%eax),%eax
+ 75e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 761:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 764:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 767:	76 d4                	jbe    73d <free+0x19>
+ 769:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 76c:	8b 00                	mov    (%eax),%eax
+ 76e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 771:	76 ca                	jbe    73d <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 773:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 776:	8b 40 04             	mov    0x4(%eax),%eax
+ 779:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 780:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 783:	01 c2                	add    %eax,%edx
+ 785:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 788:	8b 00                	mov    (%eax),%eax
+ 78a:	39 c2                	cmp    %eax,%edx
+ 78c:	75 24                	jne    7b2 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 78e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 791:	8b 50 04             	mov    0x4(%eax),%edx
+ 794:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 797:	8b 00                	mov    (%eax),%eax
+ 799:	8b 40 04             	mov    0x4(%eax),%eax
+ 79c:	01 c2                	add    %eax,%edx
+ 79e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 7a1:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7a7:	8b 00                	mov    (%eax),%eax
+ 7a9:	8b 10                	mov    (%eax),%edx
+ 7ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 7ae:	89 10                	mov    %edx,(%eax)
+ 7b0:	eb 0a                	jmp    7bc <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 7b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7b5:	8b 10                	mov    (%eax),%edx
+ 7b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 7ba:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 7bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7bf:	8b 40 04             	mov    0x4(%eax),%eax
+ 7c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 7c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7cc:	01 d0                	add    %edx,%eax
+ 7ce:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 7d1:	75 20                	jne    7f3 <free+0xcf>
+    p->s.size += bp->s.size;
+ 7d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7d6:	8b 50 04             	mov    0x4(%eax),%edx
+ 7d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 7dc:	8b 40 04             	mov    0x4(%eax),%eax
+ 7df:	01 c2                	add    %eax,%edx
+ 7e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7e4:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 7e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 7ea:	8b 10                	mov    (%eax),%edx
+ 7ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7ef:	89 10                	mov    %edx,(%eax)
+ 7f1:	eb 08                	jmp    7fb <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 7f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7f6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 7f9:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 7fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 7fe:	a3 28 0c 00 00       	mov    %eax,0xc28
+}
+ 803:	90                   	nop
+ 804:	c9                   	leave  
+ 805:	c3                   	ret    
+
+00000806 <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 806:	55                   	push   %ebp
+ 807:	89 e5                	mov    %esp,%ebp
+ 809:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 80c:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 813:	77 07                	ja     81c <morecore+0x16>
+    nu = 4096;
+ 815:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 81c:	8b 45 08             	mov    0x8(%ebp),%eax
+ 81f:	c1 e0 03             	shl    $0x3,%eax
+ 822:	83 ec 0c             	sub    $0xc,%esp
+ 825:	50                   	push   %eax
+ 826:	e8 71 fc ff ff       	call   49c <sbrk>
+ 82b:	83 c4 10             	add    $0x10,%esp
+ 82e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 831:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 835:	75 07                	jne    83e <morecore+0x38>
+    return 0;
+ 837:	b8 00 00 00 00       	mov    $0x0,%eax
+ 83c:	eb 26                	jmp    864 <morecore+0x5e>
+  hp = (Header*)p;
+ 83e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 841:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 844:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 847:	8b 55 08             	mov    0x8(%ebp),%edx
+ 84a:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 84d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 850:	83 c0 08             	add    $0x8,%eax
+ 853:	83 ec 0c             	sub    $0xc,%esp
+ 856:	50                   	push   %eax
+ 857:	e8 c8 fe ff ff       	call   724 <free>
+ 85c:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 85f:	a1 28 0c 00 00       	mov    0xc28,%eax
+}
+ 864:	c9                   	leave  
+ 865:	c3                   	ret    
+
+00000866 <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 866:	55                   	push   %ebp
+ 867:	89 e5                	mov    %esp,%ebp
+ 869:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 86c:	8b 45 08             	mov    0x8(%ebp),%eax
+ 86f:	83 c0 07             	add    $0x7,%eax
+ 872:	c1 e8 03             	shr    $0x3,%eax
+ 875:	83 c0 01             	add    $0x1,%eax
+ 878:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 87b:	a1 28 0c 00 00       	mov    0xc28,%eax
+ 880:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 883:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 887:	75 23                	jne    8ac <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 889:	c7 45 f0 20 0c 00 00 	movl   $0xc20,-0x10(%ebp)
+ 890:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 893:	a3 28 0c 00 00       	mov    %eax,0xc28
+ 898:	a1 28 0c 00 00       	mov    0xc28,%eax
+ 89d:	a3 20 0c 00 00       	mov    %eax,0xc20
+    base.s.size = 0;
+ 8a2:	c7 05 24 0c 00 00 00 	movl   $0x0,0xc24
+ 8a9:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 8af:	8b 00                	mov    (%eax),%eax
+ 8b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 8b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8b7:	8b 40 04             	mov    0x4(%eax),%eax
+ 8ba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 8bd:	72 4d                	jb     90c <malloc+0xa6>
+      if(p->s.size == nunits)
+ 8bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8c2:	8b 40 04             	mov    0x4(%eax),%eax
+ 8c5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 8c8:	75 0c                	jne    8d6 <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 8ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8cd:	8b 10                	mov    (%eax),%edx
+ 8cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 8d2:	89 10                	mov    %edx,(%eax)
+ 8d4:	eb 26                	jmp    8fc <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 8d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8d9:	8b 40 04             	mov    0x4(%eax),%eax
+ 8dc:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 8df:	89 c2                	mov    %eax,%edx
+ 8e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8e4:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 8e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8ea:	8b 40 04             	mov    0x4(%eax),%eax
+ 8ed:	c1 e0 03             	shl    $0x3,%eax
+ 8f0:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 8f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 8f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 8f9:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 8fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 8ff:	a3 28 0c 00 00       	mov    %eax,0xc28
+      return (void*)(p + 1);
+ 904:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 907:	83 c0 08             	add    $0x8,%eax
+ 90a:	eb 3b                	jmp    947 <malloc+0xe1>
+    }
+    if(p == freep)
+ 90c:	a1 28 0c 00 00       	mov    0xc28,%eax
+ 911:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 914:	75 1e                	jne    934 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 916:	83 ec 0c             	sub    $0xc,%esp
+ 919:	ff 75 ec             	pushl  -0x14(%ebp)
+ 91c:	e8 e5 fe ff ff       	call   806 <morecore>
+ 921:	83 c4 10             	add    $0x10,%esp
+ 924:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 927:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 92b:	75 07                	jne    934 <malloc+0xce>
+        return 0;
+ 92d:	b8 00 00 00 00       	mov    $0x0,%eax
+ 932:	eb 13                	jmp    947 <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 934:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 937:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 93a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 93d:	8b 00                	mov    (%eax),%eax
+ 93f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 942:	e9 6d ff ff ff       	jmp    8b4 <malloc+0x4e>
+}
+ 947:	c9                   	leave  
+ 948:	c3                   	ret    
diff -rupN xv6-unrc/wc.sym xv6-mod/wc.sym
--- xv6-unrc/wc.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/wc.sym	2018-04-04 14:53:57.163485515 -0300
@@ -0,0 +1,63 @@
+00000000 .text
+00000949 .rodata
+00000988 .eh_frame
+00000bf4 .data
+00000c20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 wc.c
+00000000 ulib.c
+000001bd stosb
+00000000 printf.c
+000004bc putc
+000004df printint
+00000bf4 digits.1109
+00000000 umalloc.c
+00000c20 base
+00000c28 freep
+00000806 morecore
+000001e3 strcpy
+00000593 printf
+000003cf memmove
+0000045c mknod
+000002c6 gets
+00000494 getpid
+00000866 malloc
+000004b4 procstat
+000004a4 sleep
+00000424 pipe
+00000434 write
+0000046c fstat
+00000444 kill
+00000484 chdir
+0000044c exec
+0000041c wait
+0000042c read
+00000464 unlink
+00000000 wc
+0000040c fork
+0000049c sbrk
+000004ac uptime
+00000c05 __bss_start
+00000279 memset
+000000ee main
+00000213 strcmp
+0000048c dup
+00000c40 buf
+00000335 stat
+00000c05 _edata
+00000e40 _end
+00000474 link
+00000414 exit
+00000382 atoi
+00000252 strlen
+00000454 open
+00000293 strchr
+0000047c mkdir
+0000043c close
+00000724 free
Los archivos binarios xv6-unrc/._x86.h y xv6-mod/._x86.h son distintos
Los archivos binarios xv6-unrc/xv6.img y xv6-mod/xv6.img son distintos
Los archivos binarios xv6-unrc/._xv6.pdf y xv6-mod/._xv6.pdf son distintos
Los archivos binarios xv6-unrc/_zombie y xv6-mod/_zombie son distintos
diff -rupN xv6-unrc/zombie.asm xv6-mod/zombie.asm
--- xv6-unrc/zombie.asm	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/zombie.asm	2018-04-04 14:53:57.427488162 -0300
@@ -0,0 +1,1171 @@
+
+_zombie:     formato del fichero elf32-i386
+
+
+Desensamblado de la sección .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  11:	e8 65 02 00 00       	call   27b <fork>
+  16:	85 c0                	test   %eax,%eax
+  18:	7e 0d                	jle    27 <main+0x27>
+    sleep(5);  // Let child exit before parent.
+  1a:	83 ec 0c             	sub    $0xc,%esp
+  1d:	6a 05                	push   $0x5
+  1f:	e8 ef 02 00 00       	call   313 <sleep>
+  24:	83 c4 10             	add    $0x10,%esp
+  exit();
+  27:	e8 57 02 00 00       	call   283 <exit>
+
+0000002c <stosb>:
+               "cc");
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  2c:	55                   	push   %ebp
+  2d:	89 e5                	mov    %esp,%ebp
+  2f:	57                   	push   %edi
+  30:	53                   	push   %ebx
+  asm volatile("cld; rep stosb" :
+  31:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  34:	8b 55 10             	mov    0x10(%ebp),%edx
+  37:	8b 45 0c             	mov    0xc(%ebp),%eax
+  3a:	89 cb                	mov    %ecx,%ebx
+  3c:	89 df                	mov    %ebx,%edi
+  3e:	89 d1                	mov    %edx,%ecx
+  40:	fc                   	cld    
+  41:	f3 aa                	rep stos %al,%es:(%edi)
+  43:	89 ca                	mov    %ecx,%edx
+  45:	89 fb                	mov    %edi,%ebx
+  47:	89 5d 08             	mov    %ebx,0x8(%ebp)
+  4a:	89 55 10             	mov    %edx,0x10(%ebp)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+  4d:	90                   	nop
+  4e:	5b                   	pop    %ebx
+  4f:	5f                   	pop    %edi
+  50:	5d                   	pop    %ebp
+  51:	c3                   	ret    
+
+00000052 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, char *t)
+{
+  52:	55                   	push   %ebp
+  53:	89 e5                	mov    %esp,%ebp
+  55:	83 ec 10             	sub    $0x10,%esp
+  char *os;
+
+  os = s;
+  58:	8b 45 08             	mov    0x8(%ebp),%eax
+  5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  while((*s++ = *t++) != 0)
+  5e:	90                   	nop
+  5f:	8b 45 08             	mov    0x8(%ebp),%eax
+  62:	8d 50 01             	lea    0x1(%eax),%edx
+  65:	89 55 08             	mov    %edx,0x8(%ebp)
+  68:	8b 55 0c             	mov    0xc(%ebp),%edx
+  6b:	8d 4a 01             	lea    0x1(%edx),%ecx
+  6e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
+  71:	0f b6 12             	movzbl (%edx),%edx
+  74:	88 10                	mov    %dl,(%eax)
+  76:	0f b6 00             	movzbl (%eax),%eax
+  79:	84 c0                	test   %al,%al
+  7b:	75 e2                	jne    5f <strcpy+0xd>
+    ;
+  return os;
+  7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80:	c9                   	leave  
+  81:	c3                   	ret    
+
+00000082 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  82:	55                   	push   %ebp
+  83:	89 e5                	mov    %esp,%ebp
+  while(*p && *p == *q)
+  85:	eb 08                	jmp    8f <strcmp+0xd>
+    p++, q++;
+  87:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  8f:	8b 45 08             	mov    0x8(%ebp),%eax
+  92:	0f b6 00             	movzbl (%eax),%eax
+  95:	84 c0                	test   %al,%al
+  97:	74 10                	je     a9 <strcmp+0x27>
+  99:	8b 45 08             	mov    0x8(%ebp),%eax
+  9c:	0f b6 10             	movzbl (%eax),%edx
+  9f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  a2:	0f b6 00             	movzbl (%eax),%eax
+  a5:	38 c2                	cmp    %al,%dl
+  a7:	74 de                	je     87 <strcmp+0x5>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  ac:	0f b6 00             	movzbl (%eax),%eax
+  af:	0f b6 d0             	movzbl %al,%edx
+  b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  b5:	0f b6 00             	movzbl (%eax),%eax
+  b8:	0f b6 c0             	movzbl %al,%eax
+  bb:	29 c2                	sub    %eax,%edx
+  bd:	89 d0                	mov    %edx,%eax
+}
+  bf:	5d                   	pop    %ebp
+  c0:	c3                   	ret    
+
+000000c1 <strlen>:
+
+uint
+strlen(char *s)
+{
+  c1:	55                   	push   %ebp
+  c2:	89 e5                	mov    %esp,%ebp
+  c4:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  ce:	eb 04                	jmp    d4 <strlen+0x13>
+  d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  d4:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  d7:	8b 45 08             	mov    0x8(%ebp),%eax
+  da:	01 d0                	add    %edx,%eax
+  dc:	0f b6 00             	movzbl (%eax),%eax
+  df:	84 c0                	test   %al,%al
+  e1:	75 ed                	jne    d0 <strlen+0xf>
+    ;
+  return n;
+  e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  e6:	c9                   	leave  
+  e7:	c3                   	ret    
+
+000000e8 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  e8:	55                   	push   %ebp
+  e9:	89 e5                	mov    %esp,%ebp
+  stosb(dst, c, n);
+  eb:	8b 45 10             	mov    0x10(%ebp),%eax
+  ee:	50                   	push   %eax
+  ef:	ff 75 0c             	pushl  0xc(%ebp)
+  f2:	ff 75 08             	pushl  0x8(%ebp)
+  f5:	e8 32 ff ff ff       	call   2c <stosb>
+  fa:	83 c4 0c             	add    $0xc,%esp
+  return dst;
+  fd:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 100:	c9                   	leave  
+ 101:	c3                   	ret    
+
+00000102 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 102:	55                   	push   %ebp
+ 103:	89 e5                	mov    %esp,%ebp
+ 105:	83 ec 04             	sub    $0x4,%esp
+ 108:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 10b:	88 45 fc             	mov    %al,-0x4(%ebp)
+  for(; *s; s++)
+ 10e:	eb 14                	jmp    124 <strchr+0x22>
+    if(*s == c)
+ 110:	8b 45 08             	mov    0x8(%ebp),%eax
+ 113:	0f b6 00             	movzbl (%eax),%eax
+ 116:	3a 45 fc             	cmp    -0x4(%ebp),%al
+ 119:	75 05                	jne    120 <strchr+0x1e>
+      return (char*)s;
+ 11b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11e:	eb 13                	jmp    133 <strchr+0x31>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 120:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ 124:	8b 45 08             	mov    0x8(%ebp),%eax
+ 127:	0f b6 00             	movzbl (%eax),%eax
+ 12a:	84 c0                	test   %al,%al
+ 12c:	75 e2                	jne    110 <strchr+0xe>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 12e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+ 133:	c9                   	leave  
+ 134:	c3                   	ret    
+
+00000135 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 135:	55                   	push   %ebp
+ 136:	89 e5                	mov    %esp,%ebp
+ 138:	83 ec 18             	sub    $0x18,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 13b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 142:	eb 42                	jmp    186 <gets+0x51>
+    cc = read(0, &c, 1);
+ 144:	83 ec 04             	sub    $0x4,%esp
+ 147:	6a 01                	push   $0x1
+ 149:	8d 45 ef             	lea    -0x11(%ebp),%eax
+ 14c:	50                   	push   %eax
+ 14d:	6a 00                	push   $0x0
+ 14f:	e8 47 01 00 00       	call   29b <read>
+ 154:	83 c4 10             	add    $0x10,%esp
+ 157:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if(cc < 1)
+ 15a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 15e:	7e 33                	jle    193 <gets+0x5e>
+      break;
+    buf[i++] = c;
+ 160:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 163:	8d 50 01             	lea    0x1(%eax),%edx
+ 166:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 169:	89 c2                	mov    %eax,%edx
+ 16b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16e:	01 c2                	add    %eax,%edx
+ 170:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 174:	88 02                	mov    %al,(%edx)
+    if(c == '\n' || c == '\r')
+ 176:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 17a:	3c 0a                	cmp    $0xa,%al
+ 17c:	74 16                	je     194 <gets+0x5f>
+ 17e:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+ 182:	3c 0d                	cmp    $0xd,%al
+ 184:	74 0e                	je     194 <gets+0x5f>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 186:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 189:	83 c0 01             	add    $0x1,%eax
+ 18c:	3b 45 0c             	cmp    0xc(%ebp),%eax
+ 18f:	7c b3                	jl     144 <gets+0xf>
+ 191:	eb 01                	jmp    194 <gets+0x5f>
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+ 193:	90                   	nop
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 194:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 197:	8b 45 08             	mov    0x8(%ebp),%eax
+ 19a:	01 d0                	add    %edx,%eax
+ 19c:	c6 00 00             	movb   $0x0,(%eax)
+  return buf;
+ 19f:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 1a2:	c9                   	leave  
+ 1a3:	c3                   	ret    
+
+000001a4 <stat>:
+
+int
+stat(char *n, struct stat *st)
+{
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1aa:	83 ec 08             	sub    $0x8,%esp
+ 1ad:	6a 00                	push   $0x0
+ 1af:	ff 75 08             	pushl  0x8(%ebp)
+ 1b2:	e8 0c 01 00 00       	call   2c3 <open>
+ 1b7:	83 c4 10             	add    $0x10,%esp
+ 1ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(fd < 0)
+ 1bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 1c1:	79 07                	jns    1ca <stat+0x26>
+    return -1;
+ 1c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 1c8:	eb 25                	jmp    1ef <stat+0x4b>
+  r = fstat(fd, st);
+ 1ca:	83 ec 08             	sub    $0x8,%esp
+ 1cd:	ff 75 0c             	pushl  0xc(%ebp)
+ 1d0:	ff 75 f4             	pushl  -0xc(%ebp)
+ 1d3:	e8 03 01 00 00       	call   2db <fstat>
+ 1d8:	83 c4 10             	add    $0x10,%esp
+ 1db:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  close(fd);
+ 1de:	83 ec 0c             	sub    $0xc,%esp
+ 1e1:	ff 75 f4             	pushl  -0xc(%ebp)
+ 1e4:	e8 c2 00 00 00       	call   2ab <close>
+ 1e9:	83 c4 10             	add    $0x10,%esp
+  return r;
+ 1ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+ 1ef:	c9                   	leave  
+ 1f0:	c3                   	ret    
+
+000001f1 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1f1:	55                   	push   %ebp
+ 1f2:	89 e5                	mov    %esp,%ebp
+ 1f4:	83 ec 10             	sub    $0x10,%esp
+  int n;
+
+  n = 0;
+ 1f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  while('0' <= *s && *s <= '9')
+ 1fe:	eb 25                	jmp    225 <atoi+0x34>
+    n = n*10 + *s++ - '0';
+ 200:	8b 55 fc             	mov    -0x4(%ebp),%edx
+ 203:	89 d0                	mov    %edx,%eax
+ 205:	c1 e0 02             	shl    $0x2,%eax
+ 208:	01 d0                	add    %edx,%eax
+ 20a:	01 c0                	add    %eax,%eax
+ 20c:	89 c1                	mov    %eax,%ecx
+ 20e:	8b 45 08             	mov    0x8(%ebp),%eax
+ 211:	8d 50 01             	lea    0x1(%eax),%edx
+ 214:	89 55 08             	mov    %edx,0x8(%ebp)
+ 217:	0f b6 00             	movzbl (%eax),%eax
+ 21a:	0f be c0             	movsbl %al,%eax
+ 21d:	01 c8                	add    %ecx,%eax
+ 21f:	83 e8 30             	sub    $0x30,%eax
+ 222:	89 45 fc             	mov    %eax,-0x4(%ebp)
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 225:	8b 45 08             	mov    0x8(%ebp),%eax
+ 228:	0f b6 00             	movzbl (%eax),%eax
+ 22b:	3c 2f                	cmp    $0x2f,%al
+ 22d:	7e 0a                	jle    239 <atoi+0x48>
+ 22f:	8b 45 08             	mov    0x8(%ebp),%eax
+ 232:	0f b6 00             	movzbl (%eax),%eax
+ 235:	3c 39                	cmp    $0x39,%al
+ 237:	7e c7                	jle    200 <atoi+0xf>
+    n = n*10 + *s++ - '0';
+  return n;
+ 239:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+ 23c:	c9                   	leave  
+ 23d:	c3                   	ret    
+
+0000023e <memmove>:
+
+void*
+memmove(void *vdst, void *vsrc, int n)
+{
+ 23e:	55                   	push   %ebp
+ 23f:	89 e5                	mov    %esp,%ebp
+ 241:	83 ec 10             	sub    $0x10,%esp
+  char *dst, *src;
+  
+  dst = vdst;
+ 244:	8b 45 08             	mov    0x8(%ebp),%eax
+ 247:	89 45 fc             	mov    %eax,-0x4(%ebp)
+  src = vsrc;
+ 24a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 24d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  while(n-- > 0)
+ 250:	eb 17                	jmp    269 <memmove+0x2b>
+    *dst++ = *src++;
+ 252:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 255:	8d 50 01             	lea    0x1(%eax),%edx
+ 258:	89 55 fc             	mov    %edx,-0x4(%ebp)
+ 25b:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 25e:	8d 4a 01             	lea    0x1(%edx),%ecx
+ 261:	89 4d f8             	mov    %ecx,-0x8(%ebp)
+ 264:	0f b6 12             	movzbl (%edx),%edx
+ 267:	88 10                	mov    %dl,(%eax)
+{
+  char *dst, *src;
+  
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 269:	8b 45 10             	mov    0x10(%ebp),%eax
+ 26c:	8d 50 ff             	lea    -0x1(%eax),%edx
+ 26f:	89 55 10             	mov    %edx,0x10(%ebp)
+ 272:	85 c0                	test   %eax,%eax
+ 274:	7f dc                	jg     252 <memmove+0x14>
+    *dst++ = *src++;
+  return vdst;
+ 276:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+ 279:	c9                   	leave  
+ 27a:	c3                   	ret    
+
+0000027b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 280:	cd 40                	int    $0x40
+ 282:	c3                   	ret    
+
+00000283 <exit>:
+SYSCALL(exit)
+ 283:	b8 02 00 00 00       	mov    $0x2,%eax
+ 288:	cd 40                	int    $0x40
+ 28a:	c3                   	ret    
+
+0000028b <wait>:
+SYSCALL(wait)
+ 28b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <pipe>:
+SYSCALL(pipe)
+ 293:	b8 04 00 00 00       	mov    $0x4,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <read>:
+SYSCALL(read)
+ 29b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <write>:
+SYSCALL(write)
+ 2a3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <close>:
+SYSCALL(close)
+ 2ab:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <kill>:
+SYSCALL(kill)
+ 2b3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <exec>:
+SYSCALL(exec)
+ 2bb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <open>:
+SYSCALL(open)
+ 2c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <mknod>:
+SYSCALL(mknod)
+ 2cb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <unlink>:
+SYSCALL(unlink)
+ 2d3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <fstat>:
+SYSCALL(fstat)
+ 2db:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <link>:
+SYSCALL(link)
+ 2e3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <mkdir>:
+SYSCALL(mkdir)
+ 2eb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <chdir>:
+SYSCALL(chdir)
+ 2f3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <dup>:
+SYSCALL(dup)
+ 2fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <getpid>:
+SYSCALL(getpid)
+ 303:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <sbrk>:
+SYSCALL(sbrk)
+ 30b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <sleep>:
+SYSCALL(sleep)
+ 313:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <uptime>:
+SYSCALL(uptime)
+ 31b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <procstat>:
+SYSCALL(procstat) 
+ 323:	b8 16 00 00 00       	mov    $0x16,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <putc>:
+#include "stat.h"
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+ 32b:	55                   	push   %ebp
+ 32c:	89 e5                	mov    %esp,%ebp
+ 32e:	83 ec 18             	sub    $0x18,%esp
+ 331:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 334:	88 45 f4             	mov    %al,-0xc(%ebp)
+  write(fd, &c, 1);
+ 337:	83 ec 04             	sub    $0x4,%esp
+ 33a:	6a 01                	push   $0x1
+ 33c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+ 33f:	50                   	push   %eax
+ 340:	ff 75 08             	pushl  0x8(%ebp)
+ 343:	e8 5b ff ff ff       	call   2a3 <write>
+ 348:	83 c4 10             	add    $0x10,%esp
+}
+ 34b:	90                   	nop
+ 34c:	c9                   	leave  
+ 34d:	c3                   	ret    
+
+0000034e <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 34e:	55                   	push   %ebp
+ 34f:	89 e5                	mov    %esp,%ebp
+ 351:	53                   	push   %ebx
+ 352:	83 ec 24             	sub    $0x24,%esp
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 355:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  if(sgn && xx < 0){
+ 35c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+ 360:	74 17                	je     379 <printint+0x2b>
+ 362:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+ 366:	79 11                	jns    379 <printint+0x2b>
+    neg = 1;
+ 368:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+    x = -xx;
+ 36f:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 372:	f7 d8                	neg    %eax
+ 374:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 377:	eb 06                	jmp    37f <printint+0x31>
+  } else {
+    x = xx;
+ 379:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 37c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  }
+
+  i = 0;
+ 37f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  do{
+    buf[i++] = digits[x % base];
+ 386:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+ 389:	8d 41 01             	lea    0x1(%ecx),%eax
+ 38c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 38f:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 392:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 395:	ba 00 00 00 00       	mov    $0x0,%edx
+ 39a:	f7 f3                	div    %ebx
+ 39c:	89 d0                	mov    %edx,%eax
+ 39e:	0f b6 80 08 0a 00 00 	movzbl 0xa08(%eax),%eax
+ 3a5:	88 44 0d dc          	mov    %al,-0x24(%ebp,%ecx,1)
+  }while((x /= base) != 0);
+ 3a9:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
+ 3af:	ba 00 00 00 00       	mov    $0x0,%edx
+ 3b4:	f7 f3                	div    %ebx
+ 3b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ 3b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 3bd:	75 c7                	jne    386 <printint+0x38>
+  if(neg)
+ 3bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 3c3:	74 2d                	je     3f2 <printint+0xa4>
+    buf[i++] = '-';
+ 3c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 3c8:	8d 50 01             	lea    0x1(%eax),%edx
+ 3cb:	89 55 f4             	mov    %edx,-0xc(%ebp)
+ 3ce:	c6 44 05 dc 2d       	movb   $0x2d,-0x24(%ebp,%eax,1)
+
+  while(--i >= 0)
+ 3d3:	eb 1d                	jmp    3f2 <printint+0xa4>
+    putc(fd, buf[i]);
+ 3d5:	8d 55 dc             	lea    -0x24(%ebp),%edx
+ 3d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 3db:	01 d0                	add    %edx,%eax
+ 3dd:	0f b6 00             	movzbl (%eax),%eax
+ 3e0:	0f be c0             	movsbl %al,%eax
+ 3e3:	83 ec 08             	sub    $0x8,%esp
+ 3e6:	50                   	push   %eax
+ 3e7:	ff 75 08             	pushl  0x8(%ebp)
+ 3ea:	e8 3c ff ff ff       	call   32b <putc>
+ 3ef:	83 c4 10             	add    $0x10,%esp
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3f2:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+ 3f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 3fa:	79 d9                	jns    3d5 <printint+0x87>
+    putc(fd, buf[i]);
+}
+ 3fc:	90                   	nop
+ 3fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 400:	c9                   	leave  
+ 401:	c3                   	ret    
+
+00000402 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, char *fmt, ...)
+{
+ 402:	55                   	push   %ebp
+ 403:	89 e5                	mov    %esp,%ebp
+ 405:	83 ec 28             	sub    $0x28,%esp
+  char *s;
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+ 408:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  ap = (uint*)(void*)&fmt + 1;
+ 40f:	8d 45 0c             	lea    0xc(%ebp),%eax
+ 412:	83 c0 04             	add    $0x4,%eax
+ 415:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  for(i = 0; fmt[i]; i++){
+ 418:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 41f:	e9 59 01 00 00       	jmp    57d <printf+0x17b>
+    c = fmt[i] & 0xff;
+ 424:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 427:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 42a:	01 d0                	add    %edx,%eax
+ 42c:	0f b6 00             	movzbl (%eax),%eax
+ 42f:	0f be c0             	movsbl %al,%eax
+ 432:	25 ff 00 00 00       	and    $0xff,%eax
+ 437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(state == 0){
+ 43a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+ 43e:	75 2c                	jne    46c <printf+0x6a>
+      if(c == '%'){
+ 440:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 444:	75 0c                	jne    452 <printf+0x50>
+        state = '%';
+ 446:	c7 45 ec 25 00 00 00 	movl   $0x25,-0x14(%ebp)
+ 44d:	e9 27 01 00 00       	jmp    579 <printf+0x177>
+      } else {
+        putc(fd, c);
+ 452:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 455:	0f be c0             	movsbl %al,%eax
+ 458:	83 ec 08             	sub    $0x8,%esp
+ 45b:	50                   	push   %eax
+ 45c:	ff 75 08             	pushl  0x8(%ebp)
+ 45f:	e8 c7 fe ff ff       	call   32b <putc>
+ 464:	83 c4 10             	add    $0x10,%esp
+ 467:	e9 0d 01 00 00       	jmp    579 <printf+0x177>
+      }
+    } else if(state == '%'){
+ 46c:	83 7d ec 25          	cmpl   $0x25,-0x14(%ebp)
+ 470:	0f 85 03 01 00 00    	jne    579 <printf+0x177>
+      if(c == 'd'){
+ 476:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
+ 47a:	75 1e                	jne    49a <printf+0x98>
+        printint(fd, *ap, 10, 1);
+ 47c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 47f:	8b 00                	mov    (%eax),%eax
+ 481:	6a 01                	push   $0x1
+ 483:	6a 0a                	push   $0xa
+ 485:	50                   	push   %eax
+ 486:	ff 75 08             	pushl  0x8(%ebp)
+ 489:	e8 c0 fe ff ff       	call   34e <printint>
+ 48e:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 491:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 495:	e9 d8 00 00 00       	jmp    572 <printf+0x170>
+      } else if(c == 'x' || c == 'p'){
+ 49a:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
+ 49e:	74 06                	je     4a6 <printf+0xa4>
+ 4a0:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
+ 4a4:	75 1e                	jne    4c4 <printf+0xc2>
+        printint(fd, *ap, 16, 0);
+ 4a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4a9:	8b 00                	mov    (%eax),%eax
+ 4ab:	6a 00                	push   $0x0
+ 4ad:	6a 10                	push   $0x10
+ 4af:	50                   	push   %eax
+ 4b0:	ff 75 08             	pushl  0x8(%ebp)
+ 4b3:	e8 96 fe ff ff       	call   34e <printint>
+ 4b8:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 4bb:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 4bf:	e9 ae 00 00 00       	jmp    572 <printf+0x170>
+      } else if(c == 's'){
+ 4c4:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
+ 4c8:	75 43                	jne    50d <printf+0x10b>
+        s = (char*)*ap;
+ 4ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 4cd:	8b 00                	mov    (%eax),%eax
+ 4cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        ap++;
+ 4d2:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+        if(s == 0)
+ 4d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 4da:	75 25                	jne    501 <printf+0xff>
+          s = "(null)";
+ 4dc:	c7 45 f4 b8 07 00 00 	movl   $0x7b8,-0xc(%ebp)
+        while(*s != 0){
+ 4e3:	eb 1c                	jmp    501 <printf+0xff>
+          putc(fd, *s);
+ 4e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 4e8:	0f b6 00             	movzbl (%eax),%eax
+ 4eb:	0f be c0             	movsbl %al,%eax
+ 4ee:	83 ec 08             	sub    $0x8,%esp
+ 4f1:	50                   	push   %eax
+ 4f2:	ff 75 08             	pushl  0x8(%ebp)
+ 4f5:	e8 31 fe ff ff       	call   32b <putc>
+ 4fa:	83 c4 10             	add    $0x10,%esp
+          s++;
+ 4fd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 501:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 504:	0f b6 00             	movzbl (%eax),%eax
+ 507:	84 c0                	test   %al,%al
+ 509:	75 da                	jne    4e5 <printf+0xe3>
+ 50b:	eb 65                	jmp    572 <printf+0x170>
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 50d:	83 7d e4 63          	cmpl   $0x63,-0x1c(%ebp)
+ 511:	75 1d                	jne    530 <printf+0x12e>
+        putc(fd, *ap);
+ 513:	8b 45 e8             	mov    -0x18(%ebp),%eax
+ 516:	8b 00                	mov    (%eax),%eax
+ 518:	0f be c0             	movsbl %al,%eax
+ 51b:	83 ec 08             	sub    $0x8,%esp
+ 51e:	50                   	push   %eax
+ 51f:	ff 75 08             	pushl  0x8(%ebp)
+ 522:	e8 04 fe ff ff       	call   32b <putc>
+ 527:	83 c4 10             	add    $0x10,%esp
+        ap++;
+ 52a:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
+ 52e:	eb 42                	jmp    572 <printf+0x170>
+      } else if(c == '%'){
+ 530:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
+ 534:	75 17                	jne    54d <printf+0x14b>
+        putc(fd, c);
+ 536:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 539:	0f be c0             	movsbl %al,%eax
+ 53c:	83 ec 08             	sub    $0x8,%esp
+ 53f:	50                   	push   %eax
+ 540:	ff 75 08             	pushl  0x8(%ebp)
+ 543:	e8 e3 fd ff ff       	call   32b <putc>
+ 548:	83 c4 10             	add    $0x10,%esp
+ 54b:	eb 25                	jmp    572 <printf+0x170>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+ 54d:	83 ec 08             	sub    $0x8,%esp
+ 550:	6a 25                	push   $0x25
+ 552:	ff 75 08             	pushl  0x8(%ebp)
+ 555:	e8 d1 fd ff ff       	call   32b <putc>
+ 55a:	83 c4 10             	add    $0x10,%esp
+        putc(fd, c);
+ 55d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 560:	0f be c0             	movsbl %al,%eax
+ 563:	83 ec 08             	sub    $0x8,%esp
+ 566:	50                   	push   %eax
+ 567:	ff 75 08             	pushl  0x8(%ebp)
+ 56a:	e8 bc fd ff ff       	call   32b <putc>
+ 56f:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 572:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 579:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+ 57d:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 580:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 583:	01 d0                	add    %edx,%eax
+ 585:	0f b6 00             	movzbl (%eax),%eax
+ 588:	84 c0                	test   %al,%al
+ 58a:	0f 85 94 fe ff ff    	jne    424 <printf+0x22>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 590:	90                   	nop
+ 591:	c9                   	leave  
+ 592:	c3                   	ret    
+
+00000593 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 593:	55                   	push   %ebp
+ 594:	89 e5                	mov    %esp,%ebp
+ 596:	83 ec 10             	sub    $0x10,%esp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 599:	8b 45 08             	mov    0x8(%ebp),%eax
+ 59c:	83 e8 08             	sub    $0x8,%eax
+ 59f:	89 45 f8             	mov    %eax,-0x8(%ebp)
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5a2:	a1 24 0a 00 00       	mov    0xa24,%eax
+ 5a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 5aa:	eb 24                	jmp    5d0 <free+0x3d>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5af:	8b 00                	mov    (%eax),%eax
+ 5b1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 5b4:	77 12                	ja     5c8 <free+0x35>
+ 5b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 5b9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 5bc:	77 24                	ja     5e2 <free+0x4f>
+ 5be:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5c1:	8b 00                	mov    (%eax),%eax
+ 5c3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 5c6:	77 1a                	ja     5e2 <free+0x4f>
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5cb:	8b 00                	mov    (%eax),%eax
+ 5cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ 5d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 5d3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+ 5d6:	76 d4                	jbe    5ac <free+0x19>
+ 5d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5db:	8b 00                	mov    (%eax),%eax
+ 5dd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 5e0:	76 ca                	jbe    5ac <free+0x19>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 5e5:	8b 40 04             	mov    0x4(%eax),%eax
+ 5e8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 5ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 5f2:	01 c2                	add    %eax,%edx
+ 5f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 5f7:	8b 00                	mov    (%eax),%eax
+ 5f9:	39 c2                	cmp    %eax,%edx
+ 5fb:	75 24                	jne    621 <free+0x8e>
+    bp->s.size += p->s.ptr->s.size;
+ 5fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 600:	8b 50 04             	mov    0x4(%eax),%edx
+ 603:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 606:	8b 00                	mov    (%eax),%eax
+ 608:	8b 40 04             	mov    0x4(%eax),%eax
+ 60b:	01 c2                	add    %eax,%edx
+ 60d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 610:	89 50 04             	mov    %edx,0x4(%eax)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 613:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 616:	8b 00                	mov    (%eax),%eax
+ 618:	8b 10                	mov    (%eax),%edx
+ 61a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 61d:	89 10                	mov    %edx,(%eax)
+ 61f:	eb 0a                	jmp    62b <free+0x98>
+  } else
+    bp->s.ptr = p->s.ptr;
+ 621:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 624:	8b 10                	mov    (%eax),%edx
+ 626:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 629:	89 10                	mov    %edx,(%eax)
+  if(p + p->s.size == bp){
+ 62b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 62e:	8b 40 04             	mov    0x4(%eax),%eax
+ 631:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+ 638:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 63b:	01 d0                	add    %edx,%eax
+ 63d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+ 640:	75 20                	jne    662 <free+0xcf>
+    p->s.size += bp->s.size;
+ 642:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 645:	8b 50 04             	mov    0x4(%eax),%edx
+ 648:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 64b:	8b 40 04             	mov    0x4(%eax),%eax
+ 64e:	01 c2                	add    %eax,%edx
+ 650:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 653:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 656:	8b 45 f8             	mov    -0x8(%ebp),%eax
+ 659:	8b 10                	mov    (%eax),%edx
+ 65b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 65e:	89 10                	mov    %edx,(%eax)
+ 660:	eb 08                	jmp    66a <free+0xd7>
+  } else
+    p->s.ptr = bp;
+ 662:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 665:	8b 55 f8             	mov    -0x8(%ebp),%edx
+ 668:	89 10                	mov    %edx,(%eax)
+  freep = p;
+ 66a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+ 66d:	a3 24 0a 00 00       	mov    %eax,0xa24
+}
+ 672:	90                   	nop
+ 673:	c9                   	leave  
+ 674:	c3                   	ret    
+
+00000675 <morecore>:
+
+static Header*
+morecore(uint nu)
+{
+ 675:	55                   	push   %ebp
+ 676:	89 e5                	mov    %esp,%ebp
+ 678:	83 ec 18             	sub    $0x18,%esp
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+ 67b:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)
+ 682:	77 07                	ja     68b <morecore+0x16>
+    nu = 4096;
+ 684:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)
+  p = sbrk(nu * sizeof(Header));
+ 68b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 68e:	c1 e0 03             	shl    $0x3,%eax
+ 691:	83 ec 0c             	sub    $0xc,%esp
+ 694:	50                   	push   %eax
+ 695:	e8 71 fc ff ff       	call   30b <sbrk>
+ 69a:	83 c4 10             	add    $0x10,%esp
+ 69d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(p == (char*)-1)
+ 6a0:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+ 6a4:	75 07                	jne    6ad <morecore+0x38>
+    return 0;
+ 6a6:	b8 00 00 00 00       	mov    $0x0,%eax
+ 6ab:	eb 26                	jmp    6d3 <morecore+0x5e>
+  hp = (Header*)p;
+ 6ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 6b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  hp->s.size = nu;
+ 6b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 6b6:	8b 55 08             	mov    0x8(%ebp),%edx
+ 6b9:	89 50 04             	mov    %edx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 6bf:	83 c0 08             	add    $0x8,%eax
+ 6c2:	83 ec 0c             	sub    $0xc,%esp
+ 6c5:	50                   	push   %eax
+ 6c6:	e8 c8 fe ff ff       	call   593 <free>
+ 6cb:	83 c4 10             	add    $0x10,%esp
+  return freep;
+ 6ce:	a1 24 0a 00 00       	mov    0xa24,%eax
+}
+ 6d3:	c9                   	leave  
+ 6d4:	c3                   	ret    
+
+000006d5 <malloc>:
+
+void*
+malloc(uint nbytes)
+{
+ 6d5:	55                   	push   %ebp
+ 6d6:	89 e5                	mov    %esp,%ebp
+ 6d8:	83 ec 18             	sub    $0x18,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6de:	83 c0 07             	add    $0x7,%eax
+ 6e1:	c1 e8 03             	shr    $0x3,%eax
+ 6e4:	83 c0 01             	add    $0x1,%eax
+ 6e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  if((prevp = freep) == 0){
+ 6ea:	a1 24 0a 00 00       	mov    0xa24,%eax
+ 6ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 6f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+ 6f6:	75 23                	jne    71b <malloc+0x46>
+    base.s.ptr = freep = prevp = &base;
+ 6f8:	c7 45 f0 1c 0a 00 00 	movl   $0xa1c,-0x10(%ebp)
+ 6ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 702:	a3 24 0a 00 00       	mov    %eax,0xa24
+ 707:	a1 24 0a 00 00       	mov    0xa24,%eax
+ 70c:	a3 1c 0a 00 00       	mov    %eax,0xa1c
+    base.s.size = 0;
+ 711:	c7 05 20 0a 00 00 00 	movl   $0x0,0xa20
+ 718:	00 00 00 
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 71b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 71e:	8b 00                	mov    (%eax),%eax
+ 720:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if(p->s.size >= nunits){
+ 723:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 726:	8b 40 04             	mov    0x4(%eax),%eax
+ 729:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 72c:	72 4d                	jb     77b <malloc+0xa6>
+      if(p->s.size == nunits)
+ 72e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 731:	8b 40 04             	mov    0x4(%eax),%eax
+ 734:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+ 737:	75 0c                	jne    745 <malloc+0x70>
+        prevp->s.ptr = p->s.ptr;
+ 739:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 73c:	8b 10                	mov    (%eax),%edx
+ 73e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 741:	89 10                	mov    %edx,(%eax)
+ 743:	eb 26                	jmp    76b <malloc+0x96>
+      else {
+        p->s.size -= nunits;
+ 745:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 748:	8b 40 04             	mov    0x4(%eax),%eax
+ 74b:	2b 45 ec             	sub    -0x14(%ebp),%eax
+ 74e:	89 c2                	mov    %eax,%edx
+ 750:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 753:	89 50 04             	mov    %edx,0x4(%eax)
+        p += p->s.size;
+ 756:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 759:	8b 40 04             	mov    0x4(%eax),%eax
+ 75c:	c1 e0 03             	shl    $0x3,%eax
+ 75f:	01 45 f4             	add    %eax,-0xc(%ebp)
+        p->s.size = nunits;
+ 762:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 765:	8b 55 ec             	mov    -0x14(%ebp),%edx
+ 768:	89 50 04             	mov    %edx,0x4(%eax)
+      }
+      freep = prevp;
+ 76b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+ 76e:	a3 24 0a 00 00       	mov    %eax,0xa24
+      return (void*)(p + 1);
+ 773:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 776:	83 c0 08             	add    $0x8,%eax
+ 779:	eb 3b                	jmp    7b6 <malloc+0xe1>
+    }
+    if(p == freep)
+ 77b:	a1 24 0a 00 00       	mov    0xa24,%eax
+ 780:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+ 783:	75 1e                	jne    7a3 <malloc+0xce>
+      if((p = morecore(nunits)) == 0)
+ 785:	83 ec 0c             	sub    $0xc,%esp
+ 788:	ff 75 ec             	pushl  -0x14(%ebp)
+ 78b:	e8 e5 fe ff ff       	call   675 <morecore>
+ 790:	83 c4 10             	add    $0x10,%esp
+ 793:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ 796:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+ 79a:	75 07                	jne    7a3 <malloc+0xce>
+        return 0;
+ 79c:	b8 00 00 00 00       	mov    $0x0,%eax
+ 7a1:	eb 13                	jmp    7b6 <malloc+0xe1>
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 7a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+ 7ac:	8b 00                	mov    (%eax),%eax
+ 7ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+ 7b1:	e9 6d ff ff ff       	jmp    723 <malloc+0x4e>
+}
+ 7b6:	c9                   	leave  
+ 7b7:	c3                   	ret    
diff -rupN xv6-unrc/zombie.sym xv6-mod/zombie.sym
--- xv6-unrc/zombie.sym	1969-12-31 21:00:00.000000000 -0300
+++ xv6-mod/zombie.sym	2018-04-04 14:53:57.455488443 -0300
@@ -0,0 +1,61 @@
+00000000 .text
+000007b8 .rodata
+000007c0 .eh_frame
+00000a08 .data
+00000a1c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 zombie.c
+00000000 ulib.c
+0000002c stosb
+00000000 printf.c
+0000032b putc
+0000034e printint
+00000a08 digits.1109
+00000000 umalloc.c
+00000a1c base
+00000a24 freep
+00000675 morecore
+00000052 strcpy
+00000402 printf
+0000023e memmove
+000002cb mknod
+00000135 gets
+00000303 getpid
+000006d5 malloc
+00000323 procstat
+00000313 sleep
+00000293 pipe
+000002a3 write
+000002db fstat
+000002b3 kill
+000002f3 chdir
+000002bb exec
+0000028b wait
+0000029b read
+000002d3 unlink
+0000027b fork
+0000030b sbrk
+0000031b uptime
+00000a19 __bss_start
+000000e8 memset
+00000000 main
+00000082 strcmp
+000002fb dup
+000001a4 stat
+00000a19 _edata
+00000a28 _end
+000002e3 link
+00000283 exit
+000001f1 atoi
+000000c1 strlen
+000002c3 open
+00000102 strchr
+000002eb mkdir
+000002ab close
+00000593 free
